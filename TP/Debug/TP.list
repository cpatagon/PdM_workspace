
TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003584  08003584  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800358c  0800358c  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  08003594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020404  2**0
                  CONTENTS
 10 .bss          00000840  20000404  20000404  00020404  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c44  20000c44  00020404  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f052  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d70  00000000  00000000  0002f486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  000311f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae0  00000000  00000000  00031d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023db2  00000000  00000000  00032860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd5c  00000000  00000000  00056612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d957c  00000000  00000000  0006336e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c8ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003084  00000000  00000000  0013c93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000404 	.word	0x20000404
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003538 	.word	0x08003538

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000408 	.word	0x20000408
 80001e8:	08003538 	.word	0x08003538

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fe12 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f814 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f924 	bl	8000748 <MX_GPIO_Init>
  MX_ETH_Init();
 8000500:	f000 f87c 	bl	80005fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f8c8 	bl	8000698 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 f8f0 	bl	80006ec <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  max_init(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fbef 	bl	8000cf0 <max_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 //write_char('C', 1);
	 scroll_string("** esta es una prueba **", 150, left);
 8000512:	224c      	movs	r2, #76	; 0x4c
 8000514:	2196      	movs	r1, #150	; 0x96
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <main+0x30>)
 8000518:	f000 fb32 	bl	8000b80 <scroll_string>
 800051c:	e7f9      	b.n	8000512 <main+0x22>
 800051e:	bf00      	nop
 8000520:	08003550 	.word	0x08003550

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 fff8 	bl	8003528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xd4>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800059c:	2348      	movs	r3, #72	; 0x48
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005a4:	2303      	movs	r3, #3
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fd3b 	bl	8002028 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b8:	f000 f974 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 ff9c 	bl	8002518 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 f95d 	bl	80008a4 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ETH_Init+0x84>)
 8000602:	4a20      	ldr	r2, [pc, #128]	; (8000684 <MX_ETH_Init+0x88>)
 8000604:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MX_ETH_Init+0x8c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_ETH_Init+0x8c>)
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ETH_Init+0x8c>)
 8000614:	22e1      	movs	r2, #225	; 0xe1
 8000616:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_ETH_Init+0x8c>)
 800061a:	2200      	movs	r2, #0
 800061c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ETH_Init+0x8c>)
 8000620:	2200      	movs	r2, #0
 8000622:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_ETH_Init+0x8c>)
 8000626:	2200      	movs	r2, #0
 8000628:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ETH_Init+0x84>)
 800062c:	4a16      	ldr	r2, [pc, #88]	; (8000688 <MX_ETH_Init+0x8c>)
 800062e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_ETH_Init+0x84>)
 8000632:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000636:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ETH_Init+0x84>)
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_ETH_Init+0x90>)
 800063c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_ETH_Init+0x84>)
 8000640:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_ETH_Init+0x94>)
 8000642:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_ETH_Init+0x84>)
 8000646:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800064a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_ETH_Init+0x84>)
 800064e:	f000 fee1 	bl	8001414 <HAL_ETH_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000658:	f000 f924 	bl	80008a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800065c:	2238      	movs	r2, #56	; 0x38
 800065e:	2100      	movs	r1, #0
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_ETH_Init+0x98>)
 8000662:	f002 ff61 	bl	8003528 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_ETH_Init+0x98>)
 8000668:	2221      	movs	r2, #33	; 0x21
 800066a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_ETH_Init+0x98>)
 800066e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000672:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_ETH_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000598 	.word	0x20000598
 8000684:	40028000 	.word	0x40028000
 8000688:	20000b98 	.word	0x20000b98
 800068c:	200004f8 	.word	0x200004f8
 8000690:	20000458 	.word	0x20000458
 8000694:	20000420 	.word	0x20000420

08000698 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART3_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006d0:	f002 f942 	bl	8002958 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f8e3 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000648 	.word	0x20000648
 80006e8:	40004800 	.word	0x40004800

080006ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000700:	2202      	movs	r2, #2
 8000702:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070c:	2202      	movs	r2, #2
 800070e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2201      	movs	r2, #1
 8000714:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2201      	movs	r2, #1
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	f001 fb5d 	bl	8001dee <HAL_PCD_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f8b3 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000068c 	.word	0x2000068c

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a4b      	ldr	r2, [pc, #300]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b49      	ldr	r3, [pc, #292]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b45      	ldr	r3, [pc, #276]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a44      	ldr	r2, [pc, #272]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a3d      	ldr	r2, [pc, #244]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a36      	ldr	r2, [pc, #216]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a28      	ldr	r2, [pc, #160]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000806:	2200      	movs	r2, #0
 8000808:	f244 01b9 	movw	r1, #16569	; 0x40b9
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <MX_GPIO_Init+0x150>)
 800080e:	f001 fad5 	bl	8001dbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4821      	ldr	r0, [pc, #132]	; (800089c <MX_GPIO_Init+0x154>)
 8000818:	f001 fad0 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0x158>)
 8000834:	f001 f916 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB3 PB4
                           PB5 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000838:	f244 03b9 	movw	r3, #16569	; 0x40b9
 800083c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_GPIO_Init+0x150>)
 8000852:	f001 f907 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0x154>)
 800086e:	f001 f8f9 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0x154>)
 8000886:	f001 f8ed 	bl	8001a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400
 800089c:	40021800 	.word	0x40021800
 80008a0:	40020800 	.word	0x40020800

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <write_byte>:
};



void write_byte (uint8_t byte)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e018      	b.n	80008f2 <write_byte+0x42>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 80008c0:	2200      	movs	r2, #0
 80008c2:	2110      	movs	r1, #16
 80008c4:	480f      	ldr	r0, [pc, #60]	; (8000904 <write_byte+0x54>)
 80008c6:	f001 fa79 	bl	8001dbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	2120      	movs	r1, #32
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <write_byte+0x54>)
 80008d8:	f001 fa70 	bl	8001dbc <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 80008e2:	2201      	movs	r2, #1
 80008e4:	2110      	movs	r1, #16
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <write_byte+0x54>)
 80008e8:	f001 fa68 	bl	8001dbc <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	dde3      	ble.n	80008c0 <write_byte+0x10>
	}
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40020400 	.word	0x40020400

08000908 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000918:	2200      	movs	r2, #0
 800091a:	2108      	movs	r1, #8
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <write_max_cmd+0x58>)
 800091e:	f001 fa4d 	bl	8001dbc <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	e00a      	b.n	800093e <write_max_cmd+0x36>
	{
		write_byte (address);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ffc0 	bl	80008b0 <write_byte>
		write_byte (cmd); 
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffbc 	bl	80008b0 <write_byte>
	for (int i=0;i<num; i++)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b01      	cmp	r3, #1
 8000942:	ddf1      	ble.n	8000928 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000944:	2200      	movs	r2, #0
 8000946:	2108      	movs	r1, #8
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <write_max_cmd+0x58>)
 800094a:	f001 fa37 	bl	8001dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 800094e:	2201      	movs	r2, #1
 8000950:	2108      	movs	r1, #8
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <write_max_cmd+0x58>)
 8000954:	f001 fa32 	bl	8001dbc <HAL_GPIO_WritePin>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020400 	.word	0x40020400

08000964 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	460b      	mov	r3, r1
 8000970:	71bb      	strb	r3, [r7, #6]
 8000972:	4613      	mov	r3, r2
 8000974:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000976:	797b      	ldrb	r3, [r7, #5]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00d      	beq.n	8000998 <setled+0x34>
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	4a2d      	ldr	r2, [pc, #180]	; (8000a34 <setled+0xd0>)
 8000980:	5cd1      	ldrb	r1, [r2, r3]
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2201      	movs	r2, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	b2da      	uxtb	r2, r3
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	430a      	orrs	r2, r1
 8000990:	b2d1      	uxtb	r1, r2
 8000992:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <setled+0xd0>)
 8000994:	54d1      	strb	r1, [r2, r3]
 8000996:	e00e      	b.n	80009b6 <setled+0x52>
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	4a26      	ldr	r2, [pc, #152]	; (8000a34 <setled+0xd0>)
 800099c:	5cd1      	ldrb	r1, [r2, r3]
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2201      	movs	r2, #1
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	400a      	ands	r2, r1
 80009b0:	b2d1      	uxtb	r1, r2
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <setled+0xd0>)
 80009b4:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	08db      	lsrs	r3, r3, #3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	481b      	ldr	r0, [pc, #108]	; (8000a38 <setled+0xd4>)
 80009cc:	f001 f9f6 	bl	8001dbc <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e01c      	b.n	8000a10 <setled+0xac>
	{
		if (i == (num-(n+1)))
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	f1c3 0301 	rsb	r3, r3, #1
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d10d      	bne.n	80009fe <setled+0x9a>
		{
			write_byte (((c+1)));
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff60 	bl	80008b0 <write_byte>
			write_byte (buffer[col]);
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <setled+0xd0>)
 80009f4:	5cd3      	ldrb	r3, [r2, r3]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff5a 	bl	80008b0 <write_byte>
 80009fc:	e005      	b.n	8000a0a <setled+0xa6>
		}
		else
		{
			write_byte (0);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff ff56 	bl	80008b0 <write_byte>
			write_byte (0);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ff53 	bl	80008b0 <write_byte>
	for (int i=0; i<num; i++) 
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	dddf      	ble.n	80009d6 <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <setled+0xd4>)
 8000a1c:	f001 f9ce 	bl	8001dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000a20:	2201      	movs	r2, #1
 8000a22:	2108      	movs	r1, #8
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <setled+0xd4>)
 8000a26:	f001 f9c9 	bl	8001dbc <HAL_GPIO_WritePin>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000ba0 	.word	0x20000ba0
 8000a38:	40020400 	.word	0x40020400

08000a3c <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000a5c:	79bb      	ldrb	r3, [r7, #6]
 8000a5e:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	e02d      	b.n	8000ac2 <setrow+0x86>
	{
		if (i == ((n)))
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d120      	bne.n	8000ab0 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	3307      	adds	r3, #7
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	e015      	b.n	8000aa4 <setrow+0x68>
			{
				bool b = value&0x80;
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bf14      	ite	ne
 8000a82:	2301      	movne	r3, #1
 8000a84:	2300      	moveq	r3, #0
 8000a86:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	b2d1      	uxtb	r1, r2
 8000a90:	7bba      	ldrb	r2, [r7, #14]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff66 	bl	8000964 <setled>
				value<<=1;
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dae4      	bge.n	8000a78 <setrow+0x3c>
 8000aae:	e005      	b.n	8000abc <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fefd 	bl	80008b0 <write_byte>
			write_byte (0);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fefa 	bl	80008b0 <write_byte>
	for (int i=0; i<num; i++) 
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	ddce      	ble.n	8000a66 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4903      	ldr	r1, [pc, #12]	; (8000ad8 <setrow+0x9c>)
 8000acc:	7bfa      	ldrb	r2, [r7, #15]
 8000ace:	54ca      	strb	r2, [r1, r3]
}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000bf0 	.word	0x20000bf0

08000adc <shift_char>:
					break;
			}			
}	
		
void shift_char (char c, uint32_t speed, char direction)  
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <shift_char+0xa0>)
 8000af2:	5cd3      	ldrb	r3, [r2, r3]
 8000af4:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	3301      	adds	r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]

		switch (direction)
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	2b4c      	cmp	r3, #76	; 0x4c
 8000b02:	d002      	beq.n	8000b0a <shift_char+0x2e>
 8000b04:	2b52      	cmp	r3, #82	; 0x52
 8000b06:	d01a      	beq.n	8000b3e <shift_char+0x62>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8000b08:	e034      	b.n	8000b74 <shift_char+0x98>
					for (int j=start; j<(start+width+1); j++)
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e00f      	b.n	8000b30 <shift_char+0x54>
						setrow (0, CH[j]);
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <shift_char+0xa0>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff ff8e 	bl	8000a3c <setrow>
						shiftleft();
 8000b20:	f000 f878 	bl	8000c14 <shiftleft>
						HAL_Delay (speed);
 8000b24:	6838      	ldr	r0, [r7, #0]
 8000b26:	f000 fb6b 	bl	8001200 <HAL_Delay>
					for (int j=start; j<(start+width+1); j++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dde9      	ble.n	8000b10 <shift_char+0x34>
						break;
 8000b3c:	e01a      	b.n	8000b74 <shift_char+0x98>
					for (int j=start+width+1; j>=(start); j--)
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	3301      	adds	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	e00f      	b.n	8000b6a <shift_char+0x8e>
						setrow ((num*8)-1, CH[j]);
 8000b4a:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <shift_char+0xa0>)
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	200f      	movs	r0, #15
 8000b56:	f7ff ff71 	bl	8000a3c <setrow>
						shiftright();
 8000b5a:	f000 f893 	bl	8000c84 <shiftright>
						HAL_Delay (speed);
 8000b5e:	6838      	ldr	r0, [r7, #0]
 8000b60:	f000 fb4e 	bl	8001200 <HAL_Delay>
					for (int j=start+width+1; j>=(start); j--)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	daeb      	bge.n	8000b4a <shift_char+0x6e>
					break;
 8000b72:	bf00      	nop
			}
}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000000 	.word	0x20000000

08000b80 <scroll_string>:



void scroll_string (uint8_t *string, uint32_t speed, char direction)
{	
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
	while (*string != 0) 
 8000b8e:	e009      	b.n	8000ba4 <scroll_string+0x24>
	{	
		shift_char (*string, speed, direction);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff9f 	bl	8000adc <shift_char>
		string++;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
	while (*string != 0) 
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1f1      	bne.n	8000b90 <scroll_string+0x10>
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <max_clear>:



void max_clear(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e008      	b.n	8000bd6 <max_clear+0x1e>
		setrow(i,0);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff36 	bl	8000a3c <setrow>
	for (int i=0; i<num*8; i++) 
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	ddf3      	ble.n	8000bc4 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	e00c      	b.n	8000bfc <max_clear+0x44>
	{
		buffer[i] = 0;
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <max_clear+0x54>)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <max_clear+0x58>)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b4f      	cmp	r3, #79	; 0x4f
 8000c00:	ddef      	ble.n	8000be2 <max_clear+0x2a>
	}
}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000ba0 	.word	0x20000ba0
 8000c10:	20000bf0 	.word	0x20000bf0

08000c14 <shiftleft>:



void shiftleft(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
	int last = num*8-1;
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <shiftleft+0x6c>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	e00c      	b.n	8000c48 <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4913      	ldr	r1, [pc, #76]	; (8000c80 <shiftleft+0x6c>)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	440b      	add	r3, r1
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	f7ff fefd 	bl	8000a3c <setrow>
	for (i=0; i<num*8; i++)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	ddef      	ble.n	8000c2e <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 8000c4e:	234f      	movs	r3, #79	; 0x4f
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e00b      	b.n	8000c6c <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <shiftleft+0x6c>)
 8000c5a:	5cd1      	ldrb	r1, [r2, r3]
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <shiftleft+0x6c>)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	460a      	mov	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dcf0      	bgt.n	8000c54 <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 8000c72:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <shiftleft+0x6c>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	7013      	strb	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000bf0 	.word	0x20000bf0

08000c84 <shiftright>:


void shiftright(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <shiftright+0x68>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e00c      	b.n	8000cb4 <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4913      	ldr	r1, [pc, #76]	; (8000cec <shiftright+0x68>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	440b      	add	r3, r1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4610      	mov	r0, r2
 8000caa:	f7ff fec7 	bl	8000a3c <setrow>
	for (int i=last; i>=0; i--)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	daef      	bge.n	8000c9a <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	e00b      	b.n	8000cd8 <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <shiftright+0x68>)
 8000cc6:	5cd1      	ldrb	r1, [r2, r3]
 8000cc8:	4a08      	ldr	r2, [pc, #32]	; (8000cec <shiftright+0x68>)
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	4413      	add	r3, r2
 8000cce:	460a      	mov	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b4f      	cmp	r3, #79	; 0x4f
 8000cdc:	ddf0      	ble.n	8000cc0 <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 8000cde:	4a03      	ldr	r2, [pc, #12]	; (8000cec <shiftright+0x68>)
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	73d3      	strb	r3, [r2, #15]
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000bf0 	.word	0x20000bf0

08000cf0 <max_init>:



void max_init (uint8_t brightness)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2009      	movs	r0, #9
 8000cfe:	f7ff fe03 	bl	8000908 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000d02:	2107      	movs	r1, #7
 8000d04:	200b      	movs	r0, #11
 8000d06:	f7ff fdff 	bl	8000908 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	200c      	movs	r0, #12
 8000d0e:	f7ff fdfb 	bl	8000908 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000d12:	2100      	movs	r1, #0
 8000d14:	200f      	movs	r0, #15
 8000d16:	f7ff fdf7 	bl	8000908 <write_max_cmd>
	
	max_clear ();
 8000d1a:	f7ff ff4d 	bl	8000bb8 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4619      	mov	r1, r3
 8000d22:	200a      	movs	r0, #10
 8000d24:	f7ff fdf0 	bl	8000908 <write_max_cmd>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a55      	ldr	r2, [pc, #340]	; (8000ef4 <HAL_ETH_MspInit+0x174>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	f040 80a4 	bne.w	8000eec <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a52      	ldr	r2, [pc, #328]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b50      	ldr	r3, [pc, #320]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a4b      	ldr	r2, [pc, #300]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a44      	ldr	r2, [pc, #272]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000de6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a3d      	ldr	r2, [pc, #244]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a36      	ldr	r2, [pc, #216]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <HAL_ETH_MspInit+0x178>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e68:	2332      	movs	r3, #50	; 0x32
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e78:	230b      	movs	r3, #11
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	481e      	ldr	r0, [pc, #120]	; (8000efc <HAL_ETH_MspInit+0x17c>)
 8000e84:	f000 fdee 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e88:	2386      	movs	r3, #134	; 0x86
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e98:	230b      	movs	r3, #11
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4817      	ldr	r0, [pc, #92]	; (8000f00 <HAL_ETH_MspInit+0x180>)
 8000ea4:	f000 fdde 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <HAL_ETH_MspInit+0x184>)
 8000ec6:	f000 fdcd 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000eca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000edc:	230b      	movs	r3, #11
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_ETH_MspInit+0x188>)
 8000ee8:	f000 fdbc 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3738      	adds	r7, #56	; 0x38
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40028000 	.word	0x40028000
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40021800 	.word	0x40021800

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12c      	bne.n	8000f88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_UART_MspInit+0x8c>)
 8000f84:	f000 fd6e 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40004800 	.word	0x40004800
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fbc:	d13f      	bne.n	800103e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <HAL_PCD_MspInit+0xac>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a20      	ldr	r2, [pc, #128]	; (8001048 <HAL_PCD_MspInit+0xac>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_PCD_MspInit+0xac>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fda:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fec:	230a      	movs	r3, #10
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4815      	ldr	r0, [pc, #84]	; (800104c <HAL_PCD_MspInit+0xb0>)
 8000ff8:	f000 fd34 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	480e      	ldr	r0, [pc, #56]	; (800104c <HAL_PCD_MspInit+0xb0>)
 8001012:	f000 fd27 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_PCD_MspInit+0xac>)
 8001018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_PCD_MspInit+0xac>)
 800101c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001020:	6353      	str	r3, [r2, #52]	; 0x34
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_PCD_MspInit+0xac>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_PCD_MspInit+0xac>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_PCD_MspInit+0xac>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f890 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ce:	490e      	ldr	r1, [pc, #56]	; (8001108 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e4:	4c0b      	ldr	r4, [pc, #44]	; (8001114 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f2:	f7ff ffd7 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f002 f9f3 	bl	80034e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff f9f9 	bl	80004f0 <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001100:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 800110c:	08003594 	.word	0x08003594
  ldr r2, =_sbss
 8001110:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8001114:	20000c44 	.word	0x20000c44

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <HAL_Init+0x40>)
 8001126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_Init+0x40>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x40>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f931 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fdee 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f93b 	bl	80013fa <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800119c:	f000 f911 	bl	80013c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200003f8 	.word	0x200003f8
 80011b8:	20000400 	.word	0x20000400
 80011bc:	200003fc 	.word	0x200003fc

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000400 	.word	0x20000400
 80011e4:	20000c40 	.word	0x20000c40

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000c40 	.word	0x20000c40

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ffee 	bl	80011e8 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffde 	bl	80011e8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000400 	.word	0x20000400

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800138c:	f7ff ff8e 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff47 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff5c 	bl	8001290 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff8e 	bl	8001300 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffb0 	bl	8001368 <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e06c      	b.n	8001500 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2223      	movs	r2, #35	; 0x23
 8001434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fca1 	bl	8000d80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_ETH_Init+0xf4>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a30      	ldr	r2, [pc, #192]	; (8001508 <HAL_ETH_Init+0xf4>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_ETH_Init+0xf4>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <HAL_ETH_Init+0xf8>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a2b      	ldr	r2, [pc, #172]	; (800150c <HAL_ETH_Init+0xf8>)
 8001460:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001464:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_ETH_Init+0xf8>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <HAL_ETH_Init+0xf8>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_ETH_Init+0xf8>)
 8001476:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001490:	f7ff feaa 	bl	80011e8 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001496:	e011      	b.n	80014bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001498:	f7ff fea6 	bl	80011e8 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a6:	d909      	bls.n	80014bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	22e0      	movs	r2, #224	; 0xe0
 80014b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e021      	b.n	8001500 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e4      	bne.n	8001498 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f958 	bl	8001784 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f9ff 	bl	80018d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fa55 	bl	800198a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	461a      	mov	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f9bd 	bl	8001868 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2210      	movs	r2, #16
 80014fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800

08001510 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4b51      	ldr	r3, [pc, #324]	; (800166c <ETH_SetMACConfig+0x15c>)
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7c1b      	ldrb	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <ETH_SetMACConfig+0x28>
 8001532:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001536:	e000      	b.n	800153a <ETH_SetMACConfig+0x2a>
 8001538:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7c5b      	ldrb	r3, [r3, #17]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <ETH_SetMACConfig+0x38>
 8001542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001546:	e000      	b.n	800154a <ETH_SetMACConfig+0x3a>
 8001548:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800154a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001550:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7fdb      	ldrb	r3, [r3, #31]
 8001556:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001558:	431a      	orrs	r2, r3
                        macconf->Speed |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800155e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	7f92      	ldrb	r2, [r2, #30]
 8001564:	2a00      	cmp	r2, #0
 8001566:	d102      	bne.n	800156e <ETH_SetMACConfig+0x5e>
 8001568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156c:	e000      	b.n	8001570 <ETH_SetMACConfig+0x60>
 800156e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001570:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	7f1b      	ldrb	r3, [r3, #28]
 8001576:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001578:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800157e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	791b      	ldrb	r3, [r3, #4]
 8001584:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001586:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800158e:	2a00      	cmp	r2, #0
 8001590:	d102      	bne.n	8001598 <ETH_SetMACConfig+0x88>
 8001592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001596:	e000      	b.n	800159a <ETH_SetMACConfig+0x8a>
 8001598:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800159a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	7bdb      	ldrb	r3, [r3, #15]
 80015a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015b2:	4313      	orrs	r3, r2
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff fe18 	bl	8001200 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d101      	bne.n	80015fe <ETH_SetMACConfig+0xee>
 80015fa:	2280      	movs	r2, #128	; 0x80
 80015fc:	e000      	b.n	8001600 <ETH_SetMACConfig+0xf0>
 80015fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001600:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001606:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800160e:	2a01      	cmp	r2, #1
 8001610:	d101      	bne.n	8001616 <ETH_SetMACConfig+0x106>
 8001612:	2208      	movs	r2, #8
 8001614:	e000      	b.n	8001618 <ETH_SetMACConfig+0x108>
 8001616:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001618:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001620:	2a01      	cmp	r2, #1
 8001622:	d101      	bne.n	8001628 <ETH_SetMACConfig+0x118>
 8001624:	2204      	movs	r2, #4
 8001626:	e000      	b.n	800162a <ETH_SetMACConfig+0x11a>
 8001628:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800162a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001632:	2a01      	cmp	r2, #1
 8001634:	d101      	bne.n	800163a <ETH_SetMACConfig+0x12a>
 8001636:	2202      	movs	r2, #2
 8001638:	e000      	b.n	800163c <ETH_SetMACConfig+0x12c>
 800163a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800163c:	4313      	orrs	r3, r2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fdd3 	bl	8001200 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	ff20810f 	.word	0xff20810f

08001670 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <ETH_SetDMAConfig+0x110>)
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	7b1b      	ldrb	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <ETH_SetDMAConfig+0x2c>
 8001696:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800169a:	e000      	b.n	800169e <ETH_SetDMAConfig+0x2e>
 800169c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7b5b      	ldrb	r3, [r3, #13]
 80016a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	7f52      	ldrb	r2, [r2, #29]
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	d102      	bne.n	80016b4 <ETH_SetDMAConfig+0x44>
 80016ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016b2:	e000      	b.n	80016b6 <ETH_SetDMAConfig+0x46>
 80016b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	7b9b      	ldrb	r3, [r3, #14]
 80016bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	7f1b      	ldrb	r3, [r3, #28]
 80016ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	7f9b      	ldrb	r3, [r3, #30]
 80016d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016e4:	4313      	orrs	r3, r2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fd7a 	bl	8001200 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001724:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800172a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001730:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001738:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800173a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001742:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001748:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001756:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fd4b 	bl	8001200 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	f8de3f23 	.word	0xf8de3f23

08001784 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0a6      	sub	sp, #152	; 0x98
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800178c:	2301      	movs	r3, #1
 800178e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017c0:	2300      	movs	r3, #0
 80017c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe86 	bl	8001510 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001804:	2301      	movs	r3, #1
 8001806:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001808:	2301      	movs	r3, #1
 800180a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001812:	2301      	movs	r3, #1
 8001814:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800182a:	2301      	movs	r3, #1
 800182c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001838:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800183a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001844:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff08 	bl	8001670 <ETH_SetDMAConfig>
}
 8001860:	bf00      	nop
 8001862:	3798      	adds	r7, #152	; 0x98
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3305      	adds	r3, #5
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	3204      	adds	r2, #4
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <ETH_MACAddressConfig+0x68>)
 800188a:	4413      	add	r3, r2
 800188c:	461a      	mov	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3303      	adds	r3, #3
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	061a      	lsls	r2, r3, #24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3302      	adds	r3, #2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4313      	orrs	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <ETH_MACAddressConfig+0x6c>)
 80018ba:	4413      	add	r3, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40028040 	.word	0x40028040
 80018d4:	40028044 	.word	0x40028044

080018d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e03e      	b.n	8001964 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68d9      	ldr	r1, [r3, #12]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	3206      	adds	r2, #6
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d80c      	bhi.n	8001948 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68d9      	ldr	r1, [r3, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	e004      	b.n	8001952 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	461a      	mov	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d9bd      	bls.n	80018e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197c:	611a      	str	r2, [r3, #16]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e046      	b.n	8001a26 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6919      	ldr	r1, [r3, #16]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	3212      	adds	r2, #18
 80019f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d80c      	bhi.n	8001a16 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6919      	ldr	r1, [r3, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	e004      	b.n	8001a20 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d9b5      	bls.n	8001998 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a56:	60da      	str	r2, [r3, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e177      	b.n	8001d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8166 	bne.w	8001d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d130      	bne.n	8001b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80c0 	beq.w	8001d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a61      	ldr	r2, [pc, #388]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_GPIO_Init+0x32c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d037      	beq.n	8001ca2 <HAL_GPIO_Init+0x23e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d031      	beq.n	8001c9e <HAL_GPIO_Init+0x23a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x236>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_GPIO_Init+0x338>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x232>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a54      	ldr	r2, [pc, #336]	; (8001da0 <HAL_GPIO_Init+0x33c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x22e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <HAL_GPIO_Init+0x340>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x22a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x344>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x348>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_GPIO_Init+0x34c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x21a>
 8001c7a:	2309      	movs	r3, #9
 8001c7c:	e012      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c7e:	230a      	movs	r3, #10
 8001c80:	e010      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00e      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a34      	ldr	r2, [pc, #208]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae84 	bls.w	8001a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40022400 	.word	0x40022400
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df0:	b08f      	sub	sp, #60	; 0x3c
 8001df2:	af0a      	add	r7, sp, #40	; 0x28
 8001df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e10f      	b.n	8002020 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff f8be 	bl	8000f9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f8ad 	bl	8002f9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	687e      	ldr	r6, [r7, #4]
 8001e4c:	466d      	mov	r5, sp
 8001e4e:	f106 0410 	add.w	r4, r6, #16
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e62:	1d33      	adds	r3, r6, #4
 8001e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f001 f838 	bl	8002edc <USB_CoreInit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0d0      	b.n	8002020 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 f89b 	bl	8002fc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e04a      	b.n	8001f26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333d      	adds	r3, #61	; 0x3d
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	333c      	adds	r3, #60	; 0x3c
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	b298      	uxth	r0, r3
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3344      	adds	r3, #68	; 0x44
 8001ecc:	4602      	mov	r2, r0
 8001ece:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	3340      	adds	r3, #64	; 0x40
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3348      	adds	r3, #72	; 0x48
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	334c      	adds	r3, #76	; 0x4c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3354      	adds	r3, #84	; 0x54
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3af      	bcc.n	8001e90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e044      	b.n	8001fc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3b5      	bcc.n	8001f36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	687e      	ldr	r6, [r7, #4]
 8001fd2:	466d      	mov	r5, sp
 8001fd4:	f106 0410 	add.w	r4, r6, #16
 8001fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe8:	1d33      	adds	r3, r6, #4
 8001fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f001 f833 	bl	8003058 <USB_DevInit>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e00d      	b.n	8002020 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f001 f9fe 	bl	800341a <USB_DevDisconnect>

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e267      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d00c      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b85      	ldr	r3, [pc, #532]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800205a:	2b08      	cmp	r3, #8
 800205c:	d112      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4b82      	ldr	r3, [pc, #520]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206a:	d10b      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b7e      	ldr	r3, [pc, #504]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d157      	bne.n	8002130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e242      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x74>
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6f      	ldr	r2, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6c      	ldr	r2, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 80020c0:	4b69      	ldr	r3, [pc, #420]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff f882 	bl	80011e8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff f87e 	bl	80011e8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e207      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xc0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff f86e 	bl	80011e8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff f86a 	bl	80011e8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1f3      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0xe8>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b44      	ldr	r3, [pc, #272]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_OscConfig+0x244>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7ff f823 	bl	80011e8 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a6:	f7ff f81f 	bl	80011e8 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1a8      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4925      	ldr	r1, [pc, #148]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x244>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f802 	bl	80011e8 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe fffe 	bl	80011e8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e187      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d036      	beq.n	8002280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7fe ffe2 	bl	80011e8 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7fe ffde 	bl	80011e8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e167      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x200>
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7fe ffcb 	bl	80011e8 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	e00e      	b.n	8002274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe ffc7 	bl	80011e8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d907      	bls.n	8002274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e150      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ea      	bne.n	8002256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8097 	beq.w	80023bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b81      	ldr	r3, [pc, #516]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b77      	ldr	r3, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b74      	ldr	r3, [pc, #464]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a73      	ldr	r2, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7fe ff87 	bl	80011e8 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7fe ff83 	bl	80011e8 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e10c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x2ea>
 8002304:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x30c>
 800231a:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	4b55      	ldr	r3, [pc, #340]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe ff48 	bl	80011e8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe ff44 	bl	80011e8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0cb      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ee      	beq.n	800235c <HAL_RCC_OscConfig+0x334>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe ff32 	bl	80011e8 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe ff2e 	bl	80011e8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0b5      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	4a38      	ldr	r2, [pc, #224]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a1 	beq.w	8002508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d05c      	beq.n	800248c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d141      	bne.n	800245e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe ff02 	bl	80011e8 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fefe 	bl	80011e8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e087      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fed7 	bl	80011e8 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243e:	f7fe fed3 	bl	80011e8 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e05c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x416>
 800245c:	e054      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fec0 	bl	80011e8 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe febc 	bl	80011e8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e038      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
 80024a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x4ec>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d121      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11a      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cc      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d90c      	bls.n	8002554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d044      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e067      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4934      	ldr	r1, [pc, #208]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7fe fdee 	bl	80011e8 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe fdea 	bl	80011e8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d20c      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fd4e 	bl	8001160 <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	0800356c 	.word	0x0800356c
 80026dc:	200003f8 	.word	0x200003f8
 80026e0:	200003fc 	.word	0x200003fc

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e8:	b094      	sub	sp, #80	; 0x50
 80026ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	647b      	str	r3, [r7, #68]	; 0x44
 80026f0:	2300      	movs	r3, #0
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f4:	2300      	movs	r3, #0
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fc:	4b79      	ldr	r3, [pc, #484]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d00d      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x40>
 8002708:	2b08      	cmp	r3, #8
 800270a:	f200 80e1 	bhi.w	80028d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x34>
 8002712:	2b04      	cmp	r3, #4
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x3a>
 8002716:	e0db      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800271a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800271c:	e0db      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800271e:	4b73      	ldr	r3, [pc, #460]	; (80028ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002720:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002722:	e0d8      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800272c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272e:	4b6d      	ldr	r3, [pc, #436]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d063      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	2200      	movs	r2, #0
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
 8002744:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
 800274e:	2300      	movs	r3, #0
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
 8002752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002756:	4622      	mov	r2, r4
 8002758:	462b      	mov	r3, r5
 800275a:	f04f 0000 	mov.w	r0, #0
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	0159      	lsls	r1, r3, #5
 8002764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002768:	0150      	lsls	r0, r2, #5
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4621      	mov	r1, r4
 8002770:	1a51      	subs	r1, r2, r1
 8002772:	6139      	str	r1, [r7, #16]
 8002774:	4629      	mov	r1, r5
 8002776:	eb63 0301 	sbc.w	r3, r3, r1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002788:	4659      	mov	r1, fp
 800278a:	018b      	lsls	r3, r1, #6
 800278c:	4651      	mov	r1, sl
 800278e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002792:	4651      	mov	r1, sl
 8002794:	018a      	lsls	r2, r1, #6
 8002796:	4651      	mov	r1, sl
 8002798:	ebb2 0801 	subs.w	r8, r2, r1
 800279c:	4659      	mov	r1, fp
 800279e:	eb63 0901 	sbc.w	r9, r3, r1
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b6:	4690      	mov	r8, r2
 80027b8:	4699      	mov	r9, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	eb18 0303 	adds.w	r3, r8, r3
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	462b      	mov	r3, r5
 80027c4:	eb49 0303 	adc.w	r3, r9, r3
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027d6:	4629      	mov	r1, r5
 80027d8:	024b      	lsls	r3, r1, #9
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027e0:	4621      	mov	r1, r4
 80027e2:	024a      	lsls	r2, r1, #9
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027f4:	f7fd fcfa 	bl	80001ec <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002800:	e058      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	2200      	movs	r2, #0
 800280a:	4618      	mov	r0, r3
 800280c:	4611      	mov	r1, r2
 800280e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800281c:	4642      	mov	r2, r8
 800281e:	464b      	mov	r3, r9
 8002820:	f04f 0000 	mov.w	r0, #0
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	0159      	lsls	r1, r3, #5
 800282a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282e:	0150      	lsls	r0, r2, #5
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4641      	mov	r1, r8
 8002836:	ebb2 0a01 	subs.w	sl, r2, r1
 800283a:	4649      	mov	r1, r9
 800283c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800284c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002854:	ebb2 040a 	subs.w	r4, r2, sl
 8002858:	eb63 050b 	sbc.w	r5, r3, fp
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	00eb      	lsls	r3, r5, #3
 8002866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286a:	00e2      	lsls	r2, r4, #3
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	4643      	mov	r3, r8
 8002872:	18e3      	adds	r3, r4, r3
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	464b      	mov	r3, r9
 8002878:	eb45 0303 	adc.w	r3, r5, r3
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800288a:	4629      	mov	r1, r5
 800288c:	028b      	lsls	r3, r1, #10
 800288e:	4621      	mov	r1, r4
 8002890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002894:	4621      	mov	r1, r4
 8002896:	028a      	lsls	r2, r1, #10
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289e:	2200      	movs	r2, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	61fa      	str	r2, [r7, #28]
 80028a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a8:	f7fd fca0 	bl	80001ec <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4613      	mov	r3, r2
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3750      	adds	r7, #80	; 0x50
 80028dc:	46bd      	mov	sp, r7
 80028de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	007a1200 	.word	0x007a1200

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	200003f8 	.word	0x200003f8

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800290c:	f7ff fff0 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	0800357c 	.word	0x0800357c

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002934:	f7ff ffdc 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	0800357c 	.word	0x0800357c

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e03f      	b.n	80029ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fac4 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f829 	bl	80029f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b0c0      	sub	sp, #256	; 0x100
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a10:	68d9      	ldr	r1, [r3, #12]
 8002a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	ea40 0301 	orr.w	r3, r0, r1
 8002a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a4c:	f021 010c 	bic.w	r1, r1, #12
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	6999      	ldr	r1, [r3, #24]
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	ea40 0301 	orr.w	r3, r0, r1
 8002a7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b8f      	ldr	r3, [pc, #572]	; (8002cc0 <UART_SetConfig+0x2cc>)
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d005      	beq.n	8002a94 <UART_SetConfig+0xa0>
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b8d      	ldr	r3, [pc, #564]	; (8002cc4 <UART_SetConfig+0x2d0>)
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d104      	bne.n	8002a9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a94:	f7ff ff4c 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 8002a98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a9c:	e003      	b.n	8002aa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a9e:	f7ff ff33 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8002aa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab0:	f040 810c 	bne.w	8002ccc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002abe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ac2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	1891      	adds	r1, r2, r2
 8002acc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ace:	415b      	adcs	r3, r3
 8002ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	eb12 0801 	adds.w	r8, r2, r1
 8002adc:	4629      	mov	r1, r5
 8002ade:	eb43 0901 	adc.w	r9, r3, r1
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	eb18 0303 	adds.w	r3, r8, r3
 8002b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b04:	462b      	mov	r3, r5
 8002b06:	eb49 0303 	adc.w	r3, r9, r3
 8002b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b22:	460b      	mov	r3, r1
 8002b24:	18db      	adds	r3, r3, r3
 8002b26:	653b      	str	r3, [r7, #80]	; 0x50
 8002b28:	4613      	mov	r3, r2
 8002b2a:	eb42 0303 	adc.w	r3, r2, r3
 8002b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b38:	f7fd fb58 	bl	80001ec <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002b42:	fba3 2302 	umull	r2, r3, r3, r2
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	011c      	lsls	r4, r3, #4
 8002b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	1891      	adds	r1, r2, r2
 8002b62:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b64:	415b      	adcs	r3, r3
 8002b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b72:	4649      	mov	r1, r9
 8002b74:	eb43 0b01 	adc.w	fp, r3, r1
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b8c:	4692      	mov	sl, r2
 8002b8e:	469b      	mov	fp, r3
 8002b90:	4643      	mov	r3, r8
 8002b92:	eb1a 0303 	adds.w	r3, sl, r3
 8002b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	18db      	adds	r3, r3, r3
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bce:	f7fd fb0d 	bl	80001ec <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002bda:	fba3 2301 	umull	r2, r3, r3, r1
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2264      	movs	r2, #100	; 0x64
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	1acb      	subs	r3, r1, r3
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bfc:	441c      	add	r4, r3
 8002bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c10:	4642      	mov	r2, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	1891      	adds	r1, r2, r2
 8002c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c18:	415b      	adcs	r3, r3
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c20:	4641      	mov	r1, r8
 8002c22:	1851      	adds	r1, r2, r1
 8002c24:	6339      	str	r1, [r7, #48]	; 0x30
 8002c26:	4649      	mov	r1, r9
 8002c28:	414b      	adcs	r3, r1
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c38:	4659      	mov	r1, fp
 8002c3a:	00cb      	lsls	r3, r1, #3
 8002c3c:	4651      	mov	r1, sl
 8002c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c42:	4651      	mov	r1, sl
 8002c44:	00ca      	lsls	r2, r1, #3
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c54:	464b      	mov	r3, r9
 8002c56:	460a      	mov	r2, r1
 8002c58:	eb42 0303 	adc.w	r3, r2, r3
 8002c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c74:	460b      	mov	r3, r1
 8002c76:	18db      	adds	r3, r3, r3
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c8a:	f7fd faaf 	bl	80001ec <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002c94:	fba3 1302 	umull	r1, r3, r3, r2
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	3332      	adds	r3, #50	; 0x32
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	f003 0207 	and.w	r2, r3, #7
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4422      	add	r2, r4
 8002cba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cbc:	e105      	b.n	8002eca <UART_SetConfig+0x4d6>
 8002cbe:	bf00      	nop
 8002cc0:	40011000 	.word	0x40011000
 8002cc4:	40011400 	.word	0x40011400
 8002cc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cde:	4642      	mov	r2, r8
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	1891      	adds	r1, r2, r2
 8002ce4:	6239      	str	r1, [r7, #32]
 8002ce6:	415b      	adcs	r3, r3
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cee:	4641      	mov	r1, r8
 8002cf0:	1854      	adds	r4, r2, r1
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	eb43 0501 	adc.w	r5, r3, r1
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	00eb      	lsls	r3, r5, #3
 8002d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d06:	00e2      	lsls	r2, r4, #3
 8002d08:	4614      	mov	r4, r2
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	4643      	mov	r3, r8
 8002d0e:	18e3      	adds	r3, r4, r3
 8002d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d14:	464b      	mov	r3, r9
 8002d16:	eb45 0303 	adc.w	r3, r5, r3
 8002d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	008b      	lsls	r3, r1, #2
 8002d3e:	4621      	mov	r1, r4
 8002d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d44:	4621      	mov	r1, r4
 8002d46:	008a      	lsls	r2, r1, #2
 8002d48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d4c:	f7fd fa4e 	bl	80001ec <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4b60      	ldr	r3, [pc, #384]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002d56:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	011c      	lsls	r4, r3, #4
 8002d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d70:	4642      	mov	r2, r8
 8002d72:	464b      	mov	r3, r9
 8002d74:	1891      	adds	r1, r2, r2
 8002d76:	61b9      	str	r1, [r7, #24]
 8002d78:	415b      	adcs	r3, r3
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d80:	4641      	mov	r1, r8
 8002d82:	1851      	adds	r1, r2, r1
 8002d84:	6139      	str	r1, [r7, #16]
 8002d86:	4649      	mov	r1, r9
 8002d88:	414b      	adcs	r3, r1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d98:	4659      	mov	r1, fp
 8002d9a:	00cb      	lsls	r3, r1, #3
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da2:	4651      	mov	r1, sl
 8002da4:	00ca      	lsls	r2, r1, #3
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	4642      	mov	r2, r8
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002db4:	464b      	mov	r3, r9
 8002db6:	460a      	mov	r2, r1
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dd8:	4649      	mov	r1, r9
 8002dda:	008b      	lsls	r3, r1, #2
 8002ddc:	4641      	mov	r1, r8
 8002dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de2:	4641      	mov	r1, r8
 8002de4:	008a      	lsls	r2, r1, #2
 8002de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dea:	f7fd f9ff 	bl	80001ec <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	2164      	movs	r1, #100	; 0x64
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	3332      	adds	r3, #50	; 0x32
 8002e06:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e12:	441c      	add	r4, r3
 8002e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e18:	2200      	movs	r2, #0
 8002e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e1c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e22:	4642      	mov	r2, r8
 8002e24:	464b      	mov	r3, r9
 8002e26:	1891      	adds	r1, r2, r2
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	415b      	adcs	r3, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e32:	4641      	mov	r1, r8
 8002e34:	1851      	adds	r1, r2, r1
 8002e36:	6039      	str	r1, [r7, #0]
 8002e38:	4649      	mov	r1, r9
 8002e3a:	414b      	adcs	r3, r1
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e4a:	4659      	mov	r1, fp
 8002e4c:	00cb      	lsls	r3, r1, #3
 8002e4e:	4651      	mov	r1, sl
 8002e50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e54:	4651      	mov	r1, sl
 8002e56:	00ca      	lsls	r2, r1, #3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4642      	mov	r2, r8
 8002e60:	189b      	adds	r3, r3, r2
 8002e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e64:	464b      	mov	r3, r9
 8002e66:	460a      	mov	r2, r1
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	663b      	str	r3, [r7, #96]	; 0x60
 8002e78:	667a      	str	r2, [r7, #100]	; 0x64
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e86:	4649      	mov	r1, r9
 8002e88:	008b      	lsls	r3, r1, #2
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e90:	4641      	mov	r1, r8
 8002e92:	008a      	lsls	r2, r1, #2
 8002e94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e98:	f7fd f9a8 	bl	80001ec <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	2164      	movs	r1, #100	; 0x64
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	3332      	adds	r3, #50	; 0x32
 8002eb4:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	f003 020f 	and.w	r2, r3, #15
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4422      	add	r2, r4
 8002ec8:	609a      	str	r2, [r3, #8]
}
 8002eca:	bf00      	nop
 8002ecc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	51eb851f 	.word	0x51eb851f

08002edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002edc:	b084      	sub	sp, #16
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	f107 001c 	add.w	r0, r7, #28
 8002eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d122      	bne.n	8002f3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 faa2 	bl	8003478 <USB_CoreReset>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e01a      	b.n	8002f70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa96 	bl	8003478 <USB_CoreReset>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
 8002f62:	e005      	b.n	8002f70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10b      	bne.n	8002f8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f043 0206 	orr.w	r2, r3, #6
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f9a:	b004      	add	sp, #16
 8002f9c:	4770      	bx	lr

08002f9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 0201 	bic.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d115      	bne.n	800300e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f7fe f906 	bl	8001200 <HAL_Delay>
      ms++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa2e 	bl	800345c <USB_GetMode>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d01e      	beq.n	8003044 <USB_SetCurrentMode+0x84>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b31      	cmp	r3, #49	; 0x31
 800300a:	d9f0      	bls.n	8002fee <USB_SetCurrentMode+0x2e>
 800300c:	e01a      	b.n	8003044 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d115      	bne.n	8003040 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003020:	2001      	movs	r0, #1
 8003022:	f7fe f8ed 	bl	8001200 <HAL_Delay>
      ms++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3301      	adds	r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fa15 	bl	800345c <USB_GetMode>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <USB_SetCurrentMode+0x84>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b31      	cmp	r3, #49	; 0x31
 800303c:	d9f0      	bls.n	8003020 <USB_SetCurrentMode+0x60>
 800303e:	e001      	b.n	8003044 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e005      	b.n	8003050 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b32      	cmp	r3, #50	; 0x32
 8003048:	d101      	bne.n	800304e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003058:	b084      	sub	sp, #16
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e009      	b.n	800308c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	3340      	adds	r3, #64	; 0x40
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	2200      	movs	r2, #0
 8003084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	3301      	adds	r3, #1
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b0e      	cmp	r3, #14
 8003090:	d9f2      	bls.n	8003078 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11c      	bne.n	80030d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
 80030d0:	e00b      	b.n	80030ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030f0:	461a      	mov	r2, r3
 80030f2:	2300      	movs	r3, #0
 80030f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fc:	4619      	mov	r1, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003104:	461a      	mov	r2, r3
 8003106:	680b      	ldr	r3, [r1, #0]
 8003108:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10c      	bne.n	800312a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003116:	2100      	movs	r1, #0
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f965 	bl	80033e8 <USB_SetDevSpeed>
 800311e:	e008      	b.n	8003132 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003120:	2101      	movs	r1, #1
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f960 	bl	80033e8 <USB_SetDevSpeed>
 8003128:	e003      	b.n	8003132 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800312a:	2103      	movs	r1, #3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f95b 	bl	80033e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003132:	2110      	movs	r1, #16
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8f3 	bl	8003320 <USB_FlushTxFifo>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f91f 	bl	8003388 <USB_FlushRxFifo>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	461a      	mov	r2, r3
 800315c:	2300      	movs	r3, #0
 800315e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003166:	461a      	mov	r2, r3
 8003168:	2300      	movs	r3, #0
 800316a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	461a      	mov	r2, r3
 8003174:	2300      	movs	r3, #0
 8003176:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e043      	b.n	8003206 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4413      	add	r3, r2
 8003186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003194:	d118      	bne.n	80031c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a8:	461a      	mov	r2, r3
 80031aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	e013      	b.n	80031da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031be:	461a      	mov	r2, r3
 80031c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e008      	b.n	80031da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d4:	461a      	mov	r2, r3
 80031d6:	2300      	movs	r3, #0
 80031d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f8:	461a      	mov	r2, r3
 80031fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	3301      	adds	r3, #1
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	429a      	cmp	r2, r3
 800320c:	d3b7      	bcc.n	800317e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e043      	b.n	800329c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800322a:	d118      	bne.n	800325e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e013      	b.n	8003270 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e008      	b.n	8003270 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326a:	461a      	mov	r2, r3
 800326c:	2300      	movs	r3, #0
 800326e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003294:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	3301      	adds	r3, #1
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d3b7      	bcc.n	8003214 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f043 0210 	orr.w	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699a      	ldr	r2, [r3, #24]
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <USB_DevInit+0x2c4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f043 0208 	orr.w	r2, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003318:	b004      	add	sp, #16
 800331a:	4770      	bx	lr
 800331c:	803c3800 	.word	0x803c3800

08003320 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3301      	adds	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a13      	ldr	r2, [pc, #76]	; (8003384 <USB_FlushTxFifo+0x64>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e01b      	b.n	8003378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	daf2      	bge.n	800332e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	019b      	lsls	r3, r3, #6
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3301      	adds	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4a08      	ldr	r2, [pc, #32]	; (8003384 <USB_FlushTxFifo+0x64>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e006      	b.n	8003378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b20      	cmp	r3, #32
 8003374:	d0f0      	beq.n	8003358 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	00030d40 	.word	0x00030d40

08003388 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3301      	adds	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a11      	ldr	r2, [pc, #68]	; (80033e4 <USB_FlushRxFifo+0x5c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e018      	b.n	80033d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	daf2      	bge.n	8003394 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2210      	movs	r2, #16
 80033b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3301      	adds	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <USB_FlushRxFifo+0x5c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e006      	b.n	80033d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d0f0      	beq.n	80033b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	00030d40 	.word	0x00030d40

080033e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003434:	f023 0303 	bic.w	r3, r3, #3
 8003438:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0301 	and.w	r3, r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a13      	ldr	r2, [pc, #76]	; (80034dc <USB_CoreReset+0x64>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e01b      	b.n	80034ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	daf2      	bge.n	8003484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3301      	adds	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <USB_CoreReset+0x64>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e006      	b.n	80034ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d0f0      	beq.n	80034ae <USB_CoreReset+0x36>

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	00030d40 	.word	0x00030d40

080034e0 <__libc_init_array>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	4d0d      	ldr	r5, [pc, #52]	; (8003518 <__libc_init_array+0x38>)
 80034e4:	4c0d      	ldr	r4, [pc, #52]	; (800351c <__libc_init_array+0x3c>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	2600      	movs	r6, #0
 80034ec:	42a6      	cmp	r6, r4
 80034ee:	d109      	bne.n	8003504 <__libc_init_array+0x24>
 80034f0:	4d0b      	ldr	r5, [pc, #44]	; (8003520 <__libc_init_array+0x40>)
 80034f2:	4c0c      	ldr	r4, [pc, #48]	; (8003524 <__libc_init_array+0x44>)
 80034f4:	f000 f820 	bl	8003538 <_init>
 80034f8:	1b64      	subs	r4, r4, r5
 80034fa:	10a4      	asrs	r4, r4, #2
 80034fc:	2600      	movs	r6, #0
 80034fe:	42a6      	cmp	r6, r4
 8003500:	d105      	bne.n	800350e <__libc_init_array+0x2e>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	f855 3b04 	ldr.w	r3, [r5], #4
 8003508:	4798      	blx	r3
 800350a:	3601      	adds	r6, #1
 800350c:	e7ee      	b.n	80034ec <__libc_init_array+0xc>
 800350e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003512:	4798      	blx	r3
 8003514:	3601      	adds	r6, #1
 8003516:	e7f2      	b.n	80034fe <__libc_init_array+0x1e>
 8003518:	0800358c 	.word	0x0800358c
 800351c:	0800358c 	.word	0x0800358c
 8003520:	0800358c 	.word	0x0800358c
 8003524:	08003590 	.word	0x08003590

08003528 <memset>:
 8003528:	4402      	add	r2, r0
 800352a:	4603      	mov	r3, r0
 800352c:	4293      	cmp	r3, r2
 800352e:	d100      	bne.n	8003532 <memset+0xa>
 8003530:	4770      	bx	lr
 8003532:	f803 1b01 	strb.w	r1, [r3], #1
 8003536:	e7f9      	b.n	800352c <memset+0x4>

08003538 <_init>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr

08003544 <_fini>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr
