
Practica04_p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08002d80  08002d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f0c  08002f0c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f14  08002f14  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000038  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000054c1  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000163a  00000000  00000000  00025575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c0  00000000  00000000  00026bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004e8  00000000  00000000  00027170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d0e  00000000  00000000  00027658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008b3d  00000000  00000000  0004d366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e25c6  00000000  00000000  00055ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138469  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001db4  00000000  00000000  001384bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002d68 	.word	0x08002d68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002d68 	.word	0x08002d68

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <readKey>:

/*
 * Funcion que entrega un cambio de true a false o de false
 * a true si se precional el boton sin rebote
 */
bool_t readKey(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
 return PressButton;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <readKey+0x14>)
 800059a:	781b      	ldrb	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <debounceFSM_init>:

void debounceFSM_init(){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	/* Initialize Estado */
	assert(&PressButton!=NULL);
	currentState=BUTTON_UP;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <debounceFSM_init+0x14>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	200000a0 	.word	0x200000a0

080005c4 <debounceFSM_update>:

/*
 * This function reads inputs, manages the transition between states,
 * and updates the outputs accordingly.
 */
void debounceFSM_update(delay_t* delay){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	assert(delay!=NULL);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d105      	bne.n	80005de <debounceFSM_update+0x1a>
 80005d2:	4b36      	ldr	r3, [pc, #216]	; (80006ac <debounceFSM_update+0xe8>)
 80005d4:	4a36      	ldr	r2, [pc, #216]	; (80006b0 <debounceFSM_update+0xec>)
 80005d6:	213d      	movs	r1, #61	; 0x3d
 80005d8:	4836      	ldr	r0, [pc, #216]	; (80006b4 <debounceFSM_update+0xf0>)
 80005da:	f001 fba1 	bl	8001d20 <__assert_func>
	assert(&currentState!=NULL);

	switch (currentState){
 80005de:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <debounceFSM_update+0xf4>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d855      	bhi.n	8000692 <debounceFSM_update+0xce>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <debounceFSM_update+0x28>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	080005fd 	.word	0x080005fd
 80005f0:	08000611 	.word	0x08000611
 80005f4:	08000657 	.word	0x08000657
 80005f8:	0800066b 	.word	0x0800066b
	/*
	 * In the BUTTON_UP state, it checks whether the button remains unpressed.
	 * Otherwise, that is, if the button is pressed, the state changes to BUTTON_FALLING.
	 */
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)){
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f997 	bl	8000930 <BSP_PB_GetState>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d04a      	beq.n	800069e <debounceFSM_update+0xda>
	    	currentState=BUTTON_FALLING;
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <debounceFSM_update+0xf4>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800060e:	e046      	b.n	800069e <debounceFSM_update+0xda>
		 * If it remains pressed (condition 'yes'), the state changes to BUTTON_DOWN and the
		 * state of LED1 is toggled. If the button does not remain pressed (condition 'no'),
		 * the state changes back to BUTTON_UP, interpreting this event as a bounce.
		 */
	case BUTTON_FALLING:
		if (BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f98d 	bl	8000930 <BSP_PB_GetState>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d018      	beq.n	800064e <debounceFSM_update+0x8a>
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f86f 	bl	8000700 <delayRead>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d012      	beq.n	800064e <debounceFSM_update+0x8a>
	    	currentState=BUTTON_DOWN;
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <debounceFSM_update+0xf4>)
 800062a:	2202      	movs	r2, #2
 800062c:	701a      	strb	r2, [r3, #0]
	    	//buttonPressed();
	    	PressButton = !(PressButton);
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <debounceFSM_update+0xf8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <debounceFSM_update+0xf8>)
 800064a:	701a      	strb	r2, [r3, #0]
		}
		else {
			currentState=BUTTON_UP;
		}
		break;
 800064c:	e02a      	b.n	80006a4 <debounceFSM_update+0xe0>
			currentState=BUTTON_UP;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <debounceFSM_update+0xf4>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
		break;
 8000654:	e026      	b.n	80006a4 <debounceFSM_update+0xe0>
	/*
	 * In the BUTTON_DOWN state, if the button is released, the state changes to BUTTON_RAISING.
	 */
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)){
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f96a 	bl	8000930 <BSP_PB_GetState>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d11f      	bne.n	80006a2 <debounceFSM_update+0xde>
	    	currentState=BUTTON_RAISING;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <debounceFSM_update+0xf4>)
 8000664:	2203      	movs	r2, #3
 8000666:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000668:	e01b      	b.n	80006a2 <debounceFSM_update+0xde>
	 * If it remains unpressed (condition 'yes'), the state changes back to BUTTON_UP and
	 * the buttonReleased function is called. If the button is pressed again (condition 'no'),
	 * the state changes back to BUTTON_DOWN.
	 */
	case BUTTON_RAISING:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f960 	bl	8000930 <BSP_PB_GetState>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d109      	bne.n	800068a <debounceFSM_update+0xc6>
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f842 	bl	8000700 <delayRead>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d003      	beq.n	800068a <debounceFSM_update+0xc6>
	    	currentState=BUTTON_UP;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <debounceFSM_update+0xf4>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	    	//buttonReleased();
		}
		else {
			currentState=BUTTON_DOWN;
		}
		break;
 8000688:	e00c      	b.n	80006a4 <debounceFSM_update+0xe0>
			currentState=BUTTON_DOWN;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <debounceFSM_update+0xf4>)
 800068c:	2202      	movs	r2, #2
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e008      	b.n	80006a4 <debounceFSM_update+0xe0>
	default:
			/* Handle unexpected state */
		assert(0);
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <debounceFSM_update+0xfc>)
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <debounceFSM_update+0xec>)
 8000696:	2173      	movs	r1, #115	; 0x73
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <debounceFSM_update+0xf0>)
 800069a:	f001 fb41 	bl	8001d20 <__assert_func>
		break;
 800069e:	bf00      	nop
 80006a0:	e000      	b.n	80006a4 <debounceFSM_update+0xe0>
		break;
 80006a2:	bf00      	nop
	}
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08002d80 	.word	0x08002d80
 80006b0:	08002df4 	.word	0x08002df4
 80006b4:	08002d8c 	.word	0x08002d8c
 80006b8:	200000a0 	.word	0x200000a0
 80006bc:	20000000 	.word	0x20000000
 80006c0:	08002db0 	.word	0x08002db0

080006c4 <delayInit>:
/* delayInit debe cargar el valor de duración del retardo en la estructura, en el campo
correspondiente. No debe iniciar el conteo del retardo. Debe inicializar el flag running
en `false´. */

void delayInit( delay_t * delay, tick_t duration )
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d105      	bne.n	80006e0 <delayInit+0x1c>
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <delayInit+0x30>)
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <delayInit+0x34>)
 80006d8:	2113      	movs	r1, #19
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <delayInit+0x38>)
 80006dc:	f001 fb20 	bl	8001d20 <__assert_func>
	assert(delay->duration >=0);
	delay->duration = duration;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	721a      	strb	r2, [r3, #8]
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08002db4 	.word	0x08002db4
 80006f8:	08002e08 	.word	0x08002e08
 80006fc:	08002dc4 	.word	0x08002dc4

08000700 <delayRead>:
○ true, hacer la cuenta para saber si el tiempo del retardo se cumplió o no:
‘marca de tiempo actual - marca de tiempo inicial es mayor o igual a duración
del retardo’ y devolver un valor booleano que indique si el tiempo se cumplió o no.
○ Cuando el tiempo se cumple se debe cambiar el flag running a false.*/

bool_t delayRead( delay_t * delay ){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

	static bool_t retValue; // variable estatica interna
	retValue = false;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <delayRead+0x6c>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
	assert(delay !=NULL);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d105      	bne.n	8000720 <delayRead+0x20>
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <delayRead+0x70>)
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <delayRead+0x74>)
 8000718:	2124      	movs	r1, #36	; 0x24
 800071a:	4817      	ldr	r0, [pc, #92]	; (8000778 <delayRead+0x78>)
 800071c:	f001 fb00 	bl	8001d20 <__assert_func>
	assert(delay->duration >= 0);

	if (delay->running == false){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d008      	beq.n	8000740 <delayRead+0x40>
		delay->startTime = HAL_GetTick();
 800072e:	f000 fa83 	bl	8000c38 <HAL_GetTick>
 8000732:	4602      	mov	r2, r0
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	721a      	strb	r2, [r3, #8]
 800073e:	e00f      	b.n	8000760 <delayRead+0x60>
	}
	else{
		 if((HAL_GetTick()-delay->startTime) >= delay->duration){
 8000740:	f000 fa7a 	bl	8000c38 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	d305      	bcc.n	8000760 <delayRead+0x60>
			 delay->running = false;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	721a      	strb	r2, [r3, #8]
			 retValue = true;
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <delayRead+0x6c>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
		 }
	}
	return retValue;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <delayRead+0x6c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000a1 	.word	0x200000a1
 8000770:	08002de4 	.word	0x08002de4
 8000774:	08002e14 	.word	0x08002e14
 8000778:	08002dc4 	.word	0x08002dc4

0800077c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10e      	bne.n	80007aa <BSP_LED_Init+0x2e>
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <BSP_LED_Init+0x94>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <BSP_LED_Init+0x94>)
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <BSP_LED_Init+0x94>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	e00d      	b.n	80007c6 <BSP_LED_Init+0x4a>
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <BSP_LED_Init+0x94>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <BSP_LED_Init+0x94>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <BSP_LED_Init+0x94>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <BSP_LED_Init+0x98>)
 80007ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <BSP_LED_Init+0x9c>)
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	f107 0214 	add.w	r2, r7, #20
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fb12 	bl	8000e14 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4a09      	ldr	r2, [pc, #36]	; (8000818 <BSP_LED_Init+0x9c>)
 80007f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <BSP_LED_Init+0x98>)
 80007fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	f000 fcca 	bl	800119c <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	08002e20 	.word	0x08002e20
 8000818:	20000004 	.word	0x20000004

0800081c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <BSP_LED_On+0x2c>)
 800082a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <BSP_LED_On+0x30>)
 8000832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	f000 fcaf 	bl	800119c <HAL_GPIO_WritePin>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000004 	.word	0x20000004
 800084c:	08002e20 	.word	0x08002e20

08000850 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <BSP_LED_Toggle+0x2c>)
 800085e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4906      	ldr	r1, [pc, #24]	; (8000880 <BSP_LED_Toggle+0x30>)
 8000866:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800086a:	4619      	mov	r1, r3
 800086c:	4610      	mov	r0, r2
 800086e:	f000 fcae 	bl	80011ce <HAL_GPIO_TogglePin>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000004 	.word	0x20000004
 8000880:	08002e20 	.word	0x08002e20

08000884 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	460a      	mov	r2, r1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <BSP_PB_Init+0xa4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a22      	ldr	r2, [pc, #136]	; (8000928 <BSP_PB_Init+0xa4>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <BSP_PB_Init+0xa4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d112      	bne.n	80008dc <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80008b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c0:	2302      	movs	r3, #2
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <BSP_PB_Init+0xa8>)
 80008cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d0:	f107 020c 	add.w	r2, r7, #12
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fa9c 	bl	8000e14 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d11d      	bne.n	800091e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80008e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80008ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <BSP_PB_Init+0xa8>)
 80008f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fa:	f107 020c 	add.w	r2, r7, #12
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fa87 	bl	8000e14 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000906:	2328      	movs	r3, #40	; 0x28
 8000908:	b25b      	sxtb	r3, r3
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fa4a 	bl	8000da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000914:	2328      	movs	r3, #40	; 0x28
 8000916:	b25b      	sxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fa61 	bl	8000de0 <HAL_NVIC_EnableIRQ>
  }
}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	20000010 	.word	0x20000010

08000930 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <BSP_PB_GetState+0x28>)
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fc0f 	bl	800116c <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000010 	.word	0x20000010

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <SystemInit+0x60>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <SystemInit+0x60>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <SystemInit+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <SystemInit+0x64>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <SystemInit+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <SystemInit+0x64>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <SystemInit+0x64>)
 8000988:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800098c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000990:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <SystemInit+0x64>)
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <SystemInit+0x68>)
 8000996:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <SystemInit+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <SystemInit+0x64>)
 800099e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SystemInit+0x60>)
 80009ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b0:	609a      	str	r2, [r3, #8]
#endif
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00
 80009c0:	40023800 	.word	0x40023800
 80009c4:	24003010 	.word	0x24003010

080009c8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000a1c:	f000 f8f8 	bl	8000c10 <HAL_IncTick>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	return 1;
 8000a28:	2301      	movs	r3, #1
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_kill>:

int _kill(int pid, int sig)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a3e:	f001 f98d 	bl	8001d5c <__errno>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2216      	movs	r2, #22
 8000a46:	601a      	str	r2, [r3, #0]
	return -1;
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_exit>:

void _exit (int status)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ffe7 	bl	8000a34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a66:	e7fe      	b.n	8000a66 <_exit+0x12>

08000a68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e00a      	b.n	8000a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4601      	mov	r1, r0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf0      	blt.n	8000a7a <_read+0x12>
	}

return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e009      	b.n	8000ac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf1      	blt.n	8000ab4 <_write+0x12>
	}
	return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_close>:

int _close(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b02:	605a      	str	r2, [r3, #4]
	return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_isatty>:

int _isatty(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	return 1;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f001 f8f2 	bl	8001d5c <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20030000 	.word	0x20030000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	200000a4 	.word	0x200000a4
 8000bac:	200000c0 	.word	0x200000c0

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f914 	bl	8000dfc <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 f8dc 	bl	8000da8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000014 	.word	0x20000014
 8000c08:	2000001c 	.word	0x2000001c
 8000c0c:	20000018 	.word	0x20000018

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2000001c 	.word	0x2000001c
 8000c34:	200000a8 	.word	0x200000a8

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200000a8 	.word	0x200000a8

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dba:	f7ff ff49 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f7ff ff99 	bl	8000cfc <NVIC_EncodePriority>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff68 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff3c 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ffad 	bl	8000d64 <SysTick_Config>
 8000e0a:	4603      	mov	r3, r0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e177      	b.n	8001120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 8166 	bne.w	800111a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80c0 	beq.w	800111a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b66      	ldr	r3, [pc, #408]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a65      	ldr	r2, [pc, #404]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b63      	ldr	r3, [pc, #396]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a61      	ldr	r2, [pc, #388]	; (800113c <HAL_GPIO_Init+0x328>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a58      	ldr	r2, [pc, #352]	; (8001140 <HAL_GPIO_Init+0x32c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d037      	beq.n	8001052 <HAL_GPIO_Init+0x23e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a57      	ldr	r2, [pc, #348]	; (8001144 <HAL_GPIO_Init+0x330>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d031      	beq.n	800104e <HAL_GPIO_Init+0x23a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a56      	ldr	r2, [pc, #344]	; (8001148 <HAL_GPIO_Init+0x334>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x236>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a55      	ldr	r2, [pc, #340]	; (800114c <HAL_GPIO_Init+0x338>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x232>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a54      	ldr	r2, [pc, #336]	; (8001150 <HAL_GPIO_Init+0x33c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x22e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a53      	ldr	r2, [pc, #332]	; (8001154 <HAL_GPIO_Init+0x340>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x22a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a52      	ldr	r2, [pc, #328]	; (8001158 <HAL_GPIO_Init+0x344>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a51      	ldr	r2, [pc, #324]	; (800115c <HAL_GPIO_Init+0x348>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a50      	ldr	r2, [pc, #320]	; (8001160 <HAL_GPIO_Init+0x34c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4f      	ldr	r2, [pc, #316]	; (8001164 <HAL_GPIO_Init+0x350>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x21a>
 800102a:	2309      	movs	r3, #9
 800102c:	e012      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800102e:	230a      	movs	r3, #10
 8001030:	e010      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001032:	2308      	movs	r3, #8
 8001034:	e00e      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001036:	2307      	movs	r3, #7
 8001038:	e00c      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800103a:	2306      	movs	r3, #6
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	; (800113c <HAL_GPIO_Init+0x328>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <HAL_GPIO_Init+0x354>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001096:	4a34      	ldr	r2, [pc, #208]	; (8001168 <HAL_GPIO_Init+0x354>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <HAL_GPIO_Init+0x354>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <HAL_GPIO_Init+0x354>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_GPIO_Init+0x354>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_GPIO_Init+0x354>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_GPIO_Init+0x354>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <HAL_GPIO_Init+0x354>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f ae84 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40022000 	.word	0x40022000
 8001164:	40022400 	.word	0x40022400
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e0:	887a      	ldrh	r2, [r7, #2]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	400b      	ands	r3, r1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_PWREx_EnableOverDrive+0x90>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <HAL_PWREx_EnableOverDrive+0x90>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_PWREx_EnableOverDrive+0x90>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_PWREx_EnableOverDrive+0x94>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001230:	f7ff fd02 	bl	8000c38 <HAL_GetTick>
 8001234:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001236:	e009      	b.n	800124c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001238:	f7ff fcfe 	bl	8000c38 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001246:	d901      	bls.n	800124c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e01f      	b.n	800128c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_PWREx_EnableOverDrive+0x98>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d1ee      	bne.n	8001238 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff fcea 	bl	8000c38 <HAL_GetTick>
 8001264:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001266:	e009      	b.n	800127c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001268:	f7ff fce6 	bl	8000c38 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001276:	d901      	bls.n	800127c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e007      	b.n	800128c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_PWREx_EnableOverDrive+0x98>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001288:	d1ee      	bne.n	8001268 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	420e0040 	.word	0x420e0040
 800129c:	40007000 	.word	0x40007000
 80012a0:	420e0044 	.word	0x420e0044

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e267      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b85      	ldr	r3, [pc, #532]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b82      	ldr	r3, [pc, #520]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b7e      	ldr	r3, [pc, #504]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e242      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a75      	ldr	r2, [pc, #468]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6f      	ldr	r2, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6c      	ldr	r2, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a68      	ldr	r2, [pc, #416]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fc6c 	bl	8000c38 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fc68 	bl	8000c38 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e207      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fc58 	bl	8000c38 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fc54 	bl	8000c38 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1f3      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c7      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc0d 	bl	8000c38 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc09 	bl	8000c38 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a8      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fbec 	bl	8000c38 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fbe8 	bl	8000c38 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e187      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d036      	beq.n	80014fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_RCC_OscConfig+0x248>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fbcc 	bl	8000c38 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fbc8 	bl	8000c38 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e167      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e01b      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_OscConfig+0x248>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fbb5 	bl	8000c38 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00e      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fbb1 	bl	8000c38 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d907      	bls.n	80014f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e150      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ea      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8097 	beq.w	8001638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b81      	ldr	r3, [pc, #516]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a7c      	ldr	r2, [pc, #496]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b74      	ldr	r3, [pc, #464]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a73      	ldr	r2, [pc, #460]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fb71 	bl	8000c38 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fb6d 	bl	8000c38 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e10c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x2ea>
 8001580:	4b64      	ldr	r3, [pc, #400]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a63      	ldr	r2, [pc, #396]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x30c>
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a5b      	ldr	r2, [pc, #364]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a54      	ldr	r2, [pc, #336]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d015      	beq.n	80015fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fb32 	bl	8000c38 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb2e 	bl	8000c38 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0cb      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0ee      	beq.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb1c 	bl	8000c38 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fb18 	bl	8000c38 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0b5      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ee      	bne.n	8001604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a1 	beq.w	8001784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d05c      	beq.n	8001708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d141      	bne.n	80016da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_OscConfig+0x478>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff faec 	bl	8000c38 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fae8 	bl	8000c38 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e087      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	491b      	ldr	r1, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x478>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fac1 	bl	8000c38 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fabd 	bl	8000c38 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e05c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x416>
 80016d8:	e054      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_RCC_OscConfig+0x478>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff faaa 	bl	8000c38 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff faa6 	bl	8000c38 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e045      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x444>
 8001706:	e03d      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e038      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000
 800171c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d028      	beq.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d121      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d11a      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	4293      	cmp	r3, r2
 800175a:	d111      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90c      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d044      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e067      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff f9d8 	bl	8000c38 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff f9d4 	bl	8000c38 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20c      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f938 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00
 8001950:	40023800 	.word	0x40023800
 8001954:	08002e28 	.word	0x08002e28
 8001958:	20000014 	.word	0x20000014
 800195c:	20000018 	.word	0x20000018

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b094      	sub	sp, #80	; 0x50
 8001966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
 800196c:	2300      	movs	r3, #0
 800196e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001970:	2300      	movs	r3, #0
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001978:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d00d      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001984:	2b08      	cmp	r3, #8
 8001986:	f200 80e1 	bhi.w	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x34>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x3a>
 8001992:	e0db      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001998:	e0db      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800199e:	e0d8      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019aa:	4b6d      	ldr	r3, [pc, #436]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	2200      	movs	r2, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
 80019ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d2:	4622      	mov	r2, r4
 80019d4:	462b      	mov	r3, r5
 80019d6:	f04f 0000 	mov.w	r0, #0
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	0159      	lsls	r1, r3, #5
 80019e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e4:	0150      	lsls	r0, r2, #5
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4621      	mov	r1, r4
 80019ec:	1a51      	subs	r1, r2, r1
 80019ee:	6139      	str	r1, [r7, #16]
 80019f0:	4629      	mov	r1, r5
 80019f2:	eb63 0301 	sbc.w	r3, r3, r1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a04:	4659      	mov	r1, fp
 8001a06:	018b      	lsls	r3, r1, #6
 8001a08:	4651      	mov	r1, sl
 8001a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0e:	4651      	mov	r1, sl
 8001a10:	018a      	lsls	r2, r1, #6
 8001a12:	4651      	mov	r1, sl
 8001a14:	ebb2 0801 	subs.w	r8, r2, r1
 8001a18:	4659      	mov	r1, fp
 8001a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a32:	4690      	mov	r8, r2
 8001a34:	4699      	mov	r9, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	eb18 0303 	adds.w	r3, r8, r3
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	462b      	mov	r3, r5
 8001a40:	eb49 0303 	adc.w	r3, r9, r3
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a52:	4629      	mov	r1, r5
 8001a54:	024b      	lsls	r3, r1, #9
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	024a      	lsls	r2, r1, #9
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a70:	f7fe fc0e 	bl	8000290 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a7c:	e058      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	2200      	movs	r2, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	4611      	mov	r1, r2
 8001a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a98:	4642      	mov	r2, r8
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0159      	lsls	r1, r3, #5
 8001aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aaa:	0150      	lsls	r0, r2, #5
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	00eb      	lsls	r3, r5, #3
 8001ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	4643      	mov	r3, r8
 8001aee:	18e3      	adds	r3, r4, r3
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	464b      	mov	r3, r9
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b06:	4629      	mov	r1, r5
 8001b08:	028b      	lsls	r3, r1, #10
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b10:	4621      	mov	r1, r4
 8001b12:	028a      	lsls	r2, r1, #10
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	61fa      	str	r2, [r7, #28]
 8001b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b24:	f7fe fbb4 	bl	8000290 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3750      	adds	r7, #80	; 0x50
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200

08001b6c <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	//HAL_Init();
	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8001b72:	f000 f843 	bl	8001bfc <SystemClock_Config>

	/*Inicialisamos variables */

	/* Initialize LED and BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001b76:	2100      	movs	r1, #0
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7fe fe83 	bl	8000884 <BSP_PB_Init>
	BSP_LED_Init(LED1);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7fe fdfc 	bl	800077c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7fe fdf9 	bl	800077c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f7fe fdf6 	bl	800077c <BSP_LED_Init>
	//estadofrecuencia_t Estado_f;

	//Estado_f=PRIMERO;

	/* definimos el estado inicial de modelo como BUTTON_UP*/
	debounceFSM_init();
 8001b90:	f7fe fd0c 	bl	80005ac <debounceFSM_init>

   /* Inicializa el retardo en 40 ms */
	delayInit(&Delay1, TIME1);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	2128      	movs	r1, #40	; 0x28
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fd92 	bl	80006c4 <delayInit>
	delayInit(&Delay2, TIME2);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2164      	movs	r1, #100	; 0x64
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fd8c 	bl	80006c4 <delayInit>
	delayInit(&Delay3, TIME3);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fd86 	bl	80006c4 <delayInit>
    	 * cambiara de estado la variable Estado. Tambien se
    	 * generara un cambio de retorno de la función eadKey()
    	 * de true -> false o de false a true cada ves que se
    	 * detecte un BUTTON_FALLING válido.
    	 * */
    	debounceFSM_update(&Delay1);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fd01 	bl	80005c4 <debounceFSM_update>
    	 * o verdadero producto de precionar un boton de manera
    	 * válida de acuerdo a las normas del antirrebote. En ambos
    	 * casos generara un cambio en la frecuencia de parpadeo
    	 * del LED2
    	*/
    	if (readKey()){
 8001bc2:	f7fe fce7 	bl	8000594 <readKey>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <main+0x78>
    		if (delayRead(&Delay2)){
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fd95 	bl	8000700 <delayRead>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ed      	beq.n	8001bb8 <main+0x4c>
    			BSP_LED_Toggle(LED2);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7fe fe37 	bl	8000850 <BSP_LED_Toggle>
 8001be2:	e7e9      	b.n	8001bb8 <main+0x4c>
    		}
    	}
    	else{
    		if (delayRead(&Delay3)){
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fd8a 	bl	8000700 <delayRead>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0e2      	beq.n	8001bb8 <main+0x4c>
    			BSP_LED_Toggle(LED2);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7fe fe2c 	bl	8000850 <BSP_LED_Toggle>
    	debounceFSM_update(&Delay1);
 8001bf8:	e7de      	b.n	8001bb8 <main+0x4c>
	...

08001bfc <SystemClock_Config>:

/* FIN FUNCIONES PROPIAS */


static void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	; 0x50
 8001c00:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <SystemClock_Config+0xbc>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <SystemClock_Config+0xbc>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <SystemClock_Config+0xbc>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <SystemClock_Config+0xc0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <SystemClock_Config+0xc0>)
 8001c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <SystemClock_Config+0xc0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c3e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c42:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c44:	2302      	movs	r3, #2
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001c4e:	2308      	movs	r3, #8
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8001c52:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fb1d 	bl	80012a4 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8001c70:	f000 f826 	bl	8001cc0 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c74:	f7ff fac6 	bl	8001204 <HAL_PWREx_EnableOverDrive>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8001c7e:	f000 f81f 	bl	8001cc0 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001c82:	230f      	movs	r3, #15
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2302      	movs	r3, #2
 8001c88:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c9e:	2105      	movs	r1, #5
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fd77 	bl	8001794 <HAL_RCC_ClockConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8001cac:	f000 f808 	bl	8001cc0 <Error_Handler>
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	3750      	adds	r7, #80	; 0x50
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7fe fda9 	bl	800081c <BSP_LED_On>
	while (1)
 8001cca:	e7fe      	b.n	8001cca <Error_Handler+0xa>

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cd2:	e003      	b.n	8001cdc <LoopCopyDataInit>

08001cd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cda:	3104      	adds	r1, #4

08001cdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cdc:	480b      	ldr	r0, [pc, #44]	; (8001d0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ce0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ce2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ce4:	d3f6      	bcc.n	8001cd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ce8:	e002      	b.n	8001cf0 <LoopFillZerobss>

08001cea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cec:	f842 3b04 	str.w	r3, [r2], #4

08001cf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cf4:	d3f9      	bcc.n	8001cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cf6:	f7fe fe31 	bl	800095c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f000 f847 	bl	8001d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff ff35 	bl	8001b6c <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d04:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001d08:	08002f1c 	.word	0x08002f1c
  ldr  r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d10:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001d14:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001d18:	200000bc 	.word	0x200000bc

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>
	...

08001d20 <__assert_func>:
 8001d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d22:	4614      	mov	r4, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <__assert_func+0x2c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4605      	mov	r5, r0
 8001d2c:	68d8      	ldr	r0, [r3, #12]
 8001d2e:	b14c      	cbz	r4, 8001d44 <__assert_func+0x24>
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <__assert_func+0x30>)
 8001d32:	9100      	str	r1, [sp, #0]
 8001d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001d38:	4906      	ldr	r1, [pc, #24]	; (8001d54 <__assert_func+0x34>)
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	f000 f814 	bl	8001d68 <fiprintf>
 8001d40:	f000 fbfe 	bl	8002540 <abort>
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__assert_func+0x38>)
 8001d46:	461c      	mov	r4, r3
 8001d48:	e7f3      	b.n	8001d32 <__assert_func+0x12>
 8001d4a:	bf00      	nop
 8001d4c:	20000020 	.word	0x20000020
 8001d50:	08002e38 	.word	0x08002e38
 8001d54:	08002e45 	.word	0x08002e45
 8001d58:	08002e73 	.word	0x08002e73

08001d5c <__errno>:
 8001d5c:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <__errno+0x8>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000020 	.word	0x20000020

08001d68 <fiprintf>:
 8001d68:	b40e      	push	{r1, r2, r3}
 8001d6a:	b503      	push	{r0, r1, lr}
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	ab03      	add	r3, sp, #12
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <fiprintf+0x20>)
 8001d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d76:	6800      	ldr	r0, [r0, #0]
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	f000 f85d 	bl	8001e38 <_vfiprintf_r>
 8001d7e:	b002      	add	sp, #8
 8001d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d84:	b003      	add	sp, #12
 8001d86:	4770      	bx	lr
 8001d88:	20000020 	.word	0x20000020

08001d8c <__libc_init_array>:
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	4d0d      	ldr	r5, [pc, #52]	; (8001dc4 <__libc_init_array+0x38>)
 8001d90:	4c0d      	ldr	r4, [pc, #52]	; (8001dc8 <__libc_init_array+0x3c>)
 8001d92:	1b64      	subs	r4, r4, r5
 8001d94:	10a4      	asrs	r4, r4, #2
 8001d96:	2600      	movs	r6, #0
 8001d98:	42a6      	cmp	r6, r4
 8001d9a:	d109      	bne.n	8001db0 <__libc_init_array+0x24>
 8001d9c:	4d0b      	ldr	r5, [pc, #44]	; (8001dcc <__libc_init_array+0x40>)
 8001d9e:	4c0c      	ldr	r4, [pc, #48]	; (8001dd0 <__libc_init_array+0x44>)
 8001da0:	f000 ffe2 	bl	8002d68 <_init>
 8001da4:	1b64      	subs	r4, r4, r5
 8001da6:	10a4      	asrs	r4, r4, #2
 8001da8:	2600      	movs	r6, #0
 8001daa:	42a6      	cmp	r6, r4
 8001dac:	d105      	bne.n	8001dba <__libc_init_array+0x2e>
 8001dae:	bd70      	pop	{r4, r5, r6, pc}
 8001db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db4:	4798      	blx	r3
 8001db6:	3601      	adds	r6, #1
 8001db8:	e7ee      	b.n	8001d98 <__libc_init_array+0xc>
 8001dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dbe:	4798      	blx	r3
 8001dc0:	3601      	adds	r6, #1
 8001dc2:	e7f2      	b.n	8001daa <__libc_init_array+0x1e>
 8001dc4:	08002f14 	.word	0x08002f14
 8001dc8:	08002f14 	.word	0x08002f14
 8001dcc:	08002f14 	.word	0x08002f14
 8001dd0:	08002f18 	.word	0x08002f18

08001dd4 <memset>:
 8001dd4:	4402      	add	r2, r0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d100      	bne.n	8001dde <memset+0xa>
 8001ddc:	4770      	bx	lr
 8001dde:	f803 1b01 	strb.w	r1, [r3], #1
 8001de2:	e7f9      	b.n	8001dd8 <memset+0x4>

08001de4 <__sfputc_r>:
 8001de4:	6893      	ldr	r3, [r2, #8]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	b410      	push	{r4}
 8001dec:	6093      	str	r3, [r2, #8]
 8001dee:	da08      	bge.n	8001e02 <__sfputc_r+0x1e>
 8001df0:	6994      	ldr	r4, [r2, #24]
 8001df2:	42a3      	cmp	r3, r4
 8001df4:	db01      	blt.n	8001dfa <__sfputc_r+0x16>
 8001df6:	290a      	cmp	r1, #10
 8001df8:	d103      	bne.n	8001e02 <__sfputc_r+0x1e>
 8001dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dfe:	f000 badf 	b.w	80023c0 <__swbuf_r>
 8001e02:	6813      	ldr	r3, [r2, #0]
 8001e04:	1c58      	adds	r0, r3, #1
 8001e06:	6010      	str	r0, [r2, #0]
 8001e08:	7019      	strb	r1, [r3, #0]
 8001e0a:	4608      	mov	r0, r1
 8001e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <__sfputs_r>:
 8001e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e14:	4606      	mov	r6, r0
 8001e16:	460f      	mov	r7, r1
 8001e18:	4614      	mov	r4, r2
 8001e1a:	18d5      	adds	r5, r2, r3
 8001e1c:	42ac      	cmp	r4, r5
 8001e1e:	d101      	bne.n	8001e24 <__sfputs_r+0x12>
 8001e20:	2000      	movs	r0, #0
 8001e22:	e007      	b.n	8001e34 <__sfputs_r+0x22>
 8001e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e28:	463a      	mov	r2, r7
 8001e2a:	4630      	mov	r0, r6
 8001e2c:	f7ff ffda 	bl	8001de4 <__sfputc_r>
 8001e30:	1c43      	adds	r3, r0, #1
 8001e32:	d1f3      	bne.n	8001e1c <__sfputs_r+0xa>
 8001e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e38 <_vfiprintf_r>:
 8001e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e3c:	460d      	mov	r5, r1
 8001e3e:	b09d      	sub	sp, #116	; 0x74
 8001e40:	4614      	mov	r4, r2
 8001e42:	4698      	mov	r8, r3
 8001e44:	4606      	mov	r6, r0
 8001e46:	b118      	cbz	r0, 8001e50 <_vfiprintf_r+0x18>
 8001e48:	6983      	ldr	r3, [r0, #24]
 8001e4a:	b90b      	cbnz	r3, 8001e50 <_vfiprintf_r+0x18>
 8001e4c:	f000 fc9a 	bl	8002784 <__sinit>
 8001e50:	4b89      	ldr	r3, [pc, #548]	; (8002078 <_vfiprintf_r+0x240>)
 8001e52:	429d      	cmp	r5, r3
 8001e54:	d11b      	bne.n	8001e8e <_vfiprintf_r+0x56>
 8001e56:	6875      	ldr	r5, [r6, #4]
 8001e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e5a:	07d9      	lsls	r1, r3, #31
 8001e5c:	d405      	bmi.n	8001e6a <_vfiprintf_r+0x32>
 8001e5e:	89ab      	ldrh	r3, [r5, #12]
 8001e60:	059a      	lsls	r2, r3, #22
 8001e62:	d402      	bmi.n	8001e6a <_vfiprintf_r+0x32>
 8001e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e66:	f000 fd2b 	bl	80028c0 <__retarget_lock_acquire_recursive>
 8001e6a:	89ab      	ldrh	r3, [r5, #12]
 8001e6c:	071b      	lsls	r3, r3, #28
 8001e6e:	d501      	bpl.n	8001e74 <_vfiprintf_r+0x3c>
 8001e70:	692b      	ldr	r3, [r5, #16]
 8001e72:	b9eb      	cbnz	r3, 8001eb0 <_vfiprintf_r+0x78>
 8001e74:	4629      	mov	r1, r5
 8001e76:	4630      	mov	r0, r6
 8001e78:	f000 faf4 	bl	8002464 <__swsetup_r>
 8001e7c:	b1c0      	cbz	r0, 8001eb0 <_vfiprintf_r+0x78>
 8001e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e80:	07dc      	lsls	r4, r3, #31
 8001e82:	d50e      	bpl.n	8001ea2 <_vfiprintf_r+0x6a>
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e88:	b01d      	add	sp, #116	; 0x74
 8001e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <_vfiprintf_r+0x244>)
 8001e90:	429d      	cmp	r5, r3
 8001e92:	d101      	bne.n	8001e98 <_vfiprintf_r+0x60>
 8001e94:	68b5      	ldr	r5, [r6, #8]
 8001e96:	e7df      	b.n	8001e58 <_vfiprintf_r+0x20>
 8001e98:	4b79      	ldr	r3, [pc, #484]	; (8002080 <_vfiprintf_r+0x248>)
 8001e9a:	429d      	cmp	r5, r3
 8001e9c:	bf08      	it	eq
 8001e9e:	68f5      	ldreq	r5, [r6, #12]
 8001ea0:	e7da      	b.n	8001e58 <_vfiprintf_r+0x20>
 8001ea2:	89ab      	ldrh	r3, [r5, #12]
 8001ea4:	0598      	lsls	r0, r3, #22
 8001ea6:	d4ed      	bmi.n	8001e84 <_vfiprintf_r+0x4c>
 8001ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001eaa:	f000 fd0a 	bl	80028c2 <__retarget_lock_release_recursive>
 8001eae:	e7e9      	b.n	8001e84 <_vfiprintf_r+0x4c>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ebe:	2330      	movs	r3, #48	; 0x30
 8001ec0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002084 <_vfiprintf_r+0x24c>
 8001ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ec8:	f04f 0901 	mov.w	r9, #1
 8001ecc:	4623      	mov	r3, r4
 8001ece:	469a      	mov	sl, r3
 8001ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ed4:	b10a      	cbz	r2, 8001eda <_vfiprintf_r+0xa2>
 8001ed6:	2a25      	cmp	r2, #37	; 0x25
 8001ed8:	d1f9      	bne.n	8001ece <_vfiprintf_r+0x96>
 8001eda:	ebba 0b04 	subs.w	fp, sl, r4
 8001ede:	d00b      	beq.n	8001ef8 <_vfiprintf_r+0xc0>
 8001ee0:	465b      	mov	r3, fp
 8001ee2:	4622      	mov	r2, r4
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	f7ff ff93 	bl	8001e12 <__sfputs_r>
 8001eec:	3001      	adds	r0, #1
 8001eee:	f000 80aa 	beq.w	8002046 <_vfiprintf_r+0x20e>
 8001ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ef4:	445a      	add	r2, fp
 8001ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8001ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a2 	beq.w	8002046 <_vfiprintf_r+0x20e>
 8001f02:	2300      	movs	r3, #0
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f0c:	f10a 0a01 	add.w	sl, sl, #1
 8001f10:	9304      	str	r3, [sp, #16]
 8001f12:	9307      	str	r3, [sp, #28]
 8001f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f18:	931a      	str	r3, [sp, #104]	; 0x68
 8001f1a:	4654      	mov	r4, sl
 8001f1c:	2205      	movs	r2, #5
 8001f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f22:	4858      	ldr	r0, [pc, #352]	; (8002084 <_vfiprintf_r+0x24c>)
 8001f24:	f7fe f964 	bl	80001f0 <memchr>
 8001f28:	9a04      	ldr	r2, [sp, #16]
 8001f2a:	b9d8      	cbnz	r0, 8001f64 <_vfiprintf_r+0x12c>
 8001f2c:	06d1      	lsls	r1, r2, #27
 8001f2e:	bf44      	itt	mi
 8001f30:	2320      	movmi	r3, #32
 8001f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f36:	0713      	lsls	r3, r2, #28
 8001f38:	bf44      	itt	mi
 8001f3a:	232b      	movmi	r3, #43	; 0x2b
 8001f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f40:	f89a 3000 	ldrb.w	r3, [sl]
 8001f44:	2b2a      	cmp	r3, #42	; 0x2a
 8001f46:	d015      	beq.n	8001f74 <_vfiprintf_r+0x13c>
 8001f48:	9a07      	ldr	r2, [sp, #28]
 8001f4a:	4654      	mov	r4, sl
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f04f 0c0a 	mov.w	ip, #10
 8001f52:	4621      	mov	r1, r4
 8001f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f58:	3b30      	subs	r3, #48	; 0x30
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	d94e      	bls.n	8001ffc <_vfiprintf_r+0x1c4>
 8001f5e:	b1b0      	cbz	r0, 8001f8e <_vfiprintf_r+0x156>
 8001f60:	9207      	str	r2, [sp, #28]
 8001f62:	e014      	b.n	8001f8e <_vfiprintf_r+0x156>
 8001f64:	eba0 0308 	sub.w	r3, r0, r8
 8001f68:	fa09 f303 	lsl.w	r3, r9, r3
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	9304      	str	r3, [sp, #16]
 8001f70:	46a2      	mov	sl, r4
 8001f72:	e7d2      	b.n	8001f1a <_vfiprintf_r+0xe2>
 8001f74:	9b03      	ldr	r3, [sp, #12]
 8001f76:	1d19      	adds	r1, r3, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	9103      	str	r1, [sp, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bfbb      	ittet	lt
 8001f80:	425b      	neglt	r3, r3
 8001f82:	f042 0202 	orrlt.w	r2, r2, #2
 8001f86:	9307      	strge	r3, [sp, #28]
 8001f88:	9307      	strlt	r3, [sp, #28]
 8001f8a:	bfb8      	it	lt
 8001f8c:	9204      	strlt	r2, [sp, #16]
 8001f8e:	7823      	ldrb	r3, [r4, #0]
 8001f90:	2b2e      	cmp	r3, #46	; 0x2e
 8001f92:	d10c      	bne.n	8001fae <_vfiprintf_r+0x176>
 8001f94:	7863      	ldrb	r3, [r4, #1]
 8001f96:	2b2a      	cmp	r3, #42	; 0x2a
 8001f98:	d135      	bne.n	8002006 <_vfiprintf_r+0x1ce>
 8001f9a:	9b03      	ldr	r3, [sp, #12]
 8001f9c:	1d1a      	adds	r2, r3, #4
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	9203      	str	r2, [sp, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bfb8      	it	lt
 8001fa6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001faa:	3402      	adds	r4, #2
 8001fac:	9305      	str	r3, [sp, #20]
 8001fae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002094 <_vfiprintf_r+0x25c>
 8001fb2:	7821      	ldrb	r1, [r4, #0]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	4650      	mov	r0, sl
 8001fb8:	f7fe f91a 	bl	80001f0 <memchr>
 8001fbc:	b140      	cbz	r0, 8001fd0 <_vfiprintf_r+0x198>
 8001fbe:	2340      	movs	r3, #64	; 0x40
 8001fc0:	eba0 000a 	sub.w	r0, r0, sl
 8001fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8001fc8:	9b04      	ldr	r3, [sp, #16]
 8001fca:	4303      	orrs	r3, r0
 8001fcc:	3401      	adds	r4, #1
 8001fce:	9304      	str	r3, [sp, #16]
 8001fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fd4:	482c      	ldr	r0, [pc, #176]	; (8002088 <_vfiprintf_r+0x250>)
 8001fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fda:	2206      	movs	r2, #6
 8001fdc:	f7fe f908 	bl	80001f0 <memchr>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	d03f      	beq.n	8002064 <_vfiprintf_r+0x22c>
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <_vfiprintf_r+0x254>)
 8001fe6:	bb1b      	cbnz	r3, 8002030 <_vfiprintf_r+0x1f8>
 8001fe8:	9b03      	ldr	r3, [sp, #12]
 8001fea:	3307      	adds	r3, #7
 8001fec:	f023 0307 	bic.w	r3, r3, #7
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	9303      	str	r3, [sp, #12]
 8001ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ff6:	443b      	add	r3, r7
 8001ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8001ffa:	e767      	b.n	8001ecc <_vfiprintf_r+0x94>
 8001ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002000:	460c      	mov	r4, r1
 8002002:	2001      	movs	r0, #1
 8002004:	e7a5      	b.n	8001f52 <_vfiprintf_r+0x11a>
 8002006:	2300      	movs	r3, #0
 8002008:	3401      	adds	r4, #1
 800200a:	9305      	str	r3, [sp, #20]
 800200c:	4619      	mov	r1, r3
 800200e:	f04f 0c0a 	mov.w	ip, #10
 8002012:	4620      	mov	r0, r4
 8002014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002018:	3a30      	subs	r2, #48	; 0x30
 800201a:	2a09      	cmp	r2, #9
 800201c:	d903      	bls.n	8002026 <_vfiprintf_r+0x1ee>
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0c5      	beq.n	8001fae <_vfiprintf_r+0x176>
 8002022:	9105      	str	r1, [sp, #20]
 8002024:	e7c3      	b.n	8001fae <_vfiprintf_r+0x176>
 8002026:	fb0c 2101 	mla	r1, ip, r1, r2
 800202a:	4604      	mov	r4, r0
 800202c:	2301      	movs	r3, #1
 800202e:	e7f0      	b.n	8002012 <_vfiprintf_r+0x1da>
 8002030:	ab03      	add	r3, sp, #12
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	462a      	mov	r2, r5
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <_vfiprintf_r+0x258>)
 8002038:	a904      	add	r1, sp, #16
 800203a:	4630      	mov	r0, r6
 800203c:	f3af 8000 	nop.w
 8002040:	4607      	mov	r7, r0
 8002042:	1c78      	adds	r0, r7, #1
 8002044:	d1d6      	bne.n	8001ff4 <_vfiprintf_r+0x1bc>
 8002046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002048:	07d9      	lsls	r1, r3, #31
 800204a:	d405      	bmi.n	8002058 <_vfiprintf_r+0x220>
 800204c:	89ab      	ldrh	r3, [r5, #12]
 800204e:	059a      	lsls	r2, r3, #22
 8002050:	d402      	bmi.n	8002058 <_vfiprintf_r+0x220>
 8002052:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002054:	f000 fc35 	bl	80028c2 <__retarget_lock_release_recursive>
 8002058:	89ab      	ldrh	r3, [r5, #12]
 800205a:	065b      	lsls	r3, r3, #25
 800205c:	f53f af12 	bmi.w	8001e84 <_vfiprintf_r+0x4c>
 8002060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002062:	e711      	b.n	8001e88 <_vfiprintf_r+0x50>
 8002064:	ab03      	add	r3, sp, #12
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	462a      	mov	r2, r5
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <_vfiprintf_r+0x258>)
 800206c:	a904      	add	r1, sp, #16
 800206e:	4630      	mov	r0, r6
 8002070:	f000 f880 	bl	8002174 <_printf_i>
 8002074:	e7e4      	b.n	8002040 <_vfiprintf_r+0x208>
 8002076:	bf00      	nop
 8002078:	08002ecc 	.word	0x08002ecc
 800207c:	08002eec 	.word	0x08002eec
 8002080:	08002eac 	.word	0x08002eac
 8002084:	08002e78 	.word	0x08002e78
 8002088:	08002e82 	.word	0x08002e82
 800208c:	00000000 	.word	0x00000000
 8002090:	08001e13 	.word	0x08001e13
 8002094:	08002e7e 	.word	0x08002e7e

08002098 <_printf_common>:
 8002098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800209c:	4616      	mov	r6, r2
 800209e:	4699      	mov	r9, r3
 80020a0:	688a      	ldr	r2, [r1, #8]
 80020a2:	690b      	ldr	r3, [r1, #16]
 80020a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020a8:	4293      	cmp	r3, r2
 80020aa:	bfb8      	it	lt
 80020ac:	4613      	movlt	r3, r2
 80020ae:	6033      	str	r3, [r6, #0]
 80020b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020b4:	4607      	mov	r7, r0
 80020b6:	460c      	mov	r4, r1
 80020b8:	b10a      	cbz	r2, 80020be <_printf_common+0x26>
 80020ba:	3301      	adds	r3, #1
 80020bc:	6033      	str	r3, [r6, #0]
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	0699      	lsls	r1, r3, #26
 80020c2:	bf42      	ittt	mi
 80020c4:	6833      	ldrmi	r3, [r6, #0]
 80020c6:	3302      	addmi	r3, #2
 80020c8:	6033      	strmi	r3, [r6, #0]
 80020ca:	6825      	ldr	r5, [r4, #0]
 80020cc:	f015 0506 	ands.w	r5, r5, #6
 80020d0:	d106      	bne.n	80020e0 <_printf_common+0x48>
 80020d2:	f104 0a19 	add.w	sl, r4, #25
 80020d6:	68e3      	ldr	r3, [r4, #12]
 80020d8:	6832      	ldr	r2, [r6, #0]
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	42ab      	cmp	r3, r5
 80020de:	dc26      	bgt.n	800212e <_printf_common+0x96>
 80020e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80020e4:	1e13      	subs	r3, r2, #0
 80020e6:	6822      	ldr	r2, [r4, #0]
 80020e8:	bf18      	it	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	0692      	lsls	r2, r2, #26
 80020ee:	d42b      	bmi.n	8002148 <_printf_common+0xb0>
 80020f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020f4:	4649      	mov	r1, r9
 80020f6:	4638      	mov	r0, r7
 80020f8:	47c0      	blx	r8
 80020fa:	3001      	adds	r0, #1
 80020fc:	d01e      	beq.n	800213c <_printf_common+0xa4>
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	68e5      	ldr	r5, [r4, #12]
 8002102:	6832      	ldr	r2, [r6, #0]
 8002104:	f003 0306 	and.w	r3, r3, #6
 8002108:	2b04      	cmp	r3, #4
 800210a:	bf08      	it	eq
 800210c:	1aad      	subeq	r5, r5, r2
 800210e:	68a3      	ldr	r3, [r4, #8]
 8002110:	6922      	ldr	r2, [r4, #16]
 8002112:	bf0c      	ite	eq
 8002114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002118:	2500      	movne	r5, #0
 800211a:	4293      	cmp	r3, r2
 800211c:	bfc4      	itt	gt
 800211e:	1a9b      	subgt	r3, r3, r2
 8002120:	18ed      	addgt	r5, r5, r3
 8002122:	2600      	movs	r6, #0
 8002124:	341a      	adds	r4, #26
 8002126:	42b5      	cmp	r5, r6
 8002128:	d11a      	bne.n	8002160 <_printf_common+0xc8>
 800212a:	2000      	movs	r0, #0
 800212c:	e008      	b.n	8002140 <_printf_common+0xa8>
 800212e:	2301      	movs	r3, #1
 8002130:	4652      	mov	r2, sl
 8002132:	4649      	mov	r1, r9
 8002134:	4638      	mov	r0, r7
 8002136:	47c0      	blx	r8
 8002138:	3001      	adds	r0, #1
 800213a:	d103      	bne.n	8002144 <_printf_common+0xac>
 800213c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002144:	3501      	adds	r5, #1
 8002146:	e7c6      	b.n	80020d6 <_printf_common+0x3e>
 8002148:	18e1      	adds	r1, r4, r3
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	2030      	movs	r0, #48	; 0x30
 800214e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002152:	4422      	add	r2, r4
 8002154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800215c:	3302      	adds	r3, #2
 800215e:	e7c7      	b.n	80020f0 <_printf_common+0x58>
 8002160:	2301      	movs	r3, #1
 8002162:	4622      	mov	r2, r4
 8002164:	4649      	mov	r1, r9
 8002166:	4638      	mov	r0, r7
 8002168:	47c0      	blx	r8
 800216a:	3001      	adds	r0, #1
 800216c:	d0e6      	beq.n	800213c <_printf_common+0xa4>
 800216e:	3601      	adds	r6, #1
 8002170:	e7d9      	b.n	8002126 <_printf_common+0x8e>
	...

08002174 <_printf_i>:
 8002174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002178:	7e0f      	ldrb	r7, [r1, #24]
 800217a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800217c:	2f78      	cmp	r7, #120	; 0x78
 800217e:	4691      	mov	r9, r2
 8002180:	4680      	mov	r8, r0
 8002182:	460c      	mov	r4, r1
 8002184:	469a      	mov	sl, r3
 8002186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800218a:	d807      	bhi.n	800219c <_printf_i+0x28>
 800218c:	2f62      	cmp	r7, #98	; 0x62
 800218e:	d80a      	bhi.n	80021a6 <_printf_i+0x32>
 8002190:	2f00      	cmp	r7, #0
 8002192:	f000 80d8 	beq.w	8002346 <_printf_i+0x1d2>
 8002196:	2f58      	cmp	r7, #88	; 0x58
 8002198:	f000 80a3 	beq.w	80022e2 <_printf_i+0x16e>
 800219c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021a4:	e03a      	b.n	800221c <_printf_i+0xa8>
 80021a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021aa:	2b15      	cmp	r3, #21
 80021ac:	d8f6      	bhi.n	800219c <_printf_i+0x28>
 80021ae:	a101      	add	r1, pc, #4	; (adr r1, 80021b4 <_printf_i+0x40>)
 80021b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021b4:	0800220d 	.word	0x0800220d
 80021b8:	08002221 	.word	0x08002221
 80021bc:	0800219d 	.word	0x0800219d
 80021c0:	0800219d 	.word	0x0800219d
 80021c4:	0800219d 	.word	0x0800219d
 80021c8:	0800219d 	.word	0x0800219d
 80021cc:	08002221 	.word	0x08002221
 80021d0:	0800219d 	.word	0x0800219d
 80021d4:	0800219d 	.word	0x0800219d
 80021d8:	0800219d 	.word	0x0800219d
 80021dc:	0800219d 	.word	0x0800219d
 80021e0:	0800232d 	.word	0x0800232d
 80021e4:	08002251 	.word	0x08002251
 80021e8:	0800230f 	.word	0x0800230f
 80021ec:	0800219d 	.word	0x0800219d
 80021f0:	0800219d 	.word	0x0800219d
 80021f4:	0800234f 	.word	0x0800234f
 80021f8:	0800219d 	.word	0x0800219d
 80021fc:	08002251 	.word	0x08002251
 8002200:	0800219d 	.word	0x0800219d
 8002204:	0800219d 	.word	0x0800219d
 8002208:	08002317 	.word	0x08002317
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	1d1a      	adds	r2, r3, #4
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	602a      	str	r2, [r5, #0]
 8002214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800221c:	2301      	movs	r3, #1
 800221e:	e0a3      	b.n	8002368 <_printf_i+0x1f4>
 8002220:	6820      	ldr	r0, [r4, #0]
 8002222:	6829      	ldr	r1, [r5, #0]
 8002224:	0606      	lsls	r6, r0, #24
 8002226:	f101 0304 	add.w	r3, r1, #4
 800222a:	d50a      	bpl.n	8002242 <_printf_i+0xce>
 800222c:	680e      	ldr	r6, [r1, #0]
 800222e:	602b      	str	r3, [r5, #0]
 8002230:	2e00      	cmp	r6, #0
 8002232:	da03      	bge.n	800223c <_printf_i+0xc8>
 8002234:	232d      	movs	r3, #45	; 0x2d
 8002236:	4276      	negs	r6, r6
 8002238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800223c:	485e      	ldr	r0, [pc, #376]	; (80023b8 <_printf_i+0x244>)
 800223e:	230a      	movs	r3, #10
 8002240:	e019      	b.n	8002276 <_printf_i+0x102>
 8002242:	680e      	ldr	r6, [r1, #0]
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	f010 0f40 	tst.w	r0, #64	; 0x40
 800224a:	bf18      	it	ne
 800224c:	b236      	sxthne	r6, r6
 800224e:	e7ef      	b.n	8002230 <_printf_i+0xbc>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	6820      	ldr	r0, [r4, #0]
 8002254:	1d19      	adds	r1, r3, #4
 8002256:	6029      	str	r1, [r5, #0]
 8002258:	0601      	lsls	r1, r0, #24
 800225a:	d501      	bpl.n	8002260 <_printf_i+0xec>
 800225c:	681e      	ldr	r6, [r3, #0]
 800225e:	e002      	b.n	8002266 <_printf_i+0xf2>
 8002260:	0646      	lsls	r6, r0, #25
 8002262:	d5fb      	bpl.n	800225c <_printf_i+0xe8>
 8002264:	881e      	ldrh	r6, [r3, #0]
 8002266:	4854      	ldr	r0, [pc, #336]	; (80023b8 <_printf_i+0x244>)
 8002268:	2f6f      	cmp	r7, #111	; 0x6f
 800226a:	bf0c      	ite	eq
 800226c:	2308      	moveq	r3, #8
 800226e:	230a      	movne	r3, #10
 8002270:	2100      	movs	r1, #0
 8002272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002276:	6865      	ldr	r5, [r4, #4]
 8002278:	60a5      	str	r5, [r4, #8]
 800227a:	2d00      	cmp	r5, #0
 800227c:	bfa2      	ittt	ge
 800227e:	6821      	ldrge	r1, [r4, #0]
 8002280:	f021 0104 	bicge.w	r1, r1, #4
 8002284:	6021      	strge	r1, [r4, #0]
 8002286:	b90e      	cbnz	r6, 800228c <_printf_i+0x118>
 8002288:	2d00      	cmp	r5, #0
 800228a:	d04d      	beq.n	8002328 <_printf_i+0x1b4>
 800228c:	4615      	mov	r5, r2
 800228e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002292:	fb03 6711 	mls	r7, r3, r1, r6
 8002296:	5dc7      	ldrb	r7, [r0, r7]
 8002298:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800229c:	4637      	mov	r7, r6
 800229e:	42bb      	cmp	r3, r7
 80022a0:	460e      	mov	r6, r1
 80022a2:	d9f4      	bls.n	800228e <_printf_i+0x11a>
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d10b      	bne.n	80022c0 <_printf_i+0x14c>
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	07de      	lsls	r6, r3, #31
 80022ac:	d508      	bpl.n	80022c0 <_printf_i+0x14c>
 80022ae:	6923      	ldr	r3, [r4, #16]
 80022b0:	6861      	ldr	r1, [r4, #4]
 80022b2:	4299      	cmp	r1, r3
 80022b4:	bfde      	ittt	le
 80022b6:	2330      	movle	r3, #48	; 0x30
 80022b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80022c0:	1b52      	subs	r2, r2, r5
 80022c2:	6122      	str	r2, [r4, #16]
 80022c4:	f8cd a000 	str.w	sl, [sp]
 80022c8:	464b      	mov	r3, r9
 80022ca:	aa03      	add	r2, sp, #12
 80022cc:	4621      	mov	r1, r4
 80022ce:	4640      	mov	r0, r8
 80022d0:	f7ff fee2 	bl	8002098 <_printf_common>
 80022d4:	3001      	adds	r0, #1
 80022d6:	d14c      	bne.n	8002372 <_printf_i+0x1fe>
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022dc:	b004      	add	sp, #16
 80022de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e2:	4835      	ldr	r0, [pc, #212]	; (80023b8 <_printf_i+0x244>)
 80022e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80022e8:	6829      	ldr	r1, [r5, #0]
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80022f0:	6029      	str	r1, [r5, #0]
 80022f2:	061d      	lsls	r5, r3, #24
 80022f4:	d514      	bpl.n	8002320 <_printf_i+0x1ac>
 80022f6:	07df      	lsls	r7, r3, #31
 80022f8:	bf44      	itt	mi
 80022fa:	f043 0320 	orrmi.w	r3, r3, #32
 80022fe:	6023      	strmi	r3, [r4, #0]
 8002300:	b91e      	cbnz	r6, 800230a <_printf_i+0x196>
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	f023 0320 	bic.w	r3, r3, #32
 8002308:	6023      	str	r3, [r4, #0]
 800230a:	2310      	movs	r3, #16
 800230c:	e7b0      	b.n	8002270 <_printf_i+0xfc>
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	f043 0320 	orr.w	r3, r3, #32
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	2378      	movs	r3, #120	; 0x78
 8002318:	4828      	ldr	r0, [pc, #160]	; (80023bc <_printf_i+0x248>)
 800231a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800231e:	e7e3      	b.n	80022e8 <_printf_i+0x174>
 8002320:	0659      	lsls	r1, r3, #25
 8002322:	bf48      	it	mi
 8002324:	b2b6      	uxthmi	r6, r6
 8002326:	e7e6      	b.n	80022f6 <_printf_i+0x182>
 8002328:	4615      	mov	r5, r2
 800232a:	e7bb      	b.n	80022a4 <_printf_i+0x130>
 800232c:	682b      	ldr	r3, [r5, #0]
 800232e:	6826      	ldr	r6, [r4, #0]
 8002330:	6961      	ldr	r1, [r4, #20]
 8002332:	1d18      	adds	r0, r3, #4
 8002334:	6028      	str	r0, [r5, #0]
 8002336:	0635      	lsls	r5, r6, #24
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	d501      	bpl.n	8002340 <_printf_i+0x1cc>
 800233c:	6019      	str	r1, [r3, #0]
 800233e:	e002      	b.n	8002346 <_printf_i+0x1d2>
 8002340:	0670      	lsls	r0, r6, #25
 8002342:	d5fb      	bpl.n	800233c <_printf_i+0x1c8>
 8002344:	8019      	strh	r1, [r3, #0]
 8002346:	2300      	movs	r3, #0
 8002348:	6123      	str	r3, [r4, #16]
 800234a:	4615      	mov	r5, r2
 800234c:	e7ba      	b.n	80022c4 <_printf_i+0x150>
 800234e:	682b      	ldr	r3, [r5, #0]
 8002350:	1d1a      	adds	r2, r3, #4
 8002352:	602a      	str	r2, [r5, #0]
 8002354:	681d      	ldr	r5, [r3, #0]
 8002356:	6862      	ldr	r2, [r4, #4]
 8002358:	2100      	movs	r1, #0
 800235a:	4628      	mov	r0, r5
 800235c:	f7fd ff48 	bl	80001f0 <memchr>
 8002360:	b108      	cbz	r0, 8002366 <_printf_i+0x1f2>
 8002362:	1b40      	subs	r0, r0, r5
 8002364:	6060      	str	r0, [r4, #4]
 8002366:	6863      	ldr	r3, [r4, #4]
 8002368:	6123      	str	r3, [r4, #16]
 800236a:	2300      	movs	r3, #0
 800236c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002370:	e7a8      	b.n	80022c4 <_printf_i+0x150>
 8002372:	6923      	ldr	r3, [r4, #16]
 8002374:	462a      	mov	r2, r5
 8002376:	4649      	mov	r1, r9
 8002378:	4640      	mov	r0, r8
 800237a:	47d0      	blx	sl
 800237c:	3001      	adds	r0, #1
 800237e:	d0ab      	beq.n	80022d8 <_printf_i+0x164>
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	079b      	lsls	r3, r3, #30
 8002384:	d413      	bmi.n	80023ae <_printf_i+0x23a>
 8002386:	68e0      	ldr	r0, [r4, #12]
 8002388:	9b03      	ldr	r3, [sp, #12]
 800238a:	4298      	cmp	r0, r3
 800238c:	bfb8      	it	lt
 800238e:	4618      	movlt	r0, r3
 8002390:	e7a4      	b.n	80022dc <_printf_i+0x168>
 8002392:	2301      	movs	r3, #1
 8002394:	4632      	mov	r2, r6
 8002396:	4649      	mov	r1, r9
 8002398:	4640      	mov	r0, r8
 800239a:	47d0      	blx	sl
 800239c:	3001      	adds	r0, #1
 800239e:	d09b      	beq.n	80022d8 <_printf_i+0x164>
 80023a0:	3501      	adds	r5, #1
 80023a2:	68e3      	ldr	r3, [r4, #12]
 80023a4:	9903      	ldr	r1, [sp, #12]
 80023a6:	1a5b      	subs	r3, r3, r1
 80023a8:	42ab      	cmp	r3, r5
 80023aa:	dcf2      	bgt.n	8002392 <_printf_i+0x21e>
 80023ac:	e7eb      	b.n	8002386 <_printf_i+0x212>
 80023ae:	2500      	movs	r5, #0
 80023b0:	f104 0619 	add.w	r6, r4, #25
 80023b4:	e7f5      	b.n	80023a2 <_printf_i+0x22e>
 80023b6:	bf00      	nop
 80023b8:	08002e89 	.word	0x08002e89
 80023bc:	08002e9a 	.word	0x08002e9a

080023c0 <__swbuf_r>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	460e      	mov	r6, r1
 80023c4:	4614      	mov	r4, r2
 80023c6:	4605      	mov	r5, r0
 80023c8:	b118      	cbz	r0, 80023d2 <__swbuf_r+0x12>
 80023ca:	6983      	ldr	r3, [r0, #24]
 80023cc:	b90b      	cbnz	r3, 80023d2 <__swbuf_r+0x12>
 80023ce:	f000 f9d9 	bl	8002784 <__sinit>
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <__swbuf_r+0x98>)
 80023d4:	429c      	cmp	r4, r3
 80023d6:	d12b      	bne.n	8002430 <__swbuf_r+0x70>
 80023d8:	686c      	ldr	r4, [r5, #4]
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	60a3      	str	r3, [r4, #8]
 80023de:	89a3      	ldrh	r3, [r4, #12]
 80023e0:	071a      	lsls	r2, r3, #28
 80023e2:	d52f      	bpl.n	8002444 <__swbuf_r+0x84>
 80023e4:	6923      	ldr	r3, [r4, #16]
 80023e6:	b36b      	cbz	r3, 8002444 <__swbuf_r+0x84>
 80023e8:	6923      	ldr	r3, [r4, #16]
 80023ea:	6820      	ldr	r0, [r4, #0]
 80023ec:	1ac0      	subs	r0, r0, r3
 80023ee:	6963      	ldr	r3, [r4, #20]
 80023f0:	b2f6      	uxtb	r6, r6
 80023f2:	4283      	cmp	r3, r0
 80023f4:	4637      	mov	r7, r6
 80023f6:	dc04      	bgt.n	8002402 <__swbuf_r+0x42>
 80023f8:	4621      	mov	r1, r4
 80023fa:	4628      	mov	r0, r5
 80023fc:	f000 f92e 	bl	800265c <_fflush_r>
 8002400:	bb30      	cbnz	r0, 8002450 <__swbuf_r+0x90>
 8002402:	68a3      	ldr	r3, [r4, #8]
 8002404:	3b01      	subs	r3, #1
 8002406:	60a3      	str	r3, [r4, #8]
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	6022      	str	r2, [r4, #0]
 800240e:	701e      	strb	r6, [r3, #0]
 8002410:	6963      	ldr	r3, [r4, #20]
 8002412:	3001      	adds	r0, #1
 8002414:	4283      	cmp	r3, r0
 8002416:	d004      	beq.n	8002422 <__swbuf_r+0x62>
 8002418:	89a3      	ldrh	r3, [r4, #12]
 800241a:	07db      	lsls	r3, r3, #31
 800241c:	d506      	bpl.n	800242c <__swbuf_r+0x6c>
 800241e:	2e0a      	cmp	r6, #10
 8002420:	d104      	bne.n	800242c <__swbuf_r+0x6c>
 8002422:	4621      	mov	r1, r4
 8002424:	4628      	mov	r0, r5
 8002426:	f000 f919 	bl	800265c <_fflush_r>
 800242a:	b988      	cbnz	r0, 8002450 <__swbuf_r+0x90>
 800242c:	4638      	mov	r0, r7
 800242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <__swbuf_r+0x9c>)
 8002432:	429c      	cmp	r4, r3
 8002434:	d101      	bne.n	800243a <__swbuf_r+0x7a>
 8002436:	68ac      	ldr	r4, [r5, #8]
 8002438:	e7cf      	b.n	80023da <__swbuf_r+0x1a>
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <__swbuf_r+0xa0>)
 800243c:	429c      	cmp	r4, r3
 800243e:	bf08      	it	eq
 8002440:	68ec      	ldreq	r4, [r5, #12]
 8002442:	e7ca      	b.n	80023da <__swbuf_r+0x1a>
 8002444:	4621      	mov	r1, r4
 8002446:	4628      	mov	r0, r5
 8002448:	f000 f80c 	bl	8002464 <__swsetup_r>
 800244c:	2800      	cmp	r0, #0
 800244e:	d0cb      	beq.n	80023e8 <__swbuf_r+0x28>
 8002450:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002454:	e7ea      	b.n	800242c <__swbuf_r+0x6c>
 8002456:	bf00      	nop
 8002458:	08002ecc 	.word	0x08002ecc
 800245c:	08002eec 	.word	0x08002eec
 8002460:	08002eac 	.word	0x08002eac

08002464 <__swsetup_r>:
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <__swsetup_r+0xcc>)
 8002466:	b570      	push	{r4, r5, r6, lr}
 8002468:	681d      	ldr	r5, [r3, #0]
 800246a:	4606      	mov	r6, r0
 800246c:	460c      	mov	r4, r1
 800246e:	b125      	cbz	r5, 800247a <__swsetup_r+0x16>
 8002470:	69ab      	ldr	r3, [r5, #24]
 8002472:	b913      	cbnz	r3, 800247a <__swsetup_r+0x16>
 8002474:	4628      	mov	r0, r5
 8002476:	f000 f985 	bl	8002784 <__sinit>
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <__swsetup_r+0xd0>)
 800247c:	429c      	cmp	r4, r3
 800247e:	d10f      	bne.n	80024a0 <__swsetup_r+0x3c>
 8002480:	686c      	ldr	r4, [r5, #4]
 8002482:	89a3      	ldrh	r3, [r4, #12]
 8002484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002488:	0719      	lsls	r1, r3, #28
 800248a:	d42c      	bmi.n	80024e6 <__swsetup_r+0x82>
 800248c:	06dd      	lsls	r5, r3, #27
 800248e:	d411      	bmi.n	80024b4 <__swsetup_r+0x50>
 8002490:	2309      	movs	r3, #9
 8002492:	6033      	str	r3, [r6, #0]
 8002494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002498:	81a3      	strh	r3, [r4, #12]
 800249a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800249e:	e03e      	b.n	800251e <__swsetup_r+0xba>
 80024a0:	4b25      	ldr	r3, [pc, #148]	; (8002538 <__swsetup_r+0xd4>)
 80024a2:	429c      	cmp	r4, r3
 80024a4:	d101      	bne.n	80024aa <__swsetup_r+0x46>
 80024a6:	68ac      	ldr	r4, [r5, #8]
 80024a8:	e7eb      	b.n	8002482 <__swsetup_r+0x1e>
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <__swsetup_r+0xd8>)
 80024ac:	429c      	cmp	r4, r3
 80024ae:	bf08      	it	eq
 80024b0:	68ec      	ldreq	r4, [r5, #12]
 80024b2:	e7e6      	b.n	8002482 <__swsetup_r+0x1e>
 80024b4:	0758      	lsls	r0, r3, #29
 80024b6:	d512      	bpl.n	80024de <__swsetup_r+0x7a>
 80024b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ba:	b141      	cbz	r1, 80024ce <__swsetup_r+0x6a>
 80024bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024c0:	4299      	cmp	r1, r3
 80024c2:	d002      	beq.n	80024ca <__swsetup_r+0x66>
 80024c4:	4630      	mov	r0, r6
 80024c6:	f000 fa63 	bl	8002990 <_free_r>
 80024ca:	2300      	movs	r3, #0
 80024cc:	6363      	str	r3, [r4, #52]	; 0x34
 80024ce:	89a3      	ldrh	r3, [r4, #12]
 80024d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80024d4:	81a3      	strh	r3, [r4, #12]
 80024d6:	2300      	movs	r3, #0
 80024d8:	6063      	str	r3, [r4, #4]
 80024da:	6923      	ldr	r3, [r4, #16]
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	81a3      	strh	r3, [r4, #12]
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	b94b      	cbnz	r3, 80024fe <__swsetup_r+0x9a>
 80024ea:	89a3      	ldrh	r3, [r4, #12]
 80024ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d003      	beq.n	80024fe <__swsetup_r+0x9a>
 80024f6:	4621      	mov	r1, r4
 80024f8:	4630      	mov	r0, r6
 80024fa:	f000 fa09 	bl	8002910 <__smakebuf_r>
 80024fe:	89a0      	ldrh	r0, [r4, #12]
 8002500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002504:	f010 0301 	ands.w	r3, r0, #1
 8002508:	d00a      	beq.n	8002520 <__swsetup_r+0xbc>
 800250a:	2300      	movs	r3, #0
 800250c:	60a3      	str	r3, [r4, #8]
 800250e:	6963      	ldr	r3, [r4, #20]
 8002510:	425b      	negs	r3, r3
 8002512:	61a3      	str	r3, [r4, #24]
 8002514:	6923      	ldr	r3, [r4, #16]
 8002516:	b943      	cbnz	r3, 800252a <__swsetup_r+0xc6>
 8002518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800251c:	d1ba      	bne.n	8002494 <__swsetup_r+0x30>
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	0781      	lsls	r1, r0, #30
 8002522:	bf58      	it	pl
 8002524:	6963      	ldrpl	r3, [r4, #20]
 8002526:	60a3      	str	r3, [r4, #8]
 8002528:	e7f4      	b.n	8002514 <__swsetup_r+0xb0>
 800252a:	2000      	movs	r0, #0
 800252c:	e7f7      	b.n	800251e <__swsetup_r+0xba>
 800252e:	bf00      	nop
 8002530:	20000020 	.word	0x20000020
 8002534:	08002ecc 	.word	0x08002ecc
 8002538:	08002eec 	.word	0x08002eec
 800253c:	08002eac 	.word	0x08002eac

08002540 <abort>:
 8002540:	b508      	push	{r3, lr}
 8002542:	2006      	movs	r0, #6
 8002544:	f000 fb3c 	bl	8002bc0 <raise>
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe fa83 	bl	8000a54 <_exit>
	...

08002550 <__sflush_r>:
 8002550:	898a      	ldrh	r2, [r1, #12]
 8002552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002556:	4605      	mov	r5, r0
 8002558:	0710      	lsls	r0, r2, #28
 800255a:	460c      	mov	r4, r1
 800255c:	d458      	bmi.n	8002610 <__sflush_r+0xc0>
 800255e:	684b      	ldr	r3, [r1, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	dc05      	bgt.n	8002570 <__sflush_r+0x20>
 8002564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	dc02      	bgt.n	8002570 <__sflush_r+0x20>
 800256a:	2000      	movs	r0, #0
 800256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002572:	2e00      	cmp	r6, #0
 8002574:	d0f9      	beq.n	800256a <__sflush_r+0x1a>
 8002576:	2300      	movs	r3, #0
 8002578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800257c:	682f      	ldr	r7, [r5, #0]
 800257e:	602b      	str	r3, [r5, #0]
 8002580:	d032      	beq.n	80025e8 <__sflush_r+0x98>
 8002582:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002584:	89a3      	ldrh	r3, [r4, #12]
 8002586:	075a      	lsls	r2, r3, #29
 8002588:	d505      	bpl.n	8002596 <__sflush_r+0x46>
 800258a:	6863      	ldr	r3, [r4, #4]
 800258c:	1ac0      	subs	r0, r0, r3
 800258e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002590:	b10b      	cbz	r3, 8002596 <__sflush_r+0x46>
 8002592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002594:	1ac0      	subs	r0, r0, r3
 8002596:	2300      	movs	r3, #0
 8002598:	4602      	mov	r2, r0
 800259a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800259c:	6a21      	ldr	r1, [r4, #32]
 800259e:	4628      	mov	r0, r5
 80025a0:	47b0      	blx	r6
 80025a2:	1c43      	adds	r3, r0, #1
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	d106      	bne.n	80025b6 <__sflush_r+0x66>
 80025a8:	6829      	ldr	r1, [r5, #0]
 80025aa:	291d      	cmp	r1, #29
 80025ac:	d82c      	bhi.n	8002608 <__sflush_r+0xb8>
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <__sflush_r+0x108>)
 80025b0:	40ca      	lsrs	r2, r1
 80025b2:	07d6      	lsls	r6, r2, #31
 80025b4:	d528      	bpl.n	8002608 <__sflush_r+0xb8>
 80025b6:	2200      	movs	r2, #0
 80025b8:	6062      	str	r2, [r4, #4]
 80025ba:	04d9      	lsls	r1, r3, #19
 80025bc:	6922      	ldr	r2, [r4, #16]
 80025be:	6022      	str	r2, [r4, #0]
 80025c0:	d504      	bpl.n	80025cc <__sflush_r+0x7c>
 80025c2:	1c42      	adds	r2, r0, #1
 80025c4:	d101      	bne.n	80025ca <__sflush_r+0x7a>
 80025c6:	682b      	ldr	r3, [r5, #0]
 80025c8:	b903      	cbnz	r3, 80025cc <__sflush_r+0x7c>
 80025ca:	6560      	str	r0, [r4, #84]	; 0x54
 80025cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025ce:	602f      	str	r7, [r5, #0]
 80025d0:	2900      	cmp	r1, #0
 80025d2:	d0ca      	beq.n	800256a <__sflush_r+0x1a>
 80025d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025d8:	4299      	cmp	r1, r3
 80025da:	d002      	beq.n	80025e2 <__sflush_r+0x92>
 80025dc:	4628      	mov	r0, r5
 80025de:	f000 f9d7 	bl	8002990 <_free_r>
 80025e2:	2000      	movs	r0, #0
 80025e4:	6360      	str	r0, [r4, #52]	; 0x34
 80025e6:	e7c1      	b.n	800256c <__sflush_r+0x1c>
 80025e8:	6a21      	ldr	r1, [r4, #32]
 80025ea:	2301      	movs	r3, #1
 80025ec:	4628      	mov	r0, r5
 80025ee:	47b0      	blx	r6
 80025f0:	1c41      	adds	r1, r0, #1
 80025f2:	d1c7      	bne.n	8002584 <__sflush_r+0x34>
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0c4      	beq.n	8002584 <__sflush_r+0x34>
 80025fa:	2b1d      	cmp	r3, #29
 80025fc:	d001      	beq.n	8002602 <__sflush_r+0xb2>
 80025fe:	2b16      	cmp	r3, #22
 8002600:	d101      	bne.n	8002606 <__sflush_r+0xb6>
 8002602:	602f      	str	r7, [r5, #0]
 8002604:	e7b1      	b.n	800256a <__sflush_r+0x1a>
 8002606:	89a3      	ldrh	r3, [r4, #12]
 8002608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260c:	81a3      	strh	r3, [r4, #12]
 800260e:	e7ad      	b.n	800256c <__sflush_r+0x1c>
 8002610:	690f      	ldr	r7, [r1, #16]
 8002612:	2f00      	cmp	r7, #0
 8002614:	d0a9      	beq.n	800256a <__sflush_r+0x1a>
 8002616:	0793      	lsls	r3, r2, #30
 8002618:	680e      	ldr	r6, [r1, #0]
 800261a:	bf08      	it	eq
 800261c:	694b      	ldreq	r3, [r1, #20]
 800261e:	600f      	str	r7, [r1, #0]
 8002620:	bf18      	it	ne
 8002622:	2300      	movne	r3, #0
 8002624:	eba6 0807 	sub.w	r8, r6, r7
 8002628:	608b      	str	r3, [r1, #8]
 800262a:	f1b8 0f00 	cmp.w	r8, #0
 800262e:	dd9c      	ble.n	800256a <__sflush_r+0x1a>
 8002630:	6a21      	ldr	r1, [r4, #32]
 8002632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002634:	4643      	mov	r3, r8
 8002636:	463a      	mov	r2, r7
 8002638:	4628      	mov	r0, r5
 800263a:	47b0      	blx	r6
 800263c:	2800      	cmp	r0, #0
 800263e:	dc06      	bgt.n	800264e <__sflush_r+0xfe>
 8002640:	89a3      	ldrh	r3, [r4, #12]
 8002642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002646:	81a3      	strh	r3, [r4, #12]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800264c:	e78e      	b.n	800256c <__sflush_r+0x1c>
 800264e:	4407      	add	r7, r0
 8002650:	eba8 0800 	sub.w	r8, r8, r0
 8002654:	e7e9      	b.n	800262a <__sflush_r+0xda>
 8002656:	bf00      	nop
 8002658:	20400001 	.word	0x20400001

0800265c <_fflush_r>:
 800265c:	b538      	push	{r3, r4, r5, lr}
 800265e:	690b      	ldr	r3, [r1, #16]
 8002660:	4605      	mov	r5, r0
 8002662:	460c      	mov	r4, r1
 8002664:	b913      	cbnz	r3, 800266c <_fflush_r+0x10>
 8002666:	2500      	movs	r5, #0
 8002668:	4628      	mov	r0, r5
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	b118      	cbz	r0, 8002676 <_fflush_r+0x1a>
 800266e:	6983      	ldr	r3, [r0, #24]
 8002670:	b90b      	cbnz	r3, 8002676 <_fflush_r+0x1a>
 8002672:	f000 f887 	bl	8002784 <__sinit>
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <_fflush_r+0x6c>)
 8002678:	429c      	cmp	r4, r3
 800267a:	d11b      	bne.n	80026b4 <_fflush_r+0x58>
 800267c:	686c      	ldr	r4, [r5, #4]
 800267e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ef      	beq.n	8002666 <_fflush_r+0xa>
 8002686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002688:	07d0      	lsls	r0, r2, #31
 800268a:	d404      	bmi.n	8002696 <_fflush_r+0x3a>
 800268c:	0599      	lsls	r1, r3, #22
 800268e:	d402      	bmi.n	8002696 <_fflush_r+0x3a>
 8002690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002692:	f000 f915 	bl	80028c0 <__retarget_lock_acquire_recursive>
 8002696:	4628      	mov	r0, r5
 8002698:	4621      	mov	r1, r4
 800269a:	f7ff ff59 	bl	8002550 <__sflush_r>
 800269e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026a0:	07da      	lsls	r2, r3, #31
 80026a2:	4605      	mov	r5, r0
 80026a4:	d4e0      	bmi.n	8002668 <_fflush_r+0xc>
 80026a6:	89a3      	ldrh	r3, [r4, #12]
 80026a8:	059b      	lsls	r3, r3, #22
 80026aa:	d4dd      	bmi.n	8002668 <_fflush_r+0xc>
 80026ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ae:	f000 f908 	bl	80028c2 <__retarget_lock_release_recursive>
 80026b2:	e7d9      	b.n	8002668 <_fflush_r+0xc>
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <_fflush_r+0x70>)
 80026b6:	429c      	cmp	r4, r3
 80026b8:	d101      	bne.n	80026be <_fflush_r+0x62>
 80026ba:	68ac      	ldr	r4, [r5, #8]
 80026bc:	e7df      	b.n	800267e <_fflush_r+0x22>
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <_fflush_r+0x74>)
 80026c0:	429c      	cmp	r4, r3
 80026c2:	bf08      	it	eq
 80026c4:	68ec      	ldreq	r4, [r5, #12]
 80026c6:	e7da      	b.n	800267e <_fflush_r+0x22>
 80026c8:	08002ecc 	.word	0x08002ecc
 80026cc:	08002eec 	.word	0x08002eec
 80026d0:	08002eac 	.word	0x08002eac

080026d4 <std>:
 80026d4:	2300      	movs	r3, #0
 80026d6:	b510      	push	{r4, lr}
 80026d8:	4604      	mov	r4, r0
 80026da:	e9c0 3300 	strd	r3, r3, [r0]
 80026de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026e2:	6083      	str	r3, [r0, #8]
 80026e4:	8181      	strh	r1, [r0, #12]
 80026e6:	6643      	str	r3, [r0, #100]	; 0x64
 80026e8:	81c2      	strh	r2, [r0, #14]
 80026ea:	6183      	str	r3, [r0, #24]
 80026ec:	4619      	mov	r1, r3
 80026ee:	2208      	movs	r2, #8
 80026f0:	305c      	adds	r0, #92	; 0x5c
 80026f2:	f7ff fb6f 	bl	8001dd4 <memset>
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <std+0x38>)
 80026f8:	6263      	str	r3, [r4, #36]	; 0x24
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <std+0x3c>)
 80026fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <std+0x40>)
 8002700:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <std+0x44>)
 8002704:	6224      	str	r4, [r4, #32]
 8002706:	6323      	str	r3, [r4, #48]	; 0x30
 8002708:	bd10      	pop	{r4, pc}
 800270a:	bf00      	nop
 800270c:	08002bf9 	.word	0x08002bf9
 8002710:	08002c1b 	.word	0x08002c1b
 8002714:	08002c53 	.word	0x08002c53
 8002718:	08002c77 	.word	0x08002c77

0800271c <_cleanup_r>:
 800271c:	4901      	ldr	r1, [pc, #4]	; (8002724 <_cleanup_r+0x8>)
 800271e:	f000 b8af 	b.w	8002880 <_fwalk_reent>
 8002722:	bf00      	nop
 8002724:	0800265d 	.word	0x0800265d

08002728 <__sfmoreglue>:
 8002728:	b570      	push	{r4, r5, r6, lr}
 800272a:	2268      	movs	r2, #104	; 0x68
 800272c:	1e4d      	subs	r5, r1, #1
 800272e:	4355      	muls	r5, r2
 8002730:	460e      	mov	r6, r1
 8002732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002736:	f000 f997 	bl	8002a68 <_malloc_r>
 800273a:	4604      	mov	r4, r0
 800273c:	b140      	cbz	r0, 8002750 <__sfmoreglue+0x28>
 800273e:	2100      	movs	r1, #0
 8002740:	e9c0 1600 	strd	r1, r6, [r0]
 8002744:	300c      	adds	r0, #12
 8002746:	60a0      	str	r0, [r4, #8]
 8002748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800274c:	f7ff fb42 	bl	8001dd4 <memset>
 8002750:	4620      	mov	r0, r4
 8002752:	bd70      	pop	{r4, r5, r6, pc}

08002754 <__sfp_lock_acquire>:
 8002754:	4801      	ldr	r0, [pc, #4]	; (800275c <__sfp_lock_acquire+0x8>)
 8002756:	f000 b8b3 	b.w	80028c0 <__retarget_lock_acquire_recursive>
 800275a:	bf00      	nop
 800275c:	200000ad 	.word	0x200000ad

08002760 <__sfp_lock_release>:
 8002760:	4801      	ldr	r0, [pc, #4]	; (8002768 <__sfp_lock_release+0x8>)
 8002762:	f000 b8ae 	b.w	80028c2 <__retarget_lock_release_recursive>
 8002766:	bf00      	nop
 8002768:	200000ad 	.word	0x200000ad

0800276c <__sinit_lock_acquire>:
 800276c:	4801      	ldr	r0, [pc, #4]	; (8002774 <__sinit_lock_acquire+0x8>)
 800276e:	f000 b8a7 	b.w	80028c0 <__retarget_lock_acquire_recursive>
 8002772:	bf00      	nop
 8002774:	200000ae 	.word	0x200000ae

08002778 <__sinit_lock_release>:
 8002778:	4801      	ldr	r0, [pc, #4]	; (8002780 <__sinit_lock_release+0x8>)
 800277a:	f000 b8a2 	b.w	80028c2 <__retarget_lock_release_recursive>
 800277e:	bf00      	nop
 8002780:	200000ae 	.word	0x200000ae

08002784 <__sinit>:
 8002784:	b510      	push	{r4, lr}
 8002786:	4604      	mov	r4, r0
 8002788:	f7ff fff0 	bl	800276c <__sinit_lock_acquire>
 800278c:	69a3      	ldr	r3, [r4, #24]
 800278e:	b11b      	cbz	r3, 8002798 <__sinit+0x14>
 8002790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002794:	f7ff bff0 	b.w	8002778 <__sinit_lock_release>
 8002798:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800279c:	6523      	str	r3, [r4, #80]	; 0x50
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <__sinit+0x68>)
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <__sinit+0x6c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80027a6:	42a3      	cmp	r3, r4
 80027a8:	bf04      	itt	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	61a3      	streq	r3, [r4, #24]
 80027ae:	4620      	mov	r0, r4
 80027b0:	f000 f820 	bl	80027f4 <__sfp>
 80027b4:	6060      	str	r0, [r4, #4]
 80027b6:	4620      	mov	r0, r4
 80027b8:	f000 f81c 	bl	80027f4 <__sfp>
 80027bc:	60a0      	str	r0, [r4, #8]
 80027be:	4620      	mov	r0, r4
 80027c0:	f000 f818 	bl	80027f4 <__sfp>
 80027c4:	2200      	movs	r2, #0
 80027c6:	60e0      	str	r0, [r4, #12]
 80027c8:	2104      	movs	r1, #4
 80027ca:	6860      	ldr	r0, [r4, #4]
 80027cc:	f7ff ff82 	bl	80026d4 <std>
 80027d0:	68a0      	ldr	r0, [r4, #8]
 80027d2:	2201      	movs	r2, #1
 80027d4:	2109      	movs	r1, #9
 80027d6:	f7ff ff7d 	bl	80026d4 <std>
 80027da:	68e0      	ldr	r0, [r4, #12]
 80027dc:	2202      	movs	r2, #2
 80027de:	2112      	movs	r1, #18
 80027e0:	f7ff ff78 	bl	80026d4 <std>
 80027e4:	2301      	movs	r3, #1
 80027e6:	61a3      	str	r3, [r4, #24]
 80027e8:	e7d2      	b.n	8002790 <__sinit+0xc>
 80027ea:	bf00      	nop
 80027ec:	08002e74 	.word	0x08002e74
 80027f0:	0800271d 	.word	0x0800271d

080027f4 <__sfp>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	4607      	mov	r7, r0
 80027f8:	f7ff ffac 	bl	8002754 <__sfp_lock_acquire>
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <__sfp+0x84>)
 80027fe:	681e      	ldr	r6, [r3, #0]
 8002800:	69b3      	ldr	r3, [r6, #24]
 8002802:	b913      	cbnz	r3, 800280a <__sfp+0x16>
 8002804:	4630      	mov	r0, r6
 8002806:	f7ff ffbd 	bl	8002784 <__sinit>
 800280a:	3648      	adds	r6, #72	; 0x48
 800280c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002810:	3b01      	subs	r3, #1
 8002812:	d503      	bpl.n	800281c <__sfp+0x28>
 8002814:	6833      	ldr	r3, [r6, #0]
 8002816:	b30b      	cbz	r3, 800285c <__sfp+0x68>
 8002818:	6836      	ldr	r6, [r6, #0]
 800281a:	e7f7      	b.n	800280c <__sfp+0x18>
 800281c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002820:	b9d5      	cbnz	r5, 8002858 <__sfp+0x64>
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <__sfp+0x88>)
 8002824:	60e3      	str	r3, [r4, #12]
 8002826:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800282a:	6665      	str	r5, [r4, #100]	; 0x64
 800282c:	f000 f847 	bl	80028be <__retarget_lock_init_recursive>
 8002830:	f7ff ff96 	bl	8002760 <__sfp_lock_release>
 8002834:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002838:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800283c:	6025      	str	r5, [r4, #0]
 800283e:	61a5      	str	r5, [r4, #24]
 8002840:	2208      	movs	r2, #8
 8002842:	4629      	mov	r1, r5
 8002844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002848:	f7ff fac4 	bl	8001dd4 <memset>
 800284c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002854:	4620      	mov	r0, r4
 8002856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002858:	3468      	adds	r4, #104	; 0x68
 800285a:	e7d9      	b.n	8002810 <__sfp+0x1c>
 800285c:	2104      	movs	r1, #4
 800285e:	4638      	mov	r0, r7
 8002860:	f7ff ff62 	bl	8002728 <__sfmoreglue>
 8002864:	4604      	mov	r4, r0
 8002866:	6030      	str	r0, [r6, #0]
 8002868:	2800      	cmp	r0, #0
 800286a:	d1d5      	bne.n	8002818 <__sfp+0x24>
 800286c:	f7ff ff78 	bl	8002760 <__sfp_lock_release>
 8002870:	230c      	movs	r3, #12
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	e7ee      	b.n	8002854 <__sfp+0x60>
 8002876:	bf00      	nop
 8002878:	08002e74 	.word	0x08002e74
 800287c:	ffff0001 	.word	0xffff0001

08002880 <_fwalk_reent>:
 8002880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002884:	4606      	mov	r6, r0
 8002886:	4688      	mov	r8, r1
 8002888:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800288c:	2700      	movs	r7, #0
 800288e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002892:	f1b9 0901 	subs.w	r9, r9, #1
 8002896:	d505      	bpl.n	80028a4 <_fwalk_reent+0x24>
 8002898:	6824      	ldr	r4, [r4, #0]
 800289a:	2c00      	cmp	r4, #0
 800289c:	d1f7      	bne.n	800288e <_fwalk_reent+0xe>
 800289e:	4638      	mov	r0, r7
 80028a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028a4:	89ab      	ldrh	r3, [r5, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d907      	bls.n	80028ba <_fwalk_reent+0x3a>
 80028aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028ae:	3301      	adds	r3, #1
 80028b0:	d003      	beq.n	80028ba <_fwalk_reent+0x3a>
 80028b2:	4629      	mov	r1, r5
 80028b4:	4630      	mov	r0, r6
 80028b6:	47c0      	blx	r8
 80028b8:	4307      	orrs	r7, r0
 80028ba:	3568      	adds	r5, #104	; 0x68
 80028bc:	e7e9      	b.n	8002892 <_fwalk_reent+0x12>

080028be <__retarget_lock_init_recursive>:
 80028be:	4770      	bx	lr

080028c0 <__retarget_lock_acquire_recursive>:
 80028c0:	4770      	bx	lr

080028c2 <__retarget_lock_release_recursive>:
 80028c2:	4770      	bx	lr

080028c4 <__swhatbuf_r>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	460e      	mov	r6, r1
 80028c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028cc:	2900      	cmp	r1, #0
 80028ce:	b096      	sub	sp, #88	; 0x58
 80028d0:	4614      	mov	r4, r2
 80028d2:	461d      	mov	r5, r3
 80028d4:	da08      	bge.n	80028e8 <__swhatbuf_r+0x24>
 80028d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	602a      	str	r2, [r5, #0]
 80028de:	061a      	lsls	r2, r3, #24
 80028e0:	d410      	bmi.n	8002904 <__swhatbuf_r+0x40>
 80028e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e6:	e00e      	b.n	8002906 <__swhatbuf_r+0x42>
 80028e8:	466a      	mov	r2, sp
 80028ea:	f000 f9eb 	bl	8002cc4 <_fstat_r>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	dbf1      	blt.n	80028d6 <__swhatbuf_r+0x12>
 80028f2:	9a01      	ldr	r2, [sp, #4]
 80028f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80028f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80028fc:	425a      	negs	r2, r3
 80028fe:	415a      	adcs	r2, r3
 8002900:	602a      	str	r2, [r5, #0]
 8002902:	e7ee      	b.n	80028e2 <__swhatbuf_r+0x1e>
 8002904:	2340      	movs	r3, #64	; 0x40
 8002906:	2000      	movs	r0, #0
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	b016      	add	sp, #88	; 0x58
 800290c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002910 <__smakebuf_r>:
 8002910:	898b      	ldrh	r3, [r1, #12]
 8002912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002914:	079d      	lsls	r5, r3, #30
 8002916:	4606      	mov	r6, r0
 8002918:	460c      	mov	r4, r1
 800291a:	d507      	bpl.n	800292c <__smakebuf_r+0x1c>
 800291c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002920:	6023      	str	r3, [r4, #0]
 8002922:	6123      	str	r3, [r4, #16]
 8002924:	2301      	movs	r3, #1
 8002926:	6163      	str	r3, [r4, #20]
 8002928:	b002      	add	sp, #8
 800292a:	bd70      	pop	{r4, r5, r6, pc}
 800292c:	ab01      	add	r3, sp, #4
 800292e:	466a      	mov	r2, sp
 8002930:	f7ff ffc8 	bl	80028c4 <__swhatbuf_r>
 8002934:	9900      	ldr	r1, [sp, #0]
 8002936:	4605      	mov	r5, r0
 8002938:	4630      	mov	r0, r6
 800293a:	f000 f895 	bl	8002a68 <_malloc_r>
 800293e:	b948      	cbnz	r0, 8002954 <__smakebuf_r+0x44>
 8002940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002944:	059a      	lsls	r2, r3, #22
 8002946:	d4ef      	bmi.n	8002928 <__smakebuf_r+0x18>
 8002948:	f023 0303 	bic.w	r3, r3, #3
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	81a3      	strh	r3, [r4, #12]
 8002952:	e7e3      	b.n	800291c <__smakebuf_r+0xc>
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <__smakebuf_r+0x7c>)
 8002956:	62b3      	str	r3, [r6, #40]	; 0x28
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	6020      	str	r0, [r4, #0]
 800295c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002960:	81a3      	strh	r3, [r4, #12]
 8002962:	9b00      	ldr	r3, [sp, #0]
 8002964:	6163      	str	r3, [r4, #20]
 8002966:	9b01      	ldr	r3, [sp, #4]
 8002968:	6120      	str	r0, [r4, #16]
 800296a:	b15b      	cbz	r3, 8002984 <__smakebuf_r+0x74>
 800296c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002970:	4630      	mov	r0, r6
 8002972:	f000 f9b9 	bl	8002ce8 <_isatty_r>
 8002976:	b128      	cbz	r0, 8002984 <__smakebuf_r+0x74>
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	81a3      	strh	r3, [r4, #12]
 8002984:	89a0      	ldrh	r0, [r4, #12]
 8002986:	4305      	orrs	r5, r0
 8002988:	81a5      	strh	r5, [r4, #12]
 800298a:	e7cd      	b.n	8002928 <__smakebuf_r+0x18>
 800298c:	0800271d 	.word	0x0800271d

08002990 <_free_r>:
 8002990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002992:	2900      	cmp	r1, #0
 8002994:	d044      	beq.n	8002a20 <_free_r+0x90>
 8002996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800299a:	9001      	str	r0, [sp, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f1a1 0404 	sub.w	r4, r1, #4
 80029a2:	bfb8      	it	lt
 80029a4:	18e4      	addlt	r4, r4, r3
 80029a6:	f000 f9c1 	bl	8002d2c <__malloc_lock>
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <_free_r+0x94>)
 80029ac:	9801      	ldr	r0, [sp, #4]
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	b933      	cbnz	r3, 80029c0 <_free_r+0x30>
 80029b2:	6063      	str	r3, [r4, #4]
 80029b4:	6014      	str	r4, [r2, #0]
 80029b6:	b003      	add	sp, #12
 80029b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029bc:	f000 b9bc 	b.w	8002d38 <__malloc_unlock>
 80029c0:	42a3      	cmp	r3, r4
 80029c2:	d908      	bls.n	80029d6 <_free_r+0x46>
 80029c4:	6825      	ldr	r5, [r4, #0]
 80029c6:	1961      	adds	r1, r4, r5
 80029c8:	428b      	cmp	r3, r1
 80029ca:	bf01      	itttt	eq
 80029cc:	6819      	ldreq	r1, [r3, #0]
 80029ce:	685b      	ldreq	r3, [r3, #4]
 80029d0:	1949      	addeq	r1, r1, r5
 80029d2:	6021      	streq	r1, [r4, #0]
 80029d4:	e7ed      	b.n	80029b2 <_free_r+0x22>
 80029d6:	461a      	mov	r2, r3
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	b10b      	cbz	r3, 80029e0 <_free_r+0x50>
 80029dc:	42a3      	cmp	r3, r4
 80029de:	d9fa      	bls.n	80029d6 <_free_r+0x46>
 80029e0:	6811      	ldr	r1, [r2, #0]
 80029e2:	1855      	adds	r5, r2, r1
 80029e4:	42a5      	cmp	r5, r4
 80029e6:	d10b      	bne.n	8002a00 <_free_r+0x70>
 80029e8:	6824      	ldr	r4, [r4, #0]
 80029ea:	4421      	add	r1, r4
 80029ec:	1854      	adds	r4, r2, r1
 80029ee:	42a3      	cmp	r3, r4
 80029f0:	6011      	str	r1, [r2, #0]
 80029f2:	d1e0      	bne.n	80029b6 <_free_r+0x26>
 80029f4:	681c      	ldr	r4, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	6053      	str	r3, [r2, #4]
 80029fa:	4421      	add	r1, r4
 80029fc:	6011      	str	r1, [r2, #0]
 80029fe:	e7da      	b.n	80029b6 <_free_r+0x26>
 8002a00:	d902      	bls.n	8002a08 <_free_r+0x78>
 8002a02:	230c      	movs	r3, #12
 8002a04:	6003      	str	r3, [r0, #0]
 8002a06:	e7d6      	b.n	80029b6 <_free_r+0x26>
 8002a08:	6825      	ldr	r5, [r4, #0]
 8002a0a:	1961      	adds	r1, r4, r5
 8002a0c:	428b      	cmp	r3, r1
 8002a0e:	bf04      	itt	eq
 8002a10:	6819      	ldreq	r1, [r3, #0]
 8002a12:	685b      	ldreq	r3, [r3, #4]
 8002a14:	6063      	str	r3, [r4, #4]
 8002a16:	bf04      	itt	eq
 8002a18:	1949      	addeq	r1, r1, r5
 8002a1a:	6021      	streq	r1, [r4, #0]
 8002a1c:	6054      	str	r4, [r2, #4]
 8002a1e:	e7ca      	b.n	80029b6 <_free_r+0x26>
 8002a20:	b003      	add	sp, #12
 8002a22:	bd30      	pop	{r4, r5, pc}
 8002a24:	200000b0 	.word	0x200000b0

08002a28 <sbrk_aligned>:
 8002a28:	b570      	push	{r4, r5, r6, lr}
 8002a2a:	4e0e      	ldr	r6, [pc, #56]	; (8002a64 <sbrk_aligned+0x3c>)
 8002a2c:	460c      	mov	r4, r1
 8002a2e:	6831      	ldr	r1, [r6, #0]
 8002a30:	4605      	mov	r5, r0
 8002a32:	b911      	cbnz	r1, 8002a3a <sbrk_aligned+0x12>
 8002a34:	f000 f88c 	bl	8002b50 <_sbrk_r>
 8002a38:	6030      	str	r0, [r6, #0]
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f000 f887 	bl	8002b50 <_sbrk_r>
 8002a42:	1c43      	adds	r3, r0, #1
 8002a44:	d00a      	beq.n	8002a5c <sbrk_aligned+0x34>
 8002a46:	1cc4      	adds	r4, r0, #3
 8002a48:	f024 0403 	bic.w	r4, r4, #3
 8002a4c:	42a0      	cmp	r0, r4
 8002a4e:	d007      	beq.n	8002a60 <sbrk_aligned+0x38>
 8002a50:	1a21      	subs	r1, r4, r0
 8002a52:	4628      	mov	r0, r5
 8002a54:	f000 f87c 	bl	8002b50 <_sbrk_r>
 8002a58:	3001      	adds	r0, #1
 8002a5a:	d101      	bne.n	8002a60 <sbrk_aligned+0x38>
 8002a5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002a60:	4620      	mov	r0, r4
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	200000b4 	.word	0x200000b4

08002a68 <_malloc_r>:
 8002a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a6c:	1ccd      	adds	r5, r1, #3
 8002a6e:	f025 0503 	bic.w	r5, r5, #3
 8002a72:	3508      	adds	r5, #8
 8002a74:	2d0c      	cmp	r5, #12
 8002a76:	bf38      	it	cc
 8002a78:	250c      	movcc	r5, #12
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	4607      	mov	r7, r0
 8002a7e:	db01      	blt.n	8002a84 <_malloc_r+0x1c>
 8002a80:	42a9      	cmp	r1, r5
 8002a82:	d905      	bls.n	8002a90 <_malloc_r+0x28>
 8002a84:	230c      	movs	r3, #12
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	2600      	movs	r6, #0
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a90:	4e2e      	ldr	r6, [pc, #184]	; (8002b4c <_malloc_r+0xe4>)
 8002a92:	f000 f94b 	bl	8002d2c <__malloc_lock>
 8002a96:	6833      	ldr	r3, [r6, #0]
 8002a98:	461c      	mov	r4, r3
 8002a9a:	bb34      	cbnz	r4, 8002aea <_malloc_r+0x82>
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4638      	mov	r0, r7
 8002aa0:	f7ff ffc2 	bl	8002a28 <sbrk_aligned>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	d14d      	bne.n	8002b46 <_malloc_r+0xde>
 8002aaa:	6834      	ldr	r4, [r6, #0]
 8002aac:	4626      	mov	r6, r4
 8002aae:	2e00      	cmp	r6, #0
 8002ab0:	d140      	bne.n	8002b34 <_malloc_r+0xcc>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	4631      	mov	r1, r6
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	eb04 0803 	add.w	r8, r4, r3
 8002abc:	f000 f848 	bl	8002b50 <_sbrk_r>
 8002ac0:	4580      	cmp	r8, r0
 8002ac2:	d13a      	bne.n	8002b3a <_malloc_r+0xd2>
 8002ac4:	6821      	ldr	r1, [r4, #0]
 8002ac6:	3503      	adds	r5, #3
 8002ac8:	1a6d      	subs	r5, r5, r1
 8002aca:	f025 0503 	bic.w	r5, r5, #3
 8002ace:	3508      	adds	r5, #8
 8002ad0:	2d0c      	cmp	r5, #12
 8002ad2:	bf38      	it	cc
 8002ad4:	250c      	movcc	r5, #12
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	4638      	mov	r0, r7
 8002ada:	f7ff ffa5 	bl	8002a28 <sbrk_aligned>
 8002ade:	3001      	adds	r0, #1
 8002ae0:	d02b      	beq.n	8002b3a <_malloc_r+0xd2>
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	442b      	add	r3, r5
 8002ae6:	6023      	str	r3, [r4, #0]
 8002ae8:	e00e      	b.n	8002b08 <_malloc_r+0xa0>
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	1b52      	subs	r2, r2, r5
 8002aee:	d41e      	bmi.n	8002b2e <_malloc_r+0xc6>
 8002af0:	2a0b      	cmp	r2, #11
 8002af2:	d916      	bls.n	8002b22 <_malloc_r+0xba>
 8002af4:	1961      	adds	r1, r4, r5
 8002af6:	42a3      	cmp	r3, r4
 8002af8:	6025      	str	r5, [r4, #0]
 8002afa:	bf18      	it	ne
 8002afc:	6059      	strne	r1, [r3, #4]
 8002afe:	6863      	ldr	r3, [r4, #4]
 8002b00:	bf08      	it	eq
 8002b02:	6031      	streq	r1, [r6, #0]
 8002b04:	5162      	str	r2, [r4, r5]
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	4638      	mov	r0, r7
 8002b0a:	f104 060b 	add.w	r6, r4, #11
 8002b0e:	f000 f913 	bl	8002d38 <__malloc_unlock>
 8002b12:	f026 0607 	bic.w	r6, r6, #7
 8002b16:	1d23      	adds	r3, r4, #4
 8002b18:	1af2      	subs	r2, r6, r3
 8002b1a:	d0b6      	beq.n	8002a8a <_malloc_r+0x22>
 8002b1c:	1b9b      	subs	r3, r3, r6
 8002b1e:	50a3      	str	r3, [r4, r2]
 8002b20:	e7b3      	b.n	8002a8a <_malloc_r+0x22>
 8002b22:	6862      	ldr	r2, [r4, #4]
 8002b24:	42a3      	cmp	r3, r4
 8002b26:	bf0c      	ite	eq
 8002b28:	6032      	streq	r2, [r6, #0]
 8002b2a:	605a      	strne	r2, [r3, #4]
 8002b2c:	e7ec      	b.n	8002b08 <_malloc_r+0xa0>
 8002b2e:	4623      	mov	r3, r4
 8002b30:	6864      	ldr	r4, [r4, #4]
 8002b32:	e7b2      	b.n	8002a9a <_malloc_r+0x32>
 8002b34:	4634      	mov	r4, r6
 8002b36:	6876      	ldr	r6, [r6, #4]
 8002b38:	e7b9      	b.n	8002aae <_malloc_r+0x46>
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4638      	mov	r0, r7
 8002b40:	f000 f8fa 	bl	8002d38 <__malloc_unlock>
 8002b44:	e7a1      	b.n	8002a8a <_malloc_r+0x22>
 8002b46:	6025      	str	r5, [r4, #0]
 8002b48:	e7de      	b.n	8002b08 <_malloc_r+0xa0>
 8002b4a:	bf00      	nop
 8002b4c:	200000b0 	.word	0x200000b0

08002b50 <_sbrk_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	4d06      	ldr	r5, [pc, #24]	; (8002b6c <_sbrk_r+0x1c>)
 8002b54:	2300      	movs	r3, #0
 8002b56:	4604      	mov	r4, r0
 8002b58:	4608      	mov	r0, r1
 8002b5a:	602b      	str	r3, [r5, #0]
 8002b5c:	f7fd fff2 	bl	8000b44 <_sbrk>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d102      	bne.n	8002b6a <_sbrk_r+0x1a>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	b103      	cbz	r3, 8002b6a <_sbrk_r+0x1a>
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	200000b8 	.word	0x200000b8

08002b70 <_raise_r>:
 8002b70:	291f      	cmp	r1, #31
 8002b72:	b538      	push	{r3, r4, r5, lr}
 8002b74:	4604      	mov	r4, r0
 8002b76:	460d      	mov	r5, r1
 8002b78:	d904      	bls.n	8002b84 <_raise_r+0x14>
 8002b7a:	2316      	movs	r3, #22
 8002b7c:	6003      	str	r3, [r0, #0]
 8002b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b86:	b112      	cbz	r2, 8002b8e <_raise_r+0x1e>
 8002b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b8c:	b94b      	cbnz	r3, 8002ba2 <_raise_r+0x32>
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f000 f830 	bl	8002bf4 <_getpid_r>
 8002b94:	462a      	mov	r2, r5
 8002b96:	4601      	mov	r1, r0
 8002b98:	4620      	mov	r0, r4
 8002b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b9e:	f000 b817 	b.w	8002bd0 <_kill_r>
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d00a      	beq.n	8002bbc <_raise_r+0x4c>
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	d103      	bne.n	8002bb2 <_raise_r+0x42>
 8002baa:	2316      	movs	r3, #22
 8002bac:	6003      	str	r3, [r0, #0]
 8002bae:	2001      	movs	r0, #1
 8002bb0:	e7e7      	b.n	8002b82 <_raise_r+0x12>
 8002bb2:	2400      	movs	r4, #0
 8002bb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002bb8:	4628      	mov	r0, r5
 8002bba:	4798      	blx	r3
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	e7e0      	b.n	8002b82 <_raise_r+0x12>

08002bc0 <raise>:
 8002bc0:	4b02      	ldr	r3, [pc, #8]	; (8002bcc <raise+0xc>)
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	f7ff bfd3 	b.w	8002b70 <_raise_r>
 8002bca:	bf00      	nop
 8002bcc:	20000020 	.word	0x20000020

08002bd0 <_kill_r>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
 8002bd2:	4d07      	ldr	r5, [pc, #28]	; (8002bf0 <_kill_r+0x20>)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	602b      	str	r3, [r5, #0]
 8002bde:	f7fd ff29 	bl	8000a34 <_kill>
 8002be2:	1c43      	adds	r3, r0, #1
 8002be4:	d102      	bne.n	8002bec <_kill_r+0x1c>
 8002be6:	682b      	ldr	r3, [r5, #0]
 8002be8:	b103      	cbz	r3, 8002bec <_kill_r+0x1c>
 8002bea:	6023      	str	r3, [r4, #0]
 8002bec:	bd38      	pop	{r3, r4, r5, pc}
 8002bee:	bf00      	nop
 8002bf0:	200000b8 	.word	0x200000b8

08002bf4 <_getpid_r>:
 8002bf4:	f7fd bf16 	b.w	8000a24 <_getpid>

08002bf8 <__sread>:
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c00:	f000 f8a0 	bl	8002d44 <_read_r>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	bfab      	itete	ge
 8002c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c0c:	181b      	addge	r3, r3, r0
 8002c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c12:	bfac      	ite	ge
 8002c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c16:	81a3      	strhlt	r3, [r4, #12]
 8002c18:	bd10      	pop	{r4, pc}

08002c1a <__swrite>:
 8002c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c1e:	461f      	mov	r7, r3
 8002c20:	898b      	ldrh	r3, [r1, #12]
 8002c22:	05db      	lsls	r3, r3, #23
 8002c24:	4605      	mov	r5, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	4616      	mov	r6, r2
 8002c2a:	d505      	bpl.n	8002c38 <__swrite+0x1e>
 8002c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c30:	2302      	movs	r3, #2
 8002c32:	2200      	movs	r2, #0
 8002c34:	f000 f868 	bl	8002d08 <_lseek_r>
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	4632      	mov	r2, r6
 8002c46:	463b      	mov	r3, r7
 8002c48:	4628      	mov	r0, r5
 8002c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c4e:	f000 b817 	b.w	8002c80 <_write_r>

08002c52 <__sseek>:
 8002c52:	b510      	push	{r4, lr}
 8002c54:	460c      	mov	r4, r1
 8002c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c5a:	f000 f855 	bl	8002d08 <_lseek_r>
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	bf15      	itete	ne
 8002c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c6e:	81a3      	strheq	r3, [r4, #12]
 8002c70:	bf18      	it	ne
 8002c72:	81a3      	strhne	r3, [r4, #12]
 8002c74:	bd10      	pop	{r4, pc}

08002c76 <__sclose>:
 8002c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c7a:	f000 b813 	b.w	8002ca4 <_close_r>
	...

08002c80 <_write_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d07      	ldr	r5, [pc, #28]	; (8002ca0 <_write_r+0x20>)
 8002c84:	4604      	mov	r4, r0
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	602a      	str	r2, [r5, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7fd ff07 	bl	8000aa2 <_write>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_write_r+0x1e>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_write_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	200000b8 	.word	0x200000b8

08002ca4 <_close_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4d06      	ldr	r5, [pc, #24]	; (8002cc0 <_close_r+0x1c>)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4604      	mov	r4, r0
 8002cac:	4608      	mov	r0, r1
 8002cae:	602b      	str	r3, [r5, #0]
 8002cb0:	f7fd ff13 	bl	8000ada <_close>
 8002cb4:	1c43      	adds	r3, r0, #1
 8002cb6:	d102      	bne.n	8002cbe <_close_r+0x1a>
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	b103      	cbz	r3, 8002cbe <_close_r+0x1a>
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}
 8002cc0:	200000b8 	.word	0x200000b8

08002cc4 <_fstat_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4d07      	ldr	r5, [pc, #28]	; (8002ce4 <_fstat_r+0x20>)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	f7fd ff0e 	bl	8000af2 <_fstat>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	d102      	bne.n	8002ce0 <_fstat_r+0x1c>
 8002cda:	682b      	ldr	r3, [r5, #0]
 8002cdc:	b103      	cbz	r3, 8002ce0 <_fstat_r+0x1c>
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200000b8 	.word	0x200000b8

08002ce8 <_isatty_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4d06      	ldr	r5, [pc, #24]	; (8002d04 <_isatty_r+0x1c>)
 8002cec:	2300      	movs	r3, #0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	f7fd ff0d 	bl	8000b12 <_isatty>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_isatty_r+0x1a>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_isatty_r+0x1a>
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	200000b8 	.word	0x200000b8

08002d08 <_lseek_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4d07      	ldr	r5, [pc, #28]	; (8002d28 <_lseek_r+0x20>)
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	4608      	mov	r0, r1
 8002d10:	4611      	mov	r1, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	602a      	str	r2, [r5, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f7fd ff06 	bl	8000b28 <_lseek>
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d102      	bne.n	8002d26 <_lseek_r+0x1e>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	b103      	cbz	r3, 8002d26 <_lseek_r+0x1e>
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
 8002d28:	200000b8 	.word	0x200000b8

08002d2c <__malloc_lock>:
 8002d2c:	4801      	ldr	r0, [pc, #4]	; (8002d34 <__malloc_lock+0x8>)
 8002d2e:	f7ff bdc7 	b.w	80028c0 <__retarget_lock_acquire_recursive>
 8002d32:	bf00      	nop
 8002d34:	200000ac 	.word	0x200000ac

08002d38 <__malloc_unlock>:
 8002d38:	4801      	ldr	r0, [pc, #4]	; (8002d40 <__malloc_unlock+0x8>)
 8002d3a:	f7ff bdc2 	b.w	80028c2 <__retarget_lock_release_recursive>
 8002d3e:	bf00      	nop
 8002d40:	200000ac 	.word	0x200000ac

08002d44 <_read_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4d07      	ldr	r5, [pc, #28]	; (8002d64 <_read_r+0x20>)
 8002d48:	4604      	mov	r4, r0
 8002d4a:	4608      	mov	r0, r1
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	2200      	movs	r2, #0
 8002d50:	602a      	str	r2, [r5, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7fd fe88 	bl	8000a68 <_read>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d102      	bne.n	8002d62 <_read_r+0x1e>
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	b103      	cbz	r3, 8002d62 <_read_r+0x1e>
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	200000b8 	.word	0x200000b8

08002d68 <_init>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	bf00      	nop
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr

08002d74 <_fini>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	bf00      	nop
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr
