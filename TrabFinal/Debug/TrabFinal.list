
TrabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ccc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f4  080050f4  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050fc  080050fc  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020108  2**0
                  CONTENTS
 10 .bss          00000864  20000108  20000108  00020108  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000096c  2000096c  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013807  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b81  00000000  00000000  0003393f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  000364c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e88  00000000  00000000  00037470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002643b  00000000  00000000  000382f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127fb  00000000  00000000  0005e733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df054  00000000  00000000  00070f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ff82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049c4  00000000  00000000  0014ffd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004e64 	.word	0x08004e64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	08004e64 	.word	0x08004e64

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/**
	 * We initialize some variables related to
	 * the states of the FSM and the flag that prevents
	 * counting the speed and score increase twice.
	 */
	state_FSM = SET_ini;              // We define the initial state
 8000598:	4b55      	ldr	r3, [pc, #340]	; (80006f0 <main+0x15c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	flag = true;
 800059e:	4b55      	ldr	r3, [pc, #340]	; (80006f4 <main+0x160>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a4:	f001 f9b8 	bl	8001918 <HAL_Init>
	 *
	 * Initialize the game's Finite State Machine (FSM).
	 * This function sets up the initial state and prepares it
	 * to be properly initialized.
	 */
	init_MEF();
 80005a8:	f001 f8bc 	bl	8001724 <init_MEF>

	/* We initialize the API_spi library that controls the operation
	 * of the 8x8 LED screen */
	init_led();
 80005ac:	f000 fe66 	bl	800127c <init_led>

	/* We define the Delay speed at the initial level, which is the
	 * slowest according to the delay */
	speed_play = level[LEVEL_MIN]; // we set the speed to the minimum level;
 80005b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b4:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <main+0x164>)
 80005b6:	601a      	str	r2, [r3, #0]
	delayInit(&Delay_play, speed_play);
 80005b8:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <main+0x164>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	484f      	ldr	r0, [pc, #316]	; (80006fc <main+0x168>)
 80005c0:	f000 fdda 	bl	8001178 <delayInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c4:	f000 f8b0 	bl	8000728 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_ETH_Init();
 80005c8:	f000 f91a 	bl	8000800 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80005cc:	f000 f966 	bl	800089c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80005d0:	f000 f98e 	bl	80008f0 <MX_USB_OTG_FS_PCD_Init>
		/* *
		 * Update the Finite State Machine and get the
		 * current state, which can be SET_ini (score update),
		 * FIRST (A), SECOND (B), THIRD (C), GOOD (smiley face) or BAD (ghost).
		 * */
		state_FSM = update_MEF(&Delay_play);
 80005d4:	4849      	ldr	r0, [pc, #292]	; (80006fc <main+0x168>)
 80005d6:	f001 f8b7 	bl	8001748 <update_MEF>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b44      	ldr	r3, [pc, #272]	; (80006f0 <main+0x15c>)
 80005e0:	701a      	strb	r2, [r3, #0]
		// To prevent the score from overflowing
		if (score > SCORE_MAX) {
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <main+0x16c>)
 80005e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	dd02      	ble.n	80005f2 <main+0x5e>
			score = SCORE_INI;
 80005ec:	4b44      	ldr	r3, [pc, #272]	; (8000700 <main+0x16c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	801a      	strh	r2, [r3, #0]
		}

		/* Depending on the current state, display a specific
		 * pattern or image on the LED matrix.
		 * */
		switch (state_FSM) {
 80005f2:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <main+0x15c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b05      	cmp	r3, #5
 80005f8:	d86f      	bhi.n	80006da <main+0x146>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <main+0x6c>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000619 	.word	0x08000619
 8000604:	08000635 	.word	0x08000635
 8000608:	0800063d 	.word	0x0800063d
 800060c:	08000645 	.word	0x08000645
 8000610:	0800064d 	.word	0x0800064d
 8000614:	0800069b 	.word	0x0800069b
		case SET_ini:
			flag = true;
 8000618:	4b36      	ldr	r3, [pc, #216]	; (80006f4 <main+0x160>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
			// Light up the LED matrix indicating the achieved score
			update_led(levels_led[score]);
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <main+0x16c>)
 8000620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000624:	461a      	mov	r2, r3
 8000626:	4b37      	ldr	r3, [pc, #220]	; (8000704 <main+0x170>)
 8000628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fe47 	bl	80012c0 <update_led>
			// lit_led();
			break;
 8000632:	e05c      	b.n	80006ee <main+0x15a>

		case FIRST:
			// In the first state, display the pattern or image 'A' on the LED matrix.
			update_led(A);
 8000634:	4834      	ldr	r0, [pc, #208]	; (8000708 <main+0x174>)
 8000636:	f000 fe43 	bl	80012c0 <update_led>
			break;
 800063a:	e058      	b.n	80006ee <main+0x15a>

		case SECOND:
			// In the second state, display the pattern or image 'B'.
			update_led(B);
 800063c:	4833      	ldr	r0, [pc, #204]	; (800070c <main+0x178>)
 800063e:	f000 fe3f 	bl	80012c0 <update_led>
			break;
 8000642:	e054      	b.n	80006ee <main+0x15a>

		case THIRD:
			// In the third state, display the pattern or image 'C'.
			update_led(C);
 8000644:	4832      	ldr	r0, [pc, #200]	; (8000710 <main+0x17c>)
 8000646:	f000 fe3b 	bl	80012c0 <update_led>
			break;
 800064a:	e050      	b.n	80006ee <main+0x15a>

		case GOOD:
			// If everything is good, display a smiley face on the LED matrix.
			update_led(smileyFace);
 800064c:	4831      	ldr	r0, [pc, #196]	; (8000714 <main+0x180>)
 800064e:	f000 fe37 	bl	80012c0 <update_led>
			if (flag) {
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <main+0x160>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d046      	beq.n	80006e8 <main+0x154>
				flag = false;
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <main+0x160>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
				score = score + 1;          // increase the score by one
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <main+0x16c>)
 8000662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000666:	b29b      	uxth	r3, r3
 8000668:	3301      	adds	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	b21a      	sxth	r2, r3
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <main+0x16c>)
 8000670:	801a      	strh	r2, [r3, #0]
				level_i = level_i + 1;       // increase the speed level
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <main+0x184>)
 8000674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000678:	b29b      	uxth	r3, r3
 800067a:	3301      	adds	r3, #1
 800067c:	b29b      	uxth	r3, r3
 800067e:	b21a      	sxth	r2, r3
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <main+0x184>)
 8000682:	801a      	strh	r2, [r3, #0]
				level_i = level_speed_update(level_i); // increase the game speed
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <main+0x184>)
 8000686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f95e 	bl	800094c <level_speed_update>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <main+0x184>)
 8000696:	801a      	strh	r2, [r3, #0]
			}
			break;
 8000698:	e026      	b.n	80006e8 <main+0x154>

		case BAD:
			// In case of loss, display the ghost image
			fantasma_led();
 800069a:	f000 fe45 	bl	8001328 <fantasma_led>
			// We reset the SCORE value to 0 because the game is lost
			if (flag) {
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <main+0x160>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d022      	beq.n	80006ec <main+0x158>
				flag = false;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <main+0x160>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
				score = SCORE_INI;          // reset the achieved score
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <main+0x16c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	801a      	strh	r2, [r3, #0]
				level_i = level_i + 1;  // increase the level to raise the speed
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <main+0x184>)
 80006b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b21a      	sxth	r2, r3
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <main+0x184>)
 80006c2:	801a      	strh	r2, [r3, #0]
				level_i = level_speed_update(level_i);
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <main+0x184>)
 80006c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f93e 	bl	800094c <level_speed_update>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <main+0x184>)
 80006d6:	801a      	strh	r2, [r3, #0]
			}
			break;
 80006d8:	e008      	b.n	80006ec <main+0x158>
		default:
			/* Handle unexpected state */
			assert(0);
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <main+0x188>)
 80006dc:	4a10      	ldr	r2, [pc, #64]	; (8000720 <main+0x18c>)
 80006de:	f240 110b 	movw	r1, #267	; 0x10b
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <main+0x190>)
 80006e4:	f003 fb9a 	bl	8003e1c <__assert_func>
			break;
 80006e8:	bf00      	nop
 80006ea:	e773      	b.n	80005d4 <main+0x40>
			break;
 80006ec:	bf00      	nop
		state_FSM = update_MEF(&Delay_play);
 80006ee:	e771      	b.n	80005d4 <main+0x40>
 80006f0:	200008b0 	.word	0x200008b0
 80006f4:	200008bc 	.word	0x200008bc
 80006f8:	200008b8 	.word	0x200008b8
 80006fc:	200008a4 	.word	0x200008a4
 8000700:	200008b2 	.word	0x200008b2
 8000704:	20000048 	.word	0x20000048
 8000708:	20000008 	.word	0x20000008
 800070c:	20000010 	.word	0x20000010
 8000710:	20000018 	.word	0x20000018
 8000714:	20000000 	.word	0x20000000
 8000718:	200008b4 	.word	0x200008b4
 800071c:	08004e7c 	.word	0x08004e7c
 8000720:	08004f98 	.word	0x08004f98
 8000724:	08004e80 	.word	0x08004e80

08000728 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fbca 	bl	8003ed0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <SystemClock_Config+0xd0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a28      	ldr	r2, [pc, #160]	; (80007f8 <SystemClock_Config+0xd0>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <SystemClock_Config+0xd0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <SystemClock_Config+0xd4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <SystemClock_Config+0xd4>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <SystemClock_Config+0xd4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80007a0:	2348      	movs	r3, #72	; 0x48
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80007a8:	2303      	movs	r3, #3
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 f84f 	bl	8002854 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x98>
		Error_Handler();
 80007bc:	f000 f8fc 	bl	80009b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2102      	movs	r1, #2
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fab0 	bl	8002d44 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc6>
		Error_Handler();
 80007ea:	f000 f8e5 	bl	80009b8 <Error_Handler>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ETH_Init+0x84>)
 8000806:	4a20      	ldr	r2, [pc, #128]	; (8000888 <MX_ETH_Init+0x88>)
 8000808:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_ETH_Init+0x8c>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ETH_Init+0x8c>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ETH_Init+0x8c>)
 8000818:	22e1      	movs	r2, #225	; 0xe1
 800081a:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ETH_Init+0x8c>)
 800081e:	2200      	movs	r2, #0
 8000820:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_ETH_Init+0x8c>)
 8000824:	2200      	movs	r2, #0
 8000826:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_ETH_Init+0x8c>)
 800082a:	2200      	movs	r2, #0
 800082c:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_ETH_Init+0x84>)
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <MX_ETH_Init+0x8c>)
 8000832:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_ETH_Init+0x84>)
 8000836:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800083a:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_ETH_Init+0x84>)
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <MX_ETH_Init+0x90>)
 8000840:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_ETH_Init+0x84>)
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <MX_ETH_Init+0x94>)
 8000846:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_ETH_Init+0x84>)
 800084a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800084e:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_ETH_Init+0x84>)
 8000852:	f001 f9dd 	bl	8001c10 <HAL_ETH_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ETH_Init+0x60>
		Error_Handler();
 800085c:	f000 f8ac 	bl	80009b8 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000860:	2238      	movs	r2, #56	; 0x38
 8000862:	2100      	movs	r1, #0
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_ETH_Init+0x98>)
 8000866:	f003 fb33 	bl	8003ed0 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_ETH_Init+0x98>)
 800086c:	2221      	movs	r2, #33	; 0x21
 800086e:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_ETH_Init+0x98>)
 8000872:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000876:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_ETH_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200002a4 	.word	0x200002a4
 8000888:	40028000 	.word	0x40028000
 800088c:	200008c0 	.word	0x200008c0
 8000890:	20000204 	.word	0x20000204
 8000894:	20000164 	.word	0x20000164
 8000898:	2000012c 	.word	0x2000012c

0800089c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART3_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008d4:	f002 fcdf 	bl	8003296 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80008de:	f000 f86b 	bl	80009b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000354 	.word	0x20000354
 80008ec:	40004800 	.word	0x40004800

080008f0 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008fa:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2204      	movs	r2, #4
 8000900:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2202      	movs	r2, #2
 8000906:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2202      	movs	r2, #2
 8000912:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2201      	movs	r2, #1
 8000918:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2201      	movs	r2, #1
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	f001 fe71 	bl	800261a <HAL_PCD_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 800093e:	f000 f83b 	bl	80009b8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000398 	.word	0x20000398

0800094c <level_speed_update>:
/**
 * @brief Level Speed Update Function
 * @param position of the speed level
 * @retval returns the value of the updated speed position
 */
static int16_t level_speed_update(int16_t level_n) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	assert(level_n >= 0);
 8000956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800095a:	2b00      	cmp	r3, #0
 800095c:	da06      	bge.n	800096c <level_speed_update+0x20>
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <level_speed_update+0x54>)
 8000960:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <level_speed_update+0x58>)
 8000962:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000966:	4810      	ldr	r0, [pc, #64]	; (80009a8 <level_speed_update+0x5c>)
 8000968:	f003 fa58 	bl	8003e1c <__assert_func>
	if (level_n > LEVEL_MAX) {
 800096c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000970:	2b03      	cmp	r3, #3
 8000972:	dd01      	ble.n	8000978 <level_speed_update+0x2c>
		level_n = LEVEL_MIN;
 8000974:	2300      	movs	r3, #0
 8000976:	80fb      	strh	r3, [r7, #6]
	}
	speed_play = level[level_n];
 8000978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <level_speed_update+0x60>)
 800097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <level_speed_update+0x64>)
 8000984:	6013      	str	r3, [r2, #0]
	delayInit(&Delay_play, speed_play); // sets game speed
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <level_speed_update+0x64>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <level_speed_update+0x68>)
 800098e:	f000 fbf3 	bl	8001178 <delayInit>

	return level_n;
 8000992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	08004e94 	.word	0x08004e94
 80009a4:	08004fa0 	.word	0x08004fa0
 80009a8:	08004e80 	.word	0x08004e80
 80009ac:	08004f88 	.word	0x08004f88
 80009b0:	200008b8 	.word	0x200008b8
 80009b4:	200008a4 	.word	0x200008a4

080009b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a55      	ldr	r2, [pc, #340]	; (8000b88 <HAL_ETH_MspInit+0x174>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	f040 80a4 	bne.w	8000b80 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
 8000a3c:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a52      	ldr	r2, [pc, #328]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
 8000a48:	4b50      	ldr	r3, [pc, #320]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a4b      	ldr	r2, [pc, #300]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
 8000a64:	4b49      	ldr	r3, [pc, #292]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a44      	ldr	r2, [pc, #272]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b42      	ldr	r3, [pc, #264]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a3d      	ldr	r2, [pc, #244]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a36      	ldr	r2, [pc, #216]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_ETH_MspInit+0x178>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000afc:	2332      	movs	r3, #50	; 0x32
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	481e      	ldr	r0, [pc, #120]	; (8000b90 <HAL_ETH_MspInit+0x17c>)
 8000b18:	f001 fba2 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b1c:	2386      	movs	r3, #134	; 0x86
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4817      	ldr	r0, [pc, #92]	; (8000b94 <HAL_ETH_MspInit+0x180>)
 8000b38:	f001 fb92 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4e:	230b      	movs	r3, #11
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	480f      	ldr	r0, [pc, #60]	; (8000b98 <HAL_ETH_MspInit+0x184>)
 8000b5a:	f001 fb81 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b70:	230b      	movs	r3, #11
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4808      	ldr	r0, [pc, #32]	; (8000b9c <HAL_ETH_MspInit+0x188>)
 8000b7c:	f001 fb70 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	; 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40028000 	.word	0x40028000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40021800 	.word	0x40021800

08000ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <HAL_SPI_MspInit+0xc0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d14a      	bne.n	8000c58 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_SPI_MspInit+0xc4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c16:	2310      	movs	r3, #16
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c26:	2306      	movs	r3, #6
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <HAL_SPI_MspInit+0xc8>)
 8000c32:	f001 fb15 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <HAL_SPI_MspInit+0xcc>)
 8000c54:	f001 fb04 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40003c00 	.word	0x40003c00
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020800 	.word	0x40020800

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_UART_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12c      	bne.n	8000cec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000ce8:	f001 faba 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004800 	.word	0x40004800
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020c00 	.word	0x40020c00

08000d00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d20:	d13f      	bne.n	8000da2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_PCD_MspInit+0xac>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a20      	ldr	r2, [pc, #128]	; (8000dac <HAL_PCD_MspInit+0xac>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <HAL_PCD_MspInit+0xac>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d3e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d50:	230a      	movs	r3, #10
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4815      	ldr	r0, [pc, #84]	; (8000db0 <HAL_PCD_MspInit+0xb0>)
 8000d5c:	f001 fa80 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <HAL_PCD_MspInit+0xb0>)
 8000d76:	f001 fa73 	bl	8002260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_PCD_MspInit+0xac>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <HAL_PCD_MspInit+0xac>)
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	6353      	str	r3, [r2, #52]	; 0x34
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_PCD_MspInit+0xac>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_PCD_MspInit+0xac>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_PCD_MspInit+0xac>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 fddc 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return 1;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_kill>:

int _kill(int pid, int sig)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e22:	f003 f819 	bl	8003e58 <__errno>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2216      	movs	r2, #22
 8000e2a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_exit>:

void _exit (int status)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ffe7 	bl	8000e18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e4a:	e7fe      	b.n	8000e4a <_exit+0x12>

08000e4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
  }

  return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x12>
  }
  return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_close>:

int _close(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_isatty>:

int _isatty(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f002 ff7e 	bl	8003e58 <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20030000 	.word	0x20030000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	200008c8 	.word	0x200008c8
 8000f90:	20000970 	.word	0x20000970

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe2:	f7ff ffd7 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f002 ff4f 	bl	8003e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fad3 	bl	8000594 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ff0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000ffc:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 8001000:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001004:	2000096c 	.word	0x2000096c

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <debounceFSM_init>:
 *          at the start of the model.
 *
 * @param   None
 * @retval  None
 */
void debounceFSM_init(delay_t *delayi) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	/* Initialize Estado */
	assert(&PressButton!=NULL);
	currentState = BUTTON_UP;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <debounceFSM_init+0x28>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
	current_edge_state = EDGE_INIT;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <debounceFSM_init+0x2c>)
 800101c:	2202      	movs	r2, #2
 800101e:	701a      	strb	r2, [r3, #0]
	delay = delayi;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <debounceFSM_init+0x30>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
	return;
 8001026:	bf00      	nop
}
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200008cc 	.word	0x200008cc
 8001038:	200008cd 	.word	0x200008cd
 800103c:	200008d0 	.word	0x200008d0

08001040 <debounceFSM_update>:
 *          and updates the current state and outputs accordingly.
 *
 * @param   delay: pointer to the delay instance
 * @retval  None
 */
bool_t debounceFSM_update() {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	assert(delay!=NULL);
 8001046:	4b39      	ldr	r3, [pc, #228]	; (800112c <debounceFSM_update+0xec>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d105      	bne.n	800105a <debounceFSM_update+0x1a>
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <debounceFSM_update+0xf0>)
 8001050:	4a38      	ldr	r2, [pc, #224]	; (8001134 <debounceFSM_update+0xf4>)
 8001052:	2177      	movs	r1, #119	; 0x77
 8001054:	4838      	ldr	r0, [pc, #224]	; (8001138 <debounceFSM_update+0xf8>)
 8001056:	f002 fee1 	bl	8003e1c <__assert_func>
	assert(&currentState!=NULL);
	bool_t value;
	value = false;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]

	switch (currentState) {
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <debounceFSM_update+0xfc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d854      	bhi.n	8001110 <debounceFSM_update+0xd0>
 8001066:	a201      	add	r2, pc, #4	; (adr r2, 800106c <debounceFSM_update+0x2c>)
 8001068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106c:	0800107d 	.word	0x0800107d
 8001070:	08001091 	.word	0x08001091
 8001074:	080010cb 	.word	0x080010cb
 8001078:	080010df 	.word	0x080010df
	/*
	 * In the BUTTON_UP state, it checks whether the button remains unpressed.
	 * Otherwise, that is, if the button is pressed, the state changes to BUTTON_FALLING.
	 */
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)) {
 800107c:	2000      	movs	r0, #0
 800107e:	f000 fc35 	bl	80018ec <BSP_PB_GetState>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d049      	beq.n	800111c <debounceFSM_update+0xdc>
			currentState = BUTTON_FALLING;
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <debounceFSM_update+0xfc>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800108e:	e045      	b.n	800111c <debounceFSM_update+0xdc>
		 * If it remains pressed (condition 'yes'), the state changes to BUTTON_DOWN and the
		 * state of LED1 is toggled. If the button does not remain pressed (condition 'no'),
		 * the state changes back to BUTTON_UP, interpreting this event as a bounce.
		 */
	case BUTTON_FALLING:
		if (BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 8001090:	2000      	movs	r0, #0
 8001092:	f000 fc2b 	bl	80018ec <BSP_PB_GetState>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d012      	beq.n	80010c2 <debounceFSM_update+0x82>
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <debounceFSM_update+0xec>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f887 	bl	80011b4 <delayRead>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00a      	beq.n	80010c2 <debounceFSM_update+0x82>
			currentState = BUTTON_DOWN;
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <debounceFSM_update+0xfc>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
			buttonPressed();
 80010b2:	f000 f849 	bl	8001148 <buttonPressed>
			value = true;
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
			current_edge_state = EDGE_FALLING;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <debounceFSM_update+0x100>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
			//PressButton = !(PressButton);
		} else {
			//currentState=BUTTON_DOWN;
			currentState = BUTTON_UP;
		}
		break;
 80010c0:	e02f      	b.n	8001122 <debounceFSM_update+0xe2>
			currentState = BUTTON_UP;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <debounceFSM_update+0xfc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
		break;
 80010c8:	e02b      	b.n	8001122 <debounceFSM_update+0xe2>
		/*
		 * In the BUTTON_DOWN state, if the button is released, the state changes to BUTTON_RAISING.
		 */
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)) {
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 fc0e 	bl	80018ec <BSP_PB_GetState>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d124      	bne.n	8001120 <debounceFSM_update+0xe0>
			currentState = BUTTON_RAISING;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <debounceFSM_update+0xfc>)
 80010d8:	2203      	movs	r2, #3
 80010da:	701a      	strb	r2, [r3, #0]

		}
		break;
 80010dc:	e020      	b.n	8001120 <debounceFSM_update+0xe0>
		 * If it remains unpressed (condition 'yes'), the state changes back to BUTTON_UP and
		 * the buttonReleased function is called. If the button is pressed again (condition 'no'),
		 * the state changes back to BUTTON_DOWN.
		 */
	case BUTTON_RAISING:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fc04 	bl	80018ec <BSP_PB_GetState>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10e      	bne.n	8001108 <debounceFSM_update+0xc8>
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <debounceFSM_update+0xec>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f860 	bl	80011b4 <delayRead>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <debounceFSM_update+0xc8>
			currentState = BUTTON_UP;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <debounceFSM_update+0xfc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
			current_edge_state = EDGE_RAISING;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <debounceFSM_update+0x100>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
			//buttonReleased();
		} else {

			currentState = BUTTON_DOWN;
		}
		break;
 8001106:	e00c      	b.n	8001122 <debounceFSM_update+0xe2>
			currentState = BUTTON_DOWN;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <debounceFSM_update+0xfc>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
		break;
 800110e:	e008      	b.n	8001122 <debounceFSM_update+0xe2>
	default:
		/* Handle unexpected state */
		assert(0);
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <debounceFSM_update+0x104>)
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <debounceFSM_update+0xf4>)
 8001114:	21b3      	movs	r1, #179	; 0xb3
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <debounceFSM_update+0xf8>)
 8001118:	f002 fe80 	bl	8003e1c <__assert_func>
		break;
 800111c:	bf00      	nop
 800111e:	e000      	b.n	8001122 <debounceFSM_update+0xe2>
		break;
 8001120:	bf00      	nop
	}
	return value;
 8001122:	79fb      	ldrb	r3, [r7, #7]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200008d0 	.word	0x200008d0
 8001130:	08004ef0 	.word	0x08004ef0
 8001134:	08004fcc 	.word	0x08004fcc
 8001138:	08004ecc 	.word	0x08004ecc
 800113c:	200008cc 	.word	0x200008cc
 8001140:	200008cd 	.word	0x200008cd
 8001144:	08004ec8 	.word	0x08004ec8

08001148 <buttonPressed>:
 * @brief   Toggles the state of LED2.
 *
 * @param   None
 * @retval  None
 */
static void buttonPressed(void) {
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	PressButton = !(PressButton);
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <buttonPressed+0x2c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf14      	ite	ne
 8001154:	2301      	movne	r3, #1
 8001156:	2300      	moveq	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b03      	ldr	r3, [pc, #12]	; (8001174 <buttonPressed+0x2c>)
 8001168:	701a      	strb	r2, [r3, #0]
	return;
 800116a:	bf00      	nop
}
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000064 	.word	0x20000064

08001178 <delayInit>:
 * marcando el flag `running` como false. No inicia el conteo del retardo.
 *
 * @param delay Puntero al objeto de retardo.
 * @param duration Duración del retardo en ticks.
 */
void delayInit(delay_t *delay, tick_t duration) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <delayInit+0x1c>
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <delayInit+0x30>)
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <delayInit+0x34>)
 800118c:	2117      	movs	r1, #23
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <delayInit+0x38>)
 8001190:	f002 fe44 	bl	8003e1c <__assert_func>
	assert(duration >= 0);
	delay->duration = duration;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	721a      	strb	r2, [r3, #8]
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	08004efc 	.word	0x08004efc
 80011ac:	08004fe0 	.word	0x08004fe0
 80011b0:	08004f0c 	.word	0x08004f0c

080011b4 <delayRead>:
 * reinicia el objeto y devuelve true.
 *
 * @param delay Puntero al objeto de retardo.
 * @return true si el retardo ha alcanzado su duración, false en caso contrario.
 */
bool_t delayRead(delay_t *delay) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	static bool_t retValue; ///< Variable estática interna para retener el valor de retorno.
	retValue = false;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <delayRead+0x6c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
	assert(delay != NULL);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <delayRead+0x20>
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <delayRead+0x70>)
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <delayRead+0x74>)
 80011cc:	212a      	movs	r1, #42	; 0x2a
 80011ce:	4817      	ldr	r0, [pc, #92]	; (800122c <delayRead+0x78>)
 80011d0:	f002 fe24 	bl	8003e1c <__assert_func>
	assert(delay->duration >= 0);

	if (!delay->running) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7a1b      	ldrb	r3, [r3, #8]
 80011d8:	f083 0301 	eor.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d008      	beq.n	80011f4 <delayRead+0x40>
		delay->startTime = HAL_GetTick();
 80011e2:	f000 fbff 	bl	80019e4 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	721a      	strb	r2, [r3, #8]
 80011f2:	e00f      	b.n	8001214 <delayRead+0x60>
	} else {
		if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 80011f4:	f000 fbf6 	bl	80019e4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1ad2      	subs	r2, r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	d305      	bcc.n	8001214 <delayRead+0x60>
			delay->running = false;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	721a      	strb	r2, [r3, #8]
			retValue = true;
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <delayRead+0x6c>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
		}
	}
	return retValue;
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <delayRead+0x6c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200008d4 	.word	0x200008d4
 8001224:	08004efc 	.word	0x08004efc
 8001228:	08004fec 	.word	0x08004fec
 800122c:	08004f0c 	.word	0x08004f0c

08001230 <clear_led>:
/**
 * @brief Limpia o apaga todos los LEDs.
 *
 * Esta función recorre todas las direcciones de LEDs y les asigna el valor de apagado.
 */
void clear_led(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	assert(led_address !=NULL);
	for (int16_t j = 0; j < 8; j++) {
 8001236:	2300      	movs	r3, #0
 8001238:	80fb      	strh	r3, [r7, #6]
 800123a:	e011      	b.n	8001260 <clear_led+0x30>
		spi_write(led_address[j], clear[j]);
 800123c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <clear_led+0x44>)
 8001242:	5cd2      	ldrb	r2, [r2, r3]
 8001244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <clear_led+0x48>)
 800124a:	5ccb      	ldrb	r3, [r1, r3]
 800124c:	4619      	mov	r1, r3
 800124e:	4610      	mov	r0, r2
 8001250:	f000 f92c 	bl	80014ac <spi_write>
	for (int16_t j = 0; j < 8; j++) {
 8001254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001258:	b29b      	uxth	r3, r3
 800125a:	3301      	adds	r3, #1
 800125c:	b29b      	uxth	r3, r3
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001264:	2b07      	cmp	r3, #7
 8001266:	dde9      	ble.n	800123c <clear_led+0xc>
	}
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000068 	.word	0x20000068
 8001278:	200008d8 	.word	0x200008d8

0800127c <init_led>:
/**
 * @brief Inicializa los LEDs.
 *
 * Esta función configura los LEDs y establece sus valores iniciales.
 */
void init_led(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	delayInit(&delayGhost, TIMEGHOST);
 8001280:	21c8      	movs	r1, #200	; 0xc8
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <init_led+0x40>)
 8001284:	f7ff ff78 	bl	8001178 <delayInit>
	spi_init();                  // inicializa api_spi
 8001288:	f000 f8da 	bl	8001440 <spi_init>
	spi_write(0x09, 0x00);       // No decoding.
 800128c:	2100      	movs	r1, #0
 800128e:	2009      	movs	r0, #9
 8001290:	f000 f90c 	bl	80014ac <spi_write>
	spi_write(0x0b, 0x07);       // Scan limit = 8 LEDs.
 8001294:	2107      	movs	r1, #7
 8001296:	200b      	movs	r0, #11
 8001298:	f000 f908 	bl	80014ac <spi_write>
	spi_write(0x0c, 0x01);       // Power down = 0, normal mode = 1.
 800129c:	2101      	movs	r1, #1
 800129e:	200c      	movs	r0, #12
 80012a0:	f000 f904 	bl	80014ac <spi_write>
	spi_write(0x0f, 0x00);       // No test display.
 80012a4:	2100      	movs	r1, #0
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f900 	bl	80014ac <spi_write>
	clear_led();
 80012ac:	f7ff ffc0 	bl	8001230 <clear_led>
	spi_write(0x0a, 0x05);       // Brightness intensity.
 80012b0:	2105      	movs	r1, #5
 80012b2:	200a      	movs	r0, #10
 80012b4:	f000 f8fa 	bl	80014ac <spi_write>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200008e0 	.word	0x200008e0

080012c0 <update_led>:
 * Esta función toma una lista de valores y actualiza el estado de cada LED según
 * la lista proporcionada.
 *
 * @param paint_list Lista con los valores de los LEDs.
 */
void update_led(uint8_t paint_list[]) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	assert(paint_list !=NULL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d105      	bne.n	80012da <update_led+0x1a>
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <update_led+0x58>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <update_led+0x5c>)
 80012d2:	215a      	movs	r1, #90	; 0x5a
 80012d4:	4812      	ldr	r0, [pc, #72]	; (8001320 <update_led+0x60>)
 80012d6:	f002 fda1 	bl	8003e1c <__assert_func>
	for (int16_t j = 0; j < ROW_MATRIX; j++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	81fb      	strh	r3, [r7, #14]
 80012de:	e011      	b.n	8001304 <update_led+0x44>
		spi_write(led_address[j], paint_list[j]);
 80012e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e4:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <update_led+0x64>)
 80012e6:	5cd0      	ldrb	r0, [r2, r3]
 80012e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4619      	mov	r1, r3
 80012f4:	f000 f8da 	bl	80014ac <spi_write>
	for (int16_t j = 0; j < ROW_MATRIX; j++) {
 80012f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	b29b      	uxth	r3, r3
 8001302:	81fb      	strh	r3, [r7, #14]
 8001304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001308:	2b07      	cmp	r3, #7
 800130a:	dde9      	ble.n	80012e0 <update_led+0x20>
	}
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	08004f2c 	.word	0x08004f2c
 800131c:	08004ff8 	.word	0x08004ff8
 8001320:	08004f40 	.word	0x08004f40
 8001324:	20000068 	.word	0x20000068

08001328 <fantasma_led>:
 * Esta función genera una función de fantasma en la patalla led
 *
 *
 * @param vacio
 */
void fantasma_led(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	assert(tipo_fantasma >= 0);
	switch (tipo_fantasma) {
 800132c:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <fantasma_led+0xf0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d85d      	bhi.n	80013f0 <fantasma_led+0xc8>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <fantasma_led+0x14>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	08001355 	.word	0x08001355
 8001340:	0800136f 	.word	0x0800136f
 8001344:	08001389 	.word	0x08001389
 8001348:	080013a3 	.word	0x080013a3
 800134c:	080013bd 	.word	0x080013bd
 8001350:	080013d7 	.word	0x080013d7
	case (GHOST1):
		update_led(ghost1);
 8001354:	4831      	ldr	r0, [pc, #196]	; (800141c <fantasma_led+0xf4>)
 8001356:	f7ff ffb3 	bl	80012c0 <update_led>
		if (delayRead(&delayGhost)) {
 800135a:	4831      	ldr	r0, [pc, #196]	; (8001420 <fantasma_led+0xf8>)
 800135c:	f7ff ff2a 	bl	80011b4 <delayRead>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d04a      	beq.n	80013fc <fantasma_led+0xd4>
			tipo_fantasma = GHOST2;
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <fantasma_led+0xf0>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800136c:	e046      	b.n	80013fc <fantasma_led+0xd4>
	case (GHOST2):
		update_led(ghost2);
 800136e:	482d      	ldr	r0, [pc, #180]	; (8001424 <fantasma_led+0xfc>)
 8001370:	f7ff ffa6 	bl	80012c0 <update_led>
		if (delayRead(&delayGhost)) {
 8001374:	482a      	ldr	r0, [pc, #168]	; (8001420 <fantasma_led+0xf8>)
 8001376:	f7ff ff1d 	bl	80011b4 <delayRead>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d03f      	beq.n	8001400 <fantasma_led+0xd8>
			tipo_fantasma = GHOST3;
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <fantasma_led+0xf0>)
 8001382:	2202      	movs	r2, #2
 8001384:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001386:	e03b      	b.n	8001400 <fantasma_led+0xd8>
	case (GHOST3):
		update_led(ghost3);
 8001388:	4827      	ldr	r0, [pc, #156]	; (8001428 <fantasma_led+0x100>)
 800138a:	f7ff ff99 	bl	80012c0 <update_led>
		if (delayRead(&delayGhost)) {
 800138e:	4824      	ldr	r0, [pc, #144]	; (8001420 <fantasma_led+0xf8>)
 8001390:	f7ff ff10 	bl	80011b4 <delayRead>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d034      	beq.n	8001404 <fantasma_led+0xdc>
			tipo_fantasma = GHOST4;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <fantasma_led+0xf0>)
 800139c:	2203      	movs	r2, #3
 800139e:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013a0:	e030      	b.n	8001404 <fantasma_led+0xdc>
	case (GHOST4):
		update_led(ghost4);
 80013a2:	4822      	ldr	r0, [pc, #136]	; (800142c <fantasma_led+0x104>)
 80013a4:	f7ff ff8c 	bl	80012c0 <update_led>
		if (delayRead(&delayGhost)) {
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <fantasma_led+0xf8>)
 80013aa:	f7ff ff03 	bl	80011b4 <delayRead>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d029      	beq.n	8001408 <fantasma_led+0xe0>
			tipo_fantasma = GHOST5;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <fantasma_led+0xf0>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013ba:	e025      	b.n	8001408 <fantasma_led+0xe0>
	case (GHOST5):
		update_led(ghost5);
 80013bc:	481c      	ldr	r0, [pc, #112]	; (8001430 <fantasma_led+0x108>)
 80013be:	f7ff ff7f 	bl	80012c0 <update_led>
		if (delayRead(&delayGhost)) {
 80013c2:	4817      	ldr	r0, [pc, #92]	; (8001420 <fantasma_led+0xf8>)
 80013c4:	f7ff fef6 	bl	80011b4 <delayRead>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d01e      	beq.n	800140c <fantasma_led+0xe4>
			tipo_fantasma = GHOST6;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <fantasma_led+0xf0>)
 80013d0:	2205      	movs	r2, #5
 80013d2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013d4:	e01a      	b.n	800140c <fantasma_led+0xe4>
	case (GHOST6):
		update_led(ghost5);
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <fantasma_led+0x108>)
 80013d8:	f7ff ff72 	bl	80012c0 <update_led>
		if (delayRead(&delayGhost)) {
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <fantasma_led+0xf8>)
 80013de:	f7ff fee9 	bl	80011b4 <delayRead>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <fantasma_led+0xe8>
			tipo_fantasma = GHOST1;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <fantasma_led+0xf0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013ee:	e00f      	b.n	8001410 <fantasma_led+0xe8>
	default:
		/* Handle unexpected state */
		assert(0);
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <fantasma_led+0x10c>)
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <fantasma_led+0x110>)
 80013f4:	21a0      	movs	r1, #160	; 0xa0
 80013f6:	4811      	ldr	r0, [pc, #68]	; (800143c <fantasma_led+0x114>)
 80013f8:	f002 fd10 	bl	8003e1c <__assert_func>
		break;
 80013fc:	bf00      	nop
 80013fe:	e008      	b.n	8001412 <fantasma_led+0xea>
		break;
 8001400:	bf00      	nop
 8001402:	e006      	b.n	8001412 <fantasma_led+0xea>
		break;
 8001404:	bf00      	nop
 8001406:	e004      	b.n	8001412 <fantasma_led+0xea>
		break;
 8001408:	bf00      	nop
 800140a:	e002      	b.n	8001412 <fantasma_led+0xea>
		break;
 800140c:	bf00      	nop
 800140e:	e000      	b.n	8001412 <fantasma_led+0xea>
		break;
 8001410:	bf00      	nop
	}
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200008ec 	.word	0x200008ec
 800141c:	20000070 	.word	0x20000070
 8001420:	200008e0 	.word	0x200008e0
 8001424:	20000078 	.word	0x20000078
 8001428:	20000080 	.word	0x20000080
 800142c:	20000088 	.word	0x20000088
 8001430:	20000090 	.word	0x20000090
 8001434:	08004f60 	.word	0x08004f60
 8001438:	08005004 	.word	0x08005004
 800143c:	08004f40 	.word	0x08004f40

08001440 <spi_init>:
 */
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);
static void spi_write_byte(uint8_t);

void spi_init(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8001444:	f000 f864 	bl	8001510 <MX_GPIO_Init>
	MX_SPI3_Init();
 8001448:	f000 f936 	bl	80016b8 <MX_SPI3_Init>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <spi_write_byte>:
 * capabilities (HAL) but instead implements the transmission manually.
 *
 * @param byte The byte of data intended to be sent through SPI.
 *
 */
static void spi_write_byte(uint8_t byte) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	assert_param(byte);
	// Iterates through each of the 8 bits of the provided byte.
	for (uint8_t i = 0; i < NUM_BITS; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e01b      	b.n	8001498 <spi_write_byte+0x48>
		// Sets the clock pin to a low state.
		// which establishes the sending of a byte.
		HAL_GPIO_WritePin(maxport, clock_Pin, STATE_LOW);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001466:	4810      	ldr	r0, [pc, #64]	; (80014a8 <spi_write_byte+0x58>)
 8001468:	f001 f8be 	bl	80025e8 <HAL_GPIO_WritePin>
		// According to the IC requirements, sends the most
		// significant bit (MSB) of the byte on the data pin (MOSI).
		HAL_GPIO_WritePin(maxport, data_Pin, byte & SIGNIFICANT_BIT);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <spi_write_byte+0x58>)
 800147c:	f001 f8b4 	bl	80025e8 <HAL_GPIO_WritePin>
		// Shifts the byte to the left to prepare the next bit.
		// This ensures the sending from the most significant bit
		// to the least significant according to the employed IC.
		byte = byte << NEXT_BIT;
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	71fb      	strb	r3, [r7, #7]
		// Sets the clock pin to a high state
		// indicating the completion of the bit's transmission.
		HAL_GPIO_WritePin(maxport, clock_Pin, STATE_HIGH);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <spi_write_byte+0x58>)
 800148e:	f001 f8ab 	bl	80025e8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < NUM_BITS; i++) {
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	3301      	adds	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b07      	cmp	r3, #7
 800149c:	d9e0      	bls.n	8001460 <spi_write_byte+0x10>
	}
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020c00 	.word	0x40020c00

080014ac <spi_write>:
 * of the MAX7219 IC.
 *
 * @param address Byte of address intended to be sent through SPI.
 * @param cmd Byte of command intended to be sent through SPI.
 */
void spi_write(uint8_t address, uint8_t cmd) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
	assert_param(address != NULL);
	assert_param(cmd != NULL);
	/** Sets the CS (Chip Select) pin to a low state to
	 * initiate communication with the connected slave device
	 * at port cs_Pin via the CS cable. */
	HAL_GPIO_WritePin(maxport, cs_Pin, STATE_LOW);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c2:	4812      	ldr	r0, [pc, #72]	; (800150c <spi_write+0x60>)
 80014c4:	f001 f890 	bl	80025e8 <HAL_GPIO_WritePin>
	/** Sends the pair of bytes (address and command) 'num' times
	 * in case there are multiple screens. */
	for (uint8_t i = 0; i < num; i++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e00a      	b.n	80014e4 <spi_write+0x38>
		/* Sends the address byte to the LED IC indicating the action.
		 * These actions can range from turning on a specific row to
		 * defining the brightness of the LEDs. */
		spi_write_byte(address);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ffbd 	bl	8001450 <spi_write_byte>
		/* Sends the command byte detailing what to do at the previously
		 * specified address, defining what action to take at that memory position. */
		spi_write_byte(cmd);
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ffb9 	bl	8001450 <spi_write_byte>
	for (uint8_t i = 0; i < num; i++) {
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	3301      	adds	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f1      	beq.n	80014ce <spi_write+0x22>
	}
	/** Sets the CS (Chip Select) pin to low, indicating
	 * the communication will end. */
	HAL_GPIO_WritePin(maxport, cs_Pin, STATE_LOW);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <spi_write+0x60>)
 80014f2:	f001 f879 	bl	80025e8 <HAL_GPIO_WritePin>
	/* Sets the CS (Chip Select) pin to high, freeing
	 * the slave. */
	HAL_GPIO_WritePin(maxport, cs_Pin, STATE_HIGH);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <spi_write+0x60>)
 80014fe:	f001 f873 	bl	80025e8 <HAL_GPIO_WritePin>
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40020c00 	.word	0x40020c00

08001510 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <MX_GPIO_Init+0x194>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a5d      	ldr	r2, [pc, #372]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b57      	ldr	r3, [pc, #348]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a56      	ldr	r2, [pc, #344]	; (80016a4 <MX_GPIO_Init+0x194>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <MX_GPIO_Init+0x194>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <MX_GPIO_Init+0x194>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a41      	ldr	r2, [pc, #260]	; (80016a4 <MX_GPIO_Init+0x194>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <MX_GPIO_Init+0x194>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <MX_GPIO_Init+0x194>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <MX_GPIO_Init+0x194>)
 80015bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <MX_GPIO_Init+0x194>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | GPIO_PIN_5 | LD2_Pin,
 80015ce:	2200      	movs	r2, #0
 80015d0:	f244 01a1 	movw	r1, #16545	; 0x40a1
 80015d4:	4834      	ldr	r0, [pc, #208]	; (80016a8 <MX_GPIO_Init+0x198>)
 80015d6:	f001 f807 	bl	80025e8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, CS_Pin | DIN_Pin | CLK_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80015e0:	4832      	ldr	r0, [pc, #200]	; (80016ac <MX_GPIO_Init+0x19c>)
 80015e2:	f001 f801 	bl	80025e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin | GPIO_PIN_15,
 80015e6:	2200      	movs	r2, #0
 80015e8:	f248 0140 	movw	r1, #32832	; 0x8040
 80015ec:	4830      	ldr	r0, [pc, #192]	; (80016b0 <MX_GPIO_Init+0x1a0>)
 80015ee:	f000 fffb 	bl	80025e8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	482a      	ldr	r0, [pc, #168]	; (80016b4 <MX_GPIO_Init+0x1a4>)
 800160a:	f000 fe29 	bl	8002260 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800160e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001612:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <MX_GPIO_Init+0x198>)
 8001628:	f000 fe1a 	bl	8002260 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin DIN_Pin CLK_Pin */
	GPIO_InitStruct.Pin = CS_Pin | DIN_Pin | CLK_Pin;
 800162c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001630:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4819      	ldr	r0, [pc, #100]	; (80016ac <MX_GPIO_Init+0x19c>)
 8001646:	f000 fe0b 	bl	8002260 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_PowerSwitchOn_Pin PG15 */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin | GPIO_PIN_15;
 800164a:	f248 0340 	movw	r3, #32832	; 0x8040
 800164e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <MX_GPIO_Init+0x1a0>)
 8001664:	f000 fdfc 	bl	8002260 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	480d      	ldr	r0, [pc, #52]	; (80016b0 <MX_GPIO_Init+0x1a0>)
 800167c:	f000 fdf0 	bl	8002260 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001680:	2320      	movs	r3, #32
 8001682:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001688:	2301      	movs	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_GPIO_Init+0x198>)
 8001698:	f000 fde2 	bl	8002260 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800169c:	bf00      	nop
 800169e:	3730      	adds	r7, #48	; 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40020800 	.word	0x40020800

080016b8 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_SPI3_Init+0x64>)
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <MX_SPI3_Init+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_SPI3_Init+0x64>)
 80016c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_SPI3_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_SPI3_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_SPI3_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_SPI3_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_SPI3_Init+0x64>)
 80016e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016e8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_SPI3_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <MX_SPI3_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_SPI3_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <MX_SPI3_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_SPI3_Init+0x64>)
 8001704:	220a      	movs	r2, #10
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_SPI3_Init+0x64>)
 800170a:	f001 fd3b 	bl	8003184 <HAL_SPI_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_SPI3_Init+0x60>
		Error_Handler();
 8001714:	f7ff f950 	bl	80009b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200008f0 	.word	0x200008f0
 8001720:	40003c00 	.word	0x40003c00

08001724 <init_MEF>:
static delay_t DelayDebounce; // tiempo de antirrebote del boton

/**
 * @brief Función para inicializar la MEF. Configura el estado inicial.
 */
void init_MEF(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	estadoMEF = SET_ini; /**< Configura el estado inicial. */
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <init_MEF+0x1c>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
	// Inicializar la Máquina de Estados Finitos (FSM) para el antirrebote.
	delayInit(&DelayDebounce, TIME_DEBOUNCE);
 800172e:	2128      	movs	r1, #40	; 0x28
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <init_MEF+0x20>)
 8001732:	f7ff fd21 	bl	8001178 <delayInit>
	debounceFSM_init(&DelayDebounce);
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <init_MEF+0x20>)
 8001738:	f7ff fc68 	bl	800100c <debounceFSM_init>
	return;
 800173c:	bf00      	nop
}
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000948 	.word	0x20000948
 8001744:	2000094c 	.word	0x2000094c

08001748 <update_MEF>:
 * estado en función de las condiciones de entrada.
 *
 * @param delay Puntero al tipo de dato delay_t que define la estructura de retardo.
 * @return State_MEF_t: El estado actualizado de la MEF.
 */
State_MEF_t update_MEF(delay_t *delay) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	assert(&estadoMEF!=NULL); /**< Asegura que el puntero al estado actual no es nulo. */
	switch (estadoMEF) {
 8001750:	4b62      	ldr	r3, [pc, #392]	; (80018dc <update_MEF+0x194>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b05      	cmp	r3, #5
 8001756:	f200 80ac 	bhi.w	80018b2 <update_MEF+0x16a>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <update_MEF+0x18>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	08001779 	.word	0x08001779
 8001764:	08001795 	.word	0x08001795
 8001768:	080017df 	.word	0x080017df
 800176c:	08001829 	.word	0x08001829
 8001770:	08001873 	.word	0x08001873
 8001774:	08001893 	.word	0x08001893
	case SET_ini:
		if (delayRead(delay)) {
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fd1b 	bl	80011b4 <delayRead>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <update_MEF+0x44>
			estadoMEF = FIRST;
 8001784:	4b55      	ldr	r3, [pc, #340]	; (80018dc <update_MEF+0x194>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
		} else if (!delayRead(delay)) {
			//estadoMEF = ;
		}
		break;
 800178a:	e0a1      	b.n	80018d0 <update_MEF+0x188>
		} else if (!delayRead(delay)) {
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fd11 	bl	80011b4 <delayRead>
		break;
 8001792:	e09d      	b.n	80018d0 <update_MEF+0x188>
	case FIRST:
		if (!debounceFSM_update() && delayRead(delay)) {
 8001794:	f7ff fc54 	bl	8001040 <debounceFSM_update>
 8001798:	4603      	mov	r3, r0
 800179a:	f083 0301 	eor.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <update_MEF+0x70>
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fd05 	bl	80011b4 <delayRead>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <update_MEF+0x70>
			estadoMEF = SECOND;
 80017b0:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <update_MEF+0x194>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = BAD;
		}
		break;
 80017b6:	e082      	b.n	80018be <update_MEF+0x176>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 80017b8:	2000      	movs	r0, #0
 80017ba:	f000 f897 	bl	80018ec <BSP_PB_GetState>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d07c      	beq.n	80018be <update_MEF+0x176>
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fcf5 	bl	80011b4 <delayRead>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d073      	beq.n	80018be <update_MEF+0x176>
			estadoMEF = BAD;
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <update_MEF+0x194>)
 80017d8:	2205      	movs	r2, #5
 80017da:	701a      	strb	r2, [r3, #0]
		break;
 80017dc:	e06f      	b.n	80018be <update_MEF+0x176>
	case SECOND:
		if (!debounceFSM_update() && delayRead(delay)) {
 80017de:	f7ff fc2f 	bl	8001040 <debounceFSM_update>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f083 0301 	eor.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <update_MEF+0xba>
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fce0 	bl	80011b4 <delayRead>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <update_MEF+0xba>
			estadoMEF = THIRD;
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <update_MEF+0x194>)
 80017fc:	2203      	movs	r2, #3
 80017fe:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = BAD;
		}
		break;
 8001800:	e05f      	b.n	80018c2 <update_MEF+0x17a>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f872 	bl	80018ec <BSP_PB_GetState>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d059      	beq.n	80018c2 <update_MEF+0x17a>
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fcd0 	bl	80011b4 <delayRead>
 8001814:	4603      	mov	r3, r0
 8001816:	f083 0301 	eor.w	r3, r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d050      	beq.n	80018c2 <update_MEF+0x17a>
			estadoMEF = BAD;
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <update_MEF+0x194>)
 8001822:	2205      	movs	r2, #5
 8001824:	701a      	strb	r2, [r3, #0]
		break;
 8001826:	e04c      	b.n	80018c2 <update_MEF+0x17a>
	case THIRD:
		if (!debounceFSM_update() && delayRead(delay)) {
 8001828:	f7ff fc0a 	bl	8001040 <debounceFSM_update>
 800182c:	4603      	mov	r3, r0
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <update_MEF+0x104>
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fcbb 	bl	80011b4 <delayRead>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <update_MEF+0x104>
			estadoMEF = FIRST;
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <update_MEF+0x194>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = GOOD;
		}
		break;
 800184a:	e03c      	b.n	80018c6 <update_MEF+0x17e>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 800184c:	2000      	movs	r0, #0
 800184e:	f000 f84d 	bl	80018ec <BSP_PB_GetState>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d036      	beq.n	80018c6 <update_MEF+0x17e>
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fcab 	bl	80011b4 <delayRead>
 800185e:	4603      	mov	r3, r0
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d02d      	beq.n	80018c6 <update_MEF+0x17e>
			estadoMEF = GOOD;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <update_MEF+0x194>)
 800186c:	2204      	movs	r2, #4
 800186e:	701a      	strb	r2, [r3, #0]
		break;
 8001870:	e029      	b.n	80018c6 <update_MEF+0x17e>
	case GOOD:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f83a 	bl	80018ec <BSP_PB_GetState>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d125      	bne.n	80018ca <update_MEF+0x182>
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fc98 	bl	80011b4 <delayRead>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01f      	beq.n	80018ca <update_MEF+0x182>
			estadoMEF = SET_ini;
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <update_MEF+0x194>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001890:	e01b      	b.n	80018ca <update_MEF+0x182>
	case BAD:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f82a 	bl	80018ec <BSP_PB_GetState>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d117      	bne.n	80018ce <update_MEF+0x186>
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fc88 	bl	80011b4 <delayRead>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d011      	beq.n	80018ce <update_MEF+0x186>
			estadoMEF = SET_ini;
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <update_MEF+0x194>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
		}
		break;
 80018b0:	e00d      	b.n	80018ce <update_MEF+0x186>
	default:
		/** En caso de llegar a un estado no definido, se fuerza una interrupción. */
		assert(0);
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <update_MEF+0x198>)
 80018b4:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <update_MEF+0x19c>)
 80018b6:	2155      	movs	r1, #85	; 0x55
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <update_MEF+0x1a0>)
 80018ba:	f002 faaf 	bl	8003e1c <__assert_func>
		break;
 80018be:	bf00      	nop
 80018c0:	e006      	b.n	80018d0 <update_MEF+0x188>
		break;
 80018c2:	bf00      	nop
 80018c4:	e004      	b.n	80018d0 <update_MEF+0x188>
		break;
 80018c6:	bf00      	nop
 80018c8:	e002      	b.n	80018d0 <update_MEF+0x188>
		break;
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <update_MEF+0x188>
		break;
 80018ce:	bf00      	nop
	}
	return (estadoMEF);
 80018d0:	4b02      	ldr	r3, [pc, #8]	; (80018dc <update_MEF+0x194>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000948 	.word	0x20000948
 80018e0:	08004f64 	.word	0x08004f64
 80018e4:	08005014 	.word	0x08005014
 80018e8:	08004f68 	.word	0x08004f68

080018ec <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <BSP_PB_GetState+0x28>)
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fe57 	bl	80025b8 <HAL_GPIO_ReadPin>
 800190a:	4603      	mov	r3, r0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000098 	.word	0x20000098

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <HAL_Init+0x40>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_Init+0x40>)
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_Init+0x40>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 f931 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001946:	2000      	movs	r0, #0
 8001948:	f000 f808 	bl	800195c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff f83a 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023c00 	.word	0x40023c00

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x54>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x58>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f93b 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001998:	f000 f911 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_InitTick+0x5c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000060 	.word	0x20000060
 80019b4:	200000a0 	.word	0x200000a0
 80019b8:	2000009c 	.word	0x2000009c

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200000a0 	.word	0x200000a0
 80019e0:	20000958 	.word	0x20000958

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000958 	.word	0x20000958

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200000a0 	.word	0x200000a0

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff47 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff5c 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffb0 	bl	8001b64 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e06c      	b.n	8001cfc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d106      	bne.n	8001c3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2223      	movs	r2, #35	; 0x23
 8001c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7fe feed 	bl	8000a14 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <HAL_ETH_Init+0xf4>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a30      	ldr	r2, [pc, #192]	; (8001d04 <HAL_ETH_Init+0xf4>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <HAL_ETH_Init+0xf4>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_ETH_Init+0xf8>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_ETH_Init+0xf8>)
 8001c5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c60:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_ETH_Init+0xf8>)
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4927      	ldr	r1, [pc, #156]	; (8001d08 <HAL_ETH_Init+0xf8>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_ETH_Init+0xf8>)
 8001c72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c8c:	f7ff feaa 	bl	80019e4 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c92:	e011      	b.n	8001cb8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c94:	f7ff fea6 	bl	80019e4 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ca2:	d909      	bls.n	8001cb8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	22e0      	movs	r2, #224	; 0xe0
 8001cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e021      	b.n	8001cfc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1e4      	bne.n	8001c94 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f958 	bl	8001f80 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f9ff 	bl	80020d4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa55 	bl	8002186 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f9bd 	bl	8002064 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800

08001d0c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4b51      	ldr	r3, [pc, #324]	; (8001e68 <ETH_SetMACConfig+0x15c>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	7c1b      	ldrb	r3, [r3, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <ETH_SetMACConfig+0x28>
 8001d2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d32:	e000      	b.n	8001d36 <ETH_SetMACConfig+0x2a>
 8001d34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7c5b      	ldrb	r3, [r3, #17]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <ETH_SetMACConfig+0x38>
 8001d3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d42:	e000      	b.n	8001d46 <ETH_SetMACConfig+0x3a>
 8001d44:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d46:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	7fdb      	ldrb	r3, [r3, #31]
 8001d52:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d54:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	7f92      	ldrb	r2, [r2, #30]
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	d102      	bne.n	8001d6a <ETH_SetMACConfig+0x5e>
 8001d64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d68:	e000      	b.n	8001d6c <ETH_SetMACConfig+0x60>
 8001d6a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	7f1b      	ldrb	r3, [r3, #28]
 8001d72:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d74:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	791b      	ldrb	r3, [r3, #4]
 8001d80:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d102      	bne.n	8001d94 <ETH_SetMACConfig+0x88>
 8001d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d92:	e000      	b.n	8001d96 <ETH_SetMACConfig+0x8a>
 8001d94:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	7bdb      	ldrb	r3, [r3, #15]
 8001d9c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d9e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001da4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dae:	4313      	orrs	r3, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff fe18 	bl	80019fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001de2:	4013      	ands	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001df2:	2a00      	cmp	r2, #0
 8001df4:	d101      	bne.n	8001dfa <ETH_SetMACConfig+0xee>
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	e000      	b.n	8001dfc <ETH_SetMACConfig+0xf0>
 8001dfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dfc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e0a:	2a01      	cmp	r2, #1
 8001e0c:	d101      	bne.n	8001e12 <ETH_SetMACConfig+0x106>
 8001e0e:	2208      	movs	r2, #8
 8001e10:	e000      	b.n	8001e14 <ETH_SetMACConfig+0x108>
 8001e12:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e14:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e1c:	2a01      	cmp	r2, #1
 8001e1e:	d101      	bne.n	8001e24 <ETH_SetMACConfig+0x118>
 8001e20:	2204      	movs	r2, #4
 8001e22:	e000      	b.n	8001e26 <ETH_SetMACConfig+0x11a>
 8001e24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e2e:	2a01      	cmp	r2, #1
 8001e30:	d101      	bne.n	8001e36 <ETH_SetMACConfig+0x12a>
 8001e32:	2202      	movs	r2, #2
 8001e34:	e000      	b.n	8001e38 <ETH_SetMACConfig+0x12c>
 8001e36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff fdd3 	bl	80019fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	619a      	str	r2, [r3, #24]
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	ff20810f 	.word	0xff20810f

08001e6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <ETH_SetDMAConfig+0x110>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	7b1b      	ldrb	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <ETH_SetDMAConfig+0x2c>
 8001e92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e96:	e000      	b.n	8001e9a <ETH_SetDMAConfig+0x2e>
 8001e98:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	7b5b      	ldrb	r3, [r3, #13]
 8001e9e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ea0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	7f52      	ldrb	r2, [r2, #29]
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	d102      	bne.n	8001eb0 <ETH_SetDMAConfig+0x44>
 8001eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eae:	e000      	b.n	8001eb2 <ETH_SetDMAConfig+0x46>
 8001eb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001eb2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7b9b      	ldrb	r3, [r3, #14]
 8001eb8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001eba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ec0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	7f1b      	ldrb	r3, [r3, #28]
 8001ec6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ec8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7f9b      	ldrb	r3, [r3, #30]
 8001ece:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ed0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ed6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ede:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff fd7a 	bl	80019fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f10:	461a      	mov	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	791b      	ldrb	r3, [r3, #4]
 8001f1a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f20:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f26:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f2c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f34:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f36:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f3e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f44:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f52:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f7ff fd4b 	bl	80019fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	f8de3f23 	.word	0xf8de3f23

08001f80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0a6      	sub	sp, #152	; 0x98
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fe2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ff4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fe86 	bl	8001d0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002000:	2301      	movs	r3, #1
 8002002:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002004:	2301      	movs	r3, #1
 8002006:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800202c:	2301      	movs	r3, #1
 800202e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002034:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002036:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800203a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800203c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002040:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002042:	2301      	movs	r3, #1
 8002044:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff08 	bl	8001e6c <ETH_SetDMAConfig>
}
 800205c:	bf00      	nop
 800205e:	3798      	adds	r7, #152	; 0x98
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3305      	adds	r3, #5
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	3204      	adds	r2, #4
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <ETH_MACAddressConfig+0x68>)
 8002086:	4413      	add	r3, r2
 8002088:	461a      	mov	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3303      	adds	r3, #3
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	061a      	lsls	r2, r3, #24
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3302      	adds	r3, #2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3301      	adds	r3, #1
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	4313      	orrs	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	7812      	ldrb	r2, [r2, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <ETH_MACAddressConfig+0x6c>)
 80020b6:	4413      	add	r3, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	6013      	str	r3, [r2, #0]
}
 80020be:	bf00      	nop
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40028040 	.word	0x40028040
 80020d0:	40028044 	.word	0x40028044

080020d4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e03e      	b.n	8002160 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68d9      	ldr	r1, [r3, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	3206      	adds	r2, #6
 8002114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d80c      	bhi.n	8002144 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68d9      	ldr	r1, [r3, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	461a      	mov	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	e004      	b.n	800214e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3301      	adds	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d9bd      	bls.n	80020e2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002178:	611a      	str	r2, [r3, #16]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e046      	b.n	8002222 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6919      	ldr	r1, [r3, #16]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80021d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	3212      	adds	r2, #18
 80021ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d80c      	bhi.n	8002212 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6919      	ldr	r1, [r3, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	e004      	b.n	800221c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d9b5      	bls.n	8002194 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002252:	60da      	str	r2, [r3, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e177      	b.n	800256c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 8166 	bne.w	8002566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d005      	beq.n	80022b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d130      	bne.n	8002314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	2201      	movs	r2, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 0201 	and.w	r2, r3, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b03      	cmp	r3, #3
 800231e:	d017      	beq.n	8002350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d123      	bne.n	80023a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80c0 	beq.w	8002566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a65      	ldr	r2, [pc, #404]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a61      	ldr	r2, [pc, #388]	; (8002588 <HAL_GPIO_Init+0x328>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_GPIO_Init+0x32c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d037      	beq.n	800249e <HAL_GPIO_Init+0x23e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_GPIO_Init+0x330>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_GPIO_Init+0x23a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_GPIO_Init+0x334>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_Init+0x236>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a55      	ldr	r2, [pc, #340]	; (8002598 <HAL_GPIO_Init+0x338>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_Init+0x232>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_GPIO_Init+0x33c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_Init+0x22e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <HAL_GPIO_Init+0x340>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x22a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x344>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x348>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x34c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x350>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x21a>
 8002476:	2309      	movs	r3, #9
 8002478:	e012      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800247a:	230a      	movs	r3, #10
 800247c:	e010      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800247e:	2308      	movs	r3, #8
 8002480:	e00e      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002482:	2307      	movs	r3, #7
 8002484:	e00c      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002486:	2306      	movs	r3, #6
 8002488:	e00a      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800248a:	2305      	movs	r3, #5
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800248e:	2304      	movs	r3, #4
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	; (8002588 <HAL_GPIO_Init+0x328>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <HAL_GPIO_Init+0x354>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_GPIO_Init+0x354>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f ae84 	bls.w	800227c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40021400 	.word	0x40021400
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40021c00 	.word	0x40021c00
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40022400 	.word	0x40022400
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800261a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261c:	b08f      	sub	sp, #60	; 0x3c
 800261e:	af0a      	add	r7, sp, #40	; 0x28
 8002620:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e10f      	b.n	800284c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fb5a 	bl	8000d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2203      	movs	r2, #3
 8002650:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f935 	bl	80038da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	687e      	ldr	r6, [r7, #4]
 8002678:	466d      	mov	r5, sp
 800267a:	f106 0410 	add.w	r4, r6, #16
 800267e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800268a:	e885 0003 	stmia.w	r5, {r0, r1}
 800268e:	1d33      	adds	r3, r6, #4
 8002690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002692:	6838      	ldr	r0, [r7, #0]
 8002694:	f001 f8c0 	bl	8003818 <USB_CoreInit>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0d0      	b.n	800284c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 f923 	bl	80038fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	e04a      	b.n	8002752 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	333d      	adds	r3, #61	; 0x3d
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	333c      	adds	r3, #60	; 0x3c
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	b298      	uxth	r0, r3
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3344      	adds	r3, #68	; 0x44
 80026f8:	4602      	mov	r2, r0
 80026fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3340      	adds	r3, #64	; 0x40
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3348      	adds	r3, #72	; 0x48
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	334c      	adds	r3, #76	; 0x4c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3354      	adds	r3, #84	; 0x54
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	3301      	adds	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	d3af      	bcc.n	80026bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e044      	b.n	80027ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	3301      	adds	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3b5      	bcc.n	8002762 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	687e      	ldr	r6, [r7, #4]
 80027fe:	466d      	mov	r5, sp
 8002800:	f106 0410 	add.w	r4, r6, #16
 8002804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002810:	e885 0003 	stmia.w	r5, {r0, r1}
 8002814:	1d33      	adds	r3, r6, #4
 8002816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002818:	6838      	ldr	r0, [r7, #0]
 800281a:	f001 f8bb 	bl	8003994 <USB_DevInit>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e00d      	b.n	800284c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fa86 	bl	8003d56 <USB_DevDisconnect>

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e267      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d075      	beq.n	800295e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002872:	4b88      	ldr	r3, [pc, #544]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d00c      	beq.n	8002898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b85      	ldr	r3, [pc, #532]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002886:	2b08      	cmp	r3, #8
 8002888:	d112      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b82      	ldr	r3, [pc, #520]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002896:	d10b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	4b7e      	ldr	r3, [pc, #504]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d05b      	beq.n	800295c <HAL_RCC_OscConfig+0x108>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d157      	bne.n	800295c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e242      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x74>
 80028ba:	4b76      	ldr	r3, [pc, #472]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a75      	ldr	r2, [pc, #468]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e01d      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x98>
 80028d2:	4b70      	ldr	r3, [pc, #448]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6f      	ldr	r2, [pc, #444]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b6d      	ldr	r3, [pc, #436]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6c      	ldr	r2, [pc, #432]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028ec:	4b69      	ldr	r3, [pc, #420]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a68      	ldr	r2, [pc, #416]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a65      	ldr	r2, [pc, #404]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff f86a 	bl	80019e4 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff f866 	bl	80019e4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e207      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0xc0>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff f856 	bl	80019e4 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff f852 	bl	80019e4 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1f3      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0xe8>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d063      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296a:	4b4a      	ldr	r3, [pc, #296]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297e:	2b08      	cmp	r3, #8
 8002980:	d11c      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b44      	ldr	r3, [pc, #272]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1c7      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4937      	ldr	r1, [pc, #220]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	e03a      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_OscConfig+0x244>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff f80b 	bl	80019e4 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d2:	f7ff f807 	bl	80019e4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1a8      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4925      	ldr	r1, [pc, #148]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e015      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCC_OscConfig+0x244>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe ffea 	bl	80019e4 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a14:	f7fe ffe6 	bl	80019e4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e187      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d036      	beq.n	8002aac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_RCC_OscConfig+0x248>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe ffca 	bl	80019e4 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fe ffc6 	bl	80019e4 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e167      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_OscConfig+0x240>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x200>
 8002a72:	e01b      	b.n	8002aac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_OscConfig+0x248>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe ffb3 	bl	80019e4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	e00e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a82:	f7fe ffaf 	bl	80019e4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d907      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e150      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
 8002a94:	40023800 	.word	0x40023800
 8002a98:	42470000 	.word	0x42470000
 8002a9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	4b88      	ldr	r3, [pc, #544]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ea      	bne.n	8002a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8097 	beq.w	8002be8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abe:	4b81      	ldr	r3, [pc, #516]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	4b7d      	ldr	r3, [pc, #500]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a7c      	ldr	r2, [pc, #496]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b7a      	ldr	r3, [pc, #488]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aea:	4b77      	ldr	r3, [pc, #476]	; (8002cc8 <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d118      	bne.n	8002b28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af6:	4b74      	ldr	r3, [pc, #464]	; (8002cc8 <HAL_RCC_OscConfig+0x474>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a73      	ldr	r2, [pc, #460]	; (8002cc8 <HAL_RCC_OscConfig+0x474>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b02:	f7fe ff6f 	bl	80019e4 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7fe ff6b 	bl	80019e4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e10c      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_RCC_OscConfig+0x474>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2ea>
 8002b30:	4b64      	ldr	r3, [pc, #400]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a63      	ldr	r2, [pc, #396]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3c:	e01c      	b.n	8002b78 <HAL_RCC_OscConfig+0x324>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x30c>
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a5e      	ldr	r2, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	4b5c      	ldr	r3, [pc, #368]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	4a5b      	ldr	r2, [pc, #364]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0x324>
 8002b60:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6c:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	4a54      	ldr	r2, [pc, #336]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f023 0304 	bic.w	r3, r3, #4
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fe ff30 	bl	80019e4 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b88:	f7fe ff2c 	bl	80019e4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0cb      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9e:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0ee      	beq.n	8002b88 <HAL_RCC_OscConfig+0x334>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bac:	f7fe ff1a 	bl	80019e4 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe ff16 	bl	80019e4 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0b5      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bca:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1ee      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d105      	bne.n	8002be8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bdc:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	4a38      	ldr	r2, [pc, #224]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80a1 	beq.w	8002d34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf2:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d05c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d141      	bne.n	8002c8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <HAL_RCC_OscConfig+0x478>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe feea 	bl	80019e4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fee6 	bl	80019e4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e087      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	019b      	lsls	r3, r3, #6
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	491b      	ldr	r1, [pc, #108]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x478>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe febf 	bl	80019e4 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe febb 	bl	80019e4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e05c      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x416>
 8002c88:	e054      	b.n	8002d34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCC_OscConfig+0x478>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fea8 	bl	80019e4 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fea4 	bl	80019e4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e045      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_OscConfig+0x470>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x444>
 8002cb6:	e03d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e038      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d028      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d121      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d11a      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d111      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cc      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d90c      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b8      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	494d      	ldr	r1, [pc, #308]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d044      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d119      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e067      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4934      	ldr	r1, [pc, #208]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e34:	f7fe fdd6 	bl	80019e4 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7fe fdd2 	bl	80019e4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e04f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 020c 	and.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1eb      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d20c      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e032      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4916      	ldr	r1, [pc, #88]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	490e      	ldr	r1, [pc, #56]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 f821 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	490a      	ldr	r1, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	5ccb      	ldrb	r3, [r1, r3]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fd36 	bl	800195c <HAL_InitTick>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023c00 	.word	0x40023c00
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08004fb4 	.word	0x08004fb4
 8002f08:	20000060 	.word	0x20000060
 8002f0c:	2000009c 	.word	0x2000009c

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f14:	b094      	sub	sp, #80	; 0x50
 8002f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f20:	2300      	movs	r3, #0
 8002f22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f28:	4b79      	ldr	r3, [pc, #484]	; (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d00d      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x40>
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	f200 80e1 	bhi.w	80030fc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x34>
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d003      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f42:	e0db      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4b73      	ldr	r3, [pc, #460]	; (8003114 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f48:	e0db      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f4a:	4b73      	ldr	r3, [pc, #460]	; (8003118 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f4e:	e0d8      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f50:	4b6f      	ldr	r3, [pc, #444]	; (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d063      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f66:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f82:	4622      	mov	r2, r4
 8002f84:	462b      	mov	r3, r5
 8002f86:	f04f 0000 	mov.w	r0, #0
 8002f8a:	f04f 0100 	mov.w	r1, #0
 8002f8e:	0159      	lsls	r1, r3, #5
 8002f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f94:	0150      	lsls	r0, r2, #5
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	1a51      	subs	r1, r2, r1
 8002f9e:	6139      	str	r1, [r7, #16]
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fb4:	4659      	mov	r1, fp
 8002fb6:	018b      	lsls	r3, r1, #6
 8002fb8:	4651      	mov	r1, sl
 8002fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	018a      	lsls	r2, r1, #6
 8002fc2:	4651      	mov	r1, sl
 8002fc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	eb63 0901 	sbc.w	r9, r3, r1
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe2:	4690      	mov	r8, r2
 8002fe4:	4699      	mov	r9, r3
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	eb18 0303 	adds.w	r3, r8, r3
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	462b      	mov	r3, r5
 8002ff0:	eb49 0303 	adc.w	r3, r9, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003002:	4629      	mov	r1, r5
 8003004:	024b      	lsls	r3, r1, #9
 8003006:	4621      	mov	r1, r4
 8003008:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800300c:	4621      	mov	r1, r4
 800300e:	024a      	lsls	r2, r1, #9
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003016:	2200      	movs	r2, #0
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
 800301a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800301c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003020:	f7fd f936 	bl	8000290 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4613      	mov	r3, r2
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800302c:	e058      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302e:	4b38      	ldr	r3, [pc, #224]	; (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	2200      	movs	r2, #0
 8003036:	4618      	mov	r0, r3
 8003038:	4611      	mov	r1, r2
 800303a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
 8003044:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	f04f 0000 	mov.w	r0, #0
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	0159      	lsls	r1, r3, #5
 8003056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800305a:	0150      	lsls	r0, r2, #5
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4641      	mov	r1, r8
 8003062:	ebb2 0a01 	subs.w	sl, r2, r1
 8003066:	4649      	mov	r1, r9
 8003068:	eb63 0b01 	sbc.w	fp, r3, r1
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003078:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800307c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003080:	ebb2 040a 	subs.w	r4, r2, sl
 8003084:	eb63 050b 	sbc.w	r5, r3, fp
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	00eb      	lsls	r3, r5, #3
 8003092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003096:	00e2      	lsls	r2, r4, #3
 8003098:	4614      	mov	r4, r2
 800309a:	461d      	mov	r5, r3
 800309c:	4643      	mov	r3, r8
 800309e:	18e3      	adds	r3, r4, r3
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	464b      	mov	r3, r9
 80030a4:	eb45 0303 	adc.w	r3, r5, r3
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030b6:	4629      	mov	r1, r5
 80030b8:	028b      	lsls	r3, r1, #10
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c0:	4621      	mov	r1, r4
 80030c2:	028a      	lsls	r2, r1, #10
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	61fa      	str	r2, [r7, #28]
 80030d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d4:	f7fd f8dc 	bl	8000290 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	3301      	adds	r3, #1
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030fa:	e002      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetSysClockFreq+0x204>)
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003104:	4618      	mov	r0, r3
 8003106:	3750      	adds	r7, #80	; 0x50
 8003108:	46bd      	mov	sp, r7
 800310a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	007a1200 	.word	0x007a1200

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_RCC_GetHCLKFreq+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000060 	.word	0x20000060

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff0 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	08004fc4 	.word	0x08004fc4

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003160:	f7ff ffdc 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	08004fc4 	.word	0x08004fc4

08003184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07b      	b.n	800328e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a6:	d009      	beq.n	80031bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
 80031ae:	e005      	b.n	80031bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fce2 	bl	8000ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	ea42 0103 	orr.w	r1, r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0104 	and.w	r1, r3, #4
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f003 0210 	and.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e03f      	b.n	8003328 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd fcd7 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2224      	movs	r2, #36	; 0x24
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f828 	bl	8003330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800330e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b0c0      	sub	sp, #256	; 0x100
 8003336:	af00      	add	r7, sp, #0
 8003338:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	68d9      	ldr	r1, [r3, #12]
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	ea40 0301 	orr.w	r3, r0, r1
 8003358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	431a      	orrs	r2, r3
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	431a      	orrs	r2, r3
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003388:	f021 010c 	bic.w	r1, r1, #12
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003396:	430b      	orrs	r3, r1
 8003398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033aa:	6999      	ldr	r1, [r3, #24]
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	ea40 0301 	orr.w	r3, r0, r1
 80033b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <UART_SetConfig+0x2cc>)
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d005      	beq.n	80033d0 <UART_SetConfig+0xa0>
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <UART_SetConfig+0x2d0>)
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d104      	bne.n	80033da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d0:	f7ff fec4 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80033d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033d8:	e003      	b.n	80033e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033da:	f7ff feab 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 80033de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ec:	f040 810c 	bne.w	8003608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003402:	4622      	mov	r2, r4
 8003404:	462b      	mov	r3, r5
 8003406:	1891      	adds	r1, r2, r2
 8003408:	65b9      	str	r1, [r7, #88]	; 0x58
 800340a:	415b      	adcs	r3, r3
 800340c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800340e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003412:	4621      	mov	r1, r4
 8003414:	eb12 0801 	adds.w	r8, r2, r1
 8003418:	4629      	mov	r1, r5
 800341a:	eb43 0901 	adc.w	r9, r3, r1
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003432:	4690      	mov	r8, r2
 8003434:	4699      	mov	r9, r3
 8003436:	4623      	mov	r3, r4
 8003438:	eb18 0303 	adds.w	r3, r8, r3
 800343c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003440:	462b      	mov	r3, r5
 8003442:	eb49 0303 	adc.w	r3, r9, r3
 8003446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003456:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800345a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800345e:	460b      	mov	r3, r1
 8003460:	18db      	adds	r3, r3, r3
 8003462:	653b      	str	r3, [r7, #80]	; 0x50
 8003464:	4613      	mov	r3, r2
 8003466:	eb42 0303 	adc.w	r3, r2, r3
 800346a:	657b      	str	r3, [r7, #84]	; 0x54
 800346c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003474:	f7fc ff0c 	bl	8000290 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4b61      	ldr	r3, [pc, #388]	; (8003604 <UART_SetConfig+0x2d4>)
 800347e:	fba3 2302 	umull	r2, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	011c      	lsls	r4, r3, #4
 8003486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003490:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	1891      	adds	r1, r2, r2
 800349e:	64b9      	str	r1, [r7, #72]	; 0x48
 80034a0:	415b      	adcs	r3, r3
 80034a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034a8:	4641      	mov	r1, r8
 80034aa:	eb12 0a01 	adds.w	sl, r2, r1
 80034ae:	4649      	mov	r1, r9
 80034b0:	eb43 0b01 	adc.w	fp, r3, r1
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034c8:	4692      	mov	sl, r2
 80034ca:	469b      	mov	fp, r3
 80034cc:	4643      	mov	r3, r8
 80034ce:	eb1a 0303 	adds.w	r3, sl, r3
 80034d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034d6:	464b      	mov	r3, r9
 80034d8:	eb4b 0303 	adc.w	r3, fp, r3
 80034dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034f4:	460b      	mov	r3, r1
 80034f6:	18db      	adds	r3, r3, r3
 80034f8:	643b      	str	r3, [r7, #64]	; 0x40
 80034fa:	4613      	mov	r3, r2
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	647b      	str	r3, [r7, #68]	; 0x44
 8003502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800350a:	f7fc fec1 	bl	8000290 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4611      	mov	r1, r2
 8003514:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <UART_SetConfig+0x2d4>)
 8003516:	fba3 2301 	umull	r2, r3, r3, r1
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2264      	movs	r2, #100	; 0x64
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	1acb      	subs	r3, r1, r3
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <UART_SetConfig+0x2d4>)
 800352c:	fba3 2302 	umull	r2, r3, r3, r2
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003538:	441c      	add	r4, r3
 800353a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800353e:	2200      	movs	r2, #0
 8003540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003544:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	1891      	adds	r1, r2, r2
 8003552:	63b9      	str	r1, [r7, #56]	; 0x38
 8003554:	415b      	adcs	r3, r3
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800355c:	4641      	mov	r1, r8
 800355e:	1851      	adds	r1, r2, r1
 8003560:	6339      	str	r1, [r7, #48]	; 0x30
 8003562:	4649      	mov	r1, r9
 8003564:	414b      	adcs	r3, r1
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003574:	4659      	mov	r1, fp
 8003576:	00cb      	lsls	r3, r1, #3
 8003578:	4651      	mov	r1, sl
 800357a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800357e:	4651      	mov	r1, sl
 8003580:	00ca      	lsls	r2, r1, #3
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	4603      	mov	r3, r0
 8003588:	4642      	mov	r2, r8
 800358a:	189b      	adds	r3, r3, r2
 800358c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003590:	464b      	mov	r3, r9
 8003592:	460a      	mov	r2, r1
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035b0:	460b      	mov	r3, r1
 80035b2:	18db      	adds	r3, r3, r3
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b6:	4613      	mov	r3, r2
 80035b8:	eb42 0303 	adc.w	r3, r2, r3
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035c6:	f7fc fe63 	bl	8000290 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <UART_SetConfig+0x2d4>)
 80035d0:	fba3 1302 	umull	r1, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	2164      	movs	r1, #100	; 0x64
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	3332      	adds	r3, #50	; 0x32
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <UART_SetConfig+0x2d4>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	f003 0207 	and.w	r2, r3, #7
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4422      	add	r2, r4
 80035f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035f8:	e105      	b.n	8003806 <UART_SetConfig+0x4d6>
 80035fa:	bf00      	nop
 80035fc:	40011000 	.word	0x40011000
 8003600:	40011400 	.word	0x40011400
 8003604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360c:	2200      	movs	r2, #0
 800360e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800361a:	4642      	mov	r2, r8
 800361c:	464b      	mov	r3, r9
 800361e:	1891      	adds	r1, r2, r2
 8003620:	6239      	str	r1, [r7, #32]
 8003622:	415b      	adcs	r3, r3
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800362a:	4641      	mov	r1, r8
 800362c:	1854      	adds	r4, r2, r1
 800362e:	4649      	mov	r1, r9
 8003630:	eb43 0501 	adc.w	r5, r3, r1
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	00eb      	lsls	r3, r5, #3
 800363e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003642:	00e2      	lsls	r2, r4, #3
 8003644:	4614      	mov	r4, r2
 8003646:	461d      	mov	r5, r3
 8003648:	4643      	mov	r3, r8
 800364a:	18e3      	adds	r3, r4, r3
 800364c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003650:	464b      	mov	r3, r9
 8003652:	eb45 0303 	adc.w	r3, r5, r3
 8003656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800365a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003676:	4629      	mov	r1, r5
 8003678:	008b      	lsls	r3, r1, #2
 800367a:	4621      	mov	r1, r4
 800367c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003680:	4621      	mov	r1, r4
 8003682:	008a      	lsls	r2, r1, #2
 8003684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003688:	f7fc fe02 	bl	8000290 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4b60      	ldr	r3, [pc, #384]	; (8003814 <UART_SetConfig+0x4e4>)
 8003692:	fba3 2302 	umull	r2, r3, r3, r2
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	011c      	lsls	r4, r3, #4
 800369a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	1891      	adds	r1, r2, r2
 80036b2:	61b9      	str	r1, [r7, #24]
 80036b4:	415b      	adcs	r3, r3
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036bc:	4641      	mov	r1, r8
 80036be:	1851      	adds	r1, r2, r1
 80036c0:	6139      	str	r1, [r7, #16]
 80036c2:	4649      	mov	r1, r9
 80036c4:	414b      	adcs	r3, r1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d4:	4659      	mov	r1, fp
 80036d6:	00cb      	lsls	r3, r1, #3
 80036d8:	4651      	mov	r1, sl
 80036da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036de:	4651      	mov	r1, sl
 80036e0:	00ca      	lsls	r2, r1, #3
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	4642      	mov	r2, r8
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036f0:	464b      	mov	r3, r9
 80036f2:	460a      	mov	r2, r1
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	67bb      	str	r3, [r7, #120]	; 0x78
 8003706:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003714:	4649      	mov	r1, r9
 8003716:	008b      	lsls	r3, r1, #2
 8003718:	4641      	mov	r1, r8
 800371a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800371e:	4641      	mov	r1, r8
 8003720:	008a      	lsls	r2, r1, #2
 8003722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003726:	f7fc fdb3 	bl	8000290 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <UART_SetConfig+0x4e4>)
 8003730:	fba3 1302 	umull	r1, r3, r3, r2
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	3332      	adds	r3, #50	; 0x32
 8003742:	4a34      	ldr	r2, [pc, #208]	; (8003814 <UART_SetConfig+0x4e4>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374e:	441c      	add	r4, r3
 8003750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003754:	2200      	movs	r2, #0
 8003756:	673b      	str	r3, [r7, #112]	; 0x70
 8003758:	677a      	str	r2, [r7, #116]	; 0x74
 800375a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800375e:	4642      	mov	r2, r8
 8003760:	464b      	mov	r3, r9
 8003762:	1891      	adds	r1, r2, r2
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	415b      	adcs	r3, r3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800376e:	4641      	mov	r1, r8
 8003770:	1851      	adds	r1, r2, r1
 8003772:	6039      	str	r1, [r7, #0]
 8003774:	4649      	mov	r1, r9
 8003776:	414b      	adcs	r3, r1
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003786:	4659      	mov	r1, fp
 8003788:	00cb      	lsls	r3, r1, #3
 800378a:	4651      	mov	r1, sl
 800378c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003790:	4651      	mov	r1, sl
 8003792:	00ca      	lsls	r2, r1, #3
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	4603      	mov	r3, r0
 800379a:	4642      	mov	r2, r8
 800379c:	189b      	adds	r3, r3, r2
 800379e:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a0:	464b      	mov	r3, r9
 80037a2:	460a      	mov	r2, r1
 80037a4:	eb42 0303 	adc.w	r3, r2, r3
 80037a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	663b      	str	r3, [r7, #96]	; 0x60
 80037b4:	667a      	str	r2, [r7, #100]	; 0x64
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037c2:	4649      	mov	r1, r9
 80037c4:	008b      	lsls	r3, r1, #2
 80037c6:	4641      	mov	r1, r8
 80037c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037cc:	4641      	mov	r1, r8
 80037ce:	008a      	lsls	r2, r1, #2
 80037d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037d4:	f7fc fd5c 	bl	8000290 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <UART_SetConfig+0x4e4>)
 80037de:	fba3 1302 	umull	r1, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2164      	movs	r1, #100	; 0x64
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	3332      	adds	r3, #50	; 0x32
 80037f0:	4a08      	ldr	r2, [pc, #32]	; (8003814 <UART_SetConfig+0x4e4>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4422      	add	r2, r4
 8003804:	609a      	str	r2, [r3, #8]
}
 8003806:	bf00      	nop
 8003808:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003812:	bf00      	nop
 8003814:	51eb851f 	.word	0x51eb851f

08003818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003818:	b084      	sub	sp, #16
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	f107 001c 	add.w	r0, r7, #28
 8003826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	2b01      	cmp	r3, #1
 800382e:	d122      	bne.n	8003876 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 faa2 	bl	8003db4 <USB_CoreReset>
 8003870:	4603      	mov	r3, r0
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	e01a      	b.n	80038ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa96 	bl	8003db4 <USB_CoreReset>
 8003888:	4603      	mov	r3, r0
 800388a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800388c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
 800389e:	e005      	b.n	80038ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d10b      	bne.n	80038ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f043 0206 	orr.w	r2, r3, #6
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038d6:	b004      	add	sp, #16
 80038d8:	4770      	bx	lr

080038da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 0201 	bic.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d115      	bne.n	800394a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800392a:	2001      	movs	r0, #1
 800392c:	f7fe f866 	bl	80019fc <HAL_Delay>
      ms++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa2e 	bl	8003d98 <USB_GetMode>
 800393c:	4603      	mov	r3, r0
 800393e:	2b01      	cmp	r3, #1
 8003940:	d01e      	beq.n	8003980 <USB_SetCurrentMode+0x84>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b31      	cmp	r3, #49	; 0x31
 8003946:	d9f0      	bls.n	800392a <USB_SetCurrentMode+0x2e>
 8003948:	e01a      	b.n	8003980 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d115      	bne.n	800397c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800395c:	2001      	movs	r0, #1
 800395e:	f7fe f84d 	bl	80019fc <HAL_Delay>
      ms++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fa15 	bl	8003d98 <USB_GetMode>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <USB_SetCurrentMode+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b31      	cmp	r3, #49	; 0x31
 8003978:	d9f0      	bls.n	800395c <USB_SetCurrentMode+0x60>
 800397a:	e001      	b.n	8003980 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e005      	b.n	800398c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b32      	cmp	r3, #50	; 0x32
 8003984:	d101      	bne.n	800398a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003994:	b084      	sub	sp, #16
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	e009      	b.n	80039c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3340      	adds	r3, #64	; 0x40
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	2200      	movs	r2, #0
 80039c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b0e      	cmp	r3, #14
 80039cc:	d9f2      	bls.n	80039b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11c      	bne.n	8003a0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a0c:	e00b      	b.n	8003a26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2300      	movs	r3, #0
 8003a30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	4619      	mov	r1, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a40:	461a      	mov	r2, r3
 8003a42:	680b      	ldr	r3, [r1, #0]
 8003a44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10c      	bne.n	8003a66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a52:	2100      	movs	r1, #0
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f965 	bl	8003d24 <USB_SetDevSpeed>
 8003a5a:	e008      	b.n	8003a6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f960 	bl	8003d24 <USB_SetDevSpeed>
 8003a64:	e003      	b.n	8003a6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a66:	2103      	movs	r1, #3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f95b 	bl	8003d24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a6e:	2110      	movs	r1, #16
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f8f3 	bl	8003c5c <USB_FlushTxFifo>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f91f 	bl	8003cc4 <USB_FlushRxFifo>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a96:	461a      	mov	r2, r3
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	e043      	b.n	8003b42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ad0:	d118      	bne.n	8003b04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e013      	b.n	8003b16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afa:	461a      	mov	r2, r3
 8003afc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e008      	b.n	8003b16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b10:	461a      	mov	r2, r3
 8003b12:	2300      	movs	r3, #0
 8003b14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b22:	461a      	mov	r2, r3
 8003b24:	2300      	movs	r3, #0
 8003b26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	461a      	mov	r2, r3
 8003b36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d3b7      	bcc.n	8003aba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	e043      	b.n	8003bd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b66:	d118      	bne.n	8003b9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e013      	b.n	8003bac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	461a      	mov	r2, r3
 8003b92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e008      	b.n	8003bac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2300      	movs	r3, #0
 8003baa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3b7      	bcc.n	8003b50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f043 0210 	orr.w	r2, r3, #16
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <USB_DevInit+0x2c4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f043 0208 	orr.w	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d107      	bne.n	8003c48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c54:	b004      	add	sp, #16
 8003c56:	4770      	bx	lr
 8003c58:	803c3800 	.word	0x803c3800

08003c5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <USB_FlushTxFifo+0x64>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e01b      	b.n	8003cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	daf2      	bge.n	8003c6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	019b      	lsls	r3, r3, #6
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3301      	adds	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a08      	ldr	r2, [pc, #32]	; (8003cc0 <USB_FlushTxFifo+0x64>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e006      	b.n	8003cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d0f0      	beq.n	8003c94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	00030d40 	.word	0x00030d40

08003cc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <USB_FlushRxFifo+0x5c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e018      	b.n	8003d14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	daf2      	bge.n	8003cd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <USB_FlushRxFifo+0x5c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e006      	b.n	8003d14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d0f0      	beq.n	8003cf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	00030d40 	.word	0x00030d40

08003d24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d70:	f023 0303 	bic.w	r3, r3, #3
 8003d74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d84:	f043 0302 	orr.w	r3, r3, #2
 8003d88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0301 	and.w	r3, r3, #1
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <USB_CoreReset+0x64>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e01b      	b.n	8003e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	daf2      	bge.n	8003dc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3301      	adds	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <USB_CoreReset+0x64>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d0f0      	beq.n	8003dea <USB_CoreReset+0x36>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	00030d40 	.word	0x00030d40

08003e1c <__assert_func>:
 8003e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e1e:	4614      	mov	r4, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <__assert_func+0x2c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4605      	mov	r5, r0
 8003e28:	68d8      	ldr	r0, [r3, #12]
 8003e2a:	b14c      	cbz	r4, 8003e40 <__assert_func+0x24>
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <__assert_func+0x30>)
 8003e2e:	9100      	str	r1, [sp, #0]
 8003e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003e34:	4906      	ldr	r1, [pc, #24]	; (8003e50 <__assert_func+0x34>)
 8003e36:	462b      	mov	r3, r5
 8003e38:	f000 f814 	bl	8003e64 <fiprintf>
 8003e3c:	f000 fbfe 	bl	800463c <abort>
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <__assert_func+0x38>)
 8003e42:	461c      	mov	r4, r3
 8003e44:	e7f3      	b.n	8003e2e <__assert_func+0x12>
 8003e46:	bf00      	nop
 8003e48:	200000a4 	.word	0x200000a4
 8003e4c:	0800501f 	.word	0x0800501f
 8003e50:	0800502c 	.word	0x0800502c
 8003e54:	0800505a 	.word	0x0800505a

08003e58 <__errno>:
 8003e58:	4b01      	ldr	r3, [pc, #4]	; (8003e60 <__errno+0x8>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	200000a4 	.word	0x200000a4

08003e64 <fiprintf>:
 8003e64:	b40e      	push	{r1, r2, r3}
 8003e66:	b503      	push	{r0, r1, lr}
 8003e68:	4601      	mov	r1, r0
 8003e6a:	ab03      	add	r3, sp, #12
 8003e6c:	4805      	ldr	r0, [pc, #20]	; (8003e84 <fiprintf+0x20>)
 8003e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e72:	6800      	ldr	r0, [r0, #0]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	f000 f85d 	bl	8003f34 <_vfiprintf_r>
 8003e7a:	b002      	add	sp, #8
 8003e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e80:	b003      	add	sp, #12
 8003e82:	4770      	bx	lr
 8003e84:	200000a4 	.word	0x200000a4

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ec0 <__libc_init_array+0x38>)
 8003e8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ec4 <__libc_init_array+0x3c>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	2600      	movs	r6, #0
 8003e94:	42a6      	cmp	r6, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	4d0b      	ldr	r5, [pc, #44]	; (8003ec8 <__libc_init_array+0x40>)
 8003e9a:	4c0c      	ldr	r4, [pc, #48]	; (8003ecc <__libc_init_array+0x44>)
 8003e9c:	f000 ffe2 	bl	8004e64 <_init>
 8003ea0:	1b64      	subs	r4, r4, r5
 8003ea2:	10a4      	asrs	r4, r4, #2
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	42a6      	cmp	r6, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb0:	4798      	blx	r3
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eba:	4798      	blx	r3
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	080050fc 	.word	0x080050fc
 8003ec4:	080050fc 	.word	0x080050fc
 8003ec8:	080050fc 	.word	0x080050fc
 8003ecc:	08005100 	.word	0x08005100

08003ed0 <memset>:
 8003ed0:	4402      	add	r2, r0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d100      	bne.n	8003eda <memset+0xa>
 8003ed8:	4770      	bx	lr
 8003eda:	f803 1b01 	strb.w	r1, [r3], #1
 8003ede:	e7f9      	b.n	8003ed4 <memset+0x4>

08003ee0 <__sfputc_r>:
 8003ee0:	6893      	ldr	r3, [r2, #8]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	b410      	push	{r4}
 8003ee8:	6093      	str	r3, [r2, #8]
 8003eea:	da08      	bge.n	8003efe <__sfputc_r+0x1e>
 8003eec:	6994      	ldr	r4, [r2, #24]
 8003eee:	42a3      	cmp	r3, r4
 8003ef0:	db01      	blt.n	8003ef6 <__sfputc_r+0x16>
 8003ef2:	290a      	cmp	r1, #10
 8003ef4:	d103      	bne.n	8003efe <__sfputc_r+0x1e>
 8003ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003efa:	f000 badf 	b.w	80044bc <__swbuf_r>
 8003efe:	6813      	ldr	r3, [r2, #0]
 8003f00:	1c58      	adds	r0, r3, #1
 8003f02:	6010      	str	r0, [r2, #0]
 8003f04:	7019      	strb	r1, [r3, #0]
 8003f06:	4608      	mov	r0, r1
 8003f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <__sfputs_r>:
 8003f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f10:	4606      	mov	r6, r0
 8003f12:	460f      	mov	r7, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	18d5      	adds	r5, r2, r3
 8003f18:	42ac      	cmp	r4, r5
 8003f1a:	d101      	bne.n	8003f20 <__sfputs_r+0x12>
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e007      	b.n	8003f30 <__sfputs_r+0x22>
 8003f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f24:	463a      	mov	r2, r7
 8003f26:	4630      	mov	r0, r6
 8003f28:	f7ff ffda 	bl	8003ee0 <__sfputc_r>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d1f3      	bne.n	8003f18 <__sfputs_r+0xa>
 8003f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f34 <_vfiprintf_r>:
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	460d      	mov	r5, r1
 8003f3a:	b09d      	sub	sp, #116	; 0x74
 8003f3c:	4614      	mov	r4, r2
 8003f3e:	4698      	mov	r8, r3
 8003f40:	4606      	mov	r6, r0
 8003f42:	b118      	cbz	r0, 8003f4c <_vfiprintf_r+0x18>
 8003f44:	6983      	ldr	r3, [r0, #24]
 8003f46:	b90b      	cbnz	r3, 8003f4c <_vfiprintf_r+0x18>
 8003f48:	f000 fc9a 	bl	8004880 <__sinit>
 8003f4c:	4b89      	ldr	r3, [pc, #548]	; (8004174 <_vfiprintf_r+0x240>)
 8003f4e:	429d      	cmp	r5, r3
 8003f50:	d11b      	bne.n	8003f8a <_vfiprintf_r+0x56>
 8003f52:	6875      	ldr	r5, [r6, #4]
 8003f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f56:	07d9      	lsls	r1, r3, #31
 8003f58:	d405      	bmi.n	8003f66 <_vfiprintf_r+0x32>
 8003f5a:	89ab      	ldrh	r3, [r5, #12]
 8003f5c:	059a      	lsls	r2, r3, #22
 8003f5e:	d402      	bmi.n	8003f66 <_vfiprintf_r+0x32>
 8003f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f62:	f000 fd2b 	bl	80049bc <__retarget_lock_acquire_recursive>
 8003f66:	89ab      	ldrh	r3, [r5, #12]
 8003f68:	071b      	lsls	r3, r3, #28
 8003f6a:	d501      	bpl.n	8003f70 <_vfiprintf_r+0x3c>
 8003f6c:	692b      	ldr	r3, [r5, #16]
 8003f6e:	b9eb      	cbnz	r3, 8003fac <_vfiprintf_r+0x78>
 8003f70:	4629      	mov	r1, r5
 8003f72:	4630      	mov	r0, r6
 8003f74:	f000 faf4 	bl	8004560 <__swsetup_r>
 8003f78:	b1c0      	cbz	r0, 8003fac <_vfiprintf_r+0x78>
 8003f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f7c:	07dc      	lsls	r4, r3, #31
 8003f7e:	d50e      	bpl.n	8003f9e <_vfiprintf_r+0x6a>
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f84:	b01d      	add	sp, #116	; 0x74
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8a:	4b7b      	ldr	r3, [pc, #492]	; (8004178 <_vfiprintf_r+0x244>)
 8003f8c:	429d      	cmp	r5, r3
 8003f8e:	d101      	bne.n	8003f94 <_vfiprintf_r+0x60>
 8003f90:	68b5      	ldr	r5, [r6, #8]
 8003f92:	e7df      	b.n	8003f54 <_vfiprintf_r+0x20>
 8003f94:	4b79      	ldr	r3, [pc, #484]	; (800417c <_vfiprintf_r+0x248>)
 8003f96:	429d      	cmp	r5, r3
 8003f98:	bf08      	it	eq
 8003f9a:	68f5      	ldreq	r5, [r6, #12]
 8003f9c:	e7da      	b.n	8003f54 <_vfiprintf_r+0x20>
 8003f9e:	89ab      	ldrh	r3, [r5, #12]
 8003fa0:	0598      	lsls	r0, r3, #22
 8003fa2:	d4ed      	bmi.n	8003f80 <_vfiprintf_r+0x4c>
 8003fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fa6:	f000 fd0a 	bl	80049be <__retarget_lock_release_recursive>
 8003faa:	e7e9      	b.n	8003f80 <_vfiprintf_r+0x4c>
 8003fac:	2300      	movs	r3, #0
 8003fae:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fba:	2330      	movs	r3, #48	; 0x30
 8003fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004180 <_vfiprintf_r+0x24c>
 8003fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fc4:	f04f 0901 	mov.w	r9, #1
 8003fc8:	4623      	mov	r3, r4
 8003fca:	469a      	mov	sl, r3
 8003fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd0:	b10a      	cbz	r2, 8003fd6 <_vfiprintf_r+0xa2>
 8003fd2:	2a25      	cmp	r2, #37	; 0x25
 8003fd4:	d1f9      	bne.n	8003fca <_vfiprintf_r+0x96>
 8003fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8003fda:	d00b      	beq.n	8003ff4 <_vfiprintf_r+0xc0>
 8003fdc:	465b      	mov	r3, fp
 8003fde:	4622      	mov	r2, r4
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f7ff ff93 	bl	8003f0e <__sfputs_r>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f000 80aa 	beq.w	8004142 <_vfiprintf_r+0x20e>
 8003fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ff0:	445a      	add	r2, fp
 8003ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80a2 	beq.w	8004142 <_vfiprintf_r+0x20e>
 8003ffe:	2300      	movs	r3, #0
 8004000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004008:	f10a 0a01 	add.w	sl, sl, #1
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	9307      	str	r3, [sp, #28]
 8004010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004014:	931a      	str	r3, [sp, #104]	; 0x68
 8004016:	4654      	mov	r4, sl
 8004018:	2205      	movs	r2, #5
 800401a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800401e:	4858      	ldr	r0, [pc, #352]	; (8004180 <_vfiprintf_r+0x24c>)
 8004020:	f7fc f8e6 	bl	80001f0 <memchr>
 8004024:	9a04      	ldr	r2, [sp, #16]
 8004026:	b9d8      	cbnz	r0, 8004060 <_vfiprintf_r+0x12c>
 8004028:	06d1      	lsls	r1, r2, #27
 800402a:	bf44      	itt	mi
 800402c:	2320      	movmi	r3, #32
 800402e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004032:	0713      	lsls	r3, r2, #28
 8004034:	bf44      	itt	mi
 8004036:	232b      	movmi	r3, #43	; 0x2b
 8004038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800403c:	f89a 3000 	ldrb.w	r3, [sl]
 8004040:	2b2a      	cmp	r3, #42	; 0x2a
 8004042:	d015      	beq.n	8004070 <_vfiprintf_r+0x13c>
 8004044:	9a07      	ldr	r2, [sp, #28]
 8004046:	4654      	mov	r4, sl
 8004048:	2000      	movs	r0, #0
 800404a:	f04f 0c0a 	mov.w	ip, #10
 800404e:	4621      	mov	r1, r4
 8004050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004054:	3b30      	subs	r3, #48	; 0x30
 8004056:	2b09      	cmp	r3, #9
 8004058:	d94e      	bls.n	80040f8 <_vfiprintf_r+0x1c4>
 800405a:	b1b0      	cbz	r0, 800408a <_vfiprintf_r+0x156>
 800405c:	9207      	str	r2, [sp, #28]
 800405e:	e014      	b.n	800408a <_vfiprintf_r+0x156>
 8004060:	eba0 0308 	sub.w	r3, r0, r8
 8004064:	fa09 f303 	lsl.w	r3, r9, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	9304      	str	r3, [sp, #16]
 800406c:	46a2      	mov	sl, r4
 800406e:	e7d2      	b.n	8004016 <_vfiprintf_r+0xe2>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	1d19      	adds	r1, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	9103      	str	r1, [sp, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfbb      	ittet	lt
 800407c:	425b      	neglt	r3, r3
 800407e:	f042 0202 	orrlt.w	r2, r2, #2
 8004082:	9307      	strge	r3, [sp, #28]
 8004084:	9307      	strlt	r3, [sp, #28]
 8004086:	bfb8      	it	lt
 8004088:	9204      	strlt	r2, [sp, #16]
 800408a:	7823      	ldrb	r3, [r4, #0]
 800408c:	2b2e      	cmp	r3, #46	; 0x2e
 800408e:	d10c      	bne.n	80040aa <_vfiprintf_r+0x176>
 8004090:	7863      	ldrb	r3, [r4, #1]
 8004092:	2b2a      	cmp	r3, #42	; 0x2a
 8004094:	d135      	bne.n	8004102 <_vfiprintf_r+0x1ce>
 8004096:	9b03      	ldr	r3, [sp, #12]
 8004098:	1d1a      	adds	r2, r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	9203      	str	r2, [sp, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bfb8      	it	lt
 80040a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040a6:	3402      	adds	r4, #2
 80040a8:	9305      	str	r3, [sp, #20]
 80040aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004190 <_vfiprintf_r+0x25c>
 80040ae:	7821      	ldrb	r1, [r4, #0]
 80040b0:	2203      	movs	r2, #3
 80040b2:	4650      	mov	r0, sl
 80040b4:	f7fc f89c 	bl	80001f0 <memchr>
 80040b8:	b140      	cbz	r0, 80040cc <_vfiprintf_r+0x198>
 80040ba:	2340      	movs	r3, #64	; 0x40
 80040bc:	eba0 000a 	sub.w	r0, r0, sl
 80040c0:	fa03 f000 	lsl.w	r0, r3, r0
 80040c4:	9b04      	ldr	r3, [sp, #16]
 80040c6:	4303      	orrs	r3, r0
 80040c8:	3401      	adds	r4, #1
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d0:	482c      	ldr	r0, [pc, #176]	; (8004184 <_vfiprintf_r+0x250>)
 80040d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040d6:	2206      	movs	r2, #6
 80040d8:	f7fc f88a 	bl	80001f0 <memchr>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d03f      	beq.n	8004160 <_vfiprintf_r+0x22c>
 80040e0:	4b29      	ldr	r3, [pc, #164]	; (8004188 <_vfiprintf_r+0x254>)
 80040e2:	bb1b      	cbnz	r3, 800412c <_vfiprintf_r+0x1f8>
 80040e4:	9b03      	ldr	r3, [sp, #12]
 80040e6:	3307      	adds	r3, #7
 80040e8:	f023 0307 	bic.w	r3, r3, #7
 80040ec:	3308      	adds	r3, #8
 80040ee:	9303      	str	r3, [sp, #12]
 80040f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f2:	443b      	add	r3, r7
 80040f4:	9309      	str	r3, [sp, #36]	; 0x24
 80040f6:	e767      	b.n	8003fc8 <_vfiprintf_r+0x94>
 80040f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040fc:	460c      	mov	r4, r1
 80040fe:	2001      	movs	r0, #1
 8004100:	e7a5      	b.n	800404e <_vfiprintf_r+0x11a>
 8004102:	2300      	movs	r3, #0
 8004104:	3401      	adds	r4, #1
 8004106:	9305      	str	r3, [sp, #20]
 8004108:	4619      	mov	r1, r3
 800410a:	f04f 0c0a 	mov.w	ip, #10
 800410e:	4620      	mov	r0, r4
 8004110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004114:	3a30      	subs	r2, #48	; 0x30
 8004116:	2a09      	cmp	r2, #9
 8004118:	d903      	bls.n	8004122 <_vfiprintf_r+0x1ee>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0c5      	beq.n	80040aa <_vfiprintf_r+0x176>
 800411e:	9105      	str	r1, [sp, #20]
 8004120:	e7c3      	b.n	80040aa <_vfiprintf_r+0x176>
 8004122:	fb0c 2101 	mla	r1, ip, r1, r2
 8004126:	4604      	mov	r4, r0
 8004128:	2301      	movs	r3, #1
 800412a:	e7f0      	b.n	800410e <_vfiprintf_r+0x1da>
 800412c:	ab03      	add	r3, sp, #12
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	462a      	mov	r2, r5
 8004132:	4b16      	ldr	r3, [pc, #88]	; (800418c <_vfiprintf_r+0x258>)
 8004134:	a904      	add	r1, sp, #16
 8004136:	4630      	mov	r0, r6
 8004138:	f3af 8000 	nop.w
 800413c:	4607      	mov	r7, r0
 800413e:	1c78      	adds	r0, r7, #1
 8004140:	d1d6      	bne.n	80040f0 <_vfiprintf_r+0x1bc>
 8004142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004144:	07d9      	lsls	r1, r3, #31
 8004146:	d405      	bmi.n	8004154 <_vfiprintf_r+0x220>
 8004148:	89ab      	ldrh	r3, [r5, #12]
 800414a:	059a      	lsls	r2, r3, #22
 800414c:	d402      	bmi.n	8004154 <_vfiprintf_r+0x220>
 800414e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004150:	f000 fc35 	bl	80049be <__retarget_lock_release_recursive>
 8004154:	89ab      	ldrh	r3, [r5, #12]
 8004156:	065b      	lsls	r3, r3, #25
 8004158:	f53f af12 	bmi.w	8003f80 <_vfiprintf_r+0x4c>
 800415c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800415e:	e711      	b.n	8003f84 <_vfiprintf_r+0x50>
 8004160:	ab03      	add	r3, sp, #12
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	462a      	mov	r2, r5
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <_vfiprintf_r+0x258>)
 8004168:	a904      	add	r1, sp, #16
 800416a:	4630      	mov	r0, r6
 800416c:	f000 f880 	bl	8004270 <_printf_i>
 8004170:	e7e4      	b.n	800413c <_vfiprintf_r+0x208>
 8004172:	bf00      	nop
 8004174:	080050b4 	.word	0x080050b4
 8004178:	080050d4 	.word	0x080050d4
 800417c:	08005094 	.word	0x08005094
 8004180:	08005060 	.word	0x08005060
 8004184:	0800506a 	.word	0x0800506a
 8004188:	00000000 	.word	0x00000000
 800418c:	08003f0f 	.word	0x08003f0f
 8004190:	08005066 	.word	0x08005066

08004194 <_printf_common>:
 8004194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	4616      	mov	r6, r2
 800419a:	4699      	mov	r9, r3
 800419c:	688a      	ldr	r2, [r1, #8]
 800419e:	690b      	ldr	r3, [r1, #16]
 80041a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041a4:	4293      	cmp	r3, r2
 80041a6:	bfb8      	it	lt
 80041a8:	4613      	movlt	r3, r2
 80041aa:	6033      	str	r3, [r6, #0]
 80041ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041b0:	4607      	mov	r7, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	b10a      	cbz	r2, 80041ba <_printf_common+0x26>
 80041b6:	3301      	adds	r3, #1
 80041b8:	6033      	str	r3, [r6, #0]
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	0699      	lsls	r1, r3, #26
 80041be:	bf42      	ittt	mi
 80041c0:	6833      	ldrmi	r3, [r6, #0]
 80041c2:	3302      	addmi	r3, #2
 80041c4:	6033      	strmi	r3, [r6, #0]
 80041c6:	6825      	ldr	r5, [r4, #0]
 80041c8:	f015 0506 	ands.w	r5, r5, #6
 80041cc:	d106      	bne.n	80041dc <_printf_common+0x48>
 80041ce:	f104 0a19 	add.w	sl, r4, #25
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	6832      	ldr	r2, [r6, #0]
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	42ab      	cmp	r3, r5
 80041da:	dc26      	bgt.n	800422a <_printf_common+0x96>
 80041dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041e0:	1e13      	subs	r3, r2, #0
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	bf18      	it	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	0692      	lsls	r2, r2, #26
 80041ea:	d42b      	bmi.n	8004244 <_printf_common+0xb0>
 80041ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041f0:	4649      	mov	r1, r9
 80041f2:	4638      	mov	r0, r7
 80041f4:	47c0      	blx	r8
 80041f6:	3001      	adds	r0, #1
 80041f8:	d01e      	beq.n	8004238 <_printf_common+0xa4>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	68e5      	ldr	r5, [r4, #12]
 80041fe:	6832      	ldr	r2, [r6, #0]
 8004200:	f003 0306 	and.w	r3, r3, #6
 8004204:	2b04      	cmp	r3, #4
 8004206:	bf08      	it	eq
 8004208:	1aad      	subeq	r5, r5, r2
 800420a:	68a3      	ldr	r3, [r4, #8]
 800420c:	6922      	ldr	r2, [r4, #16]
 800420e:	bf0c      	ite	eq
 8004210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004214:	2500      	movne	r5, #0
 8004216:	4293      	cmp	r3, r2
 8004218:	bfc4      	itt	gt
 800421a:	1a9b      	subgt	r3, r3, r2
 800421c:	18ed      	addgt	r5, r5, r3
 800421e:	2600      	movs	r6, #0
 8004220:	341a      	adds	r4, #26
 8004222:	42b5      	cmp	r5, r6
 8004224:	d11a      	bne.n	800425c <_printf_common+0xc8>
 8004226:	2000      	movs	r0, #0
 8004228:	e008      	b.n	800423c <_printf_common+0xa8>
 800422a:	2301      	movs	r3, #1
 800422c:	4652      	mov	r2, sl
 800422e:	4649      	mov	r1, r9
 8004230:	4638      	mov	r0, r7
 8004232:	47c0      	blx	r8
 8004234:	3001      	adds	r0, #1
 8004236:	d103      	bne.n	8004240 <_printf_common+0xac>
 8004238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004240:	3501      	adds	r5, #1
 8004242:	e7c6      	b.n	80041d2 <_printf_common+0x3e>
 8004244:	18e1      	adds	r1, r4, r3
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	2030      	movs	r0, #48	; 0x30
 800424a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800424e:	4422      	add	r2, r4
 8004250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004258:	3302      	adds	r3, #2
 800425a:	e7c7      	b.n	80041ec <_printf_common+0x58>
 800425c:	2301      	movs	r3, #1
 800425e:	4622      	mov	r2, r4
 8004260:	4649      	mov	r1, r9
 8004262:	4638      	mov	r0, r7
 8004264:	47c0      	blx	r8
 8004266:	3001      	adds	r0, #1
 8004268:	d0e6      	beq.n	8004238 <_printf_common+0xa4>
 800426a:	3601      	adds	r6, #1
 800426c:	e7d9      	b.n	8004222 <_printf_common+0x8e>
	...

08004270 <_printf_i>:
 8004270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004274:	7e0f      	ldrb	r7, [r1, #24]
 8004276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004278:	2f78      	cmp	r7, #120	; 0x78
 800427a:	4691      	mov	r9, r2
 800427c:	4680      	mov	r8, r0
 800427e:	460c      	mov	r4, r1
 8004280:	469a      	mov	sl, r3
 8004282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004286:	d807      	bhi.n	8004298 <_printf_i+0x28>
 8004288:	2f62      	cmp	r7, #98	; 0x62
 800428a:	d80a      	bhi.n	80042a2 <_printf_i+0x32>
 800428c:	2f00      	cmp	r7, #0
 800428e:	f000 80d8 	beq.w	8004442 <_printf_i+0x1d2>
 8004292:	2f58      	cmp	r7, #88	; 0x58
 8004294:	f000 80a3 	beq.w	80043de <_printf_i+0x16e>
 8004298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800429c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042a0:	e03a      	b.n	8004318 <_printf_i+0xa8>
 80042a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042a6:	2b15      	cmp	r3, #21
 80042a8:	d8f6      	bhi.n	8004298 <_printf_i+0x28>
 80042aa:	a101      	add	r1, pc, #4	; (adr r1, 80042b0 <_printf_i+0x40>)
 80042ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042b0:	08004309 	.word	0x08004309
 80042b4:	0800431d 	.word	0x0800431d
 80042b8:	08004299 	.word	0x08004299
 80042bc:	08004299 	.word	0x08004299
 80042c0:	08004299 	.word	0x08004299
 80042c4:	08004299 	.word	0x08004299
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	08004299 	.word	0x08004299
 80042d0:	08004299 	.word	0x08004299
 80042d4:	08004299 	.word	0x08004299
 80042d8:	08004299 	.word	0x08004299
 80042dc:	08004429 	.word	0x08004429
 80042e0:	0800434d 	.word	0x0800434d
 80042e4:	0800440b 	.word	0x0800440b
 80042e8:	08004299 	.word	0x08004299
 80042ec:	08004299 	.word	0x08004299
 80042f0:	0800444b 	.word	0x0800444b
 80042f4:	08004299 	.word	0x08004299
 80042f8:	0800434d 	.word	0x0800434d
 80042fc:	08004299 	.word	0x08004299
 8004300:	08004299 	.word	0x08004299
 8004304:	08004413 	.word	0x08004413
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	1d1a      	adds	r2, r3, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	602a      	str	r2, [r5, #0]
 8004310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004318:	2301      	movs	r3, #1
 800431a:	e0a3      	b.n	8004464 <_printf_i+0x1f4>
 800431c:	6820      	ldr	r0, [r4, #0]
 800431e:	6829      	ldr	r1, [r5, #0]
 8004320:	0606      	lsls	r6, r0, #24
 8004322:	f101 0304 	add.w	r3, r1, #4
 8004326:	d50a      	bpl.n	800433e <_printf_i+0xce>
 8004328:	680e      	ldr	r6, [r1, #0]
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	2e00      	cmp	r6, #0
 800432e:	da03      	bge.n	8004338 <_printf_i+0xc8>
 8004330:	232d      	movs	r3, #45	; 0x2d
 8004332:	4276      	negs	r6, r6
 8004334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004338:	485e      	ldr	r0, [pc, #376]	; (80044b4 <_printf_i+0x244>)
 800433a:	230a      	movs	r3, #10
 800433c:	e019      	b.n	8004372 <_printf_i+0x102>
 800433e:	680e      	ldr	r6, [r1, #0]
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004346:	bf18      	it	ne
 8004348:	b236      	sxthne	r6, r6
 800434a:	e7ef      	b.n	800432c <_printf_i+0xbc>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	6820      	ldr	r0, [r4, #0]
 8004350:	1d19      	adds	r1, r3, #4
 8004352:	6029      	str	r1, [r5, #0]
 8004354:	0601      	lsls	r1, r0, #24
 8004356:	d501      	bpl.n	800435c <_printf_i+0xec>
 8004358:	681e      	ldr	r6, [r3, #0]
 800435a:	e002      	b.n	8004362 <_printf_i+0xf2>
 800435c:	0646      	lsls	r6, r0, #25
 800435e:	d5fb      	bpl.n	8004358 <_printf_i+0xe8>
 8004360:	881e      	ldrh	r6, [r3, #0]
 8004362:	4854      	ldr	r0, [pc, #336]	; (80044b4 <_printf_i+0x244>)
 8004364:	2f6f      	cmp	r7, #111	; 0x6f
 8004366:	bf0c      	ite	eq
 8004368:	2308      	moveq	r3, #8
 800436a:	230a      	movne	r3, #10
 800436c:	2100      	movs	r1, #0
 800436e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004372:	6865      	ldr	r5, [r4, #4]
 8004374:	60a5      	str	r5, [r4, #8]
 8004376:	2d00      	cmp	r5, #0
 8004378:	bfa2      	ittt	ge
 800437a:	6821      	ldrge	r1, [r4, #0]
 800437c:	f021 0104 	bicge.w	r1, r1, #4
 8004380:	6021      	strge	r1, [r4, #0]
 8004382:	b90e      	cbnz	r6, 8004388 <_printf_i+0x118>
 8004384:	2d00      	cmp	r5, #0
 8004386:	d04d      	beq.n	8004424 <_printf_i+0x1b4>
 8004388:	4615      	mov	r5, r2
 800438a:	fbb6 f1f3 	udiv	r1, r6, r3
 800438e:	fb03 6711 	mls	r7, r3, r1, r6
 8004392:	5dc7      	ldrb	r7, [r0, r7]
 8004394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004398:	4637      	mov	r7, r6
 800439a:	42bb      	cmp	r3, r7
 800439c:	460e      	mov	r6, r1
 800439e:	d9f4      	bls.n	800438a <_printf_i+0x11a>
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d10b      	bne.n	80043bc <_printf_i+0x14c>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	07de      	lsls	r6, r3, #31
 80043a8:	d508      	bpl.n	80043bc <_printf_i+0x14c>
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	6861      	ldr	r1, [r4, #4]
 80043ae:	4299      	cmp	r1, r3
 80043b0:	bfde      	ittt	le
 80043b2:	2330      	movle	r3, #48	; 0x30
 80043b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80043bc:	1b52      	subs	r2, r2, r5
 80043be:	6122      	str	r2, [r4, #16]
 80043c0:	f8cd a000 	str.w	sl, [sp]
 80043c4:	464b      	mov	r3, r9
 80043c6:	aa03      	add	r2, sp, #12
 80043c8:	4621      	mov	r1, r4
 80043ca:	4640      	mov	r0, r8
 80043cc:	f7ff fee2 	bl	8004194 <_printf_common>
 80043d0:	3001      	adds	r0, #1
 80043d2:	d14c      	bne.n	800446e <_printf_i+0x1fe>
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d8:	b004      	add	sp, #16
 80043da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043de:	4835      	ldr	r0, [pc, #212]	; (80044b4 <_printf_i+0x244>)
 80043e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043e4:	6829      	ldr	r1, [r5, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80043ec:	6029      	str	r1, [r5, #0]
 80043ee:	061d      	lsls	r5, r3, #24
 80043f0:	d514      	bpl.n	800441c <_printf_i+0x1ac>
 80043f2:	07df      	lsls	r7, r3, #31
 80043f4:	bf44      	itt	mi
 80043f6:	f043 0320 	orrmi.w	r3, r3, #32
 80043fa:	6023      	strmi	r3, [r4, #0]
 80043fc:	b91e      	cbnz	r6, 8004406 <_printf_i+0x196>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	f023 0320 	bic.w	r3, r3, #32
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	2310      	movs	r3, #16
 8004408:	e7b0      	b.n	800436c <_printf_i+0xfc>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	f043 0320 	orr.w	r3, r3, #32
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	2378      	movs	r3, #120	; 0x78
 8004414:	4828      	ldr	r0, [pc, #160]	; (80044b8 <_printf_i+0x248>)
 8004416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800441a:	e7e3      	b.n	80043e4 <_printf_i+0x174>
 800441c:	0659      	lsls	r1, r3, #25
 800441e:	bf48      	it	mi
 8004420:	b2b6      	uxthmi	r6, r6
 8004422:	e7e6      	b.n	80043f2 <_printf_i+0x182>
 8004424:	4615      	mov	r5, r2
 8004426:	e7bb      	b.n	80043a0 <_printf_i+0x130>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	6826      	ldr	r6, [r4, #0]
 800442c:	6961      	ldr	r1, [r4, #20]
 800442e:	1d18      	adds	r0, r3, #4
 8004430:	6028      	str	r0, [r5, #0]
 8004432:	0635      	lsls	r5, r6, #24
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	d501      	bpl.n	800443c <_printf_i+0x1cc>
 8004438:	6019      	str	r1, [r3, #0]
 800443a:	e002      	b.n	8004442 <_printf_i+0x1d2>
 800443c:	0670      	lsls	r0, r6, #25
 800443e:	d5fb      	bpl.n	8004438 <_printf_i+0x1c8>
 8004440:	8019      	strh	r1, [r3, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	6123      	str	r3, [r4, #16]
 8004446:	4615      	mov	r5, r2
 8004448:	e7ba      	b.n	80043c0 <_printf_i+0x150>
 800444a:	682b      	ldr	r3, [r5, #0]
 800444c:	1d1a      	adds	r2, r3, #4
 800444e:	602a      	str	r2, [r5, #0]
 8004450:	681d      	ldr	r5, [r3, #0]
 8004452:	6862      	ldr	r2, [r4, #4]
 8004454:	2100      	movs	r1, #0
 8004456:	4628      	mov	r0, r5
 8004458:	f7fb feca 	bl	80001f0 <memchr>
 800445c:	b108      	cbz	r0, 8004462 <_printf_i+0x1f2>
 800445e:	1b40      	subs	r0, r0, r5
 8004460:	6060      	str	r0, [r4, #4]
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	6123      	str	r3, [r4, #16]
 8004466:	2300      	movs	r3, #0
 8004468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800446c:	e7a8      	b.n	80043c0 <_printf_i+0x150>
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	462a      	mov	r2, r5
 8004472:	4649      	mov	r1, r9
 8004474:	4640      	mov	r0, r8
 8004476:	47d0      	blx	sl
 8004478:	3001      	adds	r0, #1
 800447a:	d0ab      	beq.n	80043d4 <_printf_i+0x164>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	079b      	lsls	r3, r3, #30
 8004480:	d413      	bmi.n	80044aa <_printf_i+0x23a>
 8004482:	68e0      	ldr	r0, [r4, #12]
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	4298      	cmp	r0, r3
 8004488:	bfb8      	it	lt
 800448a:	4618      	movlt	r0, r3
 800448c:	e7a4      	b.n	80043d8 <_printf_i+0x168>
 800448e:	2301      	movs	r3, #1
 8004490:	4632      	mov	r2, r6
 8004492:	4649      	mov	r1, r9
 8004494:	4640      	mov	r0, r8
 8004496:	47d0      	blx	sl
 8004498:	3001      	adds	r0, #1
 800449a:	d09b      	beq.n	80043d4 <_printf_i+0x164>
 800449c:	3501      	adds	r5, #1
 800449e:	68e3      	ldr	r3, [r4, #12]
 80044a0:	9903      	ldr	r1, [sp, #12]
 80044a2:	1a5b      	subs	r3, r3, r1
 80044a4:	42ab      	cmp	r3, r5
 80044a6:	dcf2      	bgt.n	800448e <_printf_i+0x21e>
 80044a8:	e7eb      	b.n	8004482 <_printf_i+0x212>
 80044aa:	2500      	movs	r5, #0
 80044ac:	f104 0619 	add.w	r6, r4, #25
 80044b0:	e7f5      	b.n	800449e <_printf_i+0x22e>
 80044b2:	bf00      	nop
 80044b4:	08005071 	.word	0x08005071
 80044b8:	08005082 	.word	0x08005082

080044bc <__swbuf_r>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	460e      	mov	r6, r1
 80044c0:	4614      	mov	r4, r2
 80044c2:	4605      	mov	r5, r0
 80044c4:	b118      	cbz	r0, 80044ce <__swbuf_r+0x12>
 80044c6:	6983      	ldr	r3, [r0, #24]
 80044c8:	b90b      	cbnz	r3, 80044ce <__swbuf_r+0x12>
 80044ca:	f000 f9d9 	bl	8004880 <__sinit>
 80044ce:	4b21      	ldr	r3, [pc, #132]	; (8004554 <__swbuf_r+0x98>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d12b      	bne.n	800452c <__swbuf_r+0x70>
 80044d4:	686c      	ldr	r4, [r5, #4]
 80044d6:	69a3      	ldr	r3, [r4, #24]
 80044d8:	60a3      	str	r3, [r4, #8]
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	071a      	lsls	r2, r3, #28
 80044de:	d52f      	bpl.n	8004540 <__swbuf_r+0x84>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	b36b      	cbz	r3, 8004540 <__swbuf_r+0x84>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6820      	ldr	r0, [r4, #0]
 80044e8:	1ac0      	subs	r0, r0, r3
 80044ea:	6963      	ldr	r3, [r4, #20]
 80044ec:	b2f6      	uxtb	r6, r6
 80044ee:	4283      	cmp	r3, r0
 80044f0:	4637      	mov	r7, r6
 80044f2:	dc04      	bgt.n	80044fe <__swbuf_r+0x42>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 f92e 	bl	8004758 <_fflush_r>
 80044fc:	bb30      	cbnz	r0, 800454c <__swbuf_r+0x90>
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	3b01      	subs	r3, #1
 8004502:	60a3      	str	r3, [r4, #8]
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	6022      	str	r2, [r4, #0]
 800450a:	701e      	strb	r6, [r3, #0]
 800450c:	6963      	ldr	r3, [r4, #20]
 800450e:	3001      	adds	r0, #1
 8004510:	4283      	cmp	r3, r0
 8004512:	d004      	beq.n	800451e <__swbuf_r+0x62>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	07db      	lsls	r3, r3, #31
 8004518:	d506      	bpl.n	8004528 <__swbuf_r+0x6c>
 800451a:	2e0a      	cmp	r6, #10
 800451c:	d104      	bne.n	8004528 <__swbuf_r+0x6c>
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f000 f919 	bl	8004758 <_fflush_r>
 8004526:	b988      	cbnz	r0, 800454c <__swbuf_r+0x90>
 8004528:	4638      	mov	r0, r7
 800452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <__swbuf_r+0x9c>)
 800452e:	429c      	cmp	r4, r3
 8004530:	d101      	bne.n	8004536 <__swbuf_r+0x7a>
 8004532:	68ac      	ldr	r4, [r5, #8]
 8004534:	e7cf      	b.n	80044d6 <__swbuf_r+0x1a>
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <__swbuf_r+0xa0>)
 8004538:	429c      	cmp	r4, r3
 800453a:	bf08      	it	eq
 800453c:	68ec      	ldreq	r4, [r5, #12]
 800453e:	e7ca      	b.n	80044d6 <__swbuf_r+0x1a>
 8004540:	4621      	mov	r1, r4
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f80c 	bl	8004560 <__swsetup_r>
 8004548:	2800      	cmp	r0, #0
 800454a:	d0cb      	beq.n	80044e4 <__swbuf_r+0x28>
 800454c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004550:	e7ea      	b.n	8004528 <__swbuf_r+0x6c>
 8004552:	bf00      	nop
 8004554:	080050b4 	.word	0x080050b4
 8004558:	080050d4 	.word	0x080050d4
 800455c:	08005094 	.word	0x08005094

08004560 <__swsetup_r>:
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <__swsetup_r+0xcc>)
 8004562:	b570      	push	{r4, r5, r6, lr}
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	4606      	mov	r6, r0
 8004568:	460c      	mov	r4, r1
 800456a:	b125      	cbz	r5, 8004576 <__swsetup_r+0x16>
 800456c:	69ab      	ldr	r3, [r5, #24]
 800456e:	b913      	cbnz	r3, 8004576 <__swsetup_r+0x16>
 8004570:	4628      	mov	r0, r5
 8004572:	f000 f985 	bl	8004880 <__sinit>
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <__swsetup_r+0xd0>)
 8004578:	429c      	cmp	r4, r3
 800457a:	d10f      	bne.n	800459c <__swsetup_r+0x3c>
 800457c:	686c      	ldr	r4, [r5, #4]
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004584:	0719      	lsls	r1, r3, #28
 8004586:	d42c      	bmi.n	80045e2 <__swsetup_r+0x82>
 8004588:	06dd      	lsls	r5, r3, #27
 800458a:	d411      	bmi.n	80045b0 <__swsetup_r+0x50>
 800458c:	2309      	movs	r3, #9
 800458e:	6033      	str	r3, [r6, #0]
 8004590:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800459a:	e03e      	b.n	800461a <__swsetup_r+0xba>
 800459c:	4b25      	ldr	r3, [pc, #148]	; (8004634 <__swsetup_r+0xd4>)
 800459e:	429c      	cmp	r4, r3
 80045a0:	d101      	bne.n	80045a6 <__swsetup_r+0x46>
 80045a2:	68ac      	ldr	r4, [r5, #8]
 80045a4:	e7eb      	b.n	800457e <__swsetup_r+0x1e>
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <__swsetup_r+0xd8>)
 80045a8:	429c      	cmp	r4, r3
 80045aa:	bf08      	it	eq
 80045ac:	68ec      	ldreq	r4, [r5, #12]
 80045ae:	e7e6      	b.n	800457e <__swsetup_r+0x1e>
 80045b0:	0758      	lsls	r0, r3, #29
 80045b2:	d512      	bpl.n	80045da <__swsetup_r+0x7a>
 80045b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045b6:	b141      	cbz	r1, 80045ca <__swsetup_r+0x6a>
 80045b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045bc:	4299      	cmp	r1, r3
 80045be:	d002      	beq.n	80045c6 <__swsetup_r+0x66>
 80045c0:	4630      	mov	r0, r6
 80045c2:	f000 fa63 	bl	8004a8c <_free_r>
 80045c6:	2300      	movs	r3, #0
 80045c8:	6363      	str	r3, [r4, #52]	; 0x34
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	2300      	movs	r3, #0
 80045d4:	6063      	str	r3, [r4, #4]
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	f043 0308 	orr.w	r3, r3, #8
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	b94b      	cbnz	r3, 80045fa <__swsetup_r+0x9a>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f0:	d003      	beq.n	80045fa <__swsetup_r+0x9a>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4630      	mov	r0, r6
 80045f6:	f000 fa09 	bl	8004a0c <__smakebuf_r>
 80045fa:	89a0      	ldrh	r0, [r4, #12]
 80045fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004600:	f010 0301 	ands.w	r3, r0, #1
 8004604:	d00a      	beq.n	800461c <__swsetup_r+0xbc>
 8004606:	2300      	movs	r3, #0
 8004608:	60a3      	str	r3, [r4, #8]
 800460a:	6963      	ldr	r3, [r4, #20]
 800460c:	425b      	negs	r3, r3
 800460e:	61a3      	str	r3, [r4, #24]
 8004610:	6923      	ldr	r3, [r4, #16]
 8004612:	b943      	cbnz	r3, 8004626 <__swsetup_r+0xc6>
 8004614:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004618:	d1ba      	bne.n	8004590 <__swsetup_r+0x30>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	0781      	lsls	r1, r0, #30
 800461e:	bf58      	it	pl
 8004620:	6963      	ldrpl	r3, [r4, #20]
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	e7f4      	b.n	8004610 <__swsetup_r+0xb0>
 8004626:	2000      	movs	r0, #0
 8004628:	e7f7      	b.n	800461a <__swsetup_r+0xba>
 800462a:	bf00      	nop
 800462c:	200000a4 	.word	0x200000a4
 8004630:	080050b4 	.word	0x080050b4
 8004634:	080050d4 	.word	0x080050d4
 8004638:	08005094 	.word	0x08005094

0800463c <abort>:
 800463c:	b508      	push	{r3, lr}
 800463e:	2006      	movs	r0, #6
 8004640:	f000 fb3c 	bl	8004cbc <raise>
 8004644:	2001      	movs	r0, #1
 8004646:	f7fc fbf7 	bl	8000e38 <_exit>
	...

0800464c <__sflush_r>:
 800464c:	898a      	ldrh	r2, [r1, #12]
 800464e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004652:	4605      	mov	r5, r0
 8004654:	0710      	lsls	r0, r2, #28
 8004656:	460c      	mov	r4, r1
 8004658:	d458      	bmi.n	800470c <__sflush_r+0xc0>
 800465a:	684b      	ldr	r3, [r1, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	dc05      	bgt.n	800466c <__sflush_r+0x20>
 8004660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	dc02      	bgt.n	800466c <__sflush_r+0x20>
 8004666:	2000      	movs	r0, #0
 8004668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800466c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800466e:	2e00      	cmp	r6, #0
 8004670:	d0f9      	beq.n	8004666 <__sflush_r+0x1a>
 8004672:	2300      	movs	r3, #0
 8004674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004678:	682f      	ldr	r7, [r5, #0]
 800467a:	602b      	str	r3, [r5, #0]
 800467c:	d032      	beq.n	80046e4 <__sflush_r+0x98>
 800467e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	075a      	lsls	r2, r3, #29
 8004684:	d505      	bpl.n	8004692 <__sflush_r+0x46>
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	1ac0      	subs	r0, r0, r3
 800468a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800468c:	b10b      	cbz	r3, 8004692 <__sflush_r+0x46>
 800468e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004690:	1ac0      	subs	r0, r0, r3
 8004692:	2300      	movs	r3, #0
 8004694:	4602      	mov	r2, r0
 8004696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004698:	6a21      	ldr	r1, [r4, #32]
 800469a:	4628      	mov	r0, r5
 800469c:	47b0      	blx	r6
 800469e:	1c43      	adds	r3, r0, #1
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	d106      	bne.n	80046b2 <__sflush_r+0x66>
 80046a4:	6829      	ldr	r1, [r5, #0]
 80046a6:	291d      	cmp	r1, #29
 80046a8:	d82c      	bhi.n	8004704 <__sflush_r+0xb8>
 80046aa:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <__sflush_r+0x108>)
 80046ac:	40ca      	lsrs	r2, r1
 80046ae:	07d6      	lsls	r6, r2, #31
 80046b0:	d528      	bpl.n	8004704 <__sflush_r+0xb8>
 80046b2:	2200      	movs	r2, #0
 80046b4:	6062      	str	r2, [r4, #4]
 80046b6:	04d9      	lsls	r1, r3, #19
 80046b8:	6922      	ldr	r2, [r4, #16]
 80046ba:	6022      	str	r2, [r4, #0]
 80046bc:	d504      	bpl.n	80046c8 <__sflush_r+0x7c>
 80046be:	1c42      	adds	r2, r0, #1
 80046c0:	d101      	bne.n	80046c6 <__sflush_r+0x7a>
 80046c2:	682b      	ldr	r3, [r5, #0]
 80046c4:	b903      	cbnz	r3, 80046c8 <__sflush_r+0x7c>
 80046c6:	6560      	str	r0, [r4, #84]	; 0x54
 80046c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ca:	602f      	str	r7, [r5, #0]
 80046cc:	2900      	cmp	r1, #0
 80046ce:	d0ca      	beq.n	8004666 <__sflush_r+0x1a>
 80046d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046d4:	4299      	cmp	r1, r3
 80046d6:	d002      	beq.n	80046de <__sflush_r+0x92>
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f9d7 	bl	8004a8c <_free_r>
 80046de:	2000      	movs	r0, #0
 80046e0:	6360      	str	r0, [r4, #52]	; 0x34
 80046e2:	e7c1      	b.n	8004668 <__sflush_r+0x1c>
 80046e4:	6a21      	ldr	r1, [r4, #32]
 80046e6:	2301      	movs	r3, #1
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b0      	blx	r6
 80046ec:	1c41      	adds	r1, r0, #1
 80046ee:	d1c7      	bne.n	8004680 <__sflush_r+0x34>
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0c4      	beq.n	8004680 <__sflush_r+0x34>
 80046f6:	2b1d      	cmp	r3, #29
 80046f8:	d001      	beq.n	80046fe <__sflush_r+0xb2>
 80046fa:	2b16      	cmp	r3, #22
 80046fc:	d101      	bne.n	8004702 <__sflush_r+0xb6>
 80046fe:	602f      	str	r7, [r5, #0]
 8004700:	e7b1      	b.n	8004666 <__sflush_r+0x1a>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	e7ad      	b.n	8004668 <__sflush_r+0x1c>
 800470c:	690f      	ldr	r7, [r1, #16]
 800470e:	2f00      	cmp	r7, #0
 8004710:	d0a9      	beq.n	8004666 <__sflush_r+0x1a>
 8004712:	0793      	lsls	r3, r2, #30
 8004714:	680e      	ldr	r6, [r1, #0]
 8004716:	bf08      	it	eq
 8004718:	694b      	ldreq	r3, [r1, #20]
 800471a:	600f      	str	r7, [r1, #0]
 800471c:	bf18      	it	ne
 800471e:	2300      	movne	r3, #0
 8004720:	eba6 0807 	sub.w	r8, r6, r7
 8004724:	608b      	str	r3, [r1, #8]
 8004726:	f1b8 0f00 	cmp.w	r8, #0
 800472a:	dd9c      	ble.n	8004666 <__sflush_r+0x1a>
 800472c:	6a21      	ldr	r1, [r4, #32]
 800472e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004730:	4643      	mov	r3, r8
 8004732:	463a      	mov	r2, r7
 8004734:	4628      	mov	r0, r5
 8004736:	47b0      	blx	r6
 8004738:	2800      	cmp	r0, #0
 800473a:	dc06      	bgt.n	800474a <__sflush_r+0xfe>
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004748:	e78e      	b.n	8004668 <__sflush_r+0x1c>
 800474a:	4407      	add	r7, r0
 800474c:	eba8 0800 	sub.w	r8, r8, r0
 8004750:	e7e9      	b.n	8004726 <__sflush_r+0xda>
 8004752:	bf00      	nop
 8004754:	20400001 	.word	0x20400001

08004758 <_fflush_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	690b      	ldr	r3, [r1, #16]
 800475c:	4605      	mov	r5, r0
 800475e:	460c      	mov	r4, r1
 8004760:	b913      	cbnz	r3, 8004768 <_fflush_r+0x10>
 8004762:	2500      	movs	r5, #0
 8004764:	4628      	mov	r0, r5
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	b118      	cbz	r0, 8004772 <_fflush_r+0x1a>
 800476a:	6983      	ldr	r3, [r0, #24]
 800476c:	b90b      	cbnz	r3, 8004772 <_fflush_r+0x1a>
 800476e:	f000 f887 	bl	8004880 <__sinit>
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <_fflush_r+0x6c>)
 8004774:	429c      	cmp	r4, r3
 8004776:	d11b      	bne.n	80047b0 <_fflush_r+0x58>
 8004778:	686c      	ldr	r4, [r5, #4]
 800477a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ef      	beq.n	8004762 <_fflush_r+0xa>
 8004782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004784:	07d0      	lsls	r0, r2, #31
 8004786:	d404      	bmi.n	8004792 <_fflush_r+0x3a>
 8004788:	0599      	lsls	r1, r3, #22
 800478a:	d402      	bmi.n	8004792 <_fflush_r+0x3a>
 800478c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800478e:	f000 f915 	bl	80049bc <__retarget_lock_acquire_recursive>
 8004792:	4628      	mov	r0, r5
 8004794:	4621      	mov	r1, r4
 8004796:	f7ff ff59 	bl	800464c <__sflush_r>
 800479a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800479c:	07da      	lsls	r2, r3, #31
 800479e:	4605      	mov	r5, r0
 80047a0:	d4e0      	bmi.n	8004764 <_fflush_r+0xc>
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	059b      	lsls	r3, r3, #22
 80047a6:	d4dd      	bmi.n	8004764 <_fflush_r+0xc>
 80047a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047aa:	f000 f908 	bl	80049be <__retarget_lock_release_recursive>
 80047ae:	e7d9      	b.n	8004764 <_fflush_r+0xc>
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <_fflush_r+0x70>)
 80047b2:	429c      	cmp	r4, r3
 80047b4:	d101      	bne.n	80047ba <_fflush_r+0x62>
 80047b6:	68ac      	ldr	r4, [r5, #8]
 80047b8:	e7df      	b.n	800477a <_fflush_r+0x22>
 80047ba:	4b04      	ldr	r3, [pc, #16]	; (80047cc <_fflush_r+0x74>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	bf08      	it	eq
 80047c0:	68ec      	ldreq	r4, [r5, #12]
 80047c2:	e7da      	b.n	800477a <_fflush_r+0x22>
 80047c4:	080050b4 	.word	0x080050b4
 80047c8:	080050d4 	.word	0x080050d4
 80047cc:	08005094 	.word	0x08005094

080047d0 <std>:
 80047d0:	2300      	movs	r3, #0
 80047d2:	b510      	push	{r4, lr}
 80047d4:	4604      	mov	r4, r0
 80047d6:	e9c0 3300 	strd	r3, r3, [r0]
 80047da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047de:	6083      	str	r3, [r0, #8]
 80047e0:	8181      	strh	r1, [r0, #12]
 80047e2:	6643      	str	r3, [r0, #100]	; 0x64
 80047e4:	81c2      	strh	r2, [r0, #14]
 80047e6:	6183      	str	r3, [r0, #24]
 80047e8:	4619      	mov	r1, r3
 80047ea:	2208      	movs	r2, #8
 80047ec:	305c      	adds	r0, #92	; 0x5c
 80047ee:	f7ff fb6f 	bl	8003ed0 <memset>
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <std+0x38>)
 80047f4:	6263      	str	r3, [r4, #36]	; 0x24
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <std+0x3c>)
 80047f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <std+0x40>)
 80047fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <std+0x44>)
 8004800:	6224      	str	r4, [r4, #32]
 8004802:	6323      	str	r3, [r4, #48]	; 0x30
 8004804:	bd10      	pop	{r4, pc}
 8004806:	bf00      	nop
 8004808:	08004cf5 	.word	0x08004cf5
 800480c:	08004d17 	.word	0x08004d17
 8004810:	08004d4f 	.word	0x08004d4f
 8004814:	08004d73 	.word	0x08004d73

08004818 <_cleanup_r>:
 8004818:	4901      	ldr	r1, [pc, #4]	; (8004820 <_cleanup_r+0x8>)
 800481a:	f000 b8af 	b.w	800497c <_fwalk_reent>
 800481e:	bf00      	nop
 8004820:	08004759 	.word	0x08004759

08004824 <__sfmoreglue>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	2268      	movs	r2, #104	; 0x68
 8004828:	1e4d      	subs	r5, r1, #1
 800482a:	4355      	muls	r5, r2
 800482c:	460e      	mov	r6, r1
 800482e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004832:	f000 f997 	bl	8004b64 <_malloc_r>
 8004836:	4604      	mov	r4, r0
 8004838:	b140      	cbz	r0, 800484c <__sfmoreglue+0x28>
 800483a:	2100      	movs	r1, #0
 800483c:	e9c0 1600 	strd	r1, r6, [r0]
 8004840:	300c      	adds	r0, #12
 8004842:	60a0      	str	r0, [r4, #8]
 8004844:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004848:	f7ff fb42 	bl	8003ed0 <memset>
 800484c:	4620      	mov	r0, r4
 800484e:	bd70      	pop	{r4, r5, r6, pc}

08004850 <__sfp_lock_acquire>:
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <__sfp_lock_acquire+0x8>)
 8004852:	f000 b8b3 	b.w	80049bc <__retarget_lock_acquire_recursive>
 8004856:	bf00      	nop
 8004858:	2000095d 	.word	0x2000095d

0800485c <__sfp_lock_release>:
 800485c:	4801      	ldr	r0, [pc, #4]	; (8004864 <__sfp_lock_release+0x8>)
 800485e:	f000 b8ae 	b.w	80049be <__retarget_lock_release_recursive>
 8004862:	bf00      	nop
 8004864:	2000095d 	.word	0x2000095d

08004868 <__sinit_lock_acquire>:
 8004868:	4801      	ldr	r0, [pc, #4]	; (8004870 <__sinit_lock_acquire+0x8>)
 800486a:	f000 b8a7 	b.w	80049bc <__retarget_lock_acquire_recursive>
 800486e:	bf00      	nop
 8004870:	2000095e 	.word	0x2000095e

08004874 <__sinit_lock_release>:
 8004874:	4801      	ldr	r0, [pc, #4]	; (800487c <__sinit_lock_release+0x8>)
 8004876:	f000 b8a2 	b.w	80049be <__retarget_lock_release_recursive>
 800487a:	bf00      	nop
 800487c:	2000095e 	.word	0x2000095e

08004880 <__sinit>:
 8004880:	b510      	push	{r4, lr}
 8004882:	4604      	mov	r4, r0
 8004884:	f7ff fff0 	bl	8004868 <__sinit_lock_acquire>
 8004888:	69a3      	ldr	r3, [r4, #24]
 800488a:	b11b      	cbz	r3, 8004894 <__sinit+0x14>
 800488c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004890:	f7ff bff0 	b.w	8004874 <__sinit_lock_release>
 8004894:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004898:	6523      	str	r3, [r4, #80]	; 0x50
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <__sinit+0x68>)
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <__sinit+0x6c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80048a2:	42a3      	cmp	r3, r4
 80048a4:	bf04      	itt	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	61a3      	streq	r3, [r4, #24]
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 f820 	bl	80048f0 <__sfp>
 80048b0:	6060      	str	r0, [r4, #4]
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 f81c 	bl	80048f0 <__sfp>
 80048b8:	60a0      	str	r0, [r4, #8]
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 f818 	bl	80048f0 <__sfp>
 80048c0:	2200      	movs	r2, #0
 80048c2:	60e0      	str	r0, [r4, #12]
 80048c4:	2104      	movs	r1, #4
 80048c6:	6860      	ldr	r0, [r4, #4]
 80048c8:	f7ff ff82 	bl	80047d0 <std>
 80048cc:	68a0      	ldr	r0, [r4, #8]
 80048ce:	2201      	movs	r2, #1
 80048d0:	2109      	movs	r1, #9
 80048d2:	f7ff ff7d 	bl	80047d0 <std>
 80048d6:	68e0      	ldr	r0, [r4, #12]
 80048d8:	2202      	movs	r2, #2
 80048da:	2112      	movs	r1, #18
 80048dc:	f7ff ff78 	bl	80047d0 <std>
 80048e0:	2301      	movs	r3, #1
 80048e2:	61a3      	str	r3, [r4, #24]
 80048e4:	e7d2      	b.n	800488c <__sinit+0xc>
 80048e6:	bf00      	nop
 80048e8:	0800505c 	.word	0x0800505c
 80048ec:	08004819 	.word	0x08004819

080048f0 <__sfp>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	4607      	mov	r7, r0
 80048f4:	f7ff ffac 	bl	8004850 <__sfp_lock_acquire>
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <__sfp+0x84>)
 80048fa:	681e      	ldr	r6, [r3, #0]
 80048fc:	69b3      	ldr	r3, [r6, #24]
 80048fe:	b913      	cbnz	r3, 8004906 <__sfp+0x16>
 8004900:	4630      	mov	r0, r6
 8004902:	f7ff ffbd 	bl	8004880 <__sinit>
 8004906:	3648      	adds	r6, #72	; 0x48
 8004908:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800490c:	3b01      	subs	r3, #1
 800490e:	d503      	bpl.n	8004918 <__sfp+0x28>
 8004910:	6833      	ldr	r3, [r6, #0]
 8004912:	b30b      	cbz	r3, 8004958 <__sfp+0x68>
 8004914:	6836      	ldr	r6, [r6, #0]
 8004916:	e7f7      	b.n	8004908 <__sfp+0x18>
 8004918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800491c:	b9d5      	cbnz	r5, 8004954 <__sfp+0x64>
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <__sfp+0x88>)
 8004920:	60e3      	str	r3, [r4, #12]
 8004922:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004926:	6665      	str	r5, [r4, #100]	; 0x64
 8004928:	f000 f847 	bl	80049ba <__retarget_lock_init_recursive>
 800492c:	f7ff ff96 	bl	800485c <__sfp_lock_release>
 8004930:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004934:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004938:	6025      	str	r5, [r4, #0]
 800493a:	61a5      	str	r5, [r4, #24]
 800493c:	2208      	movs	r2, #8
 800493e:	4629      	mov	r1, r5
 8004940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004944:	f7ff fac4 	bl	8003ed0 <memset>
 8004948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800494c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004950:	4620      	mov	r0, r4
 8004952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004954:	3468      	adds	r4, #104	; 0x68
 8004956:	e7d9      	b.n	800490c <__sfp+0x1c>
 8004958:	2104      	movs	r1, #4
 800495a:	4638      	mov	r0, r7
 800495c:	f7ff ff62 	bl	8004824 <__sfmoreglue>
 8004960:	4604      	mov	r4, r0
 8004962:	6030      	str	r0, [r6, #0]
 8004964:	2800      	cmp	r0, #0
 8004966:	d1d5      	bne.n	8004914 <__sfp+0x24>
 8004968:	f7ff ff78 	bl	800485c <__sfp_lock_release>
 800496c:	230c      	movs	r3, #12
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	e7ee      	b.n	8004950 <__sfp+0x60>
 8004972:	bf00      	nop
 8004974:	0800505c 	.word	0x0800505c
 8004978:	ffff0001 	.word	0xffff0001

0800497c <_fwalk_reent>:
 800497c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004980:	4606      	mov	r6, r0
 8004982:	4688      	mov	r8, r1
 8004984:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004988:	2700      	movs	r7, #0
 800498a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800498e:	f1b9 0901 	subs.w	r9, r9, #1
 8004992:	d505      	bpl.n	80049a0 <_fwalk_reent+0x24>
 8004994:	6824      	ldr	r4, [r4, #0]
 8004996:	2c00      	cmp	r4, #0
 8004998:	d1f7      	bne.n	800498a <_fwalk_reent+0xe>
 800499a:	4638      	mov	r0, r7
 800499c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a0:	89ab      	ldrh	r3, [r5, #12]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d907      	bls.n	80049b6 <_fwalk_reent+0x3a>
 80049a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049aa:	3301      	adds	r3, #1
 80049ac:	d003      	beq.n	80049b6 <_fwalk_reent+0x3a>
 80049ae:	4629      	mov	r1, r5
 80049b0:	4630      	mov	r0, r6
 80049b2:	47c0      	blx	r8
 80049b4:	4307      	orrs	r7, r0
 80049b6:	3568      	adds	r5, #104	; 0x68
 80049b8:	e7e9      	b.n	800498e <_fwalk_reent+0x12>

080049ba <__retarget_lock_init_recursive>:
 80049ba:	4770      	bx	lr

080049bc <__retarget_lock_acquire_recursive>:
 80049bc:	4770      	bx	lr

080049be <__retarget_lock_release_recursive>:
 80049be:	4770      	bx	lr

080049c0 <__swhatbuf_r>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	460e      	mov	r6, r1
 80049c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c8:	2900      	cmp	r1, #0
 80049ca:	b096      	sub	sp, #88	; 0x58
 80049cc:	4614      	mov	r4, r2
 80049ce:	461d      	mov	r5, r3
 80049d0:	da08      	bge.n	80049e4 <__swhatbuf_r+0x24>
 80049d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	602a      	str	r2, [r5, #0]
 80049da:	061a      	lsls	r2, r3, #24
 80049dc:	d410      	bmi.n	8004a00 <__swhatbuf_r+0x40>
 80049de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e2:	e00e      	b.n	8004a02 <__swhatbuf_r+0x42>
 80049e4:	466a      	mov	r2, sp
 80049e6:	f000 f9eb 	bl	8004dc0 <_fstat_r>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	dbf1      	blt.n	80049d2 <__swhatbuf_r+0x12>
 80049ee:	9a01      	ldr	r2, [sp, #4]
 80049f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049f8:	425a      	negs	r2, r3
 80049fa:	415a      	adcs	r2, r3
 80049fc:	602a      	str	r2, [r5, #0]
 80049fe:	e7ee      	b.n	80049de <__swhatbuf_r+0x1e>
 8004a00:	2340      	movs	r3, #64	; 0x40
 8004a02:	2000      	movs	r0, #0
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	b016      	add	sp, #88	; 0x58
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a0c <__smakebuf_r>:
 8004a0c:	898b      	ldrh	r3, [r1, #12]
 8004a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a10:	079d      	lsls	r5, r3, #30
 8004a12:	4606      	mov	r6, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	d507      	bpl.n	8004a28 <__smakebuf_r+0x1c>
 8004a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	2301      	movs	r3, #1
 8004a22:	6163      	str	r3, [r4, #20]
 8004a24:	b002      	add	sp, #8
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	ab01      	add	r3, sp, #4
 8004a2a:	466a      	mov	r2, sp
 8004a2c:	f7ff ffc8 	bl	80049c0 <__swhatbuf_r>
 8004a30:	9900      	ldr	r1, [sp, #0]
 8004a32:	4605      	mov	r5, r0
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 f895 	bl	8004b64 <_malloc_r>
 8004a3a:	b948      	cbnz	r0, 8004a50 <__smakebuf_r+0x44>
 8004a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a40:	059a      	lsls	r2, r3, #22
 8004a42:	d4ef      	bmi.n	8004a24 <__smakebuf_r+0x18>
 8004a44:	f023 0303 	bic.w	r3, r3, #3
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	81a3      	strh	r3, [r4, #12]
 8004a4e:	e7e3      	b.n	8004a18 <__smakebuf_r+0xc>
 8004a50:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <__smakebuf_r+0x7c>)
 8004a52:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	6020      	str	r0, [r4, #0]
 8004a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5c:	81a3      	strh	r3, [r4, #12]
 8004a5e:	9b00      	ldr	r3, [sp, #0]
 8004a60:	6163      	str	r3, [r4, #20]
 8004a62:	9b01      	ldr	r3, [sp, #4]
 8004a64:	6120      	str	r0, [r4, #16]
 8004a66:	b15b      	cbz	r3, 8004a80 <__smakebuf_r+0x74>
 8004a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f000 f9b9 	bl	8004de4 <_isatty_r>
 8004a72:	b128      	cbz	r0, 8004a80 <__smakebuf_r+0x74>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	89a0      	ldrh	r0, [r4, #12]
 8004a82:	4305      	orrs	r5, r0
 8004a84:	81a5      	strh	r5, [r4, #12]
 8004a86:	e7cd      	b.n	8004a24 <__smakebuf_r+0x18>
 8004a88:	08004819 	.word	0x08004819

08004a8c <_free_r>:
 8004a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	d044      	beq.n	8004b1c <_free_r+0x90>
 8004a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a96:	9001      	str	r0, [sp, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8004a9e:	bfb8      	it	lt
 8004aa0:	18e4      	addlt	r4, r4, r3
 8004aa2:	f000 f9c1 	bl	8004e28 <__malloc_lock>
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <_free_r+0x94>)
 8004aa8:	9801      	ldr	r0, [sp, #4]
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	b933      	cbnz	r3, 8004abc <_free_r+0x30>
 8004aae:	6063      	str	r3, [r4, #4]
 8004ab0:	6014      	str	r4, [r2, #0]
 8004ab2:	b003      	add	sp, #12
 8004ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ab8:	f000 b9bc 	b.w	8004e34 <__malloc_unlock>
 8004abc:	42a3      	cmp	r3, r4
 8004abe:	d908      	bls.n	8004ad2 <_free_r+0x46>
 8004ac0:	6825      	ldr	r5, [r4, #0]
 8004ac2:	1961      	adds	r1, r4, r5
 8004ac4:	428b      	cmp	r3, r1
 8004ac6:	bf01      	itttt	eq
 8004ac8:	6819      	ldreq	r1, [r3, #0]
 8004aca:	685b      	ldreq	r3, [r3, #4]
 8004acc:	1949      	addeq	r1, r1, r5
 8004ace:	6021      	streq	r1, [r4, #0]
 8004ad0:	e7ed      	b.n	8004aae <_free_r+0x22>
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	b10b      	cbz	r3, 8004adc <_free_r+0x50>
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	d9fa      	bls.n	8004ad2 <_free_r+0x46>
 8004adc:	6811      	ldr	r1, [r2, #0]
 8004ade:	1855      	adds	r5, r2, r1
 8004ae0:	42a5      	cmp	r5, r4
 8004ae2:	d10b      	bne.n	8004afc <_free_r+0x70>
 8004ae4:	6824      	ldr	r4, [r4, #0]
 8004ae6:	4421      	add	r1, r4
 8004ae8:	1854      	adds	r4, r2, r1
 8004aea:	42a3      	cmp	r3, r4
 8004aec:	6011      	str	r1, [r2, #0]
 8004aee:	d1e0      	bne.n	8004ab2 <_free_r+0x26>
 8004af0:	681c      	ldr	r4, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	6053      	str	r3, [r2, #4]
 8004af6:	4421      	add	r1, r4
 8004af8:	6011      	str	r1, [r2, #0]
 8004afa:	e7da      	b.n	8004ab2 <_free_r+0x26>
 8004afc:	d902      	bls.n	8004b04 <_free_r+0x78>
 8004afe:	230c      	movs	r3, #12
 8004b00:	6003      	str	r3, [r0, #0]
 8004b02:	e7d6      	b.n	8004ab2 <_free_r+0x26>
 8004b04:	6825      	ldr	r5, [r4, #0]
 8004b06:	1961      	adds	r1, r4, r5
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	bf04      	itt	eq
 8004b0c:	6819      	ldreq	r1, [r3, #0]
 8004b0e:	685b      	ldreq	r3, [r3, #4]
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	bf04      	itt	eq
 8004b14:	1949      	addeq	r1, r1, r5
 8004b16:	6021      	streq	r1, [r4, #0]
 8004b18:	6054      	str	r4, [r2, #4]
 8004b1a:	e7ca      	b.n	8004ab2 <_free_r+0x26>
 8004b1c:	b003      	add	sp, #12
 8004b1e:	bd30      	pop	{r4, r5, pc}
 8004b20:	20000960 	.word	0x20000960

08004b24 <sbrk_aligned>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4e0e      	ldr	r6, [pc, #56]	; (8004b60 <sbrk_aligned+0x3c>)
 8004b28:	460c      	mov	r4, r1
 8004b2a:	6831      	ldr	r1, [r6, #0]
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	b911      	cbnz	r1, 8004b36 <sbrk_aligned+0x12>
 8004b30:	f000 f88c 	bl	8004c4c <_sbrk_r>
 8004b34:	6030      	str	r0, [r6, #0]
 8004b36:	4621      	mov	r1, r4
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 f887 	bl	8004c4c <_sbrk_r>
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	d00a      	beq.n	8004b58 <sbrk_aligned+0x34>
 8004b42:	1cc4      	adds	r4, r0, #3
 8004b44:	f024 0403 	bic.w	r4, r4, #3
 8004b48:	42a0      	cmp	r0, r4
 8004b4a:	d007      	beq.n	8004b5c <sbrk_aligned+0x38>
 8004b4c:	1a21      	subs	r1, r4, r0
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f000 f87c 	bl	8004c4c <_sbrk_r>
 8004b54:	3001      	adds	r0, #1
 8004b56:	d101      	bne.n	8004b5c <sbrk_aligned+0x38>
 8004b58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	20000964 	.word	0x20000964

08004b64 <_malloc_r>:
 8004b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b68:	1ccd      	adds	r5, r1, #3
 8004b6a:	f025 0503 	bic.w	r5, r5, #3
 8004b6e:	3508      	adds	r5, #8
 8004b70:	2d0c      	cmp	r5, #12
 8004b72:	bf38      	it	cc
 8004b74:	250c      	movcc	r5, #12
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	4607      	mov	r7, r0
 8004b7a:	db01      	blt.n	8004b80 <_malloc_r+0x1c>
 8004b7c:	42a9      	cmp	r1, r5
 8004b7e:	d905      	bls.n	8004b8c <_malloc_r+0x28>
 8004b80:	230c      	movs	r3, #12
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	2600      	movs	r6, #0
 8004b86:	4630      	mov	r0, r6
 8004b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b8c:	4e2e      	ldr	r6, [pc, #184]	; (8004c48 <_malloc_r+0xe4>)
 8004b8e:	f000 f94b 	bl	8004e28 <__malloc_lock>
 8004b92:	6833      	ldr	r3, [r6, #0]
 8004b94:	461c      	mov	r4, r3
 8004b96:	bb34      	cbnz	r4, 8004be6 <_malloc_r+0x82>
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	f7ff ffc2 	bl	8004b24 <sbrk_aligned>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	d14d      	bne.n	8004c42 <_malloc_r+0xde>
 8004ba6:	6834      	ldr	r4, [r6, #0]
 8004ba8:	4626      	mov	r6, r4
 8004baa:	2e00      	cmp	r6, #0
 8004bac:	d140      	bne.n	8004c30 <_malloc_r+0xcc>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	eb04 0803 	add.w	r8, r4, r3
 8004bb8:	f000 f848 	bl	8004c4c <_sbrk_r>
 8004bbc:	4580      	cmp	r8, r0
 8004bbe:	d13a      	bne.n	8004c36 <_malloc_r+0xd2>
 8004bc0:	6821      	ldr	r1, [r4, #0]
 8004bc2:	3503      	adds	r5, #3
 8004bc4:	1a6d      	subs	r5, r5, r1
 8004bc6:	f025 0503 	bic.w	r5, r5, #3
 8004bca:	3508      	adds	r5, #8
 8004bcc:	2d0c      	cmp	r5, #12
 8004bce:	bf38      	it	cc
 8004bd0:	250c      	movcc	r5, #12
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f7ff ffa5 	bl	8004b24 <sbrk_aligned>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d02b      	beq.n	8004c36 <_malloc_r+0xd2>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	442b      	add	r3, r5
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	e00e      	b.n	8004c04 <_malloc_r+0xa0>
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	1b52      	subs	r2, r2, r5
 8004bea:	d41e      	bmi.n	8004c2a <_malloc_r+0xc6>
 8004bec:	2a0b      	cmp	r2, #11
 8004bee:	d916      	bls.n	8004c1e <_malloc_r+0xba>
 8004bf0:	1961      	adds	r1, r4, r5
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	6025      	str	r5, [r4, #0]
 8004bf6:	bf18      	it	ne
 8004bf8:	6059      	strne	r1, [r3, #4]
 8004bfa:	6863      	ldr	r3, [r4, #4]
 8004bfc:	bf08      	it	eq
 8004bfe:	6031      	streq	r1, [r6, #0]
 8004c00:	5162      	str	r2, [r4, r5]
 8004c02:	604b      	str	r3, [r1, #4]
 8004c04:	4638      	mov	r0, r7
 8004c06:	f104 060b 	add.w	r6, r4, #11
 8004c0a:	f000 f913 	bl	8004e34 <__malloc_unlock>
 8004c0e:	f026 0607 	bic.w	r6, r6, #7
 8004c12:	1d23      	adds	r3, r4, #4
 8004c14:	1af2      	subs	r2, r6, r3
 8004c16:	d0b6      	beq.n	8004b86 <_malloc_r+0x22>
 8004c18:	1b9b      	subs	r3, r3, r6
 8004c1a:	50a3      	str	r3, [r4, r2]
 8004c1c:	e7b3      	b.n	8004b86 <_malloc_r+0x22>
 8004c1e:	6862      	ldr	r2, [r4, #4]
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	bf0c      	ite	eq
 8004c24:	6032      	streq	r2, [r6, #0]
 8004c26:	605a      	strne	r2, [r3, #4]
 8004c28:	e7ec      	b.n	8004c04 <_malloc_r+0xa0>
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	6864      	ldr	r4, [r4, #4]
 8004c2e:	e7b2      	b.n	8004b96 <_malloc_r+0x32>
 8004c30:	4634      	mov	r4, r6
 8004c32:	6876      	ldr	r6, [r6, #4]
 8004c34:	e7b9      	b.n	8004baa <_malloc_r+0x46>
 8004c36:	230c      	movs	r3, #12
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	f000 f8fa 	bl	8004e34 <__malloc_unlock>
 8004c40:	e7a1      	b.n	8004b86 <_malloc_r+0x22>
 8004c42:	6025      	str	r5, [r4, #0]
 8004c44:	e7de      	b.n	8004c04 <_malloc_r+0xa0>
 8004c46:	bf00      	nop
 8004c48:	20000960 	.word	0x20000960

08004c4c <_sbrk_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d06      	ldr	r5, [pc, #24]	; (8004c68 <_sbrk_r+0x1c>)
 8004c50:	2300      	movs	r3, #0
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	f7fc f966 	bl	8000f28 <_sbrk>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d102      	bne.n	8004c66 <_sbrk_r+0x1a>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b103      	cbz	r3, 8004c66 <_sbrk_r+0x1a>
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	20000968 	.word	0x20000968

08004c6c <_raise_r>:
 8004c6c:	291f      	cmp	r1, #31
 8004c6e:	b538      	push	{r3, r4, r5, lr}
 8004c70:	4604      	mov	r4, r0
 8004c72:	460d      	mov	r5, r1
 8004c74:	d904      	bls.n	8004c80 <_raise_r+0x14>
 8004c76:	2316      	movs	r3, #22
 8004c78:	6003      	str	r3, [r0, #0]
 8004c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004c82:	b112      	cbz	r2, 8004c8a <_raise_r+0x1e>
 8004c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c88:	b94b      	cbnz	r3, 8004c9e <_raise_r+0x32>
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 f830 	bl	8004cf0 <_getpid_r>
 8004c90:	462a      	mov	r2, r5
 8004c92:	4601      	mov	r1, r0
 8004c94:	4620      	mov	r0, r4
 8004c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c9a:	f000 b817 	b.w	8004ccc <_kill_r>
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d00a      	beq.n	8004cb8 <_raise_r+0x4c>
 8004ca2:	1c59      	adds	r1, r3, #1
 8004ca4:	d103      	bne.n	8004cae <_raise_r+0x42>
 8004ca6:	2316      	movs	r3, #22
 8004ca8:	6003      	str	r3, [r0, #0]
 8004caa:	2001      	movs	r0, #1
 8004cac:	e7e7      	b.n	8004c7e <_raise_r+0x12>
 8004cae:	2400      	movs	r4, #0
 8004cb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	4798      	blx	r3
 8004cb8:	2000      	movs	r0, #0
 8004cba:	e7e0      	b.n	8004c7e <_raise_r+0x12>

08004cbc <raise>:
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <raise+0xc>)
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	f7ff bfd3 	b.w	8004c6c <_raise_r>
 8004cc6:	bf00      	nop
 8004cc8:	200000a4 	.word	0x200000a4

08004ccc <_kill_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d07      	ldr	r5, [pc, #28]	; (8004cec <_kill_r+0x20>)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	f7fc f89d 	bl	8000e18 <_kill>
 8004cde:	1c43      	adds	r3, r0, #1
 8004ce0:	d102      	bne.n	8004ce8 <_kill_r+0x1c>
 8004ce2:	682b      	ldr	r3, [r5, #0]
 8004ce4:	b103      	cbz	r3, 8004ce8 <_kill_r+0x1c>
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	bd38      	pop	{r3, r4, r5, pc}
 8004cea:	bf00      	nop
 8004cec:	20000968 	.word	0x20000968

08004cf0 <_getpid_r>:
 8004cf0:	f7fc b88a 	b.w	8000e08 <_getpid>

08004cf4 <__sread>:
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfc:	f000 f8a0 	bl	8004e40 <_read_r>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	bfab      	itete	ge
 8004d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d06:	89a3      	ldrhlt	r3, [r4, #12]
 8004d08:	181b      	addge	r3, r3, r0
 8004d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d0e:	bfac      	ite	ge
 8004d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d12:	81a3      	strhlt	r3, [r4, #12]
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <__swrite>:
 8004d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1a:	461f      	mov	r7, r3
 8004d1c:	898b      	ldrh	r3, [r1, #12]
 8004d1e:	05db      	lsls	r3, r3, #23
 8004d20:	4605      	mov	r5, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4616      	mov	r6, r2
 8004d26:	d505      	bpl.n	8004d34 <__swrite+0x1e>
 8004d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f000 f868 	bl	8004e04 <_lseek_r>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	4632      	mov	r2, r6
 8004d42:	463b      	mov	r3, r7
 8004d44:	4628      	mov	r0, r5
 8004d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4a:	f000 b817 	b.w	8004d7c <_write_r>

08004d4e <__sseek>:
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	460c      	mov	r4, r1
 8004d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d56:	f000 f855 	bl	8004e04 <_lseek_r>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	bf15      	itete	ne
 8004d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d6a:	81a3      	strheq	r3, [r4, #12]
 8004d6c:	bf18      	it	ne
 8004d6e:	81a3      	strhne	r3, [r4, #12]
 8004d70:	bd10      	pop	{r4, pc}

08004d72 <__sclose>:
 8004d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d76:	f000 b813 	b.w	8004da0 <_close_r>
	...

08004d7c <_write_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4d07      	ldr	r5, [pc, #28]	; (8004d9c <_write_r+0x20>)
 8004d80:	4604      	mov	r4, r0
 8004d82:	4608      	mov	r0, r1
 8004d84:	4611      	mov	r1, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	602a      	str	r2, [r5, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7fc f87b 	bl	8000e86 <_write>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_write_r+0x1e>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_write_r+0x1e>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000968 	.word	0x20000968

08004da0 <_close_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d06      	ldr	r5, [pc, #24]	; (8004dbc <_close_r+0x1c>)
 8004da4:	2300      	movs	r3, #0
 8004da6:	4604      	mov	r4, r0
 8004da8:	4608      	mov	r0, r1
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	f7fc f887 	bl	8000ebe <_close>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d102      	bne.n	8004dba <_close_r+0x1a>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	b103      	cbz	r3, 8004dba <_close_r+0x1a>
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	20000968 	.word	0x20000968

08004dc0 <_fstat_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4d07      	ldr	r5, [pc, #28]	; (8004de0 <_fstat_r+0x20>)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4608      	mov	r0, r1
 8004dca:	4611      	mov	r1, r2
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	f7fc f882 	bl	8000ed6 <_fstat>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d102      	bne.n	8004ddc <_fstat_r+0x1c>
 8004dd6:	682b      	ldr	r3, [r5, #0]
 8004dd8:	b103      	cbz	r3, 8004ddc <_fstat_r+0x1c>
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	bf00      	nop
 8004de0:	20000968 	.word	0x20000968

08004de4 <_isatty_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d06      	ldr	r5, [pc, #24]	; (8004e00 <_isatty_r+0x1c>)
 8004de8:	2300      	movs	r3, #0
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	f7fc f881 	bl	8000ef6 <_isatty>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_isatty_r+0x1a>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_isatty_r+0x1a>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	20000968 	.word	0x20000968

08004e04 <_lseek_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d07      	ldr	r5, [pc, #28]	; (8004e24 <_lseek_r+0x20>)
 8004e08:	4604      	mov	r4, r0
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	602a      	str	r2, [r5, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f7fc f87a 	bl	8000f0c <_lseek>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_lseek_r+0x1e>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_lseek_r+0x1e>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000968 	.word	0x20000968

08004e28 <__malloc_lock>:
 8004e28:	4801      	ldr	r0, [pc, #4]	; (8004e30 <__malloc_lock+0x8>)
 8004e2a:	f7ff bdc7 	b.w	80049bc <__retarget_lock_acquire_recursive>
 8004e2e:	bf00      	nop
 8004e30:	2000095c 	.word	0x2000095c

08004e34 <__malloc_unlock>:
 8004e34:	4801      	ldr	r0, [pc, #4]	; (8004e3c <__malloc_unlock+0x8>)
 8004e36:	f7ff bdc2 	b.w	80049be <__retarget_lock_release_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	2000095c 	.word	0x2000095c

08004e40 <_read_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d07      	ldr	r5, [pc, #28]	; (8004e60 <_read_r+0x20>)
 8004e44:	4604      	mov	r4, r0
 8004e46:	4608      	mov	r0, r1
 8004e48:	4611      	mov	r1, r2
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	602a      	str	r2, [r5, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f7fb fffc 	bl	8000e4c <_read>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_read_r+0x1e>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_read_r+0x1e>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000968 	.word	0x20000968

08004e64 <_init>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	bf00      	nop
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr

08004e70 <_fini>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	bf00      	nop
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr
