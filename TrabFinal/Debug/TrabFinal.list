
TrabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e30  08004e30  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e34  08004e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08004e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          00000848  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000900  20000900  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013082  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d6  00000000  00000000  0003316a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00035b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  00036ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263b0  00000000  00000000  00037938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012563  00000000  00000000  0005dce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deed6  00000000  00000000  0007024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f121  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000494c  00000000  00000000  0014f174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c2c 	.word	0x08004c2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	08004c2c 	.word	0x08004c2c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059a:	f001 f8a1 	bl	80016e0 <HAL_Init>

	/* USER CODE BEGIN Init */

	delayInit(&Delay1, TIME1);
 800059e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a2:	482d      	ldr	r0, [pc, #180]	; (8000658 <main+0xc4>)
 80005a4:	f000 fe66 	bl	8001274 <delayInit>
	delayInit(&Delay2, TIME2);
 80005a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80005ac:	482b      	ldr	r0, [pc, #172]	; (800065c <main+0xc8>)
 80005ae:	f000 fe61 	bl	8001274 <delayInit>
	delayInit(&Delay3, TIME3);
 80005b2:	2128      	movs	r1, #40	; 0x28
 80005b4:	482a      	ldr	r0, [pc, #168]	; (8000660 <main+0xcc>)
 80005b6:	f000 fe5d 	bl	8001274 <delayInit>
	debounceFSM_init(&Delay3);
 80005ba:	4829      	ldr	r0, [pc, #164]	; (8000660 <main+0xcc>)
 80005bc:	f000 fda4 	bl	8001108 <debounceFSM_init>

	inicializarMEF();
 80005c0:	f000 ff92 	bl	80014e8 <inicializarMEF>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c4:	f000 f85a 	bl	800067c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c8:	f000 f9a0 	bl	800090c <MX_GPIO_Init>
	MX_ETH_Init();
 80005cc:	f000 f8c2 	bl	8000754 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80005d0:	f000 f944 	bl	800085c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80005d4:	f000 f96c 	bl	80008b0 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI3_Init();
 80005d8:	f000 f90a 	bl	80007f0 <MX_SPI3_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	estado = SET;
 80005dc:	2301      	movs	r3, #1
 80005de:	71fb      	strb	r3, [r7, #7]

	init_led();
 80005e0:	f000 fec6 	bl	8001370 <init_led>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		estado = actualizarMEF(&Delay1);
 80005e4:	481c      	ldr	r0, [pc, #112]	; (8000658 <main+0xc4>)
 80005e6:	f000 ff8b 	bl	8001500 <actualizarMEF>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]

		switch (estado) {
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b05      	cmp	r3, #5
 80005f2:	d8f7      	bhi.n	80005e4 <main+0x50>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <main+0x68>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000615 	.word	0x08000615
 8000600:	0800061b 	.word	0x0800061b
 8000604:	08000623 	.word	0x08000623
 8000608:	0800062b 	.word	0x0800062b
 800060c:	08000633 	.word	0x08000633
 8000610:	0800063b 	.word	0x0800063b
		case SET_ini:
			lit_led();
 8000614:	f000 fec6 	bl	80013a4 <lit_led>
			break;
 8000618:	e01d      	b.n	8000656 <main+0xc2>
		case FIRST:
			update_led(A);
 800061a:	4812      	ldr	r0, [pc, #72]	; (8000664 <main+0xd0>)
 800061c:	f000 fee4 	bl	80013e8 <update_led>
			break;
 8000620:	e019      	b.n	8000656 <main+0xc2>
		case SECOND:
			update_led(B);
 8000622:	4811      	ldr	r0, [pc, #68]	; (8000668 <main+0xd4>)
 8000624:	f000 fee0 	bl	80013e8 <update_led>
			break;
 8000628:	e015      	b.n	8000656 <main+0xc2>
		case THIRD:
			update_led(C);
 800062a:	4810      	ldr	r0, [pc, #64]	; (800066c <main+0xd8>)
 800062c:	f000 fedc 	bl	80013e8 <update_led>
			break;
 8000630:	e011      	b.n	8000656 <main+0xc2>
		case GOOD:
			update_led(smileyFace);
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <main+0xdc>)
 8000634:	f000 fed8 	bl	80013e8 <update_led>
			break;
 8000638:	e00d      	b.n	8000656 <main+0xc2>
		case BAD:
			if (delayRead(&Delay2)) {
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <main+0xc8>)
 800063c:	f000 fe38 	bl	80012b0 <delayRead>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d003      	beq.n	800064e <main+0xba>
				update_led(ghost1);
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <main+0xe0>)
 8000648:	f000 fece 	bl	80013e8 <update_led>
			} else {
				update_led(ghost5);
			}
			break;
 800064c:	e002      	b.n	8000654 <main+0xc0>
				update_led(ghost5);
 800064e:	480a      	ldr	r0, [pc, #40]	; (8000678 <main+0xe4>)
 8000650:	f000 feca 	bl	80013e8 <update_led>
			break;
 8000654:	bf00      	nop
		estado = actualizarMEF(&Delay1);
 8000656:	e7c5      	b.n	80005e4 <main+0x50>
 8000658:	200008a4 	.word	0x200008a4
 800065c:	200008b0 	.word	0x200008b0
 8000660:	200008bc 	.word	0x200008bc
 8000664:	20000008 	.word	0x20000008
 8000668:	20000010 	.word	0x20000010
 800066c:	20000018 	.word	0x20000018
 8000670:	20000000 	.word	0x20000000
 8000674:	20000020 	.word	0x20000020
 8000678:	20000028 	.word	0x20000028

0800067c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fb04 	bl	8003c98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a28      	ldr	r2, [pc, #160]	; (800074c <SystemClock_Config+0xd0>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd4>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80006f4:	2348      	movs	r3, #72	; 0x48
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80006fc:	2303      	movs	r3, #3
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ff89 	bl	800261c <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
		Error_Handler();
 8000710:	f000 f9d0 	bl	8000ab4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f002 f9ea 	bl	8002b0c <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc6>
		Error_Handler();
 800073e:	f000 f9b9 	bl	8000ab4 <Error_Handler>
	}
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_ETH_Init+0x84>)
 800075a:	4a20      	ldr	r2, [pc, #128]	; (80007dc <MX_ETH_Init+0x88>)
 800075c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_ETH_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_ETH_Init+0x8c>)
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_ETH_Init+0x8c>)
 800076c:	22e1      	movs	r2, #225	; 0xe1
 800076e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_ETH_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_ETH_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_ETH_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_ETH_Init+0x84>)
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_ETH_Init+0x8c>)
 8000786:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_ETH_Init+0x84>)
 800078a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800078e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_ETH_Init+0x84>)
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <MX_ETH_Init+0x90>)
 8000794:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_ETH_Init+0x84>)
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_ETH_Init+0x94>)
 800079a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_ETH_Init+0x84>)
 800079e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007a2:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_ETH_Init+0x84>)
 80007a6:	f001 f917 	bl	80019d8 <HAL_ETH_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ETH_Init+0x60>
		Error_Handler();
 80007b0:	f000 f980 	bl	8000ab4 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80007b4:	2238      	movs	r2, #56	; 0x38
 80007b6:	2100      	movs	r1, #0
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_ETH_Init+0x98>)
 80007ba:	f003 fa6d 	bl	8003c98 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_ETH_Init+0x98>)
 80007c0:	2221      	movs	r2, #33	; 0x21
 80007c2:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_ETH_Init+0x98>)
 80007c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007ca:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_ETH_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000024c 	.word	0x2000024c
 80007dc:	40028000 	.word	0x40028000
 80007e0:	200008c8 	.word	0x200008c8
 80007e4:	200001ac 	.word	0x200001ac
 80007e8:	2000010c 	.word	0x2000010c
 80007ec:	200000d4 	.word	0x200000d4

080007f0 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SPI3_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_SPI3_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI3_Init+0x64>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI3_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_SPI3_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI3_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI3_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI3_Init+0x64>)
 800081c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000820:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI3_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_SPI3_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI3_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_SPI3_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI3_Init+0x64>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_SPI3_Init+0x64>)
 8000842:	f002 fb83 	bl	8002f4c <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI3_Init+0x60>
		Error_Handler();
 800084c:	f000 f932 	bl	8000ab4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200002fc 	.word	0x200002fc
 8000858:	40003c00 	.word	0x40003c00

0800085c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_USART3_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000894:	f002 fbe3 	bl	800305e <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800089e:	f000 f909 	bl	8000ab4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000354 	.word	0x20000354
 80008ac:	40004800 	.word	0x40004800

080008b0 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ba:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2204      	movs	r2, #4
 80008c0:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	f001 fd75 	bl	80023e2 <HAL_PCD_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 80008fe:	f000 f8d9 	bl	8000ab4 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000398 	.word	0x20000398

0800090c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a5d      	ldr	r2, [pc, #372]	; (8000aa0 <MX_GPIO_Init+0x194>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4f      	ldr	r2, [pc, #316]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4d      	ldr	r3, [pc, #308]	; (8000aa0 <MX_GPIO_Init+0x194>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <MX_GPIO_Init+0x194>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <MX_GPIO_Init+0x194>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a41      	ldr	r2, [pc, #260]	; (8000aa0 <MX_GPIO_Init+0x194>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <MX_GPIO_Init+0x194>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x194>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a3a      	ldr	r2, [pc, #232]	; (8000aa0 <MX_GPIO_Init+0x194>)
 80009b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <MX_GPIO_Init+0x194>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | GPIO_PIN_5 | LD2_Pin,
 80009ca:	2200      	movs	r2, #0
 80009cc:	f244 01a1 	movw	r1, #16545	; 0x40a1
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <MX_GPIO_Init+0x198>)
 80009d2:	f001 fced 	bl	80023b0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, CS_Pin | DIN_Pin | CLK_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80009dc:	4832      	ldr	r0, [pc, #200]	; (8000aa8 <MX_GPIO_Init+0x19c>)
 80009de:	f001 fce7 	bl	80023b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin | GPIO_PIN_15,
 80009e2:	2200      	movs	r2, #0
 80009e4:	f248 0140 	movw	r1, #32832	; 0x8040
 80009e8:	4830      	ldr	r0, [pc, #192]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009ea:	f001 fce1 	bl	80023b0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x1a4>)
 8000a06:	f001 fb0f 	bl	8002028 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000a0a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0x198>)
 8000a24:	f001 fb00 	bl	8002028 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin DIN_Pin CLK_Pin */
	GPIO_InitStruct.Pin = CS_Pin | DIN_Pin | CLK_Pin;
 8000a28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0x19c>)
 8000a42:	f001 faf1 	bl	8002028 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_PowerSwitchOn_Pin PG15 */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin | GPIO_PIN_15;
 8000a46:	f248 0340 	movw	r3, #32832	; 0x8040
 8000a4a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000a60:	f001 fae2 	bl	8002028 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000a78:	f001 fad6 	bl	8002028 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_GPIO_Init+0x198>)
 8000a94:	f001 fac8 	bl	8002028 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	; 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a55      	ldr	r2, [pc, #340]	; (8000c84 <HAL_ETH_MspInit+0x174>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	f040 80a4 	bne.w	8000c7c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a52      	ldr	r2, [pc, #328]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4c:	623b      	str	r3, [r7, #32]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a36      	ldr	r2, [pc, #216]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <HAL_ETH_MspInit+0x178>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf8:	2332      	movs	r3, #50	; 0x32
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <HAL_ETH_MspInit+0x17c>)
 8000c14:	f001 fa08 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c18:	2386      	movs	r3, #134	; 0x86
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c28:	230b      	movs	r3, #11
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4817      	ldr	r0, [pc, #92]	; (8000c90 <HAL_ETH_MspInit+0x180>)
 8000c34:	f001 f9f8 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	480f      	ldr	r0, [pc, #60]	; (8000c94 <HAL_ETH_MspInit+0x184>)
 8000c56:	f001 f9e7 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4808      	ldr	r0, [pc, #32]	; (8000c98 <HAL_ETH_MspInit+0x188>)
 8000c78:	f001 f9d6 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3738      	adds	r7, #56	; 0x38
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40028000 	.word	0x40028000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40021800 	.word	0x40021800

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a28      	ldr	r2, [pc, #160]	; (8000d5c <HAL_SPI_MspInit+0xc0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d14a      	bne.n	8000d54 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_SPI_MspInit+0xc4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d12:	2310      	movs	r3, #16
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d22:	2306      	movs	r3, #6
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <HAL_SPI_MspInit+0xc8>)
 8000d2e:	f001 f97b 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d44:	2306      	movs	r3, #6
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <HAL_SPI_MspInit+0xcc>)
 8000d50:	f001 f96a 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40003c00 	.word	0x40003c00
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020800 	.word	0x40020800

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_UART_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12c      	bne.n	8000de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_UART_MspInit+0x8c>)
 8000de4:	f001 f920 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004800 	.word	0x40004800
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e1c:	d13f      	bne.n	8000e9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4815      	ldr	r0, [pc, #84]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e58:	f001 f8e6 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480e      	ldr	r0, [pc, #56]	; (8000eac <HAL_PCD_MspInit+0xb0>)
 8000e72:	f001 f8d9 	bl	8002028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6353      	str	r3, [r2, #52]	; 0x34
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_PCD_MspInit+0xac>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 fc42 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_kill>:

int _kill(int pid, int sig)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f1e:	f002 fe7f 	bl	8003c20 <__errno>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2216      	movs	r2, #22
 8000f26:	601a      	str	r2, [r3, #0]
  return -1;
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_exit>:

void _exit (int status)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffe7 	bl	8000f14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f46:	e7fe      	b.n	8000f46 <_exit+0x12>

08000f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
  }

  return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e009      	b.n	8000fa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf1      	blt.n	8000f94 <_write+0x12>
  }
  return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_close>:

int _close(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_isatty>:

int _isatty(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <_sbrk+0x5c>)
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <_sbrk+0x60>)
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <_sbrk+0x64>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <_sbrk+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001054:	f002 fde4 	bl	8003c20 <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001062:	e009      	b.n	8001078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <_sbrk+0x64>)
 8001074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20030000 	.word	0x20030000
 8001084:	00000400 	.word	0x00000400
 8001088:	200008d0 	.word	0x200008d0
 800108c:	20000900 	.word	0x20000900

08001090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010bc:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d0:	4c0b      	ldr	r4, [pc, #44]	; (8001100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010de:	f7ff ffd7 	bl	8001090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f002 fdb5 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fa55 	bl	8000594 <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80010f8:	08004e38 	.word	0x08004e38
  ldr r2, =_sbss
 80010fc:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001100:	20000900 	.word	0x20000900

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>
	...

08001108 <debounceFSM_init>:
 *          at the start of the model.
 *
 * @param   None
 * @retval  None
 */
void debounceFSM_init(delay_t *delayi) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	/* Initialize Estado */
	assert(&PressButton!=NULL);
	currentState = BUTTON_UP;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <debounceFSM_init+0x28>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	current_edge_state = EDGE_INIT;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <debounceFSM_init+0x2c>)
 8001118:	2202      	movs	r2, #2
 800111a:	701a      	strb	r2, [r3, #0]
	delay = delayi;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <debounceFSM_init+0x30>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
	return;
 8001122:	bf00      	nop
}
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200008d4 	.word	0x200008d4
 8001134:	200008d5 	.word	0x200008d5
 8001138:	200008d8 	.word	0x200008d8

0800113c <debounceFSM_update>:
 *          and updates the current state and outputs accordingly.
 *
 * @param   delay: pointer to the delay instance
 * @retval  None
 */
bool_t debounceFSM_update() {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	assert(delay!=NULL);
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <debounceFSM_update+0xec>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d105      	bne.n	8001156 <debounceFSM_update+0x1a>
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <debounceFSM_update+0xf0>)
 800114c:	4a38      	ldr	r2, [pc, #224]	; (8001230 <debounceFSM_update+0xf4>)
 800114e:	2176      	movs	r1, #118	; 0x76
 8001150:	4838      	ldr	r0, [pc, #224]	; (8001234 <debounceFSM_update+0xf8>)
 8001152:	f002 fd47 	bl	8003be4 <__assert_func>
	assert(&currentState!=NULL);
	bool_t value;
	value = false;
 8001156:	2300      	movs	r3, #0
 8001158:	71fb      	strb	r3, [r7, #7]

	switch (currentState) {
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <debounceFSM_update+0xfc>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d854      	bhi.n	800120c <debounceFSM_update+0xd0>
 8001162:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <debounceFSM_update+0x2c>)
 8001164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001168:	08001179 	.word	0x08001179
 800116c:	0800118d 	.word	0x0800118d
 8001170:	080011c7 	.word	0x080011c7
 8001174:	080011db 	.word	0x080011db
	/*
	 * In the BUTTON_UP state, it checks whether the button remains unpressed.
	 * Otherwise, that is, if the button is pressed, the state changes to BUTTON_FALLING.
	 */
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)) {
 8001178:	2000      	movs	r0, #0
 800117a:	f000 fa9b 	bl	80016b4 <BSP_PB_GetState>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d049      	beq.n	8001218 <debounceFSM_update+0xdc>
			currentState = BUTTON_FALLING;
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <debounceFSM_update+0xfc>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
		}
		break;
 800118a:	e045      	b.n	8001218 <debounceFSM_update+0xdc>
		 * If it remains pressed (condition 'yes'), the state changes to BUTTON_DOWN and the
		 * state of LED1 is toggled. If the button does not remain pressed (condition 'no'),
		 * the state changes back to BUTTON_UP, interpreting this event as a bounce.
		 */
	case BUTTON_FALLING:
		if (BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 800118c:	2000      	movs	r0, #0
 800118e:	f000 fa91 	bl	80016b4 <BSP_PB_GetState>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d012      	beq.n	80011be <debounceFSM_update+0x82>
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <debounceFSM_update+0xec>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f887 	bl	80012b0 <delayRead>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00a      	beq.n	80011be <debounceFSM_update+0x82>
			currentState = BUTTON_DOWN;
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <debounceFSM_update+0xfc>)
 80011aa:	2202      	movs	r2, #2
 80011ac:	701a      	strb	r2, [r3, #0]
			buttonPressed();
 80011ae:	f000 f849 	bl	8001244 <buttonPressed>
			value = true;
 80011b2:	2301      	movs	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]
			current_edge_state = EDGE_FALLING;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <debounceFSM_update+0x100>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
			//PressButton = !(PressButton);
		} else {
			//currentState=BUTTON_DOWN;
			currentState = BUTTON_UP;
		}
		break;
 80011bc:	e02f      	b.n	800121e <debounceFSM_update+0xe2>
			currentState = BUTTON_UP;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <debounceFSM_update+0xfc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
		break;
 80011c4:	e02b      	b.n	800121e <debounceFSM_update+0xe2>
		/*
		 * In the BUTTON_DOWN state, if the button is released, the state changes to BUTTON_RAISING.
		 */
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)) {
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 fa74 	bl	80016b4 <BSP_PB_GetState>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d124      	bne.n	800121c <debounceFSM_update+0xe0>
			currentState = BUTTON_RAISING;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <debounceFSM_update+0xfc>)
 80011d4:	2203      	movs	r2, #3
 80011d6:	701a      	strb	r2, [r3, #0]

		}
		break;
 80011d8:	e020      	b.n	800121c <debounceFSM_update+0xe0>
		 * If it remains unpressed (condition 'yes'), the state changes back to BUTTON_UP and
		 * the buttonReleased function is called. If the button is pressed again (condition 'no'),
		 * the state changes back to BUTTON_DOWN.
		 */
	case BUTTON_RAISING:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 fa6a 	bl	80016b4 <BSP_PB_GetState>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10e      	bne.n	8001204 <debounceFSM_update+0xc8>
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <debounceFSM_update+0xec>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f860 	bl	80012b0 <delayRead>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <debounceFSM_update+0xc8>
			currentState = BUTTON_UP;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <debounceFSM_update+0xfc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
			current_edge_state = EDGE_RAISING;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <debounceFSM_update+0x100>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			//buttonReleased();
		} else {

			currentState = BUTTON_DOWN;
		}
		break;
 8001202:	e00c      	b.n	800121e <debounceFSM_update+0xe2>
			currentState = BUTTON_DOWN;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <debounceFSM_update+0xfc>)
 8001206:	2202      	movs	r2, #2
 8001208:	701a      	strb	r2, [r3, #0]
		break;
 800120a:	e008      	b.n	800121e <debounceFSM_update+0xe2>
	default:
		/* Handle unexpected state */
		assert(0);
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <debounceFSM_update+0x104>)
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <debounceFSM_update+0xf4>)
 8001210:	21b2      	movs	r1, #178	; 0xb2
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <debounceFSM_update+0xf8>)
 8001214:	f002 fce6 	bl	8003be4 <__assert_func>
		break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <debounceFSM_update+0xe2>
		break;
 800121c:	bf00      	nop
	}
	return value;
 800121e:	79fb      	ldrb	r3, [r7, #7]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200008d8 	.word	0x200008d8
 800122c:	08004c90 	.word	0x08004c90
 8001230:	08004d18 	.word	0x08004d18
 8001234:	08004c6c 	.word	0x08004c6c
 8001238:	200008d4 	.word	0x200008d4
 800123c:	200008d5 	.word	0x200008d5
 8001240:	08004c68 	.word	0x08004c68

08001244 <buttonPressed>:
 * @brief   Toggles the state of LED2.
 *
 * @param   None
 * @retval  None
 */
static void buttonPressed() {
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	PressButton = !(PressButton);
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <buttonPressed+0x2c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf14      	ite	ne
 8001250:	2301      	movne	r3, #1
 8001252:	2300      	moveq	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f083 0301 	eor.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b03      	ldr	r3, [pc, #12]	; (8001270 <buttonPressed+0x2c>)
 8001264:	701a      	strb	r2, [r3, #0]
	return;
 8001266:	bf00      	nop
}
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	20000034 	.word	0x20000034

08001274 <delayInit>:
/* delayInit debe cargar el valor de duración del retardo en la estructura, en el campo
correspondiente. No debe iniciar el conteo del retardo. Debe inicializar el flag running
en `false´. */

void delayInit( delay_t * delay, tick_t duration )
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <delayInit+0x1c>
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <delayInit+0x30>)
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <delayInit+0x34>)
 8001288:	2113      	movs	r1, #19
 800128a:	4808      	ldr	r0, [pc, #32]	; (80012ac <delayInit+0x38>)
 800128c:	f002 fcaa 	bl	8003be4 <__assert_func>
	assert(delay->duration >=0);
	delay->duration = duration;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	721a      	strb	r2, [r3, #8]
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08004c9c 	.word	0x08004c9c
 80012a8:	08004d2c 	.word	0x08004d2c
 80012ac:	08004cac 	.word	0x08004cac

080012b0 <delayRead>:
○ true, hacer la cuenta para saber si el tiempo del retardo se cumplió o no:
‘marca de tiempo actual - marca de tiempo inicial es mayor o igual a duración
del retardo’ y devolver un valor booleano que indique si el tiempo se cumplió o no.
○ Cuando el tiempo se cumple se debe cambiar el flag running a false.*/

bool_t delayRead( delay_t * delay ){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

	static bool_t retValue; // variable estatica interna
	retValue = false;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <delayRead+0x6c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
	assert(delay !=NULL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d105      	bne.n	80012d0 <delayRead+0x20>
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <delayRead+0x70>)
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <delayRead+0x74>)
 80012c8:	2124      	movs	r1, #36	; 0x24
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <delayRead+0x78>)
 80012cc:	f002 fc8a 	bl	8003be4 <__assert_func>
	assert(delay->duration >= 0);

	if (delay->running == false){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7a1b      	ldrb	r3, [r3, #8]
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <delayRead+0x40>
		delay->startTime = HAL_GetTick();
 80012de:	f000 fa65 	bl	80017ac <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	721a      	strb	r2, [r3, #8]
 80012ee:	e00f      	b.n	8001310 <delayRead+0x60>
	}
	else{
		 if((HAL_GetTick()-delay->startTime) >= delay->duration){
 80012f0:	f000 fa5c 	bl	80017ac <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1ad2      	subs	r2, r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d305      	bcc.n	8001310 <delayRead+0x60>
			 delay->running = false;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	721a      	strb	r2, [r3, #8]
			 retValue = true;
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <delayRead+0x6c>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
		 }
	}
	return retValue;
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <delayRead+0x6c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200008dc 	.word	0x200008dc
 8001320:	08004ccc 	.word	0x08004ccc
 8001324:	08004d38 	.word	0x08004d38
 8001328:	08004cac 	.word	0x08004cac

0800132c <clear_led>:
	GOOD,
	BAD,
} def_Led_t;


void clear_led(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	for(int j = 0; j < 8; j++) {
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	e00e      	b.n	8001356 <clear_led+0x2a>
		spi_write(led_address[j],clear[j] );
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <clear_led+0x3c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	490a      	ldr	r1, [pc, #40]	; (800136c <clear_led+0x40>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	440b      	add	r3, r1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	4610      	mov	r0, r2
 800134c:	f000 f89a 	bl	8001484 <spi_write>
	for(int j = 0; j < 8; j++) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b07      	cmp	r3, #7
 800135a:	dded      	ble.n	8001338 <clear_led+0xc>
	}
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000038 	.word	0x20000038
 800136c:	200008e0 	.word	0x200008e0

08001370 <init_led>:

void init_led(void){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	spi_write(0x09, 0x00);       //  no decoding
 8001374:	2100      	movs	r1, #0
 8001376:	2009      	movs	r0, #9
 8001378:	f000 f884 	bl	8001484 <spi_write>
	spi_write(0x0b, 0x07);       //  scan limit = 8 LEDs
 800137c:	2107      	movs	r1, #7
 800137e:	200b      	movs	r0, #11
 8001380:	f000 f880 	bl	8001484 <spi_write>
	spi_write(0x0c, 0x01);       //  power down =0,normal mode = 1
 8001384:	2101      	movs	r1, #1
 8001386:	200c      	movs	r0, #12
 8001388:	f000 f87c 	bl	8001484 <spi_write>
	spi_write(0x0f, 0x00);       //  no test display
 800138c:	2100      	movs	r1, #0
 800138e:	200f      	movs	r0, #15
 8001390:	f000 f878 	bl	8001484 <spi_write>
	clear_led();
 8001394:	f7ff ffca 	bl	800132c <clear_led>
	spi_write(0x0a, 0x05);       //  brightness intensity
 8001398:	2105      	movs	r1, #5
 800139a:	200a      	movs	r0, #10
 800139c:	f000 f872 	bl	8001484 <spi_write>
};
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <lit_led>:

void lit_led(void){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	for(int j = 0; j < 8; j++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	e00e      	b.n	80013ce <lit_led+0x2a>
		spi_write(led_address[j], matrizEncendida[j]);
 80013b0:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <lit_led+0x3c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	490a      	ldr	r1, [pc, #40]	; (80013e4 <lit_led+0x40>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	440b      	add	r3, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f000 f85e 	bl	8001484 <spi_write>
	for(int j = 0; j < 8; j++) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	dded      	ble.n	80013b0 <lit_led+0xc>
	}
};
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000038 	.word	0x20000038
 80013e4:	20000040 	.word	0x20000040

080013e8 <update_led>:

/* se dibuja una lista de caracteres binarios en forma decimal
 * dondde cada valor escrito en exadeciamal representa una fila de la matriz
 * led_adress son el nombre de cada comluna escrito en exadecimal*/
void update_led(uint8_t  paint_list[]){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	 for(int j = 0; j < 8; j++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e00d      	b.n	8001412 <update_led+0x2a>
			 spi_write(led_address[j], paint_list[j]);
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <update_led+0x3c>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	7818      	ldrb	r0, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4619      	mov	r1, r3
 8001408:	f000 f83c 	bl	8001484 <spi_write>
	 for(int j = 0; j < 8; j++) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b07      	cmp	r3, #7
 8001416:	ddee      	ble.n	80013f6 <update_led+0xe>
		 }
};
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000038 	.word	0x20000038

08001428 <spi_write_byte>:
#include <stdbool.h> /* esta para incluir los tipos bool (boolianos) */
#include "API_spi.h"


void spi_write_byte (uint8_t byte)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i<8; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e01b      	b.n	8001470 <spi_write_byte+0x48>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143e:	4810      	ldr	r0, [pc, #64]	; (8001480 <spi_write_byte+0x58>)
 8001440:	f000 ffb6 	bl	80023b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <spi_write_byte+0x58>)
 8001454:	f000 ffac 	bl	80023b0 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <spi_write_byte+0x58>)
 8001466:	f000 ffa3 	bl	80023b0 <HAL_GPIO_WritePin>
	for (uint8_t i =0; i<8; i++)
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b07      	cmp	r3, #7
 8001474:	d9e0      	bls.n	8001438 <spi_write_byte+0x10>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40020c00 	.word	0x40020c00

08001484 <spi_write>:


void spi_write(uint8_t address, uint8_t cmd)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <spi_write+0x60>)
 800149c:	f000 ff88 	bl	80023b0 <HAL_GPIO_WritePin>
	for (uint8_t i=0;i<num; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e00a      	b.n	80014bc <spi_write+0x38>
	{
		spi_write_byte (address);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ffbd 	bl	8001428 <spi_write_byte>
		spi_write_byte (cmd);
 80014ae:	79bb      	ldrb	r3, [r7, #6]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ffb9 	bl	8001428 <spi_write_byte>
	for (uint8_t i=0;i<num; i++)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3301      	adds	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f1      	beq.n	80014a6 <spi_write+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <spi_write+0x60>)
 80014ca:	f000 ff71 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <spi_write+0x60>)
 80014d6:	f000 ff6b 	bl	80023b0 <HAL_GPIO_WritePin>
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020c00 	.word	0x40020c00

080014e8 <inicializarMEF>:
#include "App_MEF.h"
#include "API_debounce.h"

State_MEF_t estadoMEF;

void inicializarMEF(void) {
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	/* Initialize Estado */
	estadoMEF = SET;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <inicializarMEF+0x14>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
	return;
 80014f2:	bf00      	nop
}
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	200008e8 	.word	0x200008e8

08001500 <actualizarMEF>:
;

State_MEF_t actualizarMEF(delay_t *delay) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	assert(&estadoMEF!=NULL);
	switch (estadoMEF) {
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <actualizarMEF+0x1a4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b05      	cmp	r3, #5
 800150e:	f200 80b2 	bhi.w	8001676 <actualizarMEF+0x176>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <actualizarMEF+0x18>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001531 	.word	0x08001531
 800151c:	08001559 	.word	0x08001559
 8001520:	080015a3 	.word	0x080015a3
 8001524:	080015ed 	.word	0x080015ed
 8001528:	08001637 	.word	0x08001637
 800152c:	08001657 	.word	0x08001657
	case SET_ini:
		if (!debounceFSM_update() && delayRead(delay)) {
 8001530:	f7ff fe04 	bl	800113c <debounceFSM_update>
 8001534:	4603      	mov	r3, r0
 8001536:	f083 0301 	eor.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80a0 	beq.w	8001682 <actualizarMEF+0x182>
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff feb4 	bl	80012b0 <delayRead>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8099 	beq.w	8001682 <actualizarMEF+0x182>
			estadoMEF = FIRST;
 8001550:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <actualizarMEF+0x1a4>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001556:	e094      	b.n	8001682 <actualizarMEF+0x182>
	case FIRST:
		if (!debounceFSM_update() && delayRead(delay)) {
 8001558:	f7ff fdf0 	bl	800113c <debounceFSM_update>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d009      	beq.n	800157c <actualizarMEF+0x7c>
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fea1 	bl	80012b0 <delayRead>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <actualizarMEF+0x7c>
			estadoMEF = SECOND;
 8001574:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <actualizarMEF+0x1a4>)
 8001576:	2202      	movs	r2, #2
 8001578:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = BAD;
		}
		break;
 800157a:	e084      	b.n	8001686 <actualizarMEF+0x186>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 800157c:	2000      	movs	r0, #0
 800157e:	f000 f899 	bl	80016b4 <BSP_PB_GetState>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d07e      	beq.n	8001686 <actualizarMEF+0x186>
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fe91 	bl	80012b0 <delayRead>
 800158e:	4603      	mov	r3, r0
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d075      	beq.n	8001686 <actualizarMEF+0x186>
			estadoMEF = BAD;
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <actualizarMEF+0x1a4>)
 800159c:	2205      	movs	r2, #5
 800159e:	701a      	strb	r2, [r3, #0]
		break;
 80015a0:	e071      	b.n	8001686 <actualizarMEF+0x186>
	case SECOND:
		if (!debounceFSM_update() && delayRead(delay)) {
 80015a2:	f7ff fdcb 	bl	800113c <debounceFSM_update>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <actualizarMEF+0xc6>
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe7c 	bl	80012b0 <delayRead>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <actualizarMEF+0xc6>
			estadoMEF = THIRD;
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <actualizarMEF+0x1a4>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = BAD;
		}
		break;
 80015c4:	e061      	b.n	800168a <actualizarMEF+0x18a>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 f874 	bl	80016b4 <BSP_PB_GetState>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d05b      	beq.n	800168a <actualizarMEF+0x18a>
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fe6c 	bl	80012b0 <delayRead>
 80015d8:	4603      	mov	r3, r0
 80015da:	f083 0301 	eor.w	r3, r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d052      	beq.n	800168a <actualizarMEF+0x18a>
			estadoMEF = BAD;
 80015e4:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <actualizarMEF+0x1a4>)
 80015e6:	2205      	movs	r2, #5
 80015e8:	701a      	strb	r2, [r3, #0]
		break;
 80015ea:	e04e      	b.n	800168a <actualizarMEF+0x18a>
	case THIRD:
		if (!debounceFSM_update() && delayRead(delay)) {
 80015ec:	f7ff fda6 	bl	800113c <debounceFSM_update>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f083 0301 	eor.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <actualizarMEF+0x110>
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fe57 	bl	80012b0 <delayRead>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <actualizarMEF+0x110>
			estadoMEF = FIRST;
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <actualizarMEF+0x1a4>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = GOOD;
		}
		break;
 800160e:	e03e      	b.n	800168e <actualizarMEF+0x18e>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 8001610:	2000      	movs	r0, #0
 8001612:	f000 f84f 	bl	80016b4 <BSP_PB_GetState>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d038      	beq.n	800168e <actualizarMEF+0x18e>
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fe47 	bl	80012b0 <delayRead>
 8001622:	4603      	mov	r3, r0
 8001624:	f083 0301 	eor.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d02f      	beq.n	800168e <actualizarMEF+0x18e>
			estadoMEF = GOOD;
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <actualizarMEF+0x1a4>)
 8001630:	2204      	movs	r2, #4
 8001632:	701a      	strb	r2, [r3, #0]
		break;
 8001634:	e02b      	b.n	800168e <actualizarMEF+0x18e>
	case GOOD:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f83c 	bl	80016b4 <BSP_PB_GetState>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d127      	bne.n	8001692 <actualizarMEF+0x192>
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fe34 	bl	80012b0 <delayRead>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d021      	beq.n	8001692 <actualizarMEF+0x192>
			estadoMEF = FIRST;
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <actualizarMEF+0x1a4>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
		}

		break;
 8001654:	e01d      	b.n	8001692 <actualizarMEF+0x192>
	case BAD:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f82c 	bl	80016b4 <BSP_PB_GetState>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d119      	bne.n	8001696 <actualizarMEF+0x196>
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fe24 	bl	80012b0 <delayRead>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d013      	beq.n	8001696 <actualizarMEF+0x196>
			estadoMEF = FIRST;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <actualizarMEF+0x1a4>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
		}

		break;
 8001674:	e00f      	b.n	8001696 <actualizarMEF+0x196>
	default:
		/* Handle unexpected state */
		assert(0);
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <actualizarMEF+0x1a8>)
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <actualizarMEF+0x1ac>)
 800167a:	2143      	movs	r1, #67	; 0x43
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <actualizarMEF+0x1b0>)
 800167e:	f002 fab1 	bl	8003be4 <__assert_func>
		break;
 8001682:	bf00      	nop
 8001684:	e008      	b.n	8001698 <actualizarMEF+0x198>
		break;
 8001686:	bf00      	nop
 8001688:	e006      	b.n	8001698 <actualizarMEF+0x198>
		break;
 800168a:	bf00      	nop
 800168c:	e004      	b.n	8001698 <actualizarMEF+0x198>
		break;
 800168e:	bf00      	nop
 8001690:	e002      	b.n	8001698 <actualizarMEF+0x198>
		break;
 8001692:	bf00      	nop
 8001694:	e000      	b.n	8001698 <actualizarMEF+0x198>
		break;
 8001696:	bf00      	nop
	}
	return (estadoMEF);
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <actualizarMEF+0x1a4>)
 800169a:	781b      	ldrb	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200008e8 	.word	0x200008e8
 80016a8:	08004cdc 	.word	0x08004cdc
 80016ac:	08004d44 	.word	0x08004d44
 80016b0:	08004ce0 	.word	0x08004ce0

080016b4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <BSP_PB_GetState+0x28>)
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fe57 	bl	8002380 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000048 	.word	0x20000048

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f931 	bl	8001970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff f9d4 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f93b 	bl	80019be <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001760:	f000 f911 	bl	8001986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000030 	.word	0x20000030
 800177c:	20000050 	.word	0x20000050
 8001780:	2000004c 	.word	0x2000004c

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000050 	.word	0x20000050
 80017a8:	200008ec 	.word	0x200008ec

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	200008ec 	.word	0x200008ec

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000050 	.word	0x20000050

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
         );
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193c:	d301      	bcc.n	8001942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193e:	2301      	movs	r3, #1
 8001940:	e00f      	b.n	8001962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <SysTick_Config+0x40>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194a:	210f      	movs	r1, #15
 800194c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001950:	f7ff ff8e 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <SysTick_Config+0x40>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <SysTick_Config+0x40>)
 800195c:	2207      	movs	r2, #7
 800195e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff47 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001998:	f7ff ff5c 	bl	8001854 <__NVIC_GetPriorityGrouping>
 800199c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7ff ff8e 	bl	80018c4 <NVIC_EncodePriority>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffb0 	bl	800192c <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06c      	b.n	8001ac4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d106      	bne.n	8001a02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2223      	movs	r2, #35	; 0x23
 80019f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff f887 	bl	8000b10 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_ETH_Init+0xf4>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a30      	ldr	r2, [pc, #192]	; (8001acc <HAL_ETH_Init+0xf4>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_ETH_Init+0xf4>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_ETH_Init+0xf8>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a2b      	ldr	r2, [pc, #172]	; (8001ad0 <HAL_ETH_Init+0xf8>)
 8001a24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a28:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_ETH_Init+0xf8>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	4927      	ldr	r1, [pc, #156]	; (8001ad0 <HAL_ETH_Init+0xf8>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_ETH_Init+0xf8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a54:	f7ff feaa 	bl	80017ac <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a5a:	e011      	b.n	8001a80 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a5c:	f7ff fea6 	bl	80017ac <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a6a:	d909      	bls.n	8001a80 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	22e0      	movs	r2, #224	; 0xe0
 8001a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e021      	b.n	8001ac4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1e4      	bne.n	8001a5c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f958 	bl	8001d48 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f9ff 	bl	8001e9c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa55 	bl	8001f4e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2100      	movs	r1, #0
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f9bd 	bl	8001e2c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2210      	movs	r2, #16
 8001abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40013800 	.word	0x40013800

08001ad4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <ETH_SetMACConfig+0x15c>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	7c1b      	ldrb	r3, [r3, #16]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <ETH_SetMACConfig+0x28>
 8001af6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001afa:	e000      	b.n	8001afe <ETH_SetMACConfig+0x2a>
 8001afc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	7c5b      	ldrb	r3, [r3, #17]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <ETH_SetMACConfig+0x38>
 8001b06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0a:	e000      	b.n	8001b0e <ETH_SetMACConfig+0x3a>
 8001b0c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b0e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	7fdb      	ldrb	r3, [r3, #31]
 8001b1a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b1c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	7f92      	ldrb	r2, [r2, #30]
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	d102      	bne.n	8001b32 <ETH_SetMACConfig+0x5e>
 8001b2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b30:	e000      	b.n	8001b34 <ETH_SetMACConfig+0x60>
 8001b32:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	7f1b      	ldrb	r3, [r3, #28]
 8001b3a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b3c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d102      	bne.n	8001b5c <ETH_SetMACConfig+0x88>
 8001b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5a:	e000      	b.n	8001b5e <ETH_SetMACConfig+0x8a>
 8001b5c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	7bdb      	ldrb	r3, [r3, #15]
 8001b64:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b66:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b74:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b76:	4313      	orrs	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff fe18 	bl	80017c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001baa:	4013      	ands	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d101      	bne.n	8001bc2 <ETH_SetMACConfig+0xee>
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	e000      	b.n	8001bc4 <ETH_SetMACConfig+0xf0>
 8001bc2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bc4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001bca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001bd2:	2a01      	cmp	r2, #1
 8001bd4:	d101      	bne.n	8001bda <ETH_SetMACConfig+0x106>
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	e000      	b.n	8001bdc <ETH_SetMACConfig+0x108>
 8001bda:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001bdc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001be4:	2a01      	cmp	r2, #1
 8001be6:	d101      	bne.n	8001bec <ETH_SetMACConfig+0x118>
 8001be8:	2204      	movs	r2, #4
 8001bea:	e000      	b.n	8001bee <ETH_SetMACConfig+0x11a>
 8001bec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001bf6:	2a01      	cmp	r2, #1
 8001bf8:	d101      	bne.n	8001bfe <ETH_SetMACConfig+0x12a>
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	e000      	b.n	8001c00 <ETH_SetMACConfig+0x12c>
 8001bfe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c00:	4313      	orrs	r3, r2
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7ff fdd3 	bl	80017c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	619a      	str	r2, [r3, #24]
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	ff20810f 	.word	0xff20810f

08001c34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <ETH_SetDMAConfig+0x110>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	7b1b      	ldrb	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <ETH_SetDMAConfig+0x2c>
 8001c5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c5e:	e000      	b.n	8001c62 <ETH_SetDMAConfig+0x2e>
 8001c60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	7b5b      	ldrb	r3, [r3, #13]
 8001c66:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c68:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	7f52      	ldrb	r2, [r2, #29]
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	d102      	bne.n	8001c78 <ETH_SetDMAConfig+0x44>
 8001c72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c76:	e000      	b.n	8001c7a <ETH_SetDMAConfig+0x46>
 8001c78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c7a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	7b9b      	ldrb	r3, [r3, #14]
 8001c80:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c82:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	7f1b      	ldrb	r3, [r3, #28]
 8001c8e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	7f9b      	ldrb	r3, [r3, #30]
 8001c96:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c98:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ca6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff fd7a 	bl	80017c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	791b      	ldrb	r3, [r3, #4]
 8001ce2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ce8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001cee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cf4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cfc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001cfe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d06:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d0c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d1a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff fd4b 	bl	80017c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	f8de3f23 	.word	0xf8de3f23

08001d48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b0a6      	sub	sp, #152	; 0x98
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d84:	2300      	movs	r3, #0
 8001d86:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001dbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fe86 	bl	8001ad4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001dee:	2301      	movs	r3, #1
 8001df0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001df4:	2301      	movs	r3, #1
 8001df6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dfc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff08 	bl	8001c34 <ETH_SetDMAConfig>
}
 8001e24:	bf00      	nop
 8001e26:	3798      	adds	r7, #152	; 0x98
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3305      	adds	r3, #5
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	3204      	adds	r2, #4
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <ETH_MACAddressConfig+0x68>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3302      	adds	r3, #2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <ETH_MACAddressConfig+0x6c>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	6013      	str	r3, [r2, #0]
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40028040 	.word	0x40028040
 8001e98:	40028044 	.word	0x40028044

08001e9c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e03e      	b.n	8001f28 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	3206      	adds	r2, #6
 8001edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d80c      	bhi.n	8001f0c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68d9      	ldr	r1, [r3, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	e004      	b.n	8001f16 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3301      	adds	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d9bd      	bls.n	8001eaa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f40:	611a      	str	r2, [r3, #16]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e046      	b.n	8001fea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6919      	ldr	r1, [r3, #16]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f98:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001fa0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	3212      	adds	r2, #18
 8001fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d80c      	bhi.n	8001fda <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6919      	ldr	r1, [r3, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	e004      	b.n	8001fe4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d9b5      	bls.n	8001f5c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	60da      	str	r2, [r3, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e177      	b.n	8002334 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8166 	bne.w	800232e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d005      	beq.n	800207a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002076:	2b02      	cmp	r3, #2
 8002078:	d130      	bne.n	80020dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0201 	and.w	r2, r3, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d017      	beq.n	8002118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d123      	bne.n	800216c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80c0 	beq.w	800232e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_GPIO_Init+0x324>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a65      	ldr	r2, [pc, #404]	; (800234c <HAL_GPIO_Init+0x324>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_GPIO_Init+0x324>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ca:	4a61      	ldr	r2, [pc, #388]	; (8002350 <HAL_GPIO_Init+0x328>)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_GPIO_Init+0x32c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d037      	beq.n	8002266 <HAL_GPIO_Init+0x23e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a57      	ldr	r2, [pc, #348]	; (8002358 <HAL_GPIO_Init+0x330>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d031      	beq.n	8002262 <HAL_GPIO_Init+0x23a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a56      	ldr	r2, [pc, #344]	; (800235c <HAL_GPIO_Init+0x334>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d02b      	beq.n	800225e <HAL_GPIO_Init+0x236>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a55      	ldr	r2, [pc, #340]	; (8002360 <HAL_GPIO_Init+0x338>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d025      	beq.n	800225a <HAL_GPIO_Init+0x232>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a54      	ldr	r2, [pc, #336]	; (8002364 <HAL_GPIO_Init+0x33c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <HAL_GPIO_Init+0x22e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a53      	ldr	r2, [pc, #332]	; (8002368 <HAL_GPIO_Init+0x340>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d019      	beq.n	8002252 <HAL_GPIO_Init+0x22a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a52      	ldr	r2, [pc, #328]	; (800236c <HAL_GPIO_Init+0x344>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_GPIO_Init+0x226>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a51      	ldr	r2, [pc, #324]	; (8002370 <HAL_GPIO_Init+0x348>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00d      	beq.n	800224a <HAL_GPIO_Init+0x222>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a50      	ldr	r2, [pc, #320]	; (8002374 <HAL_GPIO_Init+0x34c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <HAL_GPIO_Init+0x21e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <HAL_GPIO_Init+0x350>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_GPIO_Init+0x21a>
 800223e:	2309      	movs	r3, #9
 8002240:	e012      	b.n	8002268 <HAL_GPIO_Init+0x240>
 8002242:	230a      	movs	r3, #10
 8002244:	e010      	b.n	8002268 <HAL_GPIO_Init+0x240>
 8002246:	2308      	movs	r3, #8
 8002248:	e00e      	b.n	8002268 <HAL_GPIO_Init+0x240>
 800224a:	2307      	movs	r3, #7
 800224c:	e00c      	b.n	8002268 <HAL_GPIO_Init+0x240>
 800224e:	2306      	movs	r3, #6
 8002250:	e00a      	b.n	8002268 <HAL_GPIO_Init+0x240>
 8002252:	2305      	movs	r3, #5
 8002254:	e008      	b.n	8002268 <HAL_GPIO_Init+0x240>
 8002256:	2304      	movs	r3, #4
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x240>
 800225a:	2303      	movs	r3, #3
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x240>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x240>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x240>
 8002266:	2300      	movs	r3, #0
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4093      	lsls	r3, r2
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_GPIO_Init+0x328>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	4b3d      	ldr	r3, [pc, #244]	; (800237c <HAL_GPIO_Init+0x354>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022aa:	4a34      	ldr	r2, [pc, #208]	; (800237c <HAL_GPIO_Init+0x354>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <HAL_GPIO_Init+0x354>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <HAL_GPIO_Init+0x354>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_GPIO_Init+0x354>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fe:	4a1f      	ldr	r2, [pc, #124]	; (800237c <HAL_GPIO_Init+0x354>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_GPIO_Init+0x354>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <HAL_GPIO_Init+0x354>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f67f ae84 	bls.w	8002044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40013800 	.word	0x40013800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400
 800235c:	40020800 	.word	0x40020800
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40021400 	.word	0x40021400
 800236c:	40021800 	.word	0x40021800
 8002370:	40021c00 	.word	0x40021c00
 8002374:	40022000 	.word	0x40022000
 8002378:	40022400 	.word	0x40022400
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e001      	b.n	80023a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023cc:	e003      	b.n	80023d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	041a      	lsls	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e4:	b08f      	sub	sp, #60	; 0x3c
 80023e6:	af0a      	add	r7, sp, #40	; 0x28
 80023e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e10f      	b.n	8002614 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fcf4 	bl	8000dfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2203      	movs	r2, #3
 8002418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f001 f935 	bl	80036a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	687e      	ldr	r6, [r7, #4]
 8002440:	466d      	mov	r5, sp
 8002442:	f106 0410 	add.w	r4, r6, #16
 8002446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002452:	e885 0003 	stmia.w	r5, {r0, r1}
 8002456:	1d33      	adds	r3, r6, #4
 8002458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245a:	6838      	ldr	r0, [r7, #0]
 800245c:	f001 f8c0 	bl	80035e0 <USB_CoreInit>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0d0      	b.n	8002614 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f001 f923 	bl	80036c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e04a      	b.n	800251a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	333d      	adds	r3, #61	; 0x3d
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	333c      	adds	r3, #60	; 0x3c
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	b298      	uxth	r0, r3
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	3344      	adds	r3, #68	; 0x44
 80024c0:	4602      	mov	r2, r0
 80024c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3340      	adds	r3, #64	; 0x40
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3348      	adds	r3, #72	; 0x48
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	334c      	adds	r3, #76	; 0x4c
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3354      	adds	r3, #84	; 0x54
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3301      	adds	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d3af      	bcc.n	8002484 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e044      	b.n	80025b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	3301      	adds	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d3b5      	bcc.n	800252a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	687e      	ldr	r6, [r7, #4]
 80025c6:	466d      	mov	r5, sp
 80025c8:	f106 0410 	add.w	r4, r6, #16
 80025cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80025dc:	1d33      	adds	r3, r6, #4
 80025de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e0:	6838      	ldr	r0, [r7, #0]
 80025e2:	f001 f8bb 	bl	800375c <USB_DevInit>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e00d      	b.n	8002614 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f001 fa86 	bl	8003b1e <USB_DevDisconnect>

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800261c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e267      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d075      	beq.n	8002726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b04      	cmp	r3, #4
 8002644:	d00c      	beq.n	8002660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b85      	ldr	r3, [pc, #532]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d112      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b82      	ldr	r3, [pc, #520]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265e:	d10b      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d05b      	beq.n	8002724 <HAL_RCC_OscConfig+0x108>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d157      	bne.n	8002724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e242      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x74>
 8002682:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e01d      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x98>
 800269a:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6f      	ldr	r2, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6c      	ldr	r2, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 80026b4:	4b69      	ldr	r3, [pc, #420]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff f86a 	bl	80017ac <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff f866 	bl	80017ac <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e207      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b5b      	ldr	r3, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0xc0>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff f856 	bl	80017ac <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002704:	f7ff f852 	bl	80017ac <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1f3      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0xe8>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d063      	beq.n	80027fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002746:	2b08      	cmp	r3, #8
 8002748:	d11c      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d116      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d001      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e1c7      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4937      	ldr	r1, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	e03a      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff f80b 	bl	80017ac <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279a:	f7ff f807 	bl	80017ac <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1a8      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4925      	ldr	r1, [pc, #148]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe ffea 	bl	80017ac <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027dc:	f7fe ffe6 	bl	80017ac <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e187      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d036      	beq.n	8002874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe ffca 	bl	80017ac <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281c:	f7fe ffc6 	bl	80017ac <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e167      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x200>
 800283a:	e01b      	b.n	8002874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7fe ffb3 	bl	80017ac <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	e00e      	b.n	8002868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284a:	f7fe ffaf 	bl	80017ac <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d907      	bls.n	8002868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e150      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 800285c:	40023800 	.word	0x40023800
 8002860:	42470000 	.word	0x42470000
 8002864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	4b88      	ldr	r3, [pc, #544]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800286a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ea      	bne.n	800284a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8097 	beq.w	80029b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b7d      	ldr	r3, [pc, #500]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a7c      	ldr	r2, [pc, #496]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b77      	ldr	r3, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a73      	ldr	r2, [pc, #460]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe ff6f 	bl	80017ac <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe ff6b 	bl	80017ac <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e10c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x2ea>
 80028f8:	4b64      	ldr	r3, [pc, #400]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	e01c      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x30c>
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a5e      	ldr	r2, [pc, #376]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002928:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a57      	ldr	r2, [pc, #348]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe ff30 	bl	80017ac <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe ff2c 	bl	80017ac <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0cb      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0ee      	beq.n	8002950 <HAL_RCC_OscConfig+0x334>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7fe ff1a 	bl	80017ac <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe ff16 	bl	80017ac <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0b5      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ee      	bne.n	800297c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a1 	beq.w	8002afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d05c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d141      	bne.n	8002a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe feea 	bl	80017ac <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fee6 	bl	80017ac <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e087      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	3b01      	subs	r3, #1
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	491b      	ldr	r1, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe febf 	bl	80017ac <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe febb 	bl	80017ac <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e05c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x416>
 8002a50:	e054      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fea8 	bl	80017ac <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fea4 	bl	80017ac <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e045      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x444>
 8002a7e:	e03d      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e038      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000
 8002a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x4ec>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d028      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d121      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d11a      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d111      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0cc      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e067      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fdd6 	bl	80017ac <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe fdd2 	bl	80017ac <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d20c      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fd36 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08004d00 	.word	0x08004d00
 8002cd0:	20000030 	.word	0x20000030
 8002cd4:	2000004c 	.word	0x2000004c

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b094      	sub	sp, #80	; 0x50
 8002cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f200 80e1 	bhi.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x34>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0a:	e0db      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b73      	ldr	r3, [pc, #460]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d10:	e0db      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d16:	e0d8      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d22:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4621      	mov	r1, r4
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	6139      	str	r1, [r7, #16]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4651      	mov	r1, sl
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d90:	4659      	mov	r1, fp
 8002d92:	eb63 0901 	sbc.w	r9, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb18 0303 	adds.w	r3, r8, r3
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	462b      	mov	r3, r5
 8002db8:	eb49 0303 	adc.w	r3, r9, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	024b      	lsls	r3, r1, #9
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	024a      	lsls	r2, r1, #9
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002de8:	f7fd fa52 	bl	8000290 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4611      	mov	r1, r2
 8002e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e10:	4642      	mov	r2, r8
 8002e12:	464b      	mov	r3, r9
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0159      	lsls	r1, r3, #5
 8002e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e22:	0150      	lsls	r0, r2, #5
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e2e:	4649      	mov	r1, r9
 8002e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e48:	ebb2 040a 	subs.w	r4, r2, sl
 8002e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	00eb      	lsls	r3, r5, #3
 8002e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5e:	00e2      	lsls	r2, r4, #3
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	4643      	mov	r3, r8
 8002e66:	18e3      	adds	r3, r4, r3
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	eb45 0303 	adc.w	r3, r5, r3
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7e:	4629      	mov	r1, r5
 8002e80:	028b      	lsls	r3, r1, #10
 8002e82:	4621      	mov	r1, r4
 8002e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e88:	4621      	mov	r1, r4
 8002e8a:	028a      	lsls	r2, r1, #10
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e92:	2200      	movs	r2, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	f7fd f9f8 	bl	8000290 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3750      	adds	r7, #80	; 0x50
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000030 	.word	0x20000030

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a9b      	lsrs	r3, r3, #10
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	08004d10 	.word	0x08004d10

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f28:	f7ff ffdc 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0b5b      	lsrs	r3, r3, #13
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4903      	ldr	r1, [pc, #12]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08004d10 	.word	0x08004d10

08002f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07b      	b.n	8003056 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6e:	d009      	beq.n	8002f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
 8002f76:	e005      	b.n	8002f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fe7c 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	ea42 0103 	orr.w	r1, r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	f003 0104 	and.w	r1, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	f003 0210 	and.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e03f      	b.n	80030f0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fd fe71 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2224      	movs	r2, #36	; 0x24
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f828 	bl	80030f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030fc:	b0c0      	sub	sp, #256	; 0x100
 80030fe:	af00      	add	r7, sp, #0
 8003100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	68d9      	ldr	r1, [r3, #12]
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	ea40 0301 	orr.w	r3, r0, r1
 8003120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	431a      	orrs	r2, r3
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003150:	f021 010c 	bic.w	r1, r1, #12
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800315e:	430b      	orrs	r3, r1
 8003160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	6999      	ldr	r1, [r3, #24]
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	ea40 0301 	orr.w	r3, r0, r1
 800317e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b8f      	ldr	r3, [pc, #572]	; (80033c4 <UART_SetConfig+0x2cc>)
 8003188:	429a      	cmp	r2, r3
 800318a:	d005      	beq.n	8003198 <UART_SetConfig+0xa0>
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b8d      	ldr	r3, [pc, #564]	; (80033c8 <UART_SetConfig+0x2d0>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d104      	bne.n	80031a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003198:	f7ff fec4 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 800319c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031a0:	e003      	b.n	80031aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031a2:	f7ff feab 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 80031a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b4:	f040 810c 	bne.w	80033d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031bc:	2200      	movs	r2, #0
 80031be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031ca:	4622      	mov	r2, r4
 80031cc:	462b      	mov	r3, r5
 80031ce:	1891      	adds	r1, r2, r2
 80031d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80031d2:	415b      	adcs	r3, r3
 80031d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031da:	4621      	mov	r1, r4
 80031dc:	eb12 0801 	adds.w	r8, r2, r1
 80031e0:	4629      	mov	r1, r5
 80031e2:	eb43 0901 	adc.w	r9, r3, r1
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031fa:	4690      	mov	r8, r2
 80031fc:	4699      	mov	r9, r3
 80031fe:	4623      	mov	r3, r4
 8003200:	eb18 0303 	adds.w	r3, r8, r3
 8003204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003208:	462b      	mov	r3, r5
 800320a:	eb49 0303 	adc.w	r3, r9, r3
 800320e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800321e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003226:	460b      	mov	r3, r1
 8003228:	18db      	adds	r3, r3, r3
 800322a:	653b      	str	r3, [r7, #80]	; 0x50
 800322c:	4613      	mov	r3, r2
 800322e:	eb42 0303 	adc.w	r3, r2, r3
 8003232:	657b      	str	r3, [r7, #84]	; 0x54
 8003234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800323c:	f7fd f828 	bl	8000290 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4b61      	ldr	r3, [pc, #388]	; (80033cc <UART_SetConfig+0x2d4>)
 8003246:	fba3 2302 	umull	r2, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	011c      	lsls	r4, r3, #4
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800325c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	64b9      	str	r1, [r7, #72]	; 0x48
 8003268:	415b      	adcs	r3, r3
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800326c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003270:	4641      	mov	r1, r8
 8003272:	eb12 0a01 	adds.w	sl, r2, r1
 8003276:	4649      	mov	r1, r9
 8003278:	eb43 0b01 	adc.w	fp, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800328c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003290:	4692      	mov	sl, r2
 8003292:	469b      	mov	fp, r3
 8003294:	4643      	mov	r3, r8
 8003296:	eb1a 0303 	adds.w	r3, sl, r3
 800329a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800329e:	464b      	mov	r3, r9
 80032a0:	eb4b 0303 	adc.w	r3, fp, r3
 80032a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032bc:	460b      	mov	r3, r1
 80032be:	18db      	adds	r3, r3, r3
 80032c0:	643b      	str	r3, [r7, #64]	; 0x40
 80032c2:	4613      	mov	r3, r2
 80032c4:	eb42 0303 	adc.w	r3, r2, r3
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
 80032ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032d2:	f7fc ffdd 	bl	8000290 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <UART_SetConfig+0x2d4>)
 80032de:	fba3 2301 	umull	r2, r3, r3, r1
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2264      	movs	r2, #100	; 0x64
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	1acb      	subs	r3, r1, r3
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032f2:	4b36      	ldr	r3, [pc, #216]	; (80033cc <UART_SetConfig+0x2d4>)
 80032f4:	fba3 2302 	umull	r2, r3, r3, r2
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003300:	441c      	add	r4, r3
 8003302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800330c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	63b9      	str	r1, [r7, #56]	; 0x38
 800331c:	415b      	adcs	r3, r3
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6339      	str	r1, [r7, #48]	; 0x30
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003358:	464b      	mov	r3, r9
 800335a:	460a      	mov	r2, r1
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003378:	460b      	mov	r3, r1
 800337a:	18db      	adds	r3, r3, r3
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
 800337e:	4613      	mov	r3, r2
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800338a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800338e:	f7fc ff7f 	bl	8000290 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <UART_SetConfig+0x2d4>)
 8003398:	fba3 1302 	umull	r1, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	2164      	movs	r1, #100	; 0x64
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	3332      	adds	r3, #50	; 0x32
 80033aa:	4a08      	ldr	r2, [pc, #32]	; (80033cc <UART_SetConfig+0x2d4>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	f003 0207 	and.w	r2, r3, #7
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4422      	add	r2, r4
 80033be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033c0:	e105      	b.n	80035ce <UART_SetConfig+0x4d6>
 80033c2:	bf00      	nop
 80033c4:	40011000 	.word	0x40011000
 80033c8:	40011400 	.word	0x40011400
 80033cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d4:	2200      	movs	r2, #0
 80033d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033e2:	4642      	mov	r2, r8
 80033e4:	464b      	mov	r3, r9
 80033e6:	1891      	adds	r1, r2, r2
 80033e8:	6239      	str	r1, [r7, #32]
 80033ea:	415b      	adcs	r3, r3
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
 80033ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033f2:	4641      	mov	r1, r8
 80033f4:	1854      	adds	r4, r2, r1
 80033f6:	4649      	mov	r1, r9
 80033f8:	eb43 0501 	adc.w	r5, r3, r1
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	00eb      	lsls	r3, r5, #3
 8003406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340a:	00e2      	lsls	r2, r4, #3
 800340c:	4614      	mov	r4, r2
 800340e:	461d      	mov	r5, r3
 8003410:	4643      	mov	r3, r8
 8003412:	18e3      	adds	r3, r4, r3
 8003414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003418:	464b      	mov	r3, r9
 800341a:	eb45 0303 	adc.w	r3, r5, r3
 800341e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800342e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800343e:	4629      	mov	r1, r5
 8003440:	008b      	lsls	r3, r1, #2
 8003442:	4621      	mov	r1, r4
 8003444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003448:	4621      	mov	r1, r4
 800344a:	008a      	lsls	r2, r1, #2
 800344c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003450:	f7fc ff1e 	bl	8000290 <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4b60      	ldr	r3, [pc, #384]	; (80035dc <UART_SetConfig+0x4e4>)
 800345a:	fba3 2302 	umull	r2, r3, r3, r2
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	011c      	lsls	r4, r3, #4
 8003462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003466:	2200      	movs	r2, #0
 8003468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800346c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003474:	4642      	mov	r2, r8
 8003476:	464b      	mov	r3, r9
 8003478:	1891      	adds	r1, r2, r2
 800347a:	61b9      	str	r1, [r7, #24]
 800347c:	415b      	adcs	r3, r3
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003484:	4641      	mov	r1, r8
 8003486:	1851      	adds	r1, r2, r1
 8003488:	6139      	str	r1, [r7, #16]
 800348a:	4649      	mov	r1, r9
 800348c:	414b      	adcs	r3, r1
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800349c:	4659      	mov	r1, fp
 800349e:	00cb      	lsls	r3, r1, #3
 80034a0:	4651      	mov	r1, sl
 80034a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034a6:	4651      	mov	r1, sl
 80034a8:	00ca      	lsls	r2, r1, #3
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	4642      	mov	r2, r8
 80034b2:	189b      	adds	r3, r3, r2
 80034b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034b8:	464b      	mov	r3, r9
 80034ba:	460a      	mov	r2, r1
 80034bc:	eb42 0303 	adc.w	r3, r2, r3
 80034c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80034ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034dc:	4649      	mov	r1, r9
 80034de:	008b      	lsls	r3, r1, #2
 80034e0:	4641      	mov	r1, r8
 80034e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e6:	4641      	mov	r1, r8
 80034e8:	008a      	lsls	r2, r1, #2
 80034ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034ee:	f7fc fecf 	bl	8000290 <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4b39      	ldr	r3, [pc, #228]	; (80035dc <UART_SetConfig+0x4e4>)
 80034f8:	fba3 1302 	umull	r1, r3, r3, r2
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	2164      	movs	r1, #100	; 0x64
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	3332      	adds	r3, #50	; 0x32
 800350a:	4a34      	ldr	r2, [pc, #208]	; (80035dc <UART_SetConfig+0x4e4>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003516:	441c      	add	r4, r3
 8003518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800351c:	2200      	movs	r2, #0
 800351e:	673b      	str	r3, [r7, #112]	; 0x70
 8003520:	677a      	str	r2, [r7, #116]	; 0x74
 8003522:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003526:	4642      	mov	r2, r8
 8003528:	464b      	mov	r3, r9
 800352a:	1891      	adds	r1, r2, r2
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	415b      	adcs	r3, r3
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003536:	4641      	mov	r1, r8
 8003538:	1851      	adds	r1, r2, r1
 800353a:	6039      	str	r1, [r7, #0]
 800353c:	4649      	mov	r1, r9
 800353e:	414b      	adcs	r3, r1
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800354e:	4659      	mov	r1, fp
 8003550:	00cb      	lsls	r3, r1, #3
 8003552:	4651      	mov	r1, sl
 8003554:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003558:	4651      	mov	r1, sl
 800355a:	00ca      	lsls	r2, r1, #3
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	4603      	mov	r3, r0
 8003562:	4642      	mov	r2, r8
 8003564:	189b      	adds	r3, r3, r2
 8003566:	66bb      	str	r3, [r7, #104]	; 0x68
 8003568:	464b      	mov	r3, r9
 800356a:	460a      	mov	r2, r1
 800356c:	eb42 0303 	adc.w	r3, r2, r3
 8003570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	663b      	str	r3, [r7, #96]	; 0x60
 800357c:	667a      	str	r2, [r7, #100]	; 0x64
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800358a:	4649      	mov	r1, r9
 800358c:	008b      	lsls	r3, r1, #2
 800358e:	4641      	mov	r1, r8
 8003590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003594:	4641      	mov	r1, r8
 8003596:	008a      	lsls	r2, r1, #2
 8003598:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800359c:	f7fc fe78 	bl	8000290 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <UART_SetConfig+0x4e4>)
 80035a6:	fba3 1302 	umull	r1, r3, r3, r2
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2164      	movs	r1, #100	; 0x64
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	3332      	adds	r3, #50	; 0x32
 80035b8:	4a08      	ldr	r2, [pc, #32]	; (80035dc <UART_SetConfig+0x4e4>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	f003 020f 	and.w	r2, r3, #15
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4422      	add	r2, r4
 80035cc:	609a      	str	r2, [r3, #8]
}
 80035ce:	bf00      	nop
 80035d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035d4:	46bd      	mov	sp, r7
 80035d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035da:	bf00      	nop
 80035dc:	51eb851f 	.word	0x51eb851f

080035e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e0:	b084      	sub	sp, #16
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	f107 001c 	add.w	r0, r7, #28
 80035ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d122      	bne.n	800363e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800360c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d105      	bne.n	8003632 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 faa2 	bl	8003b7c <USB_CoreReset>
 8003638:	4603      	mov	r3, r0
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e01a      	b.n	8003674 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa96 	bl	8003b7c <USB_CoreReset>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
 8003666:	e005      	b.n	8003674 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10b      	bne.n	8003692 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f043 0206 	orr.w	r2, r3, #6
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f043 0220 	orr.w	r2, r3, #32
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800369e:	b004      	add	sp, #16
 80036a0:	4770      	bx	lr

080036a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 0201 	bic.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d115      	bne.n	8003712 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036f2:	2001      	movs	r0, #1
 80036f4:	f7fe f866 	bl	80017c4 <HAL_Delay>
      ms++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa2e 	bl	8003b60 <USB_GetMode>
 8003704:	4603      	mov	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d01e      	beq.n	8003748 <USB_SetCurrentMode+0x84>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b31      	cmp	r3, #49	; 0x31
 800370e:	d9f0      	bls.n	80036f2 <USB_SetCurrentMode+0x2e>
 8003710:	e01a      	b.n	8003748 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d115      	bne.n	8003744 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003724:	2001      	movs	r0, #1
 8003726:	f7fe f84d 	bl	80017c4 <HAL_Delay>
      ms++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa15 	bl	8003b60 <USB_GetMode>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <USB_SetCurrentMode+0x84>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b31      	cmp	r3, #49	; 0x31
 8003740:	d9f0      	bls.n	8003724 <USB_SetCurrentMode+0x60>
 8003742:	e001      	b.n	8003748 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e005      	b.n	8003754 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b32      	cmp	r3, #50	; 0x32
 800374c:	d101      	bne.n	8003752 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800375c:	b084      	sub	sp, #16
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800376a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	e009      	b.n	8003790 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3340      	adds	r3, #64	; 0x40
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	2200      	movs	r2, #0
 8003788:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	3301      	adds	r3, #1
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b0e      	cmp	r3, #14
 8003794:	d9f2      	bls.n	800377c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11c      	bne.n	80037d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
 80037d4:	e00b      	b.n	80037ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037f4:	461a      	mov	r2, r3
 80037f6:	2300      	movs	r3, #0
 80037f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	4619      	mov	r1, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003808:	461a      	mov	r2, r3
 800380a:	680b      	ldr	r3, [r1, #0]
 800380c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800381a:	2100      	movs	r1, #0
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f965 	bl	8003aec <USB_SetDevSpeed>
 8003822:	e008      	b.n	8003836 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003824:	2101      	movs	r1, #1
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f960 	bl	8003aec <USB_SetDevSpeed>
 800382c:	e003      	b.n	8003836 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800382e:	2103      	movs	r1, #3
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f95b 	bl	8003aec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003836:	2110      	movs	r1, #16
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8f3 	bl	8003a24 <USB_FlushTxFifo>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f91f 	bl	8003a8c <USB_FlushRxFifo>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385e:	461a      	mov	r2, r3
 8003860:	2300      	movs	r3, #0
 8003862:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386a:	461a      	mov	r2, r3
 800386c:	2300      	movs	r3, #0
 800386e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003876:	461a      	mov	r2, r3
 8003878:	2300      	movs	r3, #0
 800387a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e043      	b.n	800390a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003898:	d118      	bne.n	80038cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	461a      	mov	r2, r3
 80038ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e013      	b.n	80038de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c2:	461a      	mov	r2, r3
 80038c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e008      	b.n	80038de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d8:	461a      	mov	r2, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ea:	461a      	mov	r2, r3
 80038ec:	2300      	movs	r3, #0
 80038ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	461a      	mov	r2, r3
 80038fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003902:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	3301      	adds	r3, #1
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	429a      	cmp	r2, r3
 8003910:	d3b7      	bcc.n	8003882 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e043      	b.n	80039a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800392a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800392e:	d118      	bne.n	8003962 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	461a      	mov	r2, r3
 8003944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e013      	b.n	8003974 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e008      	b.n	8003974 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	461a      	mov	r2, r3
 8003994:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003998:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	3301      	adds	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3b7      	bcc.n	8003918 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <USB_DevInit+0x2c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f043 0208 	orr.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a1c:	b004      	add	sp, #16
 8003a1e:	4770      	bx	lr
 8003a20:	803c3800 	.word	0x803c3800

08003a24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3301      	adds	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a13      	ldr	r2, [pc, #76]	; (8003a88 <USB_FlushTxFifo+0x64>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e01b      	b.n	8003a7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	daf2      	bge.n	8003a32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	019b      	lsls	r3, r3, #6
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <USB_FlushTxFifo+0x64>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e006      	b.n	8003a7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d0f0      	beq.n	8003a5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	00030d40 	.word	0x00030d40

08003a8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <USB_FlushRxFifo+0x5c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e018      	b.n	8003adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	daf2      	bge.n	8003a98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2210      	movs	r2, #16
 8003aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <USB_FlushRxFifo+0x5c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e006      	b.n	8003adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d0f0      	beq.n	8003abc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	00030d40 	.word	0x00030d40

08003aec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	68f9      	ldr	r1, [r7, #12]
 8003b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003b38:	f023 0303 	bic.w	r3, r3, #3
 8003b3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <USB_CoreReset+0x64>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e01b      	b.n	8003bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	daf2      	bge.n	8003b88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <USB_CoreReset+0x64>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e006      	b.n	8003bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d0f0      	beq.n	8003bb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	00030d40 	.word	0x00030d40

08003be4 <__assert_func>:
 8003be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003be6:	4614      	mov	r4, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <__assert_func+0x2c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4605      	mov	r5, r0
 8003bf0:	68d8      	ldr	r0, [r3, #12]
 8003bf2:	b14c      	cbz	r4, 8003c08 <__assert_func+0x24>
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <__assert_func+0x30>)
 8003bf6:	9100      	str	r1, [sp, #0]
 8003bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003bfc:	4906      	ldr	r1, [pc, #24]	; (8003c18 <__assert_func+0x34>)
 8003bfe:	462b      	mov	r3, r5
 8003c00:	f000 f814 	bl	8003c2c <fiprintf>
 8003c04:	f000 fbfe 	bl	8004404 <abort>
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <__assert_func+0x38>)
 8003c0a:	461c      	mov	r4, r3
 8003c0c:	e7f3      	b.n	8003bf6 <__assert_func+0x12>
 8003c0e:	bf00      	nop
 8003c10:	20000054 	.word	0x20000054
 8003c14:	08004d52 	.word	0x08004d52
 8003c18:	08004d5f 	.word	0x08004d5f
 8003c1c:	08004d8d 	.word	0x08004d8d

08003c20 <__errno>:
 8003c20:	4b01      	ldr	r3, [pc, #4]	; (8003c28 <__errno+0x8>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000054 	.word	0x20000054

08003c2c <fiprintf>:
 8003c2c:	b40e      	push	{r1, r2, r3}
 8003c2e:	b503      	push	{r0, r1, lr}
 8003c30:	4601      	mov	r1, r0
 8003c32:	ab03      	add	r3, sp, #12
 8003c34:	4805      	ldr	r0, [pc, #20]	; (8003c4c <fiprintf+0x20>)
 8003c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c3a:	6800      	ldr	r0, [r0, #0]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	f000 f85d 	bl	8003cfc <_vfiprintf_r>
 8003c42:	b002      	add	sp, #8
 8003c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c48:	b003      	add	sp, #12
 8003c4a:	4770      	bx	lr
 8003c4c:	20000054 	.word	0x20000054

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	; (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	; (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	; (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	; (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 ffe2 	bl	8004c2c <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	08004e30 	.word	0x08004e30
 8003c8c:	08004e30 	.word	0x08004e30
 8003c90:	08004e30 	.word	0x08004e30
 8003c94:	08004e34 	.word	0x08004e34

08003c98 <memset>:
 8003c98:	4402      	add	r2, r0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <__sfputc_r>:
 8003ca8:	6893      	ldr	r3, [r2, #8]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	b410      	push	{r4}
 8003cb0:	6093      	str	r3, [r2, #8]
 8003cb2:	da08      	bge.n	8003cc6 <__sfputc_r+0x1e>
 8003cb4:	6994      	ldr	r4, [r2, #24]
 8003cb6:	42a3      	cmp	r3, r4
 8003cb8:	db01      	blt.n	8003cbe <__sfputc_r+0x16>
 8003cba:	290a      	cmp	r1, #10
 8003cbc:	d103      	bne.n	8003cc6 <__sfputc_r+0x1e>
 8003cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cc2:	f000 badf 	b.w	8004284 <__swbuf_r>
 8003cc6:	6813      	ldr	r3, [r2, #0]
 8003cc8:	1c58      	adds	r0, r3, #1
 8003cca:	6010      	str	r0, [r2, #0]
 8003ccc:	7019      	strb	r1, [r3, #0]
 8003cce:	4608      	mov	r0, r1
 8003cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <__sfputs_r>:
 8003cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd8:	4606      	mov	r6, r0
 8003cda:	460f      	mov	r7, r1
 8003cdc:	4614      	mov	r4, r2
 8003cde:	18d5      	adds	r5, r2, r3
 8003ce0:	42ac      	cmp	r4, r5
 8003ce2:	d101      	bne.n	8003ce8 <__sfputs_r+0x12>
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	e007      	b.n	8003cf8 <__sfputs_r+0x22>
 8003ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cec:	463a      	mov	r2, r7
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f7ff ffda 	bl	8003ca8 <__sfputc_r>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d1f3      	bne.n	8003ce0 <__sfputs_r+0xa>
 8003cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cfc <_vfiprintf_r>:
 8003cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d00:	460d      	mov	r5, r1
 8003d02:	b09d      	sub	sp, #116	; 0x74
 8003d04:	4614      	mov	r4, r2
 8003d06:	4698      	mov	r8, r3
 8003d08:	4606      	mov	r6, r0
 8003d0a:	b118      	cbz	r0, 8003d14 <_vfiprintf_r+0x18>
 8003d0c:	6983      	ldr	r3, [r0, #24]
 8003d0e:	b90b      	cbnz	r3, 8003d14 <_vfiprintf_r+0x18>
 8003d10:	f000 fc9a 	bl	8004648 <__sinit>
 8003d14:	4b89      	ldr	r3, [pc, #548]	; (8003f3c <_vfiprintf_r+0x240>)
 8003d16:	429d      	cmp	r5, r3
 8003d18:	d11b      	bne.n	8003d52 <_vfiprintf_r+0x56>
 8003d1a:	6875      	ldr	r5, [r6, #4]
 8003d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d1e:	07d9      	lsls	r1, r3, #31
 8003d20:	d405      	bmi.n	8003d2e <_vfiprintf_r+0x32>
 8003d22:	89ab      	ldrh	r3, [r5, #12]
 8003d24:	059a      	lsls	r2, r3, #22
 8003d26:	d402      	bmi.n	8003d2e <_vfiprintf_r+0x32>
 8003d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d2a:	f000 fd2b 	bl	8004784 <__retarget_lock_acquire_recursive>
 8003d2e:	89ab      	ldrh	r3, [r5, #12]
 8003d30:	071b      	lsls	r3, r3, #28
 8003d32:	d501      	bpl.n	8003d38 <_vfiprintf_r+0x3c>
 8003d34:	692b      	ldr	r3, [r5, #16]
 8003d36:	b9eb      	cbnz	r3, 8003d74 <_vfiprintf_r+0x78>
 8003d38:	4629      	mov	r1, r5
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f000 faf4 	bl	8004328 <__swsetup_r>
 8003d40:	b1c0      	cbz	r0, 8003d74 <_vfiprintf_r+0x78>
 8003d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d44:	07dc      	lsls	r4, r3, #31
 8003d46:	d50e      	bpl.n	8003d66 <_vfiprintf_r+0x6a>
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d4c:	b01d      	add	sp, #116	; 0x74
 8003d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d52:	4b7b      	ldr	r3, [pc, #492]	; (8003f40 <_vfiprintf_r+0x244>)
 8003d54:	429d      	cmp	r5, r3
 8003d56:	d101      	bne.n	8003d5c <_vfiprintf_r+0x60>
 8003d58:	68b5      	ldr	r5, [r6, #8]
 8003d5a:	e7df      	b.n	8003d1c <_vfiprintf_r+0x20>
 8003d5c:	4b79      	ldr	r3, [pc, #484]	; (8003f44 <_vfiprintf_r+0x248>)
 8003d5e:	429d      	cmp	r5, r3
 8003d60:	bf08      	it	eq
 8003d62:	68f5      	ldreq	r5, [r6, #12]
 8003d64:	e7da      	b.n	8003d1c <_vfiprintf_r+0x20>
 8003d66:	89ab      	ldrh	r3, [r5, #12]
 8003d68:	0598      	lsls	r0, r3, #22
 8003d6a:	d4ed      	bmi.n	8003d48 <_vfiprintf_r+0x4c>
 8003d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d6e:	f000 fd0a 	bl	8004786 <__retarget_lock_release_recursive>
 8003d72:	e7e9      	b.n	8003d48 <_vfiprintf_r+0x4c>
 8003d74:	2300      	movs	r3, #0
 8003d76:	9309      	str	r3, [sp, #36]	; 0x24
 8003d78:	2320      	movs	r3, #32
 8003d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d82:	2330      	movs	r3, #48	; 0x30
 8003d84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f48 <_vfiprintf_r+0x24c>
 8003d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d8c:	f04f 0901 	mov.w	r9, #1
 8003d90:	4623      	mov	r3, r4
 8003d92:	469a      	mov	sl, r3
 8003d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d98:	b10a      	cbz	r2, 8003d9e <_vfiprintf_r+0xa2>
 8003d9a:	2a25      	cmp	r2, #37	; 0x25
 8003d9c:	d1f9      	bne.n	8003d92 <_vfiprintf_r+0x96>
 8003d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8003da2:	d00b      	beq.n	8003dbc <_vfiprintf_r+0xc0>
 8003da4:	465b      	mov	r3, fp
 8003da6:	4622      	mov	r2, r4
 8003da8:	4629      	mov	r1, r5
 8003daa:	4630      	mov	r0, r6
 8003dac:	f7ff ff93 	bl	8003cd6 <__sfputs_r>
 8003db0:	3001      	adds	r0, #1
 8003db2:	f000 80aa 	beq.w	8003f0a <_vfiprintf_r+0x20e>
 8003db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003db8:	445a      	add	r2, fp
 8003dba:	9209      	str	r2, [sp, #36]	; 0x24
 8003dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a2 	beq.w	8003f0a <_vfiprintf_r+0x20e>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd0:	f10a 0a01 	add.w	sl, sl, #1
 8003dd4:	9304      	str	r3, [sp, #16]
 8003dd6:	9307      	str	r3, [sp, #28]
 8003dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8003dde:	4654      	mov	r4, sl
 8003de0:	2205      	movs	r2, #5
 8003de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de6:	4858      	ldr	r0, [pc, #352]	; (8003f48 <_vfiprintf_r+0x24c>)
 8003de8:	f7fc fa02 	bl	80001f0 <memchr>
 8003dec:	9a04      	ldr	r2, [sp, #16]
 8003dee:	b9d8      	cbnz	r0, 8003e28 <_vfiprintf_r+0x12c>
 8003df0:	06d1      	lsls	r1, r2, #27
 8003df2:	bf44      	itt	mi
 8003df4:	2320      	movmi	r3, #32
 8003df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dfa:	0713      	lsls	r3, r2, #28
 8003dfc:	bf44      	itt	mi
 8003dfe:	232b      	movmi	r3, #43	; 0x2b
 8003e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e04:	f89a 3000 	ldrb.w	r3, [sl]
 8003e08:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0a:	d015      	beq.n	8003e38 <_vfiprintf_r+0x13c>
 8003e0c:	9a07      	ldr	r2, [sp, #28]
 8003e0e:	4654      	mov	r4, sl
 8003e10:	2000      	movs	r0, #0
 8003e12:	f04f 0c0a 	mov.w	ip, #10
 8003e16:	4621      	mov	r1, r4
 8003e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e1c:	3b30      	subs	r3, #48	; 0x30
 8003e1e:	2b09      	cmp	r3, #9
 8003e20:	d94e      	bls.n	8003ec0 <_vfiprintf_r+0x1c4>
 8003e22:	b1b0      	cbz	r0, 8003e52 <_vfiprintf_r+0x156>
 8003e24:	9207      	str	r2, [sp, #28]
 8003e26:	e014      	b.n	8003e52 <_vfiprintf_r+0x156>
 8003e28:	eba0 0308 	sub.w	r3, r0, r8
 8003e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8003e30:	4313      	orrs	r3, r2
 8003e32:	9304      	str	r3, [sp, #16]
 8003e34:	46a2      	mov	sl, r4
 8003e36:	e7d2      	b.n	8003dde <_vfiprintf_r+0xe2>
 8003e38:	9b03      	ldr	r3, [sp, #12]
 8003e3a:	1d19      	adds	r1, r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	9103      	str	r1, [sp, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bfbb      	ittet	lt
 8003e44:	425b      	neglt	r3, r3
 8003e46:	f042 0202 	orrlt.w	r2, r2, #2
 8003e4a:	9307      	strge	r3, [sp, #28]
 8003e4c:	9307      	strlt	r3, [sp, #28]
 8003e4e:	bfb8      	it	lt
 8003e50:	9204      	strlt	r2, [sp, #16]
 8003e52:	7823      	ldrb	r3, [r4, #0]
 8003e54:	2b2e      	cmp	r3, #46	; 0x2e
 8003e56:	d10c      	bne.n	8003e72 <_vfiprintf_r+0x176>
 8003e58:	7863      	ldrb	r3, [r4, #1]
 8003e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5c:	d135      	bne.n	8003eca <_vfiprintf_r+0x1ce>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	1d1a      	adds	r2, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	9203      	str	r2, [sp, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e6e:	3402      	adds	r4, #2
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f58 <_vfiprintf_r+0x25c>
 8003e76:	7821      	ldrb	r1, [r4, #0]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	4650      	mov	r0, sl
 8003e7c:	f7fc f9b8 	bl	80001f0 <memchr>
 8003e80:	b140      	cbz	r0, 8003e94 <_vfiprintf_r+0x198>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	eba0 000a 	sub.w	r0, r0, sl
 8003e88:	fa03 f000 	lsl.w	r0, r3, r0
 8003e8c:	9b04      	ldr	r3, [sp, #16]
 8003e8e:	4303      	orrs	r3, r0
 8003e90:	3401      	adds	r4, #1
 8003e92:	9304      	str	r3, [sp, #16]
 8003e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e98:	482c      	ldr	r0, [pc, #176]	; (8003f4c <_vfiprintf_r+0x250>)
 8003e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e9e:	2206      	movs	r2, #6
 8003ea0:	f7fc f9a6 	bl	80001f0 <memchr>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d03f      	beq.n	8003f28 <_vfiprintf_r+0x22c>
 8003ea8:	4b29      	ldr	r3, [pc, #164]	; (8003f50 <_vfiprintf_r+0x254>)
 8003eaa:	bb1b      	cbnz	r3, 8003ef4 <_vfiprintf_r+0x1f8>
 8003eac:	9b03      	ldr	r3, [sp, #12]
 8003eae:	3307      	adds	r3, #7
 8003eb0:	f023 0307 	bic.w	r3, r3, #7
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	9303      	str	r3, [sp, #12]
 8003eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eba:	443b      	add	r3, r7
 8003ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ebe:	e767      	b.n	8003d90 <_vfiprintf_r+0x94>
 8003ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	e7a5      	b.n	8003e16 <_vfiprintf_r+0x11a>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	3401      	adds	r4, #1
 8003ece:	9305      	str	r3, [sp, #20]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f04f 0c0a 	mov.w	ip, #10
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003edc:	3a30      	subs	r2, #48	; 0x30
 8003ede:	2a09      	cmp	r2, #9
 8003ee0:	d903      	bls.n	8003eea <_vfiprintf_r+0x1ee>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0c5      	beq.n	8003e72 <_vfiprintf_r+0x176>
 8003ee6:	9105      	str	r1, [sp, #20]
 8003ee8:	e7c3      	b.n	8003e72 <_vfiprintf_r+0x176>
 8003eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eee:	4604      	mov	r4, r0
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e7f0      	b.n	8003ed6 <_vfiprintf_r+0x1da>
 8003ef4:	ab03      	add	r3, sp, #12
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	462a      	mov	r2, r5
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <_vfiprintf_r+0x258>)
 8003efc:	a904      	add	r1, sp, #16
 8003efe:	4630      	mov	r0, r6
 8003f00:	f3af 8000 	nop.w
 8003f04:	4607      	mov	r7, r0
 8003f06:	1c78      	adds	r0, r7, #1
 8003f08:	d1d6      	bne.n	8003eb8 <_vfiprintf_r+0x1bc>
 8003f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f0c:	07d9      	lsls	r1, r3, #31
 8003f0e:	d405      	bmi.n	8003f1c <_vfiprintf_r+0x220>
 8003f10:	89ab      	ldrh	r3, [r5, #12]
 8003f12:	059a      	lsls	r2, r3, #22
 8003f14:	d402      	bmi.n	8003f1c <_vfiprintf_r+0x220>
 8003f16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f18:	f000 fc35 	bl	8004786 <__retarget_lock_release_recursive>
 8003f1c:	89ab      	ldrh	r3, [r5, #12]
 8003f1e:	065b      	lsls	r3, r3, #25
 8003f20:	f53f af12 	bmi.w	8003d48 <_vfiprintf_r+0x4c>
 8003f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f26:	e711      	b.n	8003d4c <_vfiprintf_r+0x50>
 8003f28:	ab03      	add	r3, sp, #12
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	462a      	mov	r2, r5
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <_vfiprintf_r+0x258>)
 8003f30:	a904      	add	r1, sp, #16
 8003f32:	4630      	mov	r0, r6
 8003f34:	f000 f880 	bl	8004038 <_printf_i>
 8003f38:	e7e4      	b.n	8003f04 <_vfiprintf_r+0x208>
 8003f3a:	bf00      	nop
 8003f3c:	08004de8 	.word	0x08004de8
 8003f40:	08004e08 	.word	0x08004e08
 8003f44:	08004dc8 	.word	0x08004dc8
 8003f48:	08004d94 	.word	0x08004d94
 8003f4c:	08004d9e 	.word	0x08004d9e
 8003f50:	00000000 	.word	0x00000000
 8003f54:	08003cd7 	.word	0x08003cd7
 8003f58:	08004d9a 	.word	0x08004d9a

08003f5c <_printf_common>:
 8003f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f60:	4616      	mov	r6, r2
 8003f62:	4699      	mov	r9, r3
 8003f64:	688a      	ldr	r2, [r1, #8]
 8003f66:	690b      	ldr	r3, [r1, #16]
 8003f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bfb8      	it	lt
 8003f70:	4613      	movlt	r3, r2
 8003f72:	6033      	str	r3, [r6, #0]
 8003f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f78:	4607      	mov	r7, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	b10a      	cbz	r2, 8003f82 <_printf_common+0x26>
 8003f7e:	3301      	adds	r3, #1
 8003f80:	6033      	str	r3, [r6, #0]
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	0699      	lsls	r1, r3, #26
 8003f86:	bf42      	ittt	mi
 8003f88:	6833      	ldrmi	r3, [r6, #0]
 8003f8a:	3302      	addmi	r3, #2
 8003f8c:	6033      	strmi	r3, [r6, #0]
 8003f8e:	6825      	ldr	r5, [r4, #0]
 8003f90:	f015 0506 	ands.w	r5, r5, #6
 8003f94:	d106      	bne.n	8003fa4 <_printf_common+0x48>
 8003f96:	f104 0a19 	add.w	sl, r4, #25
 8003f9a:	68e3      	ldr	r3, [r4, #12]
 8003f9c:	6832      	ldr	r2, [r6, #0]
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	42ab      	cmp	r3, r5
 8003fa2:	dc26      	bgt.n	8003ff2 <_printf_common+0x96>
 8003fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fa8:	1e13      	subs	r3, r2, #0
 8003faa:	6822      	ldr	r2, [r4, #0]
 8003fac:	bf18      	it	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	0692      	lsls	r2, r2, #26
 8003fb2:	d42b      	bmi.n	800400c <_printf_common+0xb0>
 8003fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4638      	mov	r0, r7
 8003fbc:	47c0      	blx	r8
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d01e      	beq.n	8004000 <_printf_common+0xa4>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	68e5      	ldr	r5, [r4, #12]
 8003fc6:	6832      	ldr	r2, [r6, #0]
 8003fc8:	f003 0306 	and.w	r3, r3, #6
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	bf08      	it	eq
 8003fd0:	1aad      	subeq	r5, r5, r2
 8003fd2:	68a3      	ldr	r3, [r4, #8]
 8003fd4:	6922      	ldr	r2, [r4, #16]
 8003fd6:	bf0c      	ite	eq
 8003fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fdc:	2500      	movne	r5, #0
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	bfc4      	itt	gt
 8003fe2:	1a9b      	subgt	r3, r3, r2
 8003fe4:	18ed      	addgt	r5, r5, r3
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	341a      	adds	r4, #26
 8003fea:	42b5      	cmp	r5, r6
 8003fec:	d11a      	bne.n	8004024 <_printf_common+0xc8>
 8003fee:	2000      	movs	r0, #0
 8003ff0:	e008      	b.n	8004004 <_printf_common+0xa8>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4652      	mov	r2, sl
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	47c0      	blx	r8
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d103      	bne.n	8004008 <_printf_common+0xac>
 8004000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004008:	3501      	adds	r5, #1
 800400a:	e7c6      	b.n	8003f9a <_printf_common+0x3e>
 800400c:	18e1      	adds	r1, r4, r3
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	2030      	movs	r0, #48	; 0x30
 8004012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004016:	4422      	add	r2, r4
 8004018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800401c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004020:	3302      	adds	r3, #2
 8004022:	e7c7      	b.n	8003fb4 <_printf_common+0x58>
 8004024:	2301      	movs	r3, #1
 8004026:	4622      	mov	r2, r4
 8004028:	4649      	mov	r1, r9
 800402a:	4638      	mov	r0, r7
 800402c:	47c0      	blx	r8
 800402e:	3001      	adds	r0, #1
 8004030:	d0e6      	beq.n	8004000 <_printf_common+0xa4>
 8004032:	3601      	adds	r6, #1
 8004034:	e7d9      	b.n	8003fea <_printf_common+0x8e>
	...

08004038 <_printf_i>:
 8004038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800403c:	7e0f      	ldrb	r7, [r1, #24]
 800403e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004040:	2f78      	cmp	r7, #120	; 0x78
 8004042:	4691      	mov	r9, r2
 8004044:	4680      	mov	r8, r0
 8004046:	460c      	mov	r4, r1
 8004048:	469a      	mov	sl, r3
 800404a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800404e:	d807      	bhi.n	8004060 <_printf_i+0x28>
 8004050:	2f62      	cmp	r7, #98	; 0x62
 8004052:	d80a      	bhi.n	800406a <_printf_i+0x32>
 8004054:	2f00      	cmp	r7, #0
 8004056:	f000 80d8 	beq.w	800420a <_printf_i+0x1d2>
 800405a:	2f58      	cmp	r7, #88	; 0x58
 800405c:	f000 80a3 	beq.w	80041a6 <_printf_i+0x16e>
 8004060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004068:	e03a      	b.n	80040e0 <_printf_i+0xa8>
 800406a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800406e:	2b15      	cmp	r3, #21
 8004070:	d8f6      	bhi.n	8004060 <_printf_i+0x28>
 8004072:	a101      	add	r1, pc, #4	; (adr r1, 8004078 <_printf_i+0x40>)
 8004074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004078:	080040d1 	.word	0x080040d1
 800407c:	080040e5 	.word	0x080040e5
 8004080:	08004061 	.word	0x08004061
 8004084:	08004061 	.word	0x08004061
 8004088:	08004061 	.word	0x08004061
 800408c:	08004061 	.word	0x08004061
 8004090:	080040e5 	.word	0x080040e5
 8004094:	08004061 	.word	0x08004061
 8004098:	08004061 	.word	0x08004061
 800409c:	08004061 	.word	0x08004061
 80040a0:	08004061 	.word	0x08004061
 80040a4:	080041f1 	.word	0x080041f1
 80040a8:	08004115 	.word	0x08004115
 80040ac:	080041d3 	.word	0x080041d3
 80040b0:	08004061 	.word	0x08004061
 80040b4:	08004061 	.word	0x08004061
 80040b8:	08004213 	.word	0x08004213
 80040bc:	08004061 	.word	0x08004061
 80040c0:	08004115 	.word	0x08004115
 80040c4:	08004061 	.word	0x08004061
 80040c8:	08004061 	.word	0x08004061
 80040cc:	080041db 	.word	0x080041db
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	602a      	str	r2, [r5, #0]
 80040d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0a3      	b.n	800422c <_printf_i+0x1f4>
 80040e4:	6820      	ldr	r0, [r4, #0]
 80040e6:	6829      	ldr	r1, [r5, #0]
 80040e8:	0606      	lsls	r6, r0, #24
 80040ea:	f101 0304 	add.w	r3, r1, #4
 80040ee:	d50a      	bpl.n	8004106 <_printf_i+0xce>
 80040f0:	680e      	ldr	r6, [r1, #0]
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	2e00      	cmp	r6, #0
 80040f6:	da03      	bge.n	8004100 <_printf_i+0xc8>
 80040f8:	232d      	movs	r3, #45	; 0x2d
 80040fa:	4276      	negs	r6, r6
 80040fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004100:	485e      	ldr	r0, [pc, #376]	; (800427c <_printf_i+0x244>)
 8004102:	230a      	movs	r3, #10
 8004104:	e019      	b.n	800413a <_printf_i+0x102>
 8004106:	680e      	ldr	r6, [r1, #0]
 8004108:	602b      	str	r3, [r5, #0]
 800410a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800410e:	bf18      	it	ne
 8004110:	b236      	sxthne	r6, r6
 8004112:	e7ef      	b.n	80040f4 <_printf_i+0xbc>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	1d19      	adds	r1, r3, #4
 800411a:	6029      	str	r1, [r5, #0]
 800411c:	0601      	lsls	r1, r0, #24
 800411e:	d501      	bpl.n	8004124 <_printf_i+0xec>
 8004120:	681e      	ldr	r6, [r3, #0]
 8004122:	e002      	b.n	800412a <_printf_i+0xf2>
 8004124:	0646      	lsls	r6, r0, #25
 8004126:	d5fb      	bpl.n	8004120 <_printf_i+0xe8>
 8004128:	881e      	ldrh	r6, [r3, #0]
 800412a:	4854      	ldr	r0, [pc, #336]	; (800427c <_printf_i+0x244>)
 800412c:	2f6f      	cmp	r7, #111	; 0x6f
 800412e:	bf0c      	ite	eq
 8004130:	2308      	moveq	r3, #8
 8004132:	230a      	movne	r3, #10
 8004134:	2100      	movs	r1, #0
 8004136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800413a:	6865      	ldr	r5, [r4, #4]
 800413c:	60a5      	str	r5, [r4, #8]
 800413e:	2d00      	cmp	r5, #0
 8004140:	bfa2      	ittt	ge
 8004142:	6821      	ldrge	r1, [r4, #0]
 8004144:	f021 0104 	bicge.w	r1, r1, #4
 8004148:	6021      	strge	r1, [r4, #0]
 800414a:	b90e      	cbnz	r6, 8004150 <_printf_i+0x118>
 800414c:	2d00      	cmp	r5, #0
 800414e:	d04d      	beq.n	80041ec <_printf_i+0x1b4>
 8004150:	4615      	mov	r5, r2
 8004152:	fbb6 f1f3 	udiv	r1, r6, r3
 8004156:	fb03 6711 	mls	r7, r3, r1, r6
 800415a:	5dc7      	ldrb	r7, [r0, r7]
 800415c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004160:	4637      	mov	r7, r6
 8004162:	42bb      	cmp	r3, r7
 8004164:	460e      	mov	r6, r1
 8004166:	d9f4      	bls.n	8004152 <_printf_i+0x11a>
 8004168:	2b08      	cmp	r3, #8
 800416a:	d10b      	bne.n	8004184 <_printf_i+0x14c>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	07de      	lsls	r6, r3, #31
 8004170:	d508      	bpl.n	8004184 <_printf_i+0x14c>
 8004172:	6923      	ldr	r3, [r4, #16]
 8004174:	6861      	ldr	r1, [r4, #4]
 8004176:	4299      	cmp	r1, r3
 8004178:	bfde      	ittt	le
 800417a:	2330      	movle	r3, #48	; 0x30
 800417c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004180:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004184:	1b52      	subs	r2, r2, r5
 8004186:	6122      	str	r2, [r4, #16]
 8004188:	f8cd a000 	str.w	sl, [sp]
 800418c:	464b      	mov	r3, r9
 800418e:	aa03      	add	r2, sp, #12
 8004190:	4621      	mov	r1, r4
 8004192:	4640      	mov	r0, r8
 8004194:	f7ff fee2 	bl	8003f5c <_printf_common>
 8004198:	3001      	adds	r0, #1
 800419a:	d14c      	bne.n	8004236 <_printf_i+0x1fe>
 800419c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a0:	b004      	add	sp, #16
 80041a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a6:	4835      	ldr	r0, [pc, #212]	; (800427c <_printf_i+0x244>)
 80041a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041ac:	6829      	ldr	r1, [r5, #0]
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80041b4:	6029      	str	r1, [r5, #0]
 80041b6:	061d      	lsls	r5, r3, #24
 80041b8:	d514      	bpl.n	80041e4 <_printf_i+0x1ac>
 80041ba:	07df      	lsls	r7, r3, #31
 80041bc:	bf44      	itt	mi
 80041be:	f043 0320 	orrmi.w	r3, r3, #32
 80041c2:	6023      	strmi	r3, [r4, #0]
 80041c4:	b91e      	cbnz	r6, 80041ce <_printf_i+0x196>
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	f023 0320 	bic.w	r3, r3, #32
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	2310      	movs	r3, #16
 80041d0:	e7b0      	b.n	8004134 <_printf_i+0xfc>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	f043 0320 	orr.w	r3, r3, #32
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	2378      	movs	r3, #120	; 0x78
 80041dc:	4828      	ldr	r0, [pc, #160]	; (8004280 <_printf_i+0x248>)
 80041de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041e2:	e7e3      	b.n	80041ac <_printf_i+0x174>
 80041e4:	0659      	lsls	r1, r3, #25
 80041e6:	bf48      	it	mi
 80041e8:	b2b6      	uxthmi	r6, r6
 80041ea:	e7e6      	b.n	80041ba <_printf_i+0x182>
 80041ec:	4615      	mov	r5, r2
 80041ee:	e7bb      	b.n	8004168 <_printf_i+0x130>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	6826      	ldr	r6, [r4, #0]
 80041f4:	6961      	ldr	r1, [r4, #20]
 80041f6:	1d18      	adds	r0, r3, #4
 80041f8:	6028      	str	r0, [r5, #0]
 80041fa:	0635      	lsls	r5, r6, #24
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	d501      	bpl.n	8004204 <_printf_i+0x1cc>
 8004200:	6019      	str	r1, [r3, #0]
 8004202:	e002      	b.n	800420a <_printf_i+0x1d2>
 8004204:	0670      	lsls	r0, r6, #25
 8004206:	d5fb      	bpl.n	8004200 <_printf_i+0x1c8>
 8004208:	8019      	strh	r1, [r3, #0]
 800420a:	2300      	movs	r3, #0
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	4615      	mov	r5, r2
 8004210:	e7ba      	b.n	8004188 <_printf_i+0x150>
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	1d1a      	adds	r2, r3, #4
 8004216:	602a      	str	r2, [r5, #0]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	6862      	ldr	r2, [r4, #4]
 800421c:	2100      	movs	r1, #0
 800421e:	4628      	mov	r0, r5
 8004220:	f7fb ffe6 	bl	80001f0 <memchr>
 8004224:	b108      	cbz	r0, 800422a <_printf_i+0x1f2>
 8004226:	1b40      	subs	r0, r0, r5
 8004228:	6060      	str	r0, [r4, #4]
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	2300      	movs	r3, #0
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004234:	e7a8      	b.n	8004188 <_printf_i+0x150>
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	462a      	mov	r2, r5
 800423a:	4649      	mov	r1, r9
 800423c:	4640      	mov	r0, r8
 800423e:	47d0      	blx	sl
 8004240:	3001      	adds	r0, #1
 8004242:	d0ab      	beq.n	800419c <_printf_i+0x164>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	079b      	lsls	r3, r3, #30
 8004248:	d413      	bmi.n	8004272 <_printf_i+0x23a>
 800424a:	68e0      	ldr	r0, [r4, #12]
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	4298      	cmp	r0, r3
 8004250:	bfb8      	it	lt
 8004252:	4618      	movlt	r0, r3
 8004254:	e7a4      	b.n	80041a0 <_printf_i+0x168>
 8004256:	2301      	movs	r3, #1
 8004258:	4632      	mov	r2, r6
 800425a:	4649      	mov	r1, r9
 800425c:	4640      	mov	r0, r8
 800425e:	47d0      	blx	sl
 8004260:	3001      	adds	r0, #1
 8004262:	d09b      	beq.n	800419c <_printf_i+0x164>
 8004264:	3501      	adds	r5, #1
 8004266:	68e3      	ldr	r3, [r4, #12]
 8004268:	9903      	ldr	r1, [sp, #12]
 800426a:	1a5b      	subs	r3, r3, r1
 800426c:	42ab      	cmp	r3, r5
 800426e:	dcf2      	bgt.n	8004256 <_printf_i+0x21e>
 8004270:	e7eb      	b.n	800424a <_printf_i+0x212>
 8004272:	2500      	movs	r5, #0
 8004274:	f104 0619 	add.w	r6, r4, #25
 8004278:	e7f5      	b.n	8004266 <_printf_i+0x22e>
 800427a:	bf00      	nop
 800427c:	08004da5 	.word	0x08004da5
 8004280:	08004db6 	.word	0x08004db6

08004284 <__swbuf_r>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	460e      	mov	r6, r1
 8004288:	4614      	mov	r4, r2
 800428a:	4605      	mov	r5, r0
 800428c:	b118      	cbz	r0, 8004296 <__swbuf_r+0x12>
 800428e:	6983      	ldr	r3, [r0, #24]
 8004290:	b90b      	cbnz	r3, 8004296 <__swbuf_r+0x12>
 8004292:	f000 f9d9 	bl	8004648 <__sinit>
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <__swbuf_r+0x98>)
 8004298:	429c      	cmp	r4, r3
 800429a:	d12b      	bne.n	80042f4 <__swbuf_r+0x70>
 800429c:	686c      	ldr	r4, [r5, #4]
 800429e:	69a3      	ldr	r3, [r4, #24]
 80042a0:	60a3      	str	r3, [r4, #8]
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	071a      	lsls	r2, r3, #28
 80042a6:	d52f      	bpl.n	8004308 <__swbuf_r+0x84>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	b36b      	cbz	r3, 8004308 <__swbuf_r+0x84>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	6820      	ldr	r0, [r4, #0]
 80042b0:	1ac0      	subs	r0, r0, r3
 80042b2:	6963      	ldr	r3, [r4, #20]
 80042b4:	b2f6      	uxtb	r6, r6
 80042b6:	4283      	cmp	r3, r0
 80042b8:	4637      	mov	r7, r6
 80042ba:	dc04      	bgt.n	80042c6 <__swbuf_r+0x42>
 80042bc:	4621      	mov	r1, r4
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f92e 	bl	8004520 <_fflush_r>
 80042c4:	bb30      	cbnz	r0, 8004314 <__swbuf_r+0x90>
 80042c6:	68a3      	ldr	r3, [r4, #8]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	60a3      	str	r3, [r4, #8]
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	701e      	strb	r6, [r3, #0]
 80042d4:	6963      	ldr	r3, [r4, #20]
 80042d6:	3001      	adds	r0, #1
 80042d8:	4283      	cmp	r3, r0
 80042da:	d004      	beq.n	80042e6 <__swbuf_r+0x62>
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	07db      	lsls	r3, r3, #31
 80042e0:	d506      	bpl.n	80042f0 <__swbuf_r+0x6c>
 80042e2:	2e0a      	cmp	r6, #10
 80042e4:	d104      	bne.n	80042f0 <__swbuf_r+0x6c>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f919 	bl	8004520 <_fflush_r>
 80042ee:	b988      	cbnz	r0, 8004314 <__swbuf_r+0x90>
 80042f0:	4638      	mov	r0, r7
 80042f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <__swbuf_r+0x9c>)
 80042f6:	429c      	cmp	r4, r3
 80042f8:	d101      	bne.n	80042fe <__swbuf_r+0x7a>
 80042fa:	68ac      	ldr	r4, [r5, #8]
 80042fc:	e7cf      	b.n	800429e <__swbuf_r+0x1a>
 80042fe:	4b09      	ldr	r3, [pc, #36]	; (8004324 <__swbuf_r+0xa0>)
 8004300:	429c      	cmp	r4, r3
 8004302:	bf08      	it	eq
 8004304:	68ec      	ldreq	r4, [r5, #12]
 8004306:	e7ca      	b.n	800429e <__swbuf_r+0x1a>
 8004308:	4621      	mov	r1, r4
 800430a:	4628      	mov	r0, r5
 800430c:	f000 f80c 	bl	8004328 <__swsetup_r>
 8004310:	2800      	cmp	r0, #0
 8004312:	d0cb      	beq.n	80042ac <__swbuf_r+0x28>
 8004314:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004318:	e7ea      	b.n	80042f0 <__swbuf_r+0x6c>
 800431a:	bf00      	nop
 800431c:	08004de8 	.word	0x08004de8
 8004320:	08004e08 	.word	0x08004e08
 8004324:	08004dc8 	.word	0x08004dc8

08004328 <__swsetup_r>:
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <__swsetup_r+0xcc>)
 800432a:	b570      	push	{r4, r5, r6, lr}
 800432c:	681d      	ldr	r5, [r3, #0]
 800432e:	4606      	mov	r6, r0
 8004330:	460c      	mov	r4, r1
 8004332:	b125      	cbz	r5, 800433e <__swsetup_r+0x16>
 8004334:	69ab      	ldr	r3, [r5, #24]
 8004336:	b913      	cbnz	r3, 800433e <__swsetup_r+0x16>
 8004338:	4628      	mov	r0, r5
 800433a:	f000 f985 	bl	8004648 <__sinit>
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <__swsetup_r+0xd0>)
 8004340:	429c      	cmp	r4, r3
 8004342:	d10f      	bne.n	8004364 <__swsetup_r+0x3c>
 8004344:	686c      	ldr	r4, [r5, #4]
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800434c:	0719      	lsls	r1, r3, #28
 800434e:	d42c      	bmi.n	80043aa <__swsetup_r+0x82>
 8004350:	06dd      	lsls	r5, r3, #27
 8004352:	d411      	bmi.n	8004378 <__swsetup_r+0x50>
 8004354:	2309      	movs	r3, #9
 8004356:	6033      	str	r3, [r6, #0]
 8004358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800435c:	81a3      	strh	r3, [r4, #12]
 800435e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004362:	e03e      	b.n	80043e2 <__swsetup_r+0xba>
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <__swsetup_r+0xd4>)
 8004366:	429c      	cmp	r4, r3
 8004368:	d101      	bne.n	800436e <__swsetup_r+0x46>
 800436a:	68ac      	ldr	r4, [r5, #8]
 800436c:	e7eb      	b.n	8004346 <__swsetup_r+0x1e>
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <__swsetup_r+0xd8>)
 8004370:	429c      	cmp	r4, r3
 8004372:	bf08      	it	eq
 8004374:	68ec      	ldreq	r4, [r5, #12]
 8004376:	e7e6      	b.n	8004346 <__swsetup_r+0x1e>
 8004378:	0758      	lsls	r0, r3, #29
 800437a:	d512      	bpl.n	80043a2 <__swsetup_r+0x7a>
 800437c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800437e:	b141      	cbz	r1, 8004392 <__swsetup_r+0x6a>
 8004380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004384:	4299      	cmp	r1, r3
 8004386:	d002      	beq.n	800438e <__swsetup_r+0x66>
 8004388:	4630      	mov	r0, r6
 800438a:	f000 fa63 	bl	8004854 <_free_r>
 800438e:	2300      	movs	r3, #0
 8004390:	6363      	str	r3, [r4, #52]	; 0x34
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004398:	81a3      	strh	r3, [r4, #12]
 800439a:	2300      	movs	r3, #0
 800439c:	6063      	str	r3, [r4, #4]
 800439e:	6923      	ldr	r3, [r4, #16]
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	f043 0308 	orr.w	r3, r3, #8
 80043a8:	81a3      	strh	r3, [r4, #12]
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	b94b      	cbnz	r3, 80043c2 <__swsetup_r+0x9a>
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d003      	beq.n	80043c2 <__swsetup_r+0x9a>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4630      	mov	r0, r6
 80043be:	f000 fa09 	bl	80047d4 <__smakebuf_r>
 80043c2:	89a0      	ldrh	r0, [r4, #12]
 80043c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c8:	f010 0301 	ands.w	r3, r0, #1
 80043cc:	d00a      	beq.n	80043e4 <__swsetup_r+0xbc>
 80043ce:	2300      	movs	r3, #0
 80043d0:	60a3      	str	r3, [r4, #8]
 80043d2:	6963      	ldr	r3, [r4, #20]
 80043d4:	425b      	negs	r3, r3
 80043d6:	61a3      	str	r3, [r4, #24]
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	b943      	cbnz	r3, 80043ee <__swsetup_r+0xc6>
 80043dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043e0:	d1ba      	bne.n	8004358 <__swsetup_r+0x30>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	0781      	lsls	r1, r0, #30
 80043e6:	bf58      	it	pl
 80043e8:	6963      	ldrpl	r3, [r4, #20]
 80043ea:	60a3      	str	r3, [r4, #8]
 80043ec:	e7f4      	b.n	80043d8 <__swsetup_r+0xb0>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e7f7      	b.n	80043e2 <__swsetup_r+0xba>
 80043f2:	bf00      	nop
 80043f4:	20000054 	.word	0x20000054
 80043f8:	08004de8 	.word	0x08004de8
 80043fc:	08004e08 	.word	0x08004e08
 8004400:	08004dc8 	.word	0x08004dc8

08004404 <abort>:
 8004404:	b508      	push	{r3, lr}
 8004406:	2006      	movs	r0, #6
 8004408:	f000 fb3c 	bl	8004a84 <raise>
 800440c:	2001      	movs	r0, #1
 800440e:	f7fc fd91 	bl	8000f34 <_exit>
	...

08004414 <__sflush_r>:
 8004414:	898a      	ldrh	r2, [r1, #12]
 8004416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800441a:	4605      	mov	r5, r0
 800441c:	0710      	lsls	r0, r2, #28
 800441e:	460c      	mov	r4, r1
 8004420:	d458      	bmi.n	80044d4 <__sflush_r+0xc0>
 8004422:	684b      	ldr	r3, [r1, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	dc05      	bgt.n	8004434 <__sflush_r+0x20>
 8004428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	dc02      	bgt.n	8004434 <__sflush_r+0x20>
 800442e:	2000      	movs	r0, #0
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004436:	2e00      	cmp	r6, #0
 8004438:	d0f9      	beq.n	800442e <__sflush_r+0x1a>
 800443a:	2300      	movs	r3, #0
 800443c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004440:	682f      	ldr	r7, [r5, #0]
 8004442:	602b      	str	r3, [r5, #0]
 8004444:	d032      	beq.n	80044ac <__sflush_r+0x98>
 8004446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	075a      	lsls	r2, r3, #29
 800444c:	d505      	bpl.n	800445a <__sflush_r+0x46>
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	1ac0      	subs	r0, r0, r3
 8004452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004454:	b10b      	cbz	r3, 800445a <__sflush_r+0x46>
 8004456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004458:	1ac0      	subs	r0, r0, r3
 800445a:	2300      	movs	r3, #0
 800445c:	4602      	mov	r2, r0
 800445e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004460:	6a21      	ldr	r1, [r4, #32]
 8004462:	4628      	mov	r0, r5
 8004464:	47b0      	blx	r6
 8004466:	1c43      	adds	r3, r0, #1
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	d106      	bne.n	800447a <__sflush_r+0x66>
 800446c:	6829      	ldr	r1, [r5, #0]
 800446e:	291d      	cmp	r1, #29
 8004470:	d82c      	bhi.n	80044cc <__sflush_r+0xb8>
 8004472:	4a2a      	ldr	r2, [pc, #168]	; (800451c <__sflush_r+0x108>)
 8004474:	40ca      	lsrs	r2, r1
 8004476:	07d6      	lsls	r6, r2, #31
 8004478:	d528      	bpl.n	80044cc <__sflush_r+0xb8>
 800447a:	2200      	movs	r2, #0
 800447c:	6062      	str	r2, [r4, #4]
 800447e:	04d9      	lsls	r1, r3, #19
 8004480:	6922      	ldr	r2, [r4, #16]
 8004482:	6022      	str	r2, [r4, #0]
 8004484:	d504      	bpl.n	8004490 <__sflush_r+0x7c>
 8004486:	1c42      	adds	r2, r0, #1
 8004488:	d101      	bne.n	800448e <__sflush_r+0x7a>
 800448a:	682b      	ldr	r3, [r5, #0]
 800448c:	b903      	cbnz	r3, 8004490 <__sflush_r+0x7c>
 800448e:	6560      	str	r0, [r4, #84]	; 0x54
 8004490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004492:	602f      	str	r7, [r5, #0]
 8004494:	2900      	cmp	r1, #0
 8004496:	d0ca      	beq.n	800442e <__sflush_r+0x1a>
 8004498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800449c:	4299      	cmp	r1, r3
 800449e:	d002      	beq.n	80044a6 <__sflush_r+0x92>
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 f9d7 	bl	8004854 <_free_r>
 80044a6:	2000      	movs	r0, #0
 80044a8:	6360      	str	r0, [r4, #52]	; 0x34
 80044aa:	e7c1      	b.n	8004430 <__sflush_r+0x1c>
 80044ac:	6a21      	ldr	r1, [r4, #32]
 80044ae:	2301      	movs	r3, #1
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b0      	blx	r6
 80044b4:	1c41      	adds	r1, r0, #1
 80044b6:	d1c7      	bne.n	8004448 <__sflush_r+0x34>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0c4      	beq.n	8004448 <__sflush_r+0x34>
 80044be:	2b1d      	cmp	r3, #29
 80044c0:	d001      	beq.n	80044c6 <__sflush_r+0xb2>
 80044c2:	2b16      	cmp	r3, #22
 80044c4:	d101      	bne.n	80044ca <__sflush_r+0xb6>
 80044c6:	602f      	str	r7, [r5, #0]
 80044c8:	e7b1      	b.n	800442e <__sflush_r+0x1a>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d0:	81a3      	strh	r3, [r4, #12]
 80044d2:	e7ad      	b.n	8004430 <__sflush_r+0x1c>
 80044d4:	690f      	ldr	r7, [r1, #16]
 80044d6:	2f00      	cmp	r7, #0
 80044d8:	d0a9      	beq.n	800442e <__sflush_r+0x1a>
 80044da:	0793      	lsls	r3, r2, #30
 80044dc:	680e      	ldr	r6, [r1, #0]
 80044de:	bf08      	it	eq
 80044e0:	694b      	ldreq	r3, [r1, #20]
 80044e2:	600f      	str	r7, [r1, #0]
 80044e4:	bf18      	it	ne
 80044e6:	2300      	movne	r3, #0
 80044e8:	eba6 0807 	sub.w	r8, r6, r7
 80044ec:	608b      	str	r3, [r1, #8]
 80044ee:	f1b8 0f00 	cmp.w	r8, #0
 80044f2:	dd9c      	ble.n	800442e <__sflush_r+0x1a>
 80044f4:	6a21      	ldr	r1, [r4, #32]
 80044f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044f8:	4643      	mov	r3, r8
 80044fa:	463a      	mov	r2, r7
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b0      	blx	r6
 8004500:	2800      	cmp	r0, #0
 8004502:	dc06      	bgt.n	8004512 <__sflush_r+0xfe>
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004510:	e78e      	b.n	8004430 <__sflush_r+0x1c>
 8004512:	4407      	add	r7, r0
 8004514:	eba8 0800 	sub.w	r8, r8, r0
 8004518:	e7e9      	b.n	80044ee <__sflush_r+0xda>
 800451a:	bf00      	nop
 800451c:	20400001 	.word	0x20400001

08004520 <_fflush_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	690b      	ldr	r3, [r1, #16]
 8004524:	4605      	mov	r5, r0
 8004526:	460c      	mov	r4, r1
 8004528:	b913      	cbnz	r3, 8004530 <_fflush_r+0x10>
 800452a:	2500      	movs	r5, #0
 800452c:	4628      	mov	r0, r5
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	b118      	cbz	r0, 800453a <_fflush_r+0x1a>
 8004532:	6983      	ldr	r3, [r0, #24]
 8004534:	b90b      	cbnz	r3, 800453a <_fflush_r+0x1a>
 8004536:	f000 f887 	bl	8004648 <__sinit>
 800453a:	4b14      	ldr	r3, [pc, #80]	; (800458c <_fflush_r+0x6c>)
 800453c:	429c      	cmp	r4, r3
 800453e:	d11b      	bne.n	8004578 <_fflush_r+0x58>
 8004540:	686c      	ldr	r4, [r5, #4]
 8004542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0ef      	beq.n	800452a <_fflush_r+0xa>
 800454a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800454c:	07d0      	lsls	r0, r2, #31
 800454e:	d404      	bmi.n	800455a <_fflush_r+0x3a>
 8004550:	0599      	lsls	r1, r3, #22
 8004552:	d402      	bmi.n	800455a <_fflush_r+0x3a>
 8004554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004556:	f000 f915 	bl	8004784 <__retarget_lock_acquire_recursive>
 800455a:	4628      	mov	r0, r5
 800455c:	4621      	mov	r1, r4
 800455e:	f7ff ff59 	bl	8004414 <__sflush_r>
 8004562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004564:	07da      	lsls	r2, r3, #31
 8004566:	4605      	mov	r5, r0
 8004568:	d4e0      	bmi.n	800452c <_fflush_r+0xc>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	059b      	lsls	r3, r3, #22
 800456e:	d4dd      	bmi.n	800452c <_fflush_r+0xc>
 8004570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004572:	f000 f908 	bl	8004786 <__retarget_lock_release_recursive>
 8004576:	e7d9      	b.n	800452c <_fflush_r+0xc>
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <_fflush_r+0x70>)
 800457a:	429c      	cmp	r4, r3
 800457c:	d101      	bne.n	8004582 <_fflush_r+0x62>
 800457e:	68ac      	ldr	r4, [r5, #8]
 8004580:	e7df      	b.n	8004542 <_fflush_r+0x22>
 8004582:	4b04      	ldr	r3, [pc, #16]	; (8004594 <_fflush_r+0x74>)
 8004584:	429c      	cmp	r4, r3
 8004586:	bf08      	it	eq
 8004588:	68ec      	ldreq	r4, [r5, #12]
 800458a:	e7da      	b.n	8004542 <_fflush_r+0x22>
 800458c:	08004de8 	.word	0x08004de8
 8004590:	08004e08 	.word	0x08004e08
 8004594:	08004dc8 	.word	0x08004dc8

08004598 <std>:
 8004598:	2300      	movs	r3, #0
 800459a:	b510      	push	{r4, lr}
 800459c:	4604      	mov	r4, r0
 800459e:	e9c0 3300 	strd	r3, r3, [r0]
 80045a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045a6:	6083      	str	r3, [r0, #8]
 80045a8:	8181      	strh	r1, [r0, #12]
 80045aa:	6643      	str	r3, [r0, #100]	; 0x64
 80045ac:	81c2      	strh	r2, [r0, #14]
 80045ae:	6183      	str	r3, [r0, #24]
 80045b0:	4619      	mov	r1, r3
 80045b2:	2208      	movs	r2, #8
 80045b4:	305c      	adds	r0, #92	; 0x5c
 80045b6:	f7ff fb6f 	bl	8003c98 <memset>
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <std+0x38>)
 80045bc:	6263      	str	r3, [r4, #36]	; 0x24
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <std+0x3c>)
 80045c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <std+0x40>)
 80045c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <std+0x44>)
 80045c8:	6224      	str	r4, [r4, #32]
 80045ca:	6323      	str	r3, [r4, #48]	; 0x30
 80045cc:	bd10      	pop	{r4, pc}
 80045ce:	bf00      	nop
 80045d0:	08004abd 	.word	0x08004abd
 80045d4:	08004adf 	.word	0x08004adf
 80045d8:	08004b17 	.word	0x08004b17
 80045dc:	08004b3b 	.word	0x08004b3b

080045e0 <_cleanup_r>:
 80045e0:	4901      	ldr	r1, [pc, #4]	; (80045e8 <_cleanup_r+0x8>)
 80045e2:	f000 b8af 	b.w	8004744 <_fwalk_reent>
 80045e6:	bf00      	nop
 80045e8:	08004521 	.word	0x08004521

080045ec <__sfmoreglue>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	2268      	movs	r2, #104	; 0x68
 80045f0:	1e4d      	subs	r5, r1, #1
 80045f2:	4355      	muls	r5, r2
 80045f4:	460e      	mov	r6, r1
 80045f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045fa:	f000 f997 	bl	800492c <_malloc_r>
 80045fe:	4604      	mov	r4, r0
 8004600:	b140      	cbz	r0, 8004614 <__sfmoreglue+0x28>
 8004602:	2100      	movs	r1, #0
 8004604:	e9c0 1600 	strd	r1, r6, [r0]
 8004608:	300c      	adds	r0, #12
 800460a:	60a0      	str	r0, [r4, #8]
 800460c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004610:	f7ff fb42 	bl	8003c98 <memset>
 8004614:	4620      	mov	r0, r4
 8004616:	bd70      	pop	{r4, r5, r6, pc}

08004618 <__sfp_lock_acquire>:
 8004618:	4801      	ldr	r0, [pc, #4]	; (8004620 <__sfp_lock_acquire+0x8>)
 800461a:	f000 b8b3 	b.w	8004784 <__retarget_lock_acquire_recursive>
 800461e:	bf00      	nop
 8004620:	200008f1 	.word	0x200008f1

08004624 <__sfp_lock_release>:
 8004624:	4801      	ldr	r0, [pc, #4]	; (800462c <__sfp_lock_release+0x8>)
 8004626:	f000 b8ae 	b.w	8004786 <__retarget_lock_release_recursive>
 800462a:	bf00      	nop
 800462c:	200008f1 	.word	0x200008f1

08004630 <__sinit_lock_acquire>:
 8004630:	4801      	ldr	r0, [pc, #4]	; (8004638 <__sinit_lock_acquire+0x8>)
 8004632:	f000 b8a7 	b.w	8004784 <__retarget_lock_acquire_recursive>
 8004636:	bf00      	nop
 8004638:	200008f2 	.word	0x200008f2

0800463c <__sinit_lock_release>:
 800463c:	4801      	ldr	r0, [pc, #4]	; (8004644 <__sinit_lock_release+0x8>)
 800463e:	f000 b8a2 	b.w	8004786 <__retarget_lock_release_recursive>
 8004642:	bf00      	nop
 8004644:	200008f2 	.word	0x200008f2

08004648 <__sinit>:
 8004648:	b510      	push	{r4, lr}
 800464a:	4604      	mov	r4, r0
 800464c:	f7ff fff0 	bl	8004630 <__sinit_lock_acquire>
 8004650:	69a3      	ldr	r3, [r4, #24]
 8004652:	b11b      	cbz	r3, 800465c <__sinit+0x14>
 8004654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004658:	f7ff bff0 	b.w	800463c <__sinit_lock_release>
 800465c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004660:	6523      	str	r3, [r4, #80]	; 0x50
 8004662:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <__sinit+0x68>)
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <__sinit+0x6c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	62a2      	str	r2, [r4, #40]	; 0x28
 800466a:	42a3      	cmp	r3, r4
 800466c:	bf04      	itt	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	61a3      	streq	r3, [r4, #24]
 8004672:	4620      	mov	r0, r4
 8004674:	f000 f820 	bl	80046b8 <__sfp>
 8004678:	6060      	str	r0, [r4, #4]
 800467a:	4620      	mov	r0, r4
 800467c:	f000 f81c 	bl	80046b8 <__sfp>
 8004680:	60a0      	str	r0, [r4, #8]
 8004682:	4620      	mov	r0, r4
 8004684:	f000 f818 	bl	80046b8 <__sfp>
 8004688:	2200      	movs	r2, #0
 800468a:	60e0      	str	r0, [r4, #12]
 800468c:	2104      	movs	r1, #4
 800468e:	6860      	ldr	r0, [r4, #4]
 8004690:	f7ff ff82 	bl	8004598 <std>
 8004694:	68a0      	ldr	r0, [r4, #8]
 8004696:	2201      	movs	r2, #1
 8004698:	2109      	movs	r1, #9
 800469a:	f7ff ff7d 	bl	8004598 <std>
 800469e:	68e0      	ldr	r0, [r4, #12]
 80046a0:	2202      	movs	r2, #2
 80046a2:	2112      	movs	r1, #18
 80046a4:	f7ff ff78 	bl	8004598 <std>
 80046a8:	2301      	movs	r3, #1
 80046aa:	61a3      	str	r3, [r4, #24]
 80046ac:	e7d2      	b.n	8004654 <__sinit+0xc>
 80046ae:	bf00      	nop
 80046b0:	08004d90 	.word	0x08004d90
 80046b4:	080045e1 	.word	0x080045e1

080046b8 <__sfp>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	4607      	mov	r7, r0
 80046bc:	f7ff ffac 	bl	8004618 <__sfp_lock_acquire>
 80046c0:	4b1e      	ldr	r3, [pc, #120]	; (800473c <__sfp+0x84>)
 80046c2:	681e      	ldr	r6, [r3, #0]
 80046c4:	69b3      	ldr	r3, [r6, #24]
 80046c6:	b913      	cbnz	r3, 80046ce <__sfp+0x16>
 80046c8:	4630      	mov	r0, r6
 80046ca:	f7ff ffbd 	bl	8004648 <__sinit>
 80046ce:	3648      	adds	r6, #72	; 0x48
 80046d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	d503      	bpl.n	80046e0 <__sfp+0x28>
 80046d8:	6833      	ldr	r3, [r6, #0]
 80046da:	b30b      	cbz	r3, 8004720 <__sfp+0x68>
 80046dc:	6836      	ldr	r6, [r6, #0]
 80046de:	e7f7      	b.n	80046d0 <__sfp+0x18>
 80046e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046e4:	b9d5      	cbnz	r5, 800471c <__sfp+0x64>
 80046e6:	4b16      	ldr	r3, [pc, #88]	; (8004740 <__sfp+0x88>)
 80046e8:	60e3      	str	r3, [r4, #12]
 80046ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046ee:	6665      	str	r5, [r4, #100]	; 0x64
 80046f0:	f000 f847 	bl	8004782 <__retarget_lock_init_recursive>
 80046f4:	f7ff ff96 	bl	8004624 <__sfp_lock_release>
 80046f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004700:	6025      	str	r5, [r4, #0]
 8004702:	61a5      	str	r5, [r4, #24]
 8004704:	2208      	movs	r2, #8
 8004706:	4629      	mov	r1, r5
 8004708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800470c:	f7ff fac4 	bl	8003c98 <memset>
 8004710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004718:	4620      	mov	r0, r4
 800471a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800471c:	3468      	adds	r4, #104	; 0x68
 800471e:	e7d9      	b.n	80046d4 <__sfp+0x1c>
 8004720:	2104      	movs	r1, #4
 8004722:	4638      	mov	r0, r7
 8004724:	f7ff ff62 	bl	80045ec <__sfmoreglue>
 8004728:	4604      	mov	r4, r0
 800472a:	6030      	str	r0, [r6, #0]
 800472c:	2800      	cmp	r0, #0
 800472e:	d1d5      	bne.n	80046dc <__sfp+0x24>
 8004730:	f7ff ff78 	bl	8004624 <__sfp_lock_release>
 8004734:	230c      	movs	r3, #12
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	e7ee      	b.n	8004718 <__sfp+0x60>
 800473a:	bf00      	nop
 800473c:	08004d90 	.word	0x08004d90
 8004740:	ffff0001 	.word	0xffff0001

08004744 <_fwalk_reent>:
 8004744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004748:	4606      	mov	r6, r0
 800474a:	4688      	mov	r8, r1
 800474c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004750:	2700      	movs	r7, #0
 8004752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004756:	f1b9 0901 	subs.w	r9, r9, #1
 800475a:	d505      	bpl.n	8004768 <_fwalk_reent+0x24>
 800475c:	6824      	ldr	r4, [r4, #0]
 800475e:	2c00      	cmp	r4, #0
 8004760:	d1f7      	bne.n	8004752 <_fwalk_reent+0xe>
 8004762:	4638      	mov	r0, r7
 8004764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004768:	89ab      	ldrh	r3, [r5, #12]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d907      	bls.n	800477e <_fwalk_reent+0x3a>
 800476e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004772:	3301      	adds	r3, #1
 8004774:	d003      	beq.n	800477e <_fwalk_reent+0x3a>
 8004776:	4629      	mov	r1, r5
 8004778:	4630      	mov	r0, r6
 800477a:	47c0      	blx	r8
 800477c:	4307      	orrs	r7, r0
 800477e:	3568      	adds	r5, #104	; 0x68
 8004780:	e7e9      	b.n	8004756 <_fwalk_reent+0x12>

08004782 <__retarget_lock_init_recursive>:
 8004782:	4770      	bx	lr

08004784 <__retarget_lock_acquire_recursive>:
 8004784:	4770      	bx	lr

08004786 <__retarget_lock_release_recursive>:
 8004786:	4770      	bx	lr

08004788 <__swhatbuf_r>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	460e      	mov	r6, r1
 800478c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004790:	2900      	cmp	r1, #0
 8004792:	b096      	sub	sp, #88	; 0x58
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
 8004798:	da08      	bge.n	80047ac <__swhatbuf_r+0x24>
 800479a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	602a      	str	r2, [r5, #0]
 80047a2:	061a      	lsls	r2, r3, #24
 80047a4:	d410      	bmi.n	80047c8 <__swhatbuf_r+0x40>
 80047a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047aa:	e00e      	b.n	80047ca <__swhatbuf_r+0x42>
 80047ac:	466a      	mov	r2, sp
 80047ae:	f000 f9eb 	bl	8004b88 <_fstat_r>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	dbf1      	blt.n	800479a <__swhatbuf_r+0x12>
 80047b6:	9a01      	ldr	r2, [sp, #4]
 80047b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047c0:	425a      	negs	r2, r3
 80047c2:	415a      	adcs	r2, r3
 80047c4:	602a      	str	r2, [r5, #0]
 80047c6:	e7ee      	b.n	80047a6 <__swhatbuf_r+0x1e>
 80047c8:	2340      	movs	r3, #64	; 0x40
 80047ca:	2000      	movs	r0, #0
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	b016      	add	sp, #88	; 0x58
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080047d4 <__smakebuf_r>:
 80047d4:	898b      	ldrh	r3, [r1, #12]
 80047d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047d8:	079d      	lsls	r5, r3, #30
 80047da:	4606      	mov	r6, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	d507      	bpl.n	80047f0 <__smakebuf_r+0x1c>
 80047e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	6123      	str	r3, [r4, #16]
 80047e8:	2301      	movs	r3, #1
 80047ea:	6163      	str	r3, [r4, #20]
 80047ec:	b002      	add	sp, #8
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	ab01      	add	r3, sp, #4
 80047f2:	466a      	mov	r2, sp
 80047f4:	f7ff ffc8 	bl	8004788 <__swhatbuf_r>
 80047f8:	9900      	ldr	r1, [sp, #0]
 80047fa:	4605      	mov	r5, r0
 80047fc:	4630      	mov	r0, r6
 80047fe:	f000 f895 	bl	800492c <_malloc_r>
 8004802:	b948      	cbnz	r0, 8004818 <__smakebuf_r+0x44>
 8004804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004808:	059a      	lsls	r2, r3, #22
 800480a:	d4ef      	bmi.n	80047ec <__smakebuf_r+0x18>
 800480c:	f023 0303 	bic.w	r3, r3, #3
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	e7e3      	b.n	80047e0 <__smakebuf_r+0xc>
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <__smakebuf_r+0x7c>)
 800481a:	62b3      	str	r3, [r6, #40]	; 0x28
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	6020      	str	r0, [r4, #0]
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	9b00      	ldr	r3, [sp, #0]
 8004828:	6163      	str	r3, [r4, #20]
 800482a:	9b01      	ldr	r3, [sp, #4]
 800482c:	6120      	str	r0, [r4, #16]
 800482e:	b15b      	cbz	r3, 8004848 <__smakebuf_r+0x74>
 8004830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004834:	4630      	mov	r0, r6
 8004836:	f000 f9b9 	bl	8004bac <_isatty_r>
 800483a:	b128      	cbz	r0, 8004848 <__smakebuf_r+0x74>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	81a3      	strh	r3, [r4, #12]
 8004848:	89a0      	ldrh	r0, [r4, #12]
 800484a:	4305      	orrs	r5, r0
 800484c:	81a5      	strh	r5, [r4, #12]
 800484e:	e7cd      	b.n	80047ec <__smakebuf_r+0x18>
 8004850:	080045e1 	.word	0x080045e1

08004854 <_free_r>:
 8004854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004856:	2900      	cmp	r1, #0
 8004858:	d044      	beq.n	80048e4 <_free_r+0x90>
 800485a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485e:	9001      	str	r0, [sp, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f1a1 0404 	sub.w	r4, r1, #4
 8004866:	bfb8      	it	lt
 8004868:	18e4      	addlt	r4, r4, r3
 800486a:	f000 f9c1 	bl	8004bf0 <__malloc_lock>
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <_free_r+0x94>)
 8004870:	9801      	ldr	r0, [sp, #4]
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	b933      	cbnz	r3, 8004884 <_free_r+0x30>
 8004876:	6063      	str	r3, [r4, #4]
 8004878:	6014      	str	r4, [r2, #0]
 800487a:	b003      	add	sp, #12
 800487c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004880:	f000 b9bc 	b.w	8004bfc <__malloc_unlock>
 8004884:	42a3      	cmp	r3, r4
 8004886:	d908      	bls.n	800489a <_free_r+0x46>
 8004888:	6825      	ldr	r5, [r4, #0]
 800488a:	1961      	adds	r1, r4, r5
 800488c:	428b      	cmp	r3, r1
 800488e:	bf01      	itttt	eq
 8004890:	6819      	ldreq	r1, [r3, #0]
 8004892:	685b      	ldreq	r3, [r3, #4]
 8004894:	1949      	addeq	r1, r1, r5
 8004896:	6021      	streq	r1, [r4, #0]
 8004898:	e7ed      	b.n	8004876 <_free_r+0x22>
 800489a:	461a      	mov	r2, r3
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	b10b      	cbz	r3, 80048a4 <_free_r+0x50>
 80048a0:	42a3      	cmp	r3, r4
 80048a2:	d9fa      	bls.n	800489a <_free_r+0x46>
 80048a4:	6811      	ldr	r1, [r2, #0]
 80048a6:	1855      	adds	r5, r2, r1
 80048a8:	42a5      	cmp	r5, r4
 80048aa:	d10b      	bne.n	80048c4 <_free_r+0x70>
 80048ac:	6824      	ldr	r4, [r4, #0]
 80048ae:	4421      	add	r1, r4
 80048b0:	1854      	adds	r4, r2, r1
 80048b2:	42a3      	cmp	r3, r4
 80048b4:	6011      	str	r1, [r2, #0]
 80048b6:	d1e0      	bne.n	800487a <_free_r+0x26>
 80048b8:	681c      	ldr	r4, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	6053      	str	r3, [r2, #4]
 80048be:	4421      	add	r1, r4
 80048c0:	6011      	str	r1, [r2, #0]
 80048c2:	e7da      	b.n	800487a <_free_r+0x26>
 80048c4:	d902      	bls.n	80048cc <_free_r+0x78>
 80048c6:	230c      	movs	r3, #12
 80048c8:	6003      	str	r3, [r0, #0]
 80048ca:	e7d6      	b.n	800487a <_free_r+0x26>
 80048cc:	6825      	ldr	r5, [r4, #0]
 80048ce:	1961      	adds	r1, r4, r5
 80048d0:	428b      	cmp	r3, r1
 80048d2:	bf04      	itt	eq
 80048d4:	6819      	ldreq	r1, [r3, #0]
 80048d6:	685b      	ldreq	r3, [r3, #4]
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	bf04      	itt	eq
 80048dc:	1949      	addeq	r1, r1, r5
 80048de:	6021      	streq	r1, [r4, #0]
 80048e0:	6054      	str	r4, [r2, #4]
 80048e2:	e7ca      	b.n	800487a <_free_r+0x26>
 80048e4:	b003      	add	sp, #12
 80048e6:	bd30      	pop	{r4, r5, pc}
 80048e8:	200008f4 	.word	0x200008f4

080048ec <sbrk_aligned>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	4e0e      	ldr	r6, [pc, #56]	; (8004928 <sbrk_aligned+0x3c>)
 80048f0:	460c      	mov	r4, r1
 80048f2:	6831      	ldr	r1, [r6, #0]
 80048f4:	4605      	mov	r5, r0
 80048f6:	b911      	cbnz	r1, 80048fe <sbrk_aligned+0x12>
 80048f8:	f000 f88c 	bl	8004a14 <_sbrk_r>
 80048fc:	6030      	str	r0, [r6, #0]
 80048fe:	4621      	mov	r1, r4
 8004900:	4628      	mov	r0, r5
 8004902:	f000 f887 	bl	8004a14 <_sbrk_r>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	d00a      	beq.n	8004920 <sbrk_aligned+0x34>
 800490a:	1cc4      	adds	r4, r0, #3
 800490c:	f024 0403 	bic.w	r4, r4, #3
 8004910:	42a0      	cmp	r0, r4
 8004912:	d007      	beq.n	8004924 <sbrk_aligned+0x38>
 8004914:	1a21      	subs	r1, r4, r0
 8004916:	4628      	mov	r0, r5
 8004918:	f000 f87c 	bl	8004a14 <_sbrk_r>
 800491c:	3001      	adds	r0, #1
 800491e:	d101      	bne.n	8004924 <sbrk_aligned+0x38>
 8004920:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004924:	4620      	mov	r0, r4
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	200008f8 	.word	0x200008f8

0800492c <_malloc_r>:
 800492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004930:	1ccd      	adds	r5, r1, #3
 8004932:	f025 0503 	bic.w	r5, r5, #3
 8004936:	3508      	adds	r5, #8
 8004938:	2d0c      	cmp	r5, #12
 800493a:	bf38      	it	cc
 800493c:	250c      	movcc	r5, #12
 800493e:	2d00      	cmp	r5, #0
 8004940:	4607      	mov	r7, r0
 8004942:	db01      	blt.n	8004948 <_malloc_r+0x1c>
 8004944:	42a9      	cmp	r1, r5
 8004946:	d905      	bls.n	8004954 <_malloc_r+0x28>
 8004948:	230c      	movs	r3, #12
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	2600      	movs	r6, #0
 800494e:	4630      	mov	r0, r6
 8004950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004954:	4e2e      	ldr	r6, [pc, #184]	; (8004a10 <_malloc_r+0xe4>)
 8004956:	f000 f94b 	bl	8004bf0 <__malloc_lock>
 800495a:	6833      	ldr	r3, [r6, #0]
 800495c:	461c      	mov	r4, r3
 800495e:	bb34      	cbnz	r4, 80049ae <_malloc_r+0x82>
 8004960:	4629      	mov	r1, r5
 8004962:	4638      	mov	r0, r7
 8004964:	f7ff ffc2 	bl	80048ec <sbrk_aligned>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	4604      	mov	r4, r0
 800496c:	d14d      	bne.n	8004a0a <_malloc_r+0xde>
 800496e:	6834      	ldr	r4, [r6, #0]
 8004970:	4626      	mov	r6, r4
 8004972:	2e00      	cmp	r6, #0
 8004974:	d140      	bne.n	80049f8 <_malloc_r+0xcc>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	4631      	mov	r1, r6
 800497a:	4638      	mov	r0, r7
 800497c:	eb04 0803 	add.w	r8, r4, r3
 8004980:	f000 f848 	bl	8004a14 <_sbrk_r>
 8004984:	4580      	cmp	r8, r0
 8004986:	d13a      	bne.n	80049fe <_malloc_r+0xd2>
 8004988:	6821      	ldr	r1, [r4, #0]
 800498a:	3503      	adds	r5, #3
 800498c:	1a6d      	subs	r5, r5, r1
 800498e:	f025 0503 	bic.w	r5, r5, #3
 8004992:	3508      	adds	r5, #8
 8004994:	2d0c      	cmp	r5, #12
 8004996:	bf38      	it	cc
 8004998:	250c      	movcc	r5, #12
 800499a:	4629      	mov	r1, r5
 800499c:	4638      	mov	r0, r7
 800499e:	f7ff ffa5 	bl	80048ec <sbrk_aligned>
 80049a2:	3001      	adds	r0, #1
 80049a4:	d02b      	beq.n	80049fe <_malloc_r+0xd2>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	442b      	add	r3, r5
 80049aa:	6023      	str	r3, [r4, #0]
 80049ac:	e00e      	b.n	80049cc <_malloc_r+0xa0>
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	1b52      	subs	r2, r2, r5
 80049b2:	d41e      	bmi.n	80049f2 <_malloc_r+0xc6>
 80049b4:	2a0b      	cmp	r2, #11
 80049b6:	d916      	bls.n	80049e6 <_malloc_r+0xba>
 80049b8:	1961      	adds	r1, r4, r5
 80049ba:	42a3      	cmp	r3, r4
 80049bc:	6025      	str	r5, [r4, #0]
 80049be:	bf18      	it	ne
 80049c0:	6059      	strne	r1, [r3, #4]
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	bf08      	it	eq
 80049c6:	6031      	streq	r1, [r6, #0]
 80049c8:	5162      	str	r2, [r4, r5]
 80049ca:	604b      	str	r3, [r1, #4]
 80049cc:	4638      	mov	r0, r7
 80049ce:	f104 060b 	add.w	r6, r4, #11
 80049d2:	f000 f913 	bl	8004bfc <__malloc_unlock>
 80049d6:	f026 0607 	bic.w	r6, r6, #7
 80049da:	1d23      	adds	r3, r4, #4
 80049dc:	1af2      	subs	r2, r6, r3
 80049de:	d0b6      	beq.n	800494e <_malloc_r+0x22>
 80049e0:	1b9b      	subs	r3, r3, r6
 80049e2:	50a3      	str	r3, [r4, r2]
 80049e4:	e7b3      	b.n	800494e <_malloc_r+0x22>
 80049e6:	6862      	ldr	r2, [r4, #4]
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	bf0c      	ite	eq
 80049ec:	6032      	streq	r2, [r6, #0]
 80049ee:	605a      	strne	r2, [r3, #4]
 80049f0:	e7ec      	b.n	80049cc <_malloc_r+0xa0>
 80049f2:	4623      	mov	r3, r4
 80049f4:	6864      	ldr	r4, [r4, #4]
 80049f6:	e7b2      	b.n	800495e <_malloc_r+0x32>
 80049f8:	4634      	mov	r4, r6
 80049fa:	6876      	ldr	r6, [r6, #4]
 80049fc:	e7b9      	b.n	8004972 <_malloc_r+0x46>
 80049fe:	230c      	movs	r3, #12
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4638      	mov	r0, r7
 8004a04:	f000 f8fa 	bl	8004bfc <__malloc_unlock>
 8004a08:	e7a1      	b.n	800494e <_malloc_r+0x22>
 8004a0a:	6025      	str	r5, [r4, #0]
 8004a0c:	e7de      	b.n	80049cc <_malloc_r+0xa0>
 8004a0e:	bf00      	nop
 8004a10:	200008f4 	.word	0x200008f4

08004a14 <_sbrk_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d06      	ldr	r5, [pc, #24]	; (8004a30 <_sbrk_r+0x1c>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	f7fc fb00 	bl	8001024 <_sbrk>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_sbrk_r+0x1a>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_sbrk_r+0x1a>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	200008fc 	.word	0x200008fc

08004a34 <_raise_r>:
 8004a34:	291f      	cmp	r1, #31
 8004a36:	b538      	push	{r3, r4, r5, lr}
 8004a38:	4604      	mov	r4, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	d904      	bls.n	8004a48 <_raise_r+0x14>
 8004a3e:	2316      	movs	r3, #22
 8004a40:	6003      	str	r3, [r0, #0]
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a4a:	b112      	cbz	r2, 8004a52 <_raise_r+0x1e>
 8004a4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a50:	b94b      	cbnz	r3, 8004a66 <_raise_r+0x32>
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 f830 	bl	8004ab8 <_getpid_r>
 8004a58:	462a      	mov	r2, r5
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a62:	f000 b817 	b.w	8004a94 <_kill_r>
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d00a      	beq.n	8004a80 <_raise_r+0x4c>
 8004a6a:	1c59      	adds	r1, r3, #1
 8004a6c:	d103      	bne.n	8004a76 <_raise_r+0x42>
 8004a6e:	2316      	movs	r3, #22
 8004a70:	6003      	str	r3, [r0, #0]
 8004a72:	2001      	movs	r0, #1
 8004a74:	e7e7      	b.n	8004a46 <_raise_r+0x12>
 8004a76:	2400      	movs	r4, #0
 8004a78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	4798      	blx	r3
 8004a80:	2000      	movs	r0, #0
 8004a82:	e7e0      	b.n	8004a46 <_raise_r+0x12>

08004a84 <raise>:
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <raise+0xc>)
 8004a86:	4601      	mov	r1, r0
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f7ff bfd3 	b.w	8004a34 <_raise_r>
 8004a8e:	bf00      	nop
 8004a90:	20000054 	.word	0x20000054

08004a94 <_kill_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	4d07      	ldr	r5, [pc, #28]	; (8004ab4 <_kill_r+0x20>)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	602b      	str	r3, [r5, #0]
 8004aa2:	f7fc fa37 	bl	8000f14 <_kill>
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	d102      	bne.n	8004ab0 <_kill_r+0x1c>
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	b103      	cbz	r3, 8004ab0 <_kill_r+0x1c>
 8004aae:	6023      	str	r3, [r4, #0]
 8004ab0:	bd38      	pop	{r3, r4, r5, pc}
 8004ab2:	bf00      	nop
 8004ab4:	200008fc 	.word	0x200008fc

08004ab8 <_getpid_r>:
 8004ab8:	f7fc ba24 	b.w	8000f04 <_getpid>

08004abc <__sread>:
 8004abc:	b510      	push	{r4, lr}
 8004abe:	460c      	mov	r4, r1
 8004ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac4:	f000 f8a0 	bl	8004c08 <_read_r>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	bfab      	itete	ge
 8004acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ace:	89a3      	ldrhlt	r3, [r4, #12]
 8004ad0:	181b      	addge	r3, r3, r0
 8004ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ad6:	bfac      	ite	ge
 8004ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ada:	81a3      	strhlt	r3, [r4, #12]
 8004adc:	bd10      	pop	{r4, pc}

08004ade <__swrite>:
 8004ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae2:	461f      	mov	r7, r3
 8004ae4:	898b      	ldrh	r3, [r1, #12]
 8004ae6:	05db      	lsls	r3, r3, #23
 8004ae8:	4605      	mov	r5, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	4616      	mov	r6, r2
 8004aee:	d505      	bpl.n	8004afc <__swrite+0x1e>
 8004af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af4:	2302      	movs	r3, #2
 8004af6:	2200      	movs	r2, #0
 8004af8:	f000 f868 	bl	8004bcc <_lseek_r>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	4632      	mov	r2, r6
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b12:	f000 b817 	b.w	8004b44 <_write_r>

08004b16 <__sseek>:
 8004b16:	b510      	push	{r4, lr}
 8004b18:	460c      	mov	r4, r1
 8004b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1e:	f000 f855 	bl	8004bcc <_lseek_r>
 8004b22:	1c43      	adds	r3, r0, #1
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	bf15      	itete	ne
 8004b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b32:	81a3      	strheq	r3, [r4, #12]
 8004b34:	bf18      	it	ne
 8004b36:	81a3      	strhne	r3, [r4, #12]
 8004b38:	bd10      	pop	{r4, pc}

08004b3a <__sclose>:
 8004b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3e:	f000 b813 	b.w	8004b68 <_close_r>
	...

08004b44 <_write_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d07      	ldr	r5, [pc, #28]	; (8004b64 <_write_r+0x20>)
 8004b48:	4604      	mov	r4, r0
 8004b4a:	4608      	mov	r0, r1
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	2200      	movs	r2, #0
 8004b50:	602a      	str	r2, [r5, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f7fc fa15 	bl	8000f82 <_write>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d102      	bne.n	8004b62 <_write_r+0x1e>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b103      	cbz	r3, 8004b62 <_write_r+0x1e>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	200008fc 	.word	0x200008fc

08004b68 <_close_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4d06      	ldr	r5, [pc, #24]	; (8004b84 <_close_r+0x1c>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	f7fc fa21 	bl	8000fba <_close>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_close_r+0x1a>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_close_r+0x1a>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	200008fc 	.word	0x200008fc

08004b88 <_fstat_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d07      	ldr	r5, [pc, #28]	; (8004ba8 <_fstat_r+0x20>)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	f7fc fa1c 	bl	8000fd2 <_fstat>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	d102      	bne.n	8004ba4 <_fstat_r+0x1c>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	b103      	cbz	r3, 8004ba4 <_fstat_r+0x1c>
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
 8004ba6:	bf00      	nop
 8004ba8:	200008fc 	.word	0x200008fc

08004bac <_isatty_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4d06      	ldr	r5, [pc, #24]	; (8004bc8 <_isatty_r+0x1c>)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	602b      	str	r3, [r5, #0]
 8004bb8:	f7fc fa1b 	bl	8000ff2 <_isatty>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_isatty_r+0x1a>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_isatty_r+0x1a>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	200008fc 	.word	0x200008fc

08004bcc <_lseek_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4d07      	ldr	r5, [pc, #28]	; (8004bec <_lseek_r+0x20>)
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	602a      	str	r2, [r5, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f7fc fa14 	bl	8001008 <_lseek>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_lseek_r+0x1e>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_lseek_r+0x1e>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	200008fc 	.word	0x200008fc

08004bf0 <__malloc_lock>:
 8004bf0:	4801      	ldr	r0, [pc, #4]	; (8004bf8 <__malloc_lock+0x8>)
 8004bf2:	f7ff bdc7 	b.w	8004784 <__retarget_lock_acquire_recursive>
 8004bf6:	bf00      	nop
 8004bf8:	200008f0 	.word	0x200008f0

08004bfc <__malloc_unlock>:
 8004bfc:	4801      	ldr	r0, [pc, #4]	; (8004c04 <__malloc_unlock+0x8>)
 8004bfe:	f7ff bdc2 	b.w	8004786 <__retarget_lock_release_recursive>
 8004c02:	bf00      	nop
 8004c04:	200008f0 	.word	0x200008f0

08004c08 <_read_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4d07      	ldr	r5, [pc, #28]	; (8004c28 <_read_r+0x20>)
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	4608      	mov	r0, r1
 8004c10:	4611      	mov	r1, r2
 8004c12:	2200      	movs	r2, #0
 8004c14:	602a      	str	r2, [r5, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f7fc f996 	bl	8000f48 <_read>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_read_r+0x1e>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_read_r+0x1e>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	200008fc 	.word	0x200008fc

08004c2c <_init>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	bf00      	nop
 8004c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c32:	bc08      	pop	{r3}
 8004c34:	469e      	mov	lr, r3
 8004c36:	4770      	bx	lr

08004c38 <_fini>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr
