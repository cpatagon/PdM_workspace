
TrabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c14  08004c14  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c1c  08004c1c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00000834  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e0  200008e0  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d1a  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fe  00000000  00000000  00032df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  000355f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002613d  00000000  00000000  00037370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b4b  00000000  00000000  0005d4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dedbc  00000000  00000000  0006eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ddb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004864  00000000  00000000  0014de04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004a84 	.word	0x08004a84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	08004a84 	.word	0x08004a84

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 ffcd 	bl	8001538 <HAL_Init>

  /* USER CODE BEGIN Init */

  delayInit(&Delay1, TIME1);
 800059e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a2:	4824      	ldr	r0, [pc, #144]	; (8000634 <main+0xa0>)
 80005a4:	f000 fd9a 	bl	80010dc <delayInit>
  delayInit(&Delay2, TIME2);
 80005a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80005ac:	4822      	ldr	r0, [pc, #136]	; (8000638 <main+0xa4>)
 80005ae:	f000 fd95 	bl	80010dc <delayInit>

  inicializarMEF();
 80005b2:	f000 fecd 	bl	8001350 <inicializarMEF>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f84b 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f991 	bl	80008e0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005be:	f000 f8b3 	bl	8000728 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005c2:	f000 f935 	bl	8000830 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c6:	f000 f95d 	bl	8000884 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80005ca:	f000 f8fb 	bl	80007c4 <MX_SPI3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  estado = SET;
 80005ce:	2301      	movs	r3, #1
 80005d0:	71fb      	strb	r3, [r7, #7]


  init_led();
 80005d2:	f000 fe01 	bl	80011d8 <init_led>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  estado = actualizarMEF(&Delay1);
 80005d6:	4817      	ldr	r0, [pc, #92]	; (8000634 <main+0xa0>)
 80005d8:	f000 fec6 	bl	8001368 <actualizarMEF>
 80005dc:	4603      	mov	r3, r0
 80005de:	71fb      	strb	r3, [r7, #7]

	  switch (estado){
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b05      	cmp	r3, #5
 80005e4:	d8f7      	bhi.n	80005d6 <main+0x42>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <main+0x58>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	08000605 	.word	0x08000605
 80005f0:	0800060b 	.word	0x0800060b
 80005f4:	08000613 	.word	0x08000613
 80005f8:	0800061b 	.word	0x0800061b
 80005fc:	08000623 	.word	0x08000623
 8000600:	0800062b 	.word	0x0800062b
		case SET_ini:
			lit_led();
 8000604:	f000 fe02 	bl	800120c <lit_led>
			break;
 8000608:	e013      	b.n	8000632 <main+0x9e>
		case FIRST:
			update_led(A);
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <main+0xa8>)
 800060c:	f000 fe20 	bl	8001250 <update_led>
			break;
 8000610:	e00f      	b.n	8000632 <main+0x9e>
		case SECOND:
			update_led(B);
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <main+0xac>)
 8000614:	f000 fe1c 	bl	8001250 <update_led>
			break;
 8000618:	e00b      	b.n	8000632 <main+0x9e>
		case THIRD:
			update_led(C);
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <main+0xb0>)
 800061c:	f000 fe18 	bl	8001250 <update_led>
			break;
 8000620:	e007      	b.n	8000632 <main+0x9e>
		case GOOD:
			update_led(smileyFace);
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <main+0xb4>)
 8000624:	f000 fe14 	bl	8001250 <update_led>
			break;
 8000628:	e003      	b.n	8000632 <main+0x9e>
		case BAD:
			update_led(ghost1);
 800062a:	4808      	ldr	r0, [pc, #32]	; (800064c <main+0xb8>)
 800062c:	f000 fe10 	bl	8001250 <update_led>
			break;
 8000630:	bf00      	nop
	  estado = actualizarMEF(&Delay1);
 8000632:	e7d0      	b.n	80005d6 <main+0x42>
 8000634:	20000898 	.word	0x20000898
 8000638:	200008a4 	.word	0x200008a4
 800063c:	20000008 	.word	0x20000008
 8000640:	20000010 	.word	0x20000010
 8000644:	20000018 	.word	0x20000018
 8000648:	20000000 	.word	0x20000000
 800064c:	20000020 	.word	0x20000020

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fa46 	bl	8003af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a28      	ldr	r2, [pc, #160]	; (8000720 <SystemClock_Config+0xd0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <SystemClock_Config+0xd4>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006c8:	2348      	movs	r3, #72	; 0x48
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006d0:	2303      	movs	r3, #3
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fecb 	bl	8002474 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e4:	f000 f9d0 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f92c 	bl	8002964 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000712:	f000 f9b9 	bl	8000a88 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_ETH_Init+0x84>)
 800072e:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <MX_ETH_Init+0x88>)
 8000730:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_ETH_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_ETH_Init+0x8c>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_ETH_Init+0x8c>)
 8000740:	22e1      	movs	r2, #225	; 0xe1
 8000742:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_ETH_Init+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_ETH_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_ETH_Init+0x8c>)
 8000752:	2200      	movs	r2, #0
 8000754:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_ETH_Init+0x84>)
 8000758:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <MX_ETH_Init+0x8c>)
 800075a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_ETH_Init+0x84>)
 800075e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000762:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_ETH_Init+0x84>)
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <MX_ETH_Init+0x90>)
 8000768:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_ETH_Init+0x84>)
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_ETH_Init+0x94>)
 800076e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_ETH_Init+0x84>)
 8000772:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000776:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_ETH_Init+0x84>)
 800077a:	f001 f859 	bl	8001830 <HAL_ETH_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f980 	bl	8000a88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000788:	2238      	movs	r2, #56	; 0x38
 800078a:	2100      	movs	r1, #0
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_ETH_Init+0x98>)
 800078e:	f003 f9af 	bl	8003af0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_ETH_Init+0x98>)
 8000794:	2221      	movs	r2, #33	; 0x21
 8000796:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_ETH_Init+0x98>)
 800079a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800079e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_ETH_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000240 	.word	0x20000240
 80007b0:	40028000 	.word	0x40028000
 80007b4:	200008b0 	.word	0x200008b0
 80007b8:	200001a0 	.word	0x200001a0
 80007bc:	20000100 	.word	0x20000100
 80007c0:	200000c8 	.word	0x200000c8

080007c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_SPI3_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_SPI3_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI3_Init+0x64>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI3_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_SPI3_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI3_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI3_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI3_Init+0x64>)
 80007f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI3_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_SPI3_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI3_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_SPI3_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI3_Init+0x64>)
 8000810:	220a      	movs	r2, #10
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_SPI3_Init+0x64>)
 8000816:	f002 fac5 	bl	8002da4 <HAL_SPI_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000820:	f000 f932 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200002f0 	.word	0x200002f0
 800082c:	40003c00 	.word	0x40003c00

08000830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART3_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART3_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART3_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART3_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000868:	f002 fb25 	bl	8002eb6 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f909 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000348 	.word	0x20000348
 8000880:	40004800 	.word	0x40004800

08000884 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800088e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2204      	movs	r2, #4
 8000894:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2201      	movs	r2, #1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	f001 fcb7 	bl	800223a <HAL_PCD_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f8d9 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000038c 	.word	0x2000038c

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	4b5e      	ldr	r3, [pc, #376]	; (8000a74 <MX_GPIO_Init+0x194>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a5d      	ldr	r2, [pc, #372]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b5b      	ldr	r3, [pc, #364]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	4b57      	ldr	r3, [pc, #348]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a56      	ldr	r2, [pc, #344]	; (8000a74 <MX_GPIO_Init+0x194>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b54      	ldr	r3, [pc, #336]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a4f      	ldr	r2, [pc, #316]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b4d      	ldr	r3, [pc, #308]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b49      	ldr	r3, [pc, #292]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a48      	ldr	r2, [pc, #288]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b46      	ldr	r3, [pc, #280]	; (8000a74 <MX_GPIO_Init+0x194>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <MX_GPIO_Init+0x194>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a41      	ldr	r2, [pc, #260]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b3f      	ldr	r3, [pc, #252]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <MX_GPIO_Init+0x194>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <MX_GPIO_Init+0x194>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_5|LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f244 01a1 	movw	r1, #16545	; 0x40a1
 80009a4:	4834      	ldr	r0, [pc, #208]	; (8000a78 <MX_GPIO_Init+0x198>)
 80009a6:	f001 fc2f 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_Pin|DIN_Pin|CLK_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80009b0:	4832      	ldr	r0, [pc, #200]	; (8000a7c <MX_GPIO_Init+0x19c>)
 80009b2:	f001 fc29 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f248 0140 	movw	r1, #32832	; 0x8040
 80009bc:	4830      	ldr	r0, [pc, #192]	; (8000a80 <MX_GPIO_Init+0x1a0>)
 80009be:	f001 fc23 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	482a      	ldr	r0, [pc, #168]	; (8000a84 <MX_GPIO_Init+0x1a4>)
 80009da:	f001 fa51 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009de:	f244 0381 	movw	r3, #16513	; 0x4081
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4820      	ldr	r0, [pc, #128]	; (8000a78 <MX_GPIO_Init+0x198>)
 80009f8:	f001 fa42 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DIN_Pin CLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DIN_Pin|CLK_Pin;
 80009fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4819      	ldr	r0, [pc, #100]	; (8000a7c <MX_GPIO_Init+0x19c>)
 8000a16:	f001 fa33 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG15 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_15;
 8000a1a:	f248 0340 	movw	r3, #32832	; 0x8040
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_GPIO_Init+0x1a0>)
 8000a34:	f001 fa24 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_GPIO_Init+0x1a0>)
 8000a4c:	f001 fa18 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a50:	2320      	movs	r3, #32
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_GPIO_Init+0x198>)
 8000a68:	f001 fa0a 	bl	8001e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	40021800 	.word	0x40021800
 8000a84:	40020800 	.word	0x40020800

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a55      	ldr	r2, [pc, #340]	; (8000c58 <HAL_ETH_MspInit+0x174>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f040 80a4 	bne.w	8000c50 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	4b53      	ldr	r3, [pc, #332]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a52      	ldr	r2, [pc, #328]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b20:	623b      	str	r3, [r7, #32]
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	4b4c      	ldr	r3, [pc, #304]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a4b      	ldr	r2, [pc, #300]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a44      	ldr	r2, [pc, #272]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b50:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a3d      	ldr	r2, [pc, #244]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bcc:	2332      	movs	r3, #50	; 0x32
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	481e      	ldr	r0, [pc, #120]	; (8000c60 <HAL_ETH_MspInit+0x17c>)
 8000be8:	f001 f94a 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bec:	2386      	movs	r3, #134	; 0x86
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4817      	ldr	r0, [pc, #92]	; (8000c64 <HAL_ETH_MspInit+0x180>)
 8000c08:	f001 f93a 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <HAL_ETH_MspInit+0x184>)
 8000c2a:	f001 f929 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <HAL_ETH_MspInit+0x188>)
 8000c4c:	f001 f918 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	; 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40028000 	.word	0x40028000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40021800 	.word	0x40021800

08000c70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a28      	ldr	r2, [pc, #160]	; (8000d30 <HAL_SPI_MspInit+0xc0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d14a      	bne.n	8000d28 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_SPI_MspInit+0xc4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <HAL_SPI_MspInit+0xc8>)
 8000d02:	f001 f8bd 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <HAL_SPI_MspInit+0xcc>)
 8000d24:	f001 f8ac 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40003c00 	.word	0x40003c00
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020800 	.word	0x40020800

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12c      	bne.n	8000dbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dac:	2307      	movs	r3, #7
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000db8:	f001 f862 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020c00 	.word	0x40020c00

08000dd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df0:	d13f      	bne.n	8000e72 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e0e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e20:	230a      	movs	r3, #10
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <HAL_PCD_MspInit+0xb0>)
 8000e2c:	f001 f828 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	480e      	ldr	r0, [pc, #56]	; (8000e80 <HAL_PCD_MspInit+0xb0>)
 8000e46:	f001 f81b 	bl	8001e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	6353      	str	r3, [r2, #52]	; 0x34
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 fb84 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return 1;
 8000edc:	2301      	movs	r3, #1
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_kill>:

int _kill(int pid, int sig)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ef2:	f002 fdc1 	bl	8003a78 <__errno>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2216      	movs	r2, #22
 8000efa:	601a      	str	r2, [r3, #0]
  return -1;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_exit>:

void _exit (int status)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffe7 	bl	8000ee8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f1a:	e7fe      	b.n	8000f1a <_exit+0x12>

08000f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e00a      	b.n	8000f44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f2e:	f3af 8000 	nop.w
 8000f32:	4601      	mov	r1, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf0      	blt.n	8000f2e <_read+0x12>
  }

  return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e009      	b.n	8000f7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf1      	blt.n	8000f68 <_write+0x12>
  }
  return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_close>:

int _close(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f002 fd26 	bl	8003a78 <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20030000 	.word	0x20030000
 8001058:	00000400 	.word	0x00000400
 800105c:	200008b8 	.word	0x200008b8
 8001060:	200008e0 	.word	0x200008e0

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108e:	490e      	ldr	r1, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a4:	4c0b      	ldr	r4, [pc, #44]	; (80010d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b2:	f7ff ffd7 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f002 fcf7 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fa6b 	bl	8000594 <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80010cc:	08004c24 	.word	0x08004c24
  ldr r2, =_sbss
 80010d0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80010d4:	200008e0 	.word	0x200008e0

080010d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>
	...

080010dc <delayInit>:
/* delayInit debe cargar el valor de duración del retardo en la estructura, en el campo
correspondiente. No debe iniciar el conteo del retardo. Debe inicializar el flag running
en `false´. */

void delayInit( delay_t * delay, tick_t duration )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <delayInit+0x1c>
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <delayInit+0x30>)
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <delayInit+0x34>)
 80010f0:	2113      	movs	r1, #19
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <delayInit+0x38>)
 80010f4:	f002 fca2 	bl	8003a3c <__assert_func>
	assert(delay->duration >=0);
	delay->duration = duration;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	721a      	strb	r2, [r3, #8]
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	08004a9c 	.word	0x08004a9c
 8001110:	08004b18 	.word	0x08004b18
 8001114:	08004aac 	.word	0x08004aac

08001118 <delayRead>:
○ true, hacer la cuenta para saber si el tiempo del retardo se cumplió o no:
‘marca de tiempo actual - marca de tiempo inicial es mayor o igual a duración
del retardo’ y devolver un valor booleano que indique si el tiempo se cumplió o no.
○ Cuando el tiempo se cumple se debe cambiar el flag running a false.*/

bool_t delayRead( delay_t * delay ){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

	static bool_t retValue; // variable estatica interna
	retValue = false;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <delayRead+0x6c>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
	assert(delay !=NULL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <delayRead+0x20>
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <delayRead+0x70>)
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <delayRead+0x74>)
 8001130:	2124      	movs	r1, #36	; 0x24
 8001132:	4817      	ldr	r0, [pc, #92]	; (8001190 <delayRead+0x78>)
 8001134:	f002 fc82 	bl	8003a3c <__assert_func>
	assert(delay->duration >= 0);

	if (delay->running == false){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7a1b      	ldrb	r3, [r3, #8]
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <delayRead+0x40>
		delay->startTime = HAL_GetTick();
 8001146:	f000 fa5d 	bl	8001604 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	721a      	strb	r2, [r3, #8]
 8001156:	e00f      	b.n	8001178 <delayRead+0x60>
	}
	else{
		 if((HAL_GetTick()-delay->startTime) >= delay->duration){
 8001158:	f000 fa54 	bl	8001604 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	d305      	bcc.n	8001178 <delayRead+0x60>
			 delay->running = false;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	721a      	strb	r2, [r3, #8]
			 retValue = true;
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <delayRead+0x6c>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
		 }
	}
	return retValue;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <delayRead+0x6c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200008bc 	.word	0x200008bc
 8001188:	08004acc 	.word	0x08004acc
 800118c:	08004b24 	.word	0x08004b24
 8001190:	08004aac 	.word	0x08004aac

08001194 <clear_led>:
	GOOD,
	BAD,
} def_Led_t;


void clear_led(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	for(int j = 0; j < 8; j++) {
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e00e      	b.n	80011be <clear_led+0x2a>
		spi_write(led_address[j],clear[j] );
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <clear_led+0x3c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	490a      	ldr	r1, [pc, #40]	; (80011d4 <clear_led+0x40>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	440b      	add	r3, r1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4610      	mov	r0, r2
 80011b4:	f000 f89a 	bl	80012ec <spi_write>
	for(int j = 0; j < 8; j++) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	dded      	ble.n	80011a0 <clear_led+0xc>
	}
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000002c 	.word	0x2000002c
 80011d4:	200008c0 	.word	0x200008c0

080011d8 <init_led>:

void init_led(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	spi_write(0x09, 0x00);       //  no decoding
 80011dc:	2100      	movs	r1, #0
 80011de:	2009      	movs	r0, #9
 80011e0:	f000 f884 	bl	80012ec <spi_write>
	spi_write(0x0b, 0x07);       //  scan limit = 8 LEDs
 80011e4:	2107      	movs	r1, #7
 80011e6:	200b      	movs	r0, #11
 80011e8:	f000 f880 	bl	80012ec <spi_write>
	spi_write(0x0c, 0x01);       //  power down =0,normal mode = 1
 80011ec:	2101      	movs	r1, #1
 80011ee:	200c      	movs	r0, #12
 80011f0:	f000 f87c 	bl	80012ec <spi_write>
	spi_write(0x0f, 0x00);       //  no test display
 80011f4:	2100      	movs	r1, #0
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f878 	bl	80012ec <spi_write>
	clear_led();
 80011fc:	f7ff ffca 	bl	8001194 <clear_led>
	spi_write(0x0a, 0x05);       //  brightness intensity
 8001200:	2105      	movs	r1, #5
 8001202:	200a      	movs	r0, #10
 8001204:	f000 f872 	bl	80012ec <spi_write>
};
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <lit_led>:

void lit_led(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	for(int j = 0; j < 8; j++) {
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	e00e      	b.n	8001236 <lit_led+0x2a>
		spi_write(led_address[j], matrizEncendida[j]);
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <lit_led+0x3c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	490a      	ldr	r1, [pc, #40]	; (800124c <lit_led+0x40>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	440b      	add	r3, r1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f000 f85e 	bl	80012ec <spi_write>
	for(int j = 0; j < 8; j++) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b07      	cmp	r3, #7
 800123a:	dded      	ble.n	8001218 <lit_led+0xc>
	}
};
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000002c 	.word	0x2000002c
 800124c:	20000034 	.word	0x20000034

08001250 <update_led>:

/* se dibuja una lista de caracteres binarios en forma decimal
 * dondde cada valor escrito en exadeciamal representa una fila de la matriz
 * led_adress son el nombre de cada comluna escrito en exadecimal*/
void update_led(uint8_t  paint_list[]){
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	 for(int j = 0; j < 8; j++) {
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e00d      	b.n	800127a <update_led+0x2a>
			 spi_write(led_address[j], paint_list[j]);
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <update_led+0x3c>)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	7818      	ldrb	r0, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4619      	mov	r1, r3
 8001270:	f000 f83c 	bl	80012ec <spi_write>
	 for(int j = 0; j < 8; j++) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b07      	cmp	r3, #7
 800127e:	ddee      	ble.n	800125e <update_led+0xe>
		 }
};
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000002c 	.word	0x2000002c

08001290 <spi_write_byte>:
#include <stdbool.h> /* esta para incluir los tipos bool (boolianos) */
#include "API_spi.h"


void spi_write_byte (uint8_t byte)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i<8; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e01b      	b.n	80012d8 <spi_write_byte+0x48>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <spi_write_byte+0x58>)
 80012a8:	f000 ffae 	bl	8002208 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <spi_write_byte+0x58>)
 80012bc:	f000 ffa4 	bl	8002208 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012cc:	4806      	ldr	r0, [pc, #24]	; (80012e8 <spi_write_byte+0x58>)
 80012ce:	f000 ff9b 	bl	8002208 <HAL_GPIO_WritePin>
	for (uint8_t i =0; i<8; i++)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d9e0      	bls.n	80012a0 <spi_write_byte+0x10>
	}
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40020c00 	.word	0x40020c00

080012ec <spi_write>:


void spi_write(uint8_t address, uint8_t cmd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <spi_write+0x60>)
 8001304:	f000 ff80 	bl	8002208 <HAL_GPIO_WritePin>
	for (uint8_t i=0;i<num; i++)
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e00a      	b.n	8001324 <spi_write+0x38>
	{
		spi_write_byte (address);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ffbd 	bl	8001290 <spi_write_byte>
		spi_write_byte (cmd);
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffb9 	bl	8001290 <spi_write_byte>
	for (uint8_t i=0;i<num; i++)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	3301      	adds	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f1      	beq.n	800130e <spi_write+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <spi_write+0x60>)
 8001332:	f000 ff69 	bl	8002208 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <spi_write+0x60>)
 800133e:	f000 ff63 	bl	8002208 <HAL_GPIO_WritePin>
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40020c00 	.word	0x40020c00

08001350 <inicializarMEF>:
#include <assert.h>
#include "App_MEF.h"

State_MEF_t estadoMEF;

void inicializarMEF(void){
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
	/* Initialize Estado */
	estadoMEF=SET;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <inicializarMEF+0x14>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
	return;
 800135a:	bf00      	nop
};
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	200008c8 	.word	0x200008c8

08001368 <actualizarMEF>:

State_MEF_t actualizarMEF(delay_t * delay){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
		assert(&estadoMEF!=NULL);
		switch (estadoMEF){
 8001370:	4b62      	ldr	r3, [pc, #392]	; (80014fc <actualizarMEF+0x194>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b05      	cmp	r3, #5
 8001376:	f200 80aa 	bhi.w	80014ce <actualizarMEF+0x166>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <actualizarMEF+0x18>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	08001399 	.word	0x08001399
 8001384:	080013bd 	.word	0x080013bd
 8001388:	08001403 	.word	0x08001403
 800138c:	08001449 	.word	0x08001449
 8001390:	0800148f 	.word	0x0800148f
 8001394:	080014af 	.word	0x080014af
		case SET_ini:
			if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f8b7 	bl	800150c <BSP_PB_GetState>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f040 809a 	bne.w	80014da <actualizarMEF+0x172>
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff feb6 	bl	8001118 <delayRead>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8093 	beq.w	80014da <actualizarMEF+0x172>
			    	estadoMEF=FIRST;
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <actualizarMEF+0x194>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
				}
			break;
 80013ba:	e08e      	b.n	80014da <actualizarMEF+0x172>
		case FIRST:
			if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 f8a5 	bl	800150c <BSP_PB_GetState>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <actualizarMEF+0x74>
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fea5 	bl	8001118 <delayRead>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <actualizarMEF+0x74>
				    	estadoMEF=SECOND;
 80013d4:	4b49      	ldr	r3, [pc, #292]	; (80014fc <actualizarMEF+0x194>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]
					}
			else if(BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)){
				estadoMEF=BAD;
			}
			break;
 80013da:	e080      	b.n	80014de <actualizarMEF+0x176>
			else if(BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)){
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 f895 	bl	800150c <BSP_PB_GetState>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d07a      	beq.n	80014de <actualizarMEF+0x176>
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe95 	bl	8001118 <delayRead>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d071      	beq.n	80014de <actualizarMEF+0x176>
				estadoMEF=BAD;
 80013fa:	4b40      	ldr	r3, [pc, #256]	; (80014fc <actualizarMEF+0x194>)
 80013fc:	2205      	movs	r2, #5
 80013fe:	701a      	strb	r2, [r3, #0]
			break;
 8001400:	e06d      	b.n	80014de <actualizarMEF+0x176>
		case SECOND:
			if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f882 	bl	800150c <BSP_PB_GetState>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <actualizarMEF+0xba>
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fe82 	bl	8001118 <delayRead>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <actualizarMEF+0xba>
				    	estadoMEF=THIRD;
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <actualizarMEF+0x194>)
 800141c:	2203      	movs	r2, #3
 800141e:	701a      	strb	r2, [r3, #0]
					}
			else if(BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)){
					estadoMEF=BAD;
				}
			break;
 8001420:	e05f      	b.n	80014e2 <actualizarMEF+0x17a>
			else if(BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)){
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f872 	bl	800150c <BSP_PB_GetState>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d059      	beq.n	80014e2 <actualizarMEF+0x17a>
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fe72 	bl	8001118 <delayRead>
 8001434:	4603      	mov	r3, r0
 8001436:	f083 0301 	eor.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d050      	beq.n	80014e2 <actualizarMEF+0x17a>
					estadoMEF=BAD;
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <actualizarMEF+0x194>)
 8001442:	2205      	movs	r2, #5
 8001444:	701a      	strb	r2, [r3, #0]
			break;
 8001446:	e04c      	b.n	80014e2 <actualizarMEF+0x17a>
		case THIRD:
			if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 8001448:	2000      	movs	r0, #0
 800144a:	f000 f85f 	bl	800150c <BSP_PB_GetState>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <actualizarMEF+0x100>
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe5f 	bl	8001118 <delayRead>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <actualizarMEF+0x100>
				estadoMEF=FIRST;
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <actualizarMEF+0x194>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
			}
			else if(BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)){
					estadoMEF=GOOD;
				}
			break;
 8001466:	e03e      	b.n	80014e6 <actualizarMEF+0x17e>
			else if(BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)){
 8001468:	2000      	movs	r0, #0
 800146a:	f000 f84f 	bl	800150c <BSP_PB_GetState>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d038      	beq.n	80014e6 <actualizarMEF+0x17e>
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fe4f 	bl	8001118 <delayRead>
 800147a:	4603      	mov	r3, r0
 800147c:	f083 0301 	eor.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d02f      	beq.n	80014e6 <actualizarMEF+0x17e>
					estadoMEF=GOOD;
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <actualizarMEF+0x194>)
 8001488:	2204      	movs	r2, #4
 800148a:	701a      	strb	r2, [r3, #0]
			break;
 800148c:	e02b      	b.n	80014e6 <actualizarMEF+0x17e>
		case GOOD:
			if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f83c 	bl	800150c <BSP_PB_GetState>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d127      	bne.n	80014ea <actualizarMEF+0x182>
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fe3c 	bl	8001118 <delayRead>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d021      	beq.n	80014ea <actualizarMEF+0x182>
				estadoMEF=SET;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <actualizarMEF+0x194>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
			}

			break;
 80014ac:	e01d      	b.n	80014ea <actualizarMEF+0x182>
		case BAD:
			if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f82c 	bl	800150c <BSP_PB_GetState>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d119      	bne.n	80014ee <actualizarMEF+0x186>
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fe2c 	bl	8001118 <delayRead>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d013      	beq.n	80014ee <actualizarMEF+0x186>
				estadoMEF=SET;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <actualizarMEF+0x194>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
			}

			break;
 80014cc:	e00f      	b.n	80014ee <actualizarMEF+0x186>
		default:
				/* Handle unexpected state */
			assert(0);
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <actualizarMEF+0x198>)
 80014d0:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <actualizarMEF+0x19c>)
 80014d2:	2144      	movs	r1, #68	; 0x44
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <actualizarMEF+0x1a0>)
 80014d6:	f002 fab1 	bl	8003a3c <__assert_func>
			break;
 80014da:	bf00      	nop
 80014dc:	e008      	b.n	80014f0 <actualizarMEF+0x188>
			break;
 80014de:	bf00      	nop
 80014e0:	e006      	b.n	80014f0 <actualizarMEF+0x188>
			break;
 80014e2:	bf00      	nop
 80014e4:	e004      	b.n	80014f0 <actualizarMEF+0x188>
			break;
 80014e6:	bf00      	nop
 80014e8:	e002      	b.n	80014f0 <actualizarMEF+0x188>
			break;
 80014ea:	bf00      	nop
 80014ec:	e000      	b.n	80014f0 <actualizarMEF+0x188>
			break;
 80014ee:	bf00      	nop
		}
 return(estadoMEF);
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <actualizarMEF+0x194>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
};
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200008c8 	.word	0x200008c8
 8001500:	08004adc 	.word	0x08004adc
 8001504:	08004b30 	.word	0x08004b30
 8001508:	08004ae0 	.word	0x08004ae0

0800150c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <BSP_PB_GetState+0x28>)
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fe57 	bl	80021d8 <HAL_GPIO_ReadPin>
 800152a:	4603      	mov	r3, r0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000003c 	.word	0x2000003c

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_Init+0x40>)
 8001542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_Init+0x40>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x40>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f931 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	2000      	movs	r0, #0
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fa92 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f93b 	bl	8001816 <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b8:	f000 f911 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000028 	.word	0x20000028
 80015d4:	20000044 	.word	0x20000044
 80015d8:	20000040 	.word	0x20000040

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000044 	.word	0x20000044
 8001600:	200008cc 	.word	0x200008cc

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200008cc 	.word	0x200008cc

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000044 	.word	0x20000044

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff47 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff5c 	bl	80016ac <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff8e 	bl	800171c <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5d 	bl	80016c8 <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffb0 	bl	8001784 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06c      	b.n	800191c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001848:	2b00      	cmp	r3, #0
 800184a:	d106      	bne.n	800185a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2223      	movs	r2, #35	; 0x23
 8001850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff f945 	bl	8000ae4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_ETH_Init+0xf4>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a30      	ldr	r2, [pc, #192]	; (8001924 <HAL_ETH_Init+0xf4>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <HAL_ETH_Init+0xf4>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <HAL_ETH_Init+0xf8>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <HAL_ETH_Init+0xf8>)
 800187c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001880:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_ETH_Init+0xf8>)
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	4927      	ldr	r1, [pc, #156]	; (8001928 <HAL_ETH_Init+0xf8>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_ETH_Init+0xf8>)
 8001892:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ac:	f7ff feaa 	bl	8001604 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018b2:	e011      	b.n	80018d8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018b4:	f7ff fea6 	bl	8001604 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018c2:	d909      	bls.n	80018d8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	22e0      	movs	r2, #224	; 0xe0
 80018d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e021      	b.n	800191c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1e4      	bne.n	80018b4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f958 	bl	8001ba0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f9ff 	bl	8001cf4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fa55 	bl	8001da6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	461a      	mov	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f9bd 	bl	8001c84 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2210      	movs	r2, #16
 8001916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800

0800192c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <ETH_SetMACConfig+0x15c>)
 8001942:	4013      	ands	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	7c1b      	ldrb	r3, [r3, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <ETH_SetMACConfig+0x28>
 800194e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001952:	e000      	b.n	8001956 <ETH_SetMACConfig+0x2a>
 8001954:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	7c5b      	ldrb	r3, [r3, #17]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <ETH_SetMACConfig+0x38>
 800195e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001962:	e000      	b.n	8001966 <ETH_SetMACConfig+0x3a>
 8001964:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001966:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800196c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	7fdb      	ldrb	r3, [r3, #31]
 8001972:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001974:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800197a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	7f92      	ldrb	r2, [r2, #30]
 8001980:	2a00      	cmp	r2, #0
 8001982:	d102      	bne.n	800198a <ETH_SetMACConfig+0x5e>
 8001984:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001988:	e000      	b.n	800198c <ETH_SetMACConfig+0x60>
 800198a:	2200      	movs	r2, #0
                        macconf->Speed |
 800198c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	7f1b      	ldrb	r3, [r3, #28]
 8001992:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001994:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800199a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	791b      	ldrb	r3, [r3, #4]
 80019a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d102      	bne.n	80019b4 <ETH_SetMACConfig+0x88>
 80019ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b2:	e000      	b.n	80019b6 <ETH_SetMACConfig+0x8a>
 80019b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	7bdb      	ldrb	r3, [r3, #15]
 80019bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019ce:	4313      	orrs	r3, r2
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff fe18 	bl	800161c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a02:	4013      	ands	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	d101      	bne.n	8001a1a <ETH_SetMACConfig+0xee>
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	e000      	b.n	8001a1c <ETH_SetMACConfig+0xf0>
 8001a1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001a2a:	2a01      	cmp	r2, #1
 8001a2c:	d101      	bne.n	8001a32 <ETH_SetMACConfig+0x106>
 8001a2e:	2208      	movs	r2, #8
 8001a30:	e000      	b.n	8001a34 <ETH_SetMACConfig+0x108>
 8001a32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001a3c:	2a01      	cmp	r2, #1
 8001a3e:	d101      	bne.n	8001a44 <ETH_SetMACConfig+0x118>
 8001a40:	2204      	movs	r2, #4
 8001a42:	e000      	b.n	8001a46 <ETH_SetMACConfig+0x11a>
 8001a44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a4e:	2a01      	cmp	r2, #1
 8001a50:	d101      	bne.n	8001a56 <ETH_SetMACConfig+0x12a>
 8001a52:	2202      	movs	r2, #2
 8001a54:	e000      	b.n	8001a58 <ETH_SetMACConfig+0x12c>
 8001a56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff fdd3 	bl	800161c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	ff20810f 	.word	0xff20810f

08001a8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <ETH_SetDMAConfig+0x110>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	7b1b      	ldrb	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <ETH_SetDMAConfig+0x2c>
 8001ab2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ab6:	e000      	b.n	8001aba <ETH_SetDMAConfig+0x2e>
 8001ab8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7b5b      	ldrb	r3, [r3, #13]
 8001abe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ac0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	7f52      	ldrb	r2, [r2, #29]
 8001ac6:	2a00      	cmp	r2, #0
 8001ac8:	d102      	bne.n	8001ad0 <ETH_SetDMAConfig+0x44>
 8001aca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ace:	e000      	b.n	8001ad2 <ETH_SetDMAConfig+0x46>
 8001ad0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ad2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	7b9b      	ldrb	r3, [r3, #14]
 8001ad8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ada:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ae0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	7f1b      	ldrb	r3, [r3, #28]
 8001ae6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ae8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	7f9b      	ldrb	r3, [r3, #30]
 8001aee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001af0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001af6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001afe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b00:	4313      	orrs	r3, r2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fd7a 	bl	800161c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff fd4b 	bl	800161c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	f8de3f23 	.word	0xf8de3f23

08001ba0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0a6      	sub	sp, #152	; 0x98
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c06:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fe86 	bl	800192c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c54:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c60:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ff08 	bl	8001a8c <ETH_SetDMAConfig>
}
 8001c7c:	bf00      	nop
 8001c7e:	3798      	adds	r7, #152	; 0x98
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3305      	adds	r3, #5
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	3204      	adds	r2, #4
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <ETH_MACAddressConfig+0x68>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3303      	adds	r3, #3
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	061a      	lsls	r2, r3, #24
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <ETH_MACAddressConfig+0x6c>)
 8001cd6:	4413      	add	r3, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	6013      	str	r3, [r2, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40028040 	.word	0x40028040
 8001cf0:	40028044 	.word	0x40028044

08001cf4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e03e      	b.n	8001d80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	3206      	adds	r2, #6
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d80c      	bhi.n	8001d64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68d9      	ldr	r1, [r3, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	e004      	b.n	8001d6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d9bd      	bls.n	8001d02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d98:	611a      	str	r2, [r3, #16]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e046      	b.n	8001e42 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6919      	ldr	r1, [r3, #16]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001df0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001df8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	3212      	adds	r2, #18
 8001e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d80c      	bhi.n	8001e32 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6919      	ldr	r1, [r3, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	e004      	b.n	8001e3c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d9b5      	bls.n	8001db4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e72:	60da      	str	r2, [r3, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e177      	b.n	800218c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8166 	bne.w	8002186 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80c0 	beq.w	8002186 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_GPIO_Init+0x324>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_GPIO_Init+0x324>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_GPIO_Init+0x324>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a61      	ldr	r2, [pc, #388]	; (80021a8 <HAL_GPIO_Init+0x328>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_GPIO_Init+0x32c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d037      	beq.n	80020be <HAL_GPIO_Init+0x23e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <HAL_GPIO_Init+0x330>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_GPIO_Init+0x23a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a56      	ldr	r2, [pc, #344]	; (80021b4 <HAL_GPIO_Init+0x334>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <HAL_GPIO_Init+0x236>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a55      	ldr	r2, [pc, #340]	; (80021b8 <HAL_GPIO_Init+0x338>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d025      	beq.n	80020b2 <HAL_GPIO_Init+0x232>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a54      	ldr	r2, [pc, #336]	; (80021bc <HAL_GPIO_Init+0x33c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <HAL_GPIO_Init+0x22e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a53      	ldr	r2, [pc, #332]	; (80021c0 <HAL_GPIO_Init+0x340>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_GPIO_Init+0x22a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_GPIO_Init+0x344>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_GPIO_Init+0x348>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00d      	beq.n	80020a2 <HAL_GPIO_Init+0x222>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_GPIO_Init+0x34c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <HAL_GPIO_Init+0x21e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_GPIO_Init+0x350>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_GPIO_Init+0x21a>
 8002096:	2309      	movs	r3, #9
 8002098:	e012      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 800209a:	230a      	movs	r3, #10
 800209c:	e010      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 800209e:	2308      	movs	r3, #8
 80020a0:	e00e      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00c      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020a6:	2306      	movs	r3, #6
 80020a8:	e00a      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x240>
 80020be:	2300      	movs	r3, #0
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_GPIO_Init+0x328>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_GPIO_Init+0x354>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_GPIO_Init+0x354>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <HAL_GPIO_Init+0x354>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f ae84 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40021400 	.word	0x40021400
 80021c4:	40021800 	.word	0x40021800
 80021c8:	40021c00 	.word	0x40021c00
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40022400 	.word	0x40022400
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	e001      	b.n	80021fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800223a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223c:	b08f      	sub	sp, #60	; 0x3c
 800223e:	af0a      	add	r7, sp, #40	; 0x28
 8002240:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e10f      	b.n	800246c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fdb2 	bl	8000dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2203      	movs	r2, #3
 8002270:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f001 f935 	bl	80034fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	687e      	ldr	r6, [r7, #4]
 8002298:	466d      	mov	r5, sp
 800229a:	f106 0410 	add.w	r4, r6, #16
 800229e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ae:	1d33      	adds	r3, r6, #4
 80022b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	f001 f8c0 	bl	8003438 <USB_CoreInit>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2202      	movs	r2, #2
 80022c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0d0      	b.n	800246c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 f923 	bl	800351c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e04a      	b.n	8002372 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	333d      	adds	r3, #61	; 0x3d
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	333c      	adds	r3, #60	; 0x3c
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	b298      	uxth	r0, r3
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3344      	adds	r3, #68	; 0x44
 8002318:	4602      	mov	r2, r0
 800231a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3340      	adds	r3, #64	; 0x40
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	3348      	adds	r3, #72	; 0x48
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	334c      	adds	r3, #76	; 0x4c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3354      	adds	r3, #84	; 0x54
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	3301      	adds	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d3af      	bcc.n	80022dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e044      	b.n	800240c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	3301      	adds	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d3b5      	bcc.n	8002382 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	687e      	ldr	r6, [r7, #4]
 800241e:	466d      	mov	r5, sp
 8002420:	f106 0410 	add.w	r4, r6, #16
 8002424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002430:	e885 0003 	stmia.w	r5, {r0, r1}
 8002434:	1d33      	adds	r3, r6, #4
 8002436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002438:	6838      	ldr	r0, [r7, #0]
 800243a:	f001 f8bb 	bl	80035b4 <USB_DevInit>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e00d      	b.n	800246c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fa86 	bl	8003976 <USB_DevDisconnect>

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e267      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d075      	beq.n	800257e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d00c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b85      	ldr	r3, [pc, #532]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	4b7e      	ldr	r3, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05b      	beq.n	800257c <HAL_RCC_OscConfig+0x108>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d157      	bne.n	800257c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e242      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d106      	bne.n	80024e8 <HAL_RCC_OscConfig+0x74>
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a75      	ldr	r2, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x98>
 80024f2:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6f      	ldr	r2, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6c      	ldr	r2, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 800250c:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a68      	ldr	r2, [pc, #416]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff f86a 	bl	8001604 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff f866 	bl	8001604 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e207      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xc0>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f856 	bl	8001604 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff f852 	bl	8001604 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1f3      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0xe8>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d063      	beq.n	8002652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d11c      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1c7      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4937      	ldr	r1, [pc, #220]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e03a      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_RCC_OscConfig+0x244>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7ff f80b 	bl	8001604 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff f807 	bl	8001604 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1a8      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4925      	ldr	r1, [pc, #148]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_OscConfig+0x244>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe ffea 	bl	8001604 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002634:	f7fe ffe6 	bl	8001604 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e187      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d036      	beq.n	80026cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_RCC_OscConfig+0x248>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fe ffca 	bl	8001604 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002674:	f7fe ffc6 	bl	8001604 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e167      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x200>
 8002692:	e01b      	b.n	80026cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_OscConfig+0x248>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7fe ffb3 	bl	8001604 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	e00e      	b.n	80026c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a2:	f7fe ffaf 	bl	8001604 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d907      	bls.n	80026c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e150      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470000 	.word	0x42470000
 80026bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ea      	bne.n	80026a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8097 	beq.w	8002808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026de:	4b81      	ldr	r3, [pc, #516]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	4b7d      	ldr	r3, [pc, #500]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a7c      	ldr	r2, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b7a      	ldr	r3, [pc, #488]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b77      	ldr	r3, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d118      	bne.n	8002748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b74      	ldr	r3, [pc, #464]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a73      	ldr	r2, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7fe ff6f 	bl	8001604 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272a:	f7fe ff6b 	bl	8001604 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e10c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x2ea>
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
 800275c:	e01c      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x30c>
 8002766:	4b5f      	ldr	r3, [pc, #380]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a5e      	ldr	r2, [pc, #376]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 8002780:	4b58      	ldr	r3, [pc, #352]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a57      	ldr	r2, [pc, #348]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	4b55      	ldr	r3, [pc, #340]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a54      	ldr	r2, [pc, #336]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe ff30 	bl	8001604 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe ff2c 	bl	8001604 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0cb      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027be:	4b49      	ldr	r3, [pc, #292]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ee      	beq.n	80027a8 <HAL_RCC_OscConfig+0x334>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7fe ff1a 	bl	8001604 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe ff16 	bl	8001604 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0b5      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ea:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ee      	bne.n	80027d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4a38      	ldr	r2, [pc, #224]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a1 	beq.w	8002954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002812:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b08      	cmp	r3, #8
 800281c:	d05c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d141      	bne.n	80028aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe feea 	bl	8001604 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fee6 	bl	8001604 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e087      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	491b      	ldr	r1, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe febf 	bl	8001604 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe febb 	bl	8001604 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e05c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x416>
 80028a8:	e054      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fea8 	bl	8001604 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe fea4 	bl	8001604 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e045      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x444>
 80028d6:	e03d      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e038      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000
 80028ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x4ec>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d028      	beq.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d121      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d11a      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	4293      	cmp	r3, r2
 800292a:	d111      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	3b01      	subs	r3, #1
 800293a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0cc      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d90c      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b8      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494d      	ldr	r1, [pc, #308]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d044      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e067      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fdd6 	bl	8001604 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7fe fdd2 	bl	8001604 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e04f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d20c      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e032      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4916      	ldr	r1, [pc, #88]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f821 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	490a      	ldr	r1, [pc, #40]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fd36 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08004b00 	.word	0x08004b00
 8002b28:	20000028 	.word	0x20000028
 8002b2c:	20000040 	.word	0x20000040

08002b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b094      	sub	sp, #80	; 0x50
 8002b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	2300      	movs	r3, #0
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b48:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d00d      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x40>
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	f200 80e1 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b62:	e0db      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b68:	e0db      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6e:	e0d8      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d063      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	0159      	lsls	r1, r3, #5
 8002bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb4:	0150      	lsls	r0, r2, #5
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4621      	mov	r1, r4
 8002bbc:	1a51      	subs	r1, r2, r1
 8002bbe:	6139      	str	r1, [r7, #16]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	018b      	lsls	r3, r1, #6
 8002bd8:	4651      	mov	r1, sl
 8002bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bde:	4651      	mov	r1, sl
 8002be0:	018a      	lsls	r2, r1, #6
 8002be2:	4651      	mov	r1, sl
 8002be4:	ebb2 0801 	subs.w	r8, r2, r1
 8002be8:	4659      	mov	r1, fp
 8002bea:	eb63 0901 	sbc.w	r9, r3, r1
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	eb18 0303 	adds.w	r3, r8, r3
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	462b      	mov	r3, r5
 8002c10:	eb49 0303 	adc.w	r3, r9, r3
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c22:	4629      	mov	r1, r5
 8002c24:	024b      	lsls	r3, r1, #9
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	024a      	lsls	r2, r1, #9
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c36:	2200      	movs	r2, #0
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c40:	f7fd fb26 	bl	8000290 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c4c:	e058      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	2200      	movs	r2, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	4611      	mov	r1, r2
 8002c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c68:	4642      	mov	r2, r8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	0159      	lsls	r1, r3, #5
 8002c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7a:	0150      	lsls	r0, r2, #5
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4641      	mov	r1, r8
 8002c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	00eb      	lsls	r3, r5, #3
 8002cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	4643      	mov	r3, r8
 8002cbe:	18e3      	adds	r3, r4, r3
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	eb45 0303 	adc.w	r3, r5, r3
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	028b      	lsls	r3, r1, #10
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cea:	2200      	movs	r2, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	61fa      	str	r2, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	f7fd facc 	bl	8000290 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3750      	adds	r7, #80	; 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000028 	.word	0x20000028

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff0 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0a9b      	lsrs	r3, r3, #10
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08004b10 	.word	0x08004b10

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d80:	f7ff ffdc 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0b5b      	lsrs	r3, r3, #13
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08004b10 	.word	0x08004b10

08002da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07b      	b.n	8002eae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc6:	d009      	beq.n	8002ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61da      	str	r2, [r3, #28]
 8002dce:	e005      	b.n	8002ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd ff3a 	bl	8000c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	ea42 0103 	orr.w	r1, r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0104 	and.w	r1, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f003 0210 	and.w	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e03f      	b.n	8002f48 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fd ff2f 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2224      	movs	r2, #36	; 0x24
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f828 	bl	8002f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b0c0      	sub	sp, #256	; 0x100
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	68d9      	ldr	r1, [r3, #12]
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	ea40 0301 	orr.w	r3, r0, r1
 8002f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fa8:	f021 010c 	bic.w	r1, r1, #12
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fca:	6999      	ldr	r1, [r3, #24]
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	ea40 0301 	orr.w	r3, r0, r1
 8002fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b8f      	ldr	r3, [pc, #572]	; (800321c <UART_SetConfig+0x2cc>)
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d005      	beq.n	8002ff0 <UART_SetConfig+0xa0>
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b8d      	ldr	r3, [pc, #564]	; (8003220 <UART_SetConfig+0x2d0>)
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d104      	bne.n	8002ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ff0:	f7ff fec4 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8002ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ff8:	e003      	b.n	8003002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ffa:	f7ff feab 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8002ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300c:	f040 810c 	bne.w	8003228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003014:	2200      	movs	r2, #0
 8003016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800301a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800301e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	1891      	adds	r1, r2, r2
 8003028:	65b9      	str	r1, [r7, #88]	; 0x58
 800302a:	415b      	adcs	r3, r3
 800302c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800302e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003032:	4621      	mov	r1, r4
 8003034:	eb12 0801 	adds.w	r8, r2, r1
 8003038:	4629      	mov	r1, r5
 800303a:	eb43 0901 	adc.w	r9, r3, r1
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800304a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800304e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003052:	4690      	mov	r8, r2
 8003054:	4699      	mov	r9, r3
 8003056:	4623      	mov	r3, r4
 8003058:	eb18 0303 	adds.w	r3, r8, r3
 800305c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003060:	462b      	mov	r3, r5
 8003062:	eb49 0303 	adc.w	r3, r9, r3
 8003066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800307a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800307e:	460b      	mov	r3, r1
 8003080:	18db      	adds	r3, r3, r3
 8003082:	653b      	str	r3, [r7, #80]	; 0x50
 8003084:	4613      	mov	r3, r2
 8003086:	eb42 0303 	adc.w	r3, r2, r3
 800308a:	657b      	str	r3, [r7, #84]	; 0x54
 800308c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003094:	f7fd f8fc 	bl	8000290 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4b61      	ldr	r3, [pc, #388]	; (8003224 <UART_SetConfig+0x2d4>)
 800309e:	fba3 2302 	umull	r2, r3, r3, r2
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	011c      	lsls	r4, r3, #4
 80030a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030b8:	4642      	mov	r2, r8
 80030ba:	464b      	mov	r3, r9
 80030bc:	1891      	adds	r1, r2, r2
 80030be:	64b9      	str	r1, [r7, #72]	; 0x48
 80030c0:	415b      	adcs	r3, r3
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030c8:	4641      	mov	r1, r8
 80030ca:	eb12 0a01 	adds.w	sl, r2, r1
 80030ce:	4649      	mov	r1, r9
 80030d0:	eb43 0b01 	adc.w	fp, r3, r1
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030e8:	4692      	mov	sl, r2
 80030ea:	469b      	mov	fp, r3
 80030ec:	4643      	mov	r3, r8
 80030ee:	eb1a 0303 	adds.w	r3, sl, r3
 80030f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f6:	464b      	mov	r3, r9
 80030f8:	eb4b 0303 	adc.w	r3, fp, r3
 80030fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800310c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003114:	460b      	mov	r3, r1
 8003116:	18db      	adds	r3, r3, r3
 8003118:	643b      	str	r3, [r7, #64]	; 0x40
 800311a:	4613      	mov	r3, r2
 800311c:	eb42 0303 	adc.w	r3, r2, r3
 8003120:	647b      	str	r3, [r7, #68]	; 0x44
 8003122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800312a:	f7fd f8b1 	bl	8000290 <__aeabi_uldivmod>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4611      	mov	r1, r2
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <UART_SetConfig+0x2d4>)
 8003136:	fba3 2301 	umull	r2, r3, r3, r1
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2264      	movs	r2, #100	; 0x64
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	1acb      	subs	r3, r1, r3
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <UART_SetConfig+0x2d4>)
 800314c:	fba3 2302 	umull	r2, r3, r3, r2
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003158:	441c      	add	r4, r3
 800315a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800316c:	4642      	mov	r2, r8
 800316e:	464b      	mov	r3, r9
 8003170:	1891      	adds	r1, r2, r2
 8003172:	63b9      	str	r1, [r7, #56]	; 0x38
 8003174:	415b      	adcs	r3, r3
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800317c:	4641      	mov	r1, r8
 800317e:	1851      	adds	r1, r2, r1
 8003180:	6339      	str	r1, [r7, #48]	; 0x30
 8003182:	4649      	mov	r1, r9
 8003184:	414b      	adcs	r3, r1
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003194:	4659      	mov	r1, fp
 8003196:	00cb      	lsls	r3, r1, #3
 8003198:	4651      	mov	r1, sl
 800319a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800319e:	4651      	mov	r1, sl
 80031a0:	00ca      	lsls	r2, r1, #3
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	4603      	mov	r3, r0
 80031a8:	4642      	mov	r2, r8
 80031aa:	189b      	adds	r3, r3, r2
 80031ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031b0:	464b      	mov	r3, r9
 80031b2:	460a      	mov	r2, r1
 80031b4:	eb42 0303 	adc.w	r3, r2, r3
 80031b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031d0:	460b      	mov	r3, r1
 80031d2:	18db      	adds	r3, r3, r3
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d6:	4613      	mov	r3, r2
 80031d8:	eb42 0303 	adc.w	r3, r2, r3
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031e6:	f7fd f853 	bl	8000290 <__aeabi_uldivmod>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <UART_SetConfig+0x2d4>)
 80031f0:	fba3 1302 	umull	r1, r3, r3, r2
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	2164      	movs	r1, #100	; 0x64
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	3332      	adds	r3, #50	; 0x32
 8003202:	4a08      	ldr	r2, [pc, #32]	; (8003224 <UART_SetConfig+0x2d4>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	f003 0207 	and.w	r2, r3, #7
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4422      	add	r2, r4
 8003216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003218:	e105      	b.n	8003426 <UART_SetConfig+0x4d6>
 800321a:	bf00      	nop
 800321c:	40011000 	.word	0x40011000
 8003220:	40011400 	.word	0x40011400
 8003224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322c:	2200      	movs	r2, #0
 800322e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800323a:	4642      	mov	r2, r8
 800323c:	464b      	mov	r3, r9
 800323e:	1891      	adds	r1, r2, r2
 8003240:	6239      	str	r1, [r7, #32]
 8003242:	415b      	adcs	r3, r3
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800324a:	4641      	mov	r1, r8
 800324c:	1854      	adds	r4, r2, r1
 800324e:	4649      	mov	r1, r9
 8003250:	eb43 0501 	adc.w	r5, r3, r1
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	00eb      	lsls	r3, r5, #3
 800325e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003262:	00e2      	lsls	r2, r4, #3
 8003264:	4614      	mov	r4, r2
 8003266:	461d      	mov	r5, r3
 8003268:	4643      	mov	r3, r8
 800326a:	18e3      	adds	r3, r4, r3
 800326c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003270:	464b      	mov	r3, r9
 8003272:	eb45 0303 	adc.w	r3, r5, r3
 8003276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003296:	4629      	mov	r1, r5
 8003298:	008b      	lsls	r3, r1, #2
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a0:	4621      	mov	r1, r4
 80032a2:	008a      	lsls	r2, r1, #2
 80032a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032a8:	f7fc fff2 	bl	8000290 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4b60      	ldr	r3, [pc, #384]	; (8003434 <UART_SetConfig+0x4e4>)
 80032b2:	fba3 2302 	umull	r2, r3, r3, r2
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	011c      	lsls	r4, r3, #4
 80032ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	1891      	adds	r1, r2, r2
 80032d2:	61b9      	str	r1, [r7, #24]
 80032d4:	415b      	adcs	r3, r3
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032dc:	4641      	mov	r1, r8
 80032de:	1851      	adds	r1, r2, r1
 80032e0:	6139      	str	r1, [r7, #16]
 80032e2:	4649      	mov	r1, r9
 80032e4:	414b      	adcs	r3, r1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032f4:	4659      	mov	r1, fp
 80032f6:	00cb      	lsls	r3, r1, #3
 80032f8:	4651      	mov	r1, sl
 80032fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032fe:	4651      	mov	r1, sl
 8003300:	00ca      	lsls	r2, r1, #3
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	4603      	mov	r3, r0
 8003308:	4642      	mov	r2, r8
 800330a:	189b      	adds	r3, r3, r2
 800330c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003310:	464b      	mov	r3, r9
 8003312:	460a      	mov	r2, r1
 8003314:	eb42 0303 	adc.w	r3, r2, r3
 8003318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	67bb      	str	r3, [r7, #120]	; 0x78
 8003326:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003334:	4649      	mov	r1, r9
 8003336:	008b      	lsls	r3, r1, #2
 8003338:	4641      	mov	r1, r8
 800333a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333e:	4641      	mov	r1, r8
 8003340:	008a      	lsls	r2, r1, #2
 8003342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003346:	f7fc ffa3 	bl	8000290 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4b39      	ldr	r3, [pc, #228]	; (8003434 <UART_SetConfig+0x4e4>)
 8003350:	fba3 1302 	umull	r1, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	2164      	movs	r1, #100	; 0x64
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	3332      	adds	r3, #50	; 0x32
 8003362:	4a34      	ldr	r2, [pc, #208]	; (8003434 <UART_SetConfig+0x4e4>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336e:	441c      	add	r4, r3
 8003370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003374:	2200      	movs	r2, #0
 8003376:	673b      	str	r3, [r7, #112]	; 0x70
 8003378:	677a      	str	r2, [r7, #116]	; 0x74
 800337a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800337e:	4642      	mov	r2, r8
 8003380:	464b      	mov	r3, r9
 8003382:	1891      	adds	r1, r2, r2
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	415b      	adcs	r3, r3
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338e:	4641      	mov	r1, r8
 8003390:	1851      	adds	r1, r2, r1
 8003392:	6039      	str	r1, [r7, #0]
 8003394:	4649      	mov	r1, r9
 8003396:	414b      	adcs	r3, r1
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033a6:	4659      	mov	r1, fp
 80033a8:	00cb      	lsls	r3, r1, #3
 80033aa:	4651      	mov	r1, sl
 80033ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b0:	4651      	mov	r1, sl
 80033b2:	00ca      	lsls	r2, r1, #3
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	4603      	mov	r3, r0
 80033ba:	4642      	mov	r2, r8
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	66bb      	str	r3, [r7, #104]	; 0x68
 80033c0:	464b      	mov	r3, r9
 80033c2:	460a      	mov	r2, r1
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	663b      	str	r3, [r7, #96]	; 0x60
 80033d4:	667a      	str	r2, [r7, #100]	; 0x64
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033e2:	4649      	mov	r1, r9
 80033e4:	008b      	lsls	r3, r1, #2
 80033e6:	4641      	mov	r1, r8
 80033e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ec:	4641      	mov	r1, r8
 80033ee:	008a      	lsls	r2, r1, #2
 80033f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033f4:	f7fc ff4c 	bl	8000290 <__aeabi_uldivmod>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <UART_SetConfig+0x4e4>)
 80033fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2164      	movs	r1, #100	; 0x64
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	3332      	adds	r3, #50	; 0x32
 8003410:	4a08      	ldr	r2, [pc, #32]	; (8003434 <UART_SetConfig+0x4e4>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	f003 020f 	and.w	r2, r3, #15
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4422      	add	r2, r4
 8003424:	609a      	str	r2, [r3, #8]
}
 8003426:	bf00      	nop
 8003428:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003432:	bf00      	nop
 8003434:	51eb851f 	.word	0x51eb851f

08003438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003438:	b084      	sub	sp, #16
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	f107 001c 	add.w	r0, r7, #28
 8003446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	2b01      	cmp	r3, #1
 800344e:	d122      	bne.n	8003496 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 faa2 	bl	80039d4 <USB_CoreReset>
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e01a      	b.n	80034cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa96 	bl	80039d4 <USB_CoreReset>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
 80034be:	e005      	b.n	80034cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10b      	bne.n	80034ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f043 0206 	orr.w	r2, r3, #6
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034f6:	b004      	add	sp, #16
 80034f8:	4770      	bx	lr

080034fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d115      	bne.n	800356a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800354a:	2001      	movs	r0, #1
 800354c:	f7fe f866 	bl	800161c <HAL_Delay>
      ms++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa2e 	bl	80039b8 <USB_GetMode>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d01e      	beq.n	80035a0 <USB_SetCurrentMode+0x84>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b31      	cmp	r3, #49	; 0x31
 8003566:	d9f0      	bls.n	800354a <USB_SetCurrentMode+0x2e>
 8003568:	e01a      	b.n	80035a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d115      	bne.n	800359c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800357c:	2001      	movs	r0, #1
 800357e:	f7fe f84d 	bl	800161c <HAL_Delay>
      ms++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3301      	adds	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fa15 	bl	80039b8 <USB_GetMode>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <USB_SetCurrentMode+0x84>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b31      	cmp	r3, #49	; 0x31
 8003598:	d9f0      	bls.n	800357c <USB_SetCurrentMode+0x60>
 800359a:	e001      	b.n	80035a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e005      	b.n	80035ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b32      	cmp	r3, #50	; 0x32
 80035a4:	d101      	bne.n	80035aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035b4:	b084      	sub	sp, #16
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	e009      	b.n	80035e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	3340      	adds	r3, #64	; 0x40
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3301      	adds	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b0e      	cmp	r3, #14
 80035ec:	d9f2      	bls.n	80035d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11c      	bne.n	800362e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
 800362c:	e00b      	b.n	8003646 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800364c:	461a      	mov	r2, r3
 800364e:	2300      	movs	r3, #0
 8003650:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	4619      	mov	r1, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003660:	461a      	mov	r2, r3
 8003662:	680b      	ldr	r3, [r1, #0]
 8003664:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10c      	bne.n	8003686 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003672:	2100      	movs	r1, #0
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f965 	bl	8003944 <USB_SetDevSpeed>
 800367a:	e008      	b.n	800368e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800367c:	2101      	movs	r1, #1
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f960 	bl	8003944 <USB_SetDevSpeed>
 8003684:	e003      	b.n	800368e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003686:	2103      	movs	r1, #3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f95b 	bl	8003944 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800368e:	2110      	movs	r1, #16
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f8f3 	bl	800387c <USB_FlushTxFifo>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f91f 	bl	80038e4 <USB_FlushRxFifo>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	461a      	mov	r2, r3
 80036b8:	2300      	movs	r3, #0
 80036ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	461a      	mov	r2, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ce:	461a      	mov	r2, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e043      	b.n	8003762 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f0:	d118      	bne.n	8003724 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	461a      	mov	r2, r3
 8003706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	e013      	b.n	8003736 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371a:	461a      	mov	r2, r3
 800371c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e008      	b.n	8003736 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003730:	461a      	mov	r2, r3
 8003732:	2300      	movs	r3, #0
 8003734:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003742:	461a      	mov	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	461a      	mov	r2, r3
 8003756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800375a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3301      	adds	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	429a      	cmp	r2, r3
 8003768:	d3b7      	bcc.n	80036da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e043      	b.n	80037f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003786:	d118      	bne.n	80037ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e013      	b.n	80037cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e008      	b.n	80037cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	2300      	movs	r3, #0
 80037ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3301      	adds	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3b7      	bcc.n	8003770 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003812:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003820:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <USB_DevInit+0x2c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f043 0208 	orr.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003874:	b004      	add	sp, #16
 8003876:	4770      	bx	lr
 8003878:	803c3800 	.word	0x803c3800

0800387c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3301      	adds	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <USB_FlushTxFifo+0x64>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e01b      	b.n	80038d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	daf2      	bge.n	800388a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	019b      	lsls	r3, r3, #6
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3301      	adds	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <USB_FlushTxFifo+0x64>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e006      	b.n	80038d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d0f0      	beq.n	80038b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	00030d40 	.word	0x00030d40

080038e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a11      	ldr	r2, [pc, #68]	; (8003940 <USB_FlushRxFifo+0x5c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e018      	b.n	8003934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	daf2      	bge.n	80038f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2210      	movs	r2, #16
 8003912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <USB_FlushRxFifo+0x5c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e006      	b.n	8003934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d0f0      	beq.n	8003914 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	00030d40 	.word	0x00030d40

08003944 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003990:	f023 0303 	bic.w	r3, r3, #3
 8003994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f003 0301 	and.w	r3, r3, #1
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <USB_CoreReset+0x64>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e01b      	b.n	8003a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	daf2      	bge.n	80039e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f043 0201 	orr.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <USB_CoreReset+0x64>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e006      	b.n	8003a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d0f0      	beq.n	8003a0a <USB_CoreReset+0x36>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	00030d40 	.word	0x00030d40

08003a3c <__assert_func>:
 8003a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a3e:	4614      	mov	r4, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <__assert_func+0x2c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4605      	mov	r5, r0
 8003a48:	68d8      	ldr	r0, [r3, #12]
 8003a4a:	b14c      	cbz	r4, 8003a60 <__assert_func+0x24>
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <__assert_func+0x30>)
 8003a4e:	9100      	str	r1, [sp, #0]
 8003a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a54:	4906      	ldr	r1, [pc, #24]	; (8003a70 <__assert_func+0x34>)
 8003a56:	462b      	mov	r3, r5
 8003a58:	f000 f814 	bl	8003a84 <fiprintf>
 8003a5c:	f000 fbfe 	bl	800425c <abort>
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__assert_func+0x38>)
 8003a62:	461c      	mov	r4, r3
 8003a64:	e7f3      	b.n	8003a4e <__assert_func+0x12>
 8003a66:	bf00      	nop
 8003a68:	20000048 	.word	0x20000048
 8003a6c:	08004b3e 	.word	0x08004b3e
 8003a70:	08004b4b 	.word	0x08004b4b
 8003a74:	08004b79 	.word	0x08004b79

08003a78 <__errno>:
 8003a78:	4b01      	ldr	r3, [pc, #4]	; (8003a80 <__errno+0x8>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000048 	.word	0x20000048

08003a84 <fiprintf>:
 8003a84:	b40e      	push	{r1, r2, r3}
 8003a86:	b503      	push	{r0, r1, lr}
 8003a88:	4601      	mov	r1, r0
 8003a8a:	ab03      	add	r3, sp, #12
 8003a8c:	4805      	ldr	r0, [pc, #20]	; (8003aa4 <fiprintf+0x20>)
 8003a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a92:	6800      	ldr	r0, [r0, #0]
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	f000 f85d 	bl	8003b54 <_vfiprintf_r>
 8003a9a:	b002      	add	sp, #8
 8003a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aa0:	b003      	add	sp, #12
 8003aa2:	4770      	bx	lr
 8003aa4:	20000048 	.word	0x20000048

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4d0d      	ldr	r5, [pc, #52]	; (8003ae0 <__libc_init_array+0x38>)
 8003aac:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003aae:	1b64      	subs	r4, r4, r5
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	4d0b      	ldr	r5, [pc, #44]	; (8003ae8 <__libc_init_array+0x40>)
 8003aba:	4c0c      	ldr	r4, [pc, #48]	; (8003aec <__libc_init_array+0x44>)
 8003abc:	f000 ffe2 	bl	8004a84 <_init>
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08004c1c 	.word	0x08004c1c
 8003ae4:	08004c1c 	.word	0x08004c1c
 8003ae8:	08004c1c 	.word	0x08004c1c
 8003aec:	08004c20 	.word	0x08004c20

08003af0 <memset>:
 8003af0:	4402      	add	r2, r0
 8003af2:	4603      	mov	r3, r0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d100      	bne.n	8003afa <memset+0xa>
 8003af8:	4770      	bx	lr
 8003afa:	f803 1b01 	strb.w	r1, [r3], #1
 8003afe:	e7f9      	b.n	8003af4 <memset+0x4>

08003b00 <__sfputc_r>:
 8003b00:	6893      	ldr	r3, [r2, #8]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	b410      	push	{r4}
 8003b08:	6093      	str	r3, [r2, #8]
 8003b0a:	da08      	bge.n	8003b1e <__sfputc_r+0x1e>
 8003b0c:	6994      	ldr	r4, [r2, #24]
 8003b0e:	42a3      	cmp	r3, r4
 8003b10:	db01      	blt.n	8003b16 <__sfputc_r+0x16>
 8003b12:	290a      	cmp	r1, #10
 8003b14:	d103      	bne.n	8003b1e <__sfputc_r+0x1e>
 8003b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b1a:	f000 badf 	b.w	80040dc <__swbuf_r>
 8003b1e:	6813      	ldr	r3, [r2, #0]
 8003b20:	1c58      	adds	r0, r3, #1
 8003b22:	6010      	str	r0, [r2, #0]
 8003b24:	7019      	strb	r1, [r3, #0]
 8003b26:	4608      	mov	r0, r1
 8003b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <__sfputs_r>:
 8003b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b30:	4606      	mov	r6, r0
 8003b32:	460f      	mov	r7, r1
 8003b34:	4614      	mov	r4, r2
 8003b36:	18d5      	adds	r5, r2, r3
 8003b38:	42ac      	cmp	r4, r5
 8003b3a:	d101      	bne.n	8003b40 <__sfputs_r+0x12>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e007      	b.n	8003b50 <__sfputs_r+0x22>
 8003b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b44:	463a      	mov	r2, r7
 8003b46:	4630      	mov	r0, r6
 8003b48:	f7ff ffda 	bl	8003b00 <__sfputc_r>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d1f3      	bne.n	8003b38 <__sfputs_r+0xa>
 8003b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b54 <_vfiprintf_r>:
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b58:	460d      	mov	r5, r1
 8003b5a:	b09d      	sub	sp, #116	; 0x74
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	4698      	mov	r8, r3
 8003b60:	4606      	mov	r6, r0
 8003b62:	b118      	cbz	r0, 8003b6c <_vfiprintf_r+0x18>
 8003b64:	6983      	ldr	r3, [r0, #24]
 8003b66:	b90b      	cbnz	r3, 8003b6c <_vfiprintf_r+0x18>
 8003b68:	f000 fc9a 	bl	80044a0 <__sinit>
 8003b6c:	4b89      	ldr	r3, [pc, #548]	; (8003d94 <_vfiprintf_r+0x240>)
 8003b6e:	429d      	cmp	r5, r3
 8003b70:	d11b      	bne.n	8003baa <_vfiprintf_r+0x56>
 8003b72:	6875      	ldr	r5, [r6, #4]
 8003b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b76:	07d9      	lsls	r1, r3, #31
 8003b78:	d405      	bmi.n	8003b86 <_vfiprintf_r+0x32>
 8003b7a:	89ab      	ldrh	r3, [r5, #12]
 8003b7c:	059a      	lsls	r2, r3, #22
 8003b7e:	d402      	bmi.n	8003b86 <_vfiprintf_r+0x32>
 8003b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b82:	f000 fd2b 	bl	80045dc <__retarget_lock_acquire_recursive>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	d501      	bpl.n	8003b90 <_vfiprintf_r+0x3c>
 8003b8c:	692b      	ldr	r3, [r5, #16]
 8003b8e:	b9eb      	cbnz	r3, 8003bcc <_vfiprintf_r+0x78>
 8003b90:	4629      	mov	r1, r5
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 faf4 	bl	8004180 <__swsetup_r>
 8003b98:	b1c0      	cbz	r0, 8003bcc <_vfiprintf_r+0x78>
 8003b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b9c:	07dc      	lsls	r4, r3, #31
 8003b9e:	d50e      	bpl.n	8003bbe <_vfiprintf_r+0x6a>
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba4:	b01d      	add	sp, #116	; 0x74
 8003ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003baa:	4b7b      	ldr	r3, [pc, #492]	; (8003d98 <_vfiprintf_r+0x244>)
 8003bac:	429d      	cmp	r5, r3
 8003bae:	d101      	bne.n	8003bb4 <_vfiprintf_r+0x60>
 8003bb0:	68b5      	ldr	r5, [r6, #8]
 8003bb2:	e7df      	b.n	8003b74 <_vfiprintf_r+0x20>
 8003bb4:	4b79      	ldr	r3, [pc, #484]	; (8003d9c <_vfiprintf_r+0x248>)
 8003bb6:	429d      	cmp	r5, r3
 8003bb8:	bf08      	it	eq
 8003bba:	68f5      	ldreq	r5, [r6, #12]
 8003bbc:	e7da      	b.n	8003b74 <_vfiprintf_r+0x20>
 8003bbe:	89ab      	ldrh	r3, [r5, #12]
 8003bc0:	0598      	lsls	r0, r3, #22
 8003bc2:	d4ed      	bmi.n	8003ba0 <_vfiprintf_r+0x4c>
 8003bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bc6:	f000 fd0a 	bl	80045de <__retarget_lock_release_recursive>
 8003bca:	e7e9      	b.n	8003ba0 <_vfiprintf_r+0x4c>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bda:	2330      	movs	r3, #48	; 0x30
 8003bdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003da0 <_vfiprintf_r+0x24c>
 8003be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003be4:	f04f 0901 	mov.w	r9, #1
 8003be8:	4623      	mov	r3, r4
 8003bea:	469a      	mov	sl, r3
 8003bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bf0:	b10a      	cbz	r2, 8003bf6 <_vfiprintf_r+0xa2>
 8003bf2:	2a25      	cmp	r2, #37	; 0x25
 8003bf4:	d1f9      	bne.n	8003bea <_vfiprintf_r+0x96>
 8003bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8003bfa:	d00b      	beq.n	8003c14 <_vfiprintf_r+0xc0>
 8003bfc:	465b      	mov	r3, fp
 8003bfe:	4622      	mov	r2, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	4630      	mov	r0, r6
 8003c04:	f7ff ff93 	bl	8003b2e <__sfputs_r>
 8003c08:	3001      	adds	r0, #1
 8003c0a:	f000 80aa 	beq.w	8003d62 <_vfiprintf_r+0x20e>
 8003c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c10:	445a      	add	r2, fp
 8003c12:	9209      	str	r2, [sp, #36]	; 0x24
 8003c14:	f89a 3000 	ldrb.w	r3, [sl]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80a2 	beq.w	8003d62 <_vfiprintf_r+0x20e>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c28:	f10a 0a01 	add.w	sl, sl, #1
 8003c2c:	9304      	str	r3, [sp, #16]
 8003c2e:	9307      	str	r3, [sp, #28]
 8003c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c34:	931a      	str	r3, [sp, #104]	; 0x68
 8003c36:	4654      	mov	r4, sl
 8003c38:	2205      	movs	r2, #5
 8003c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c3e:	4858      	ldr	r0, [pc, #352]	; (8003da0 <_vfiprintf_r+0x24c>)
 8003c40:	f7fc fad6 	bl	80001f0 <memchr>
 8003c44:	9a04      	ldr	r2, [sp, #16]
 8003c46:	b9d8      	cbnz	r0, 8003c80 <_vfiprintf_r+0x12c>
 8003c48:	06d1      	lsls	r1, r2, #27
 8003c4a:	bf44      	itt	mi
 8003c4c:	2320      	movmi	r3, #32
 8003c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c52:	0713      	lsls	r3, r2, #28
 8003c54:	bf44      	itt	mi
 8003c56:	232b      	movmi	r3, #43	; 0x2b
 8003c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c60:	2b2a      	cmp	r3, #42	; 0x2a
 8003c62:	d015      	beq.n	8003c90 <_vfiprintf_r+0x13c>
 8003c64:	9a07      	ldr	r2, [sp, #28]
 8003c66:	4654      	mov	r4, sl
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f04f 0c0a 	mov.w	ip, #10
 8003c6e:	4621      	mov	r1, r4
 8003c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c74:	3b30      	subs	r3, #48	; 0x30
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	d94e      	bls.n	8003d18 <_vfiprintf_r+0x1c4>
 8003c7a:	b1b0      	cbz	r0, 8003caa <_vfiprintf_r+0x156>
 8003c7c:	9207      	str	r2, [sp, #28]
 8003c7e:	e014      	b.n	8003caa <_vfiprintf_r+0x156>
 8003c80:	eba0 0308 	sub.w	r3, r0, r8
 8003c84:	fa09 f303 	lsl.w	r3, r9, r3
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	9304      	str	r3, [sp, #16]
 8003c8c:	46a2      	mov	sl, r4
 8003c8e:	e7d2      	b.n	8003c36 <_vfiprintf_r+0xe2>
 8003c90:	9b03      	ldr	r3, [sp, #12]
 8003c92:	1d19      	adds	r1, r3, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	9103      	str	r1, [sp, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bfbb      	ittet	lt
 8003c9c:	425b      	neglt	r3, r3
 8003c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8003ca2:	9307      	strge	r3, [sp, #28]
 8003ca4:	9307      	strlt	r3, [sp, #28]
 8003ca6:	bfb8      	it	lt
 8003ca8:	9204      	strlt	r2, [sp, #16]
 8003caa:	7823      	ldrb	r3, [r4, #0]
 8003cac:	2b2e      	cmp	r3, #46	; 0x2e
 8003cae:	d10c      	bne.n	8003cca <_vfiprintf_r+0x176>
 8003cb0:	7863      	ldrb	r3, [r4, #1]
 8003cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb4:	d135      	bne.n	8003d22 <_vfiprintf_r+0x1ce>
 8003cb6:	9b03      	ldr	r3, [sp, #12]
 8003cb8:	1d1a      	adds	r2, r3, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	9203      	str	r2, [sp, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bfb8      	it	lt
 8003cc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003cc6:	3402      	adds	r4, #2
 8003cc8:	9305      	str	r3, [sp, #20]
 8003cca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003db0 <_vfiprintf_r+0x25c>
 8003cce:	7821      	ldrb	r1, [r4, #0]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4650      	mov	r0, sl
 8003cd4:	f7fc fa8c 	bl	80001f0 <memchr>
 8003cd8:	b140      	cbz	r0, 8003cec <_vfiprintf_r+0x198>
 8003cda:	2340      	movs	r3, #64	; 0x40
 8003cdc:	eba0 000a 	sub.w	r0, r0, sl
 8003ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce4:	9b04      	ldr	r3, [sp, #16]
 8003ce6:	4303      	orrs	r3, r0
 8003ce8:	3401      	adds	r4, #1
 8003cea:	9304      	str	r3, [sp, #16]
 8003cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf0:	482c      	ldr	r0, [pc, #176]	; (8003da4 <_vfiprintf_r+0x250>)
 8003cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cf6:	2206      	movs	r2, #6
 8003cf8:	f7fc fa7a 	bl	80001f0 <memchr>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d03f      	beq.n	8003d80 <_vfiprintf_r+0x22c>
 8003d00:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <_vfiprintf_r+0x254>)
 8003d02:	bb1b      	cbnz	r3, 8003d4c <_vfiprintf_r+0x1f8>
 8003d04:	9b03      	ldr	r3, [sp, #12]
 8003d06:	3307      	adds	r3, #7
 8003d08:	f023 0307 	bic.w	r3, r3, #7
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	9303      	str	r3, [sp, #12]
 8003d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d12:	443b      	add	r3, r7
 8003d14:	9309      	str	r3, [sp, #36]	; 0x24
 8003d16:	e767      	b.n	8003be8 <_vfiprintf_r+0x94>
 8003d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	2001      	movs	r0, #1
 8003d20:	e7a5      	b.n	8003c6e <_vfiprintf_r+0x11a>
 8003d22:	2300      	movs	r3, #0
 8003d24:	3401      	adds	r4, #1
 8003d26:	9305      	str	r3, [sp, #20]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f04f 0c0a 	mov.w	ip, #10
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d34:	3a30      	subs	r2, #48	; 0x30
 8003d36:	2a09      	cmp	r2, #9
 8003d38:	d903      	bls.n	8003d42 <_vfiprintf_r+0x1ee>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0c5      	beq.n	8003cca <_vfiprintf_r+0x176>
 8003d3e:	9105      	str	r1, [sp, #20]
 8003d40:	e7c3      	b.n	8003cca <_vfiprintf_r+0x176>
 8003d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d46:	4604      	mov	r4, r0
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e7f0      	b.n	8003d2e <_vfiprintf_r+0x1da>
 8003d4c:	ab03      	add	r3, sp, #12
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	462a      	mov	r2, r5
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <_vfiprintf_r+0x258>)
 8003d54:	a904      	add	r1, sp, #16
 8003d56:	4630      	mov	r0, r6
 8003d58:	f3af 8000 	nop.w
 8003d5c:	4607      	mov	r7, r0
 8003d5e:	1c78      	adds	r0, r7, #1
 8003d60:	d1d6      	bne.n	8003d10 <_vfiprintf_r+0x1bc>
 8003d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d64:	07d9      	lsls	r1, r3, #31
 8003d66:	d405      	bmi.n	8003d74 <_vfiprintf_r+0x220>
 8003d68:	89ab      	ldrh	r3, [r5, #12]
 8003d6a:	059a      	lsls	r2, r3, #22
 8003d6c:	d402      	bmi.n	8003d74 <_vfiprintf_r+0x220>
 8003d6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d70:	f000 fc35 	bl	80045de <__retarget_lock_release_recursive>
 8003d74:	89ab      	ldrh	r3, [r5, #12]
 8003d76:	065b      	lsls	r3, r3, #25
 8003d78:	f53f af12 	bmi.w	8003ba0 <_vfiprintf_r+0x4c>
 8003d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d7e:	e711      	b.n	8003ba4 <_vfiprintf_r+0x50>
 8003d80:	ab03      	add	r3, sp, #12
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	462a      	mov	r2, r5
 8003d86:	4b09      	ldr	r3, [pc, #36]	; (8003dac <_vfiprintf_r+0x258>)
 8003d88:	a904      	add	r1, sp, #16
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f000 f880 	bl	8003e90 <_printf_i>
 8003d90:	e7e4      	b.n	8003d5c <_vfiprintf_r+0x208>
 8003d92:	bf00      	nop
 8003d94:	08004bd4 	.word	0x08004bd4
 8003d98:	08004bf4 	.word	0x08004bf4
 8003d9c:	08004bb4 	.word	0x08004bb4
 8003da0:	08004b80 	.word	0x08004b80
 8003da4:	08004b8a 	.word	0x08004b8a
 8003da8:	00000000 	.word	0x00000000
 8003dac:	08003b2f 	.word	0x08003b2f
 8003db0:	08004b86 	.word	0x08004b86

08003db4 <_printf_common>:
 8003db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db8:	4616      	mov	r6, r2
 8003dba:	4699      	mov	r9, r3
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	690b      	ldr	r3, [r1, #16]
 8003dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	bfb8      	it	lt
 8003dc8:	4613      	movlt	r3, r2
 8003dca:	6033      	str	r3, [r6, #0]
 8003dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dd0:	4607      	mov	r7, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	b10a      	cbz	r2, 8003dda <_printf_common+0x26>
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	6033      	str	r3, [r6, #0]
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	0699      	lsls	r1, r3, #26
 8003dde:	bf42      	ittt	mi
 8003de0:	6833      	ldrmi	r3, [r6, #0]
 8003de2:	3302      	addmi	r3, #2
 8003de4:	6033      	strmi	r3, [r6, #0]
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	f015 0506 	ands.w	r5, r5, #6
 8003dec:	d106      	bne.n	8003dfc <_printf_common+0x48>
 8003dee:	f104 0a19 	add.w	sl, r4, #25
 8003df2:	68e3      	ldr	r3, [r4, #12]
 8003df4:	6832      	ldr	r2, [r6, #0]
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	42ab      	cmp	r3, r5
 8003dfa:	dc26      	bgt.n	8003e4a <_printf_common+0x96>
 8003dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e00:	1e13      	subs	r3, r2, #0
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	bf18      	it	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	0692      	lsls	r2, r2, #26
 8003e0a:	d42b      	bmi.n	8003e64 <_printf_common+0xb0>
 8003e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e10:	4649      	mov	r1, r9
 8003e12:	4638      	mov	r0, r7
 8003e14:	47c0      	blx	r8
 8003e16:	3001      	adds	r0, #1
 8003e18:	d01e      	beq.n	8003e58 <_printf_common+0xa4>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	68e5      	ldr	r5, [r4, #12]
 8003e1e:	6832      	ldr	r2, [r6, #0]
 8003e20:	f003 0306 	and.w	r3, r3, #6
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	bf08      	it	eq
 8003e28:	1aad      	subeq	r5, r5, r2
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	6922      	ldr	r2, [r4, #16]
 8003e2e:	bf0c      	ite	eq
 8003e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e34:	2500      	movne	r5, #0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bfc4      	itt	gt
 8003e3a:	1a9b      	subgt	r3, r3, r2
 8003e3c:	18ed      	addgt	r5, r5, r3
 8003e3e:	2600      	movs	r6, #0
 8003e40:	341a      	adds	r4, #26
 8003e42:	42b5      	cmp	r5, r6
 8003e44:	d11a      	bne.n	8003e7c <_printf_common+0xc8>
 8003e46:	2000      	movs	r0, #0
 8003e48:	e008      	b.n	8003e5c <_printf_common+0xa8>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4652      	mov	r2, sl
 8003e4e:	4649      	mov	r1, r9
 8003e50:	4638      	mov	r0, r7
 8003e52:	47c0      	blx	r8
 8003e54:	3001      	adds	r0, #1
 8003e56:	d103      	bne.n	8003e60 <_printf_common+0xac>
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e60:	3501      	adds	r5, #1
 8003e62:	e7c6      	b.n	8003df2 <_printf_common+0x3e>
 8003e64:	18e1      	adds	r1, r4, r3
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	2030      	movs	r0, #48	; 0x30
 8003e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e6e:	4422      	add	r2, r4
 8003e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e78:	3302      	adds	r3, #2
 8003e7a:	e7c7      	b.n	8003e0c <_printf_common+0x58>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	4622      	mov	r2, r4
 8003e80:	4649      	mov	r1, r9
 8003e82:	4638      	mov	r0, r7
 8003e84:	47c0      	blx	r8
 8003e86:	3001      	adds	r0, #1
 8003e88:	d0e6      	beq.n	8003e58 <_printf_common+0xa4>
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	e7d9      	b.n	8003e42 <_printf_common+0x8e>
	...

08003e90 <_printf_i>:
 8003e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	7e0f      	ldrb	r7, [r1, #24]
 8003e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e98:	2f78      	cmp	r7, #120	; 0x78
 8003e9a:	4691      	mov	r9, r2
 8003e9c:	4680      	mov	r8, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	469a      	mov	sl, r3
 8003ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ea6:	d807      	bhi.n	8003eb8 <_printf_i+0x28>
 8003ea8:	2f62      	cmp	r7, #98	; 0x62
 8003eaa:	d80a      	bhi.n	8003ec2 <_printf_i+0x32>
 8003eac:	2f00      	cmp	r7, #0
 8003eae:	f000 80d8 	beq.w	8004062 <_printf_i+0x1d2>
 8003eb2:	2f58      	cmp	r7, #88	; 0x58
 8003eb4:	f000 80a3 	beq.w	8003ffe <_printf_i+0x16e>
 8003eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ec0:	e03a      	b.n	8003f38 <_printf_i+0xa8>
 8003ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ec6:	2b15      	cmp	r3, #21
 8003ec8:	d8f6      	bhi.n	8003eb8 <_printf_i+0x28>
 8003eca:	a101      	add	r1, pc, #4	; (adr r1, 8003ed0 <_printf_i+0x40>)
 8003ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003eb9 	.word	0x08003eb9
 8003edc:	08003eb9 	.word	0x08003eb9
 8003ee0:	08003eb9 	.word	0x08003eb9
 8003ee4:	08003eb9 	.word	0x08003eb9
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003eb9 	.word	0x08003eb9
 8003ef0:	08003eb9 	.word	0x08003eb9
 8003ef4:	08003eb9 	.word	0x08003eb9
 8003ef8:	08003eb9 	.word	0x08003eb9
 8003efc:	08004049 	.word	0x08004049
 8003f00:	08003f6d 	.word	0x08003f6d
 8003f04:	0800402b 	.word	0x0800402b
 8003f08:	08003eb9 	.word	0x08003eb9
 8003f0c:	08003eb9 	.word	0x08003eb9
 8003f10:	0800406b 	.word	0x0800406b
 8003f14:	08003eb9 	.word	0x08003eb9
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003eb9 	.word	0x08003eb9
 8003f20:	08003eb9 	.word	0x08003eb9
 8003f24:	08004033 	.word	0x08004033
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	602a      	str	r2, [r5, #0]
 8003f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0a3      	b.n	8004084 <_printf_i+0x1f4>
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	6829      	ldr	r1, [r5, #0]
 8003f40:	0606      	lsls	r6, r0, #24
 8003f42:	f101 0304 	add.w	r3, r1, #4
 8003f46:	d50a      	bpl.n	8003f5e <_printf_i+0xce>
 8003f48:	680e      	ldr	r6, [r1, #0]
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	2e00      	cmp	r6, #0
 8003f4e:	da03      	bge.n	8003f58 <_printf_i+0xc8>
 8003f50:	232d      	movs	r3, #45	; 0x2d
 8003f52:	4276      	negs	r6, r6
 8003f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f58:	485e      	ldr	r0, [pc, #376]	; (80040d4 <_printf_i+0x244>)
 8003f5a:	230a      	movs	r3, #10
 8003f5c:	e019      	b.n	8003f92 <_printf_i+0x102>
 8003f5e:	680e      	ldr	r6, [r1, #0]
 8003f60:	602b      	str	r3, [r5, #0]
 8003f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f66:	bf18      	it	ne
 8003f68:	b236      	sxthne	r6, r6
 8003f6a:	e7ef      	b.n	8003f4c <_printf_i+0xbc>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	1d19      	adds	r1, r3, #4
 8003f72:	6029      	str	r1, [r5, #0]
 8003f74:	0601      	lsls	r1, r0, #24
 8003f76:	d501      	bpl.n	8003f7c <_printf_i+0xec>
 8003f78:	681e      	ldr	r6, [r3, #0]
 8003f7a:	e002      	b.n	8003f82 <_printf_i+0xf2>
 8003f7c:	0646      	lsls	r6, r0, #25
 8003f7e:	d5fb      	bpl.n	8003f78 <_printf_i+0xe8>
 8003f80:	881e      	ldrh	r6, [r3, #0]
 8003f82:	4854      	ldr	r0, [pc, #336]	; (80040d4 <_printf_i+0x244>)
 8003f84:	2f6f      	cmp	r7, #111	; 0x6f
 8003f86:	bf0c      	ite	eq
 8003f88:	2308      	moveq	r3, #8
 8003f8a:	230a      	movne	r3, #10
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f92:	6865      	ldr	r5, [r4, #4]
 8003f94:	60a5      	str	r5, [r4, #8]
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	bfa2      	ittt	ge
 8003f9a:	6821      	ldrge	r1, [r4, #0]
 8003f9c:	f021 0104 	bicge.w	r1, r1, #4
 8003fa0:	6021      	strge	r1, [r4, #0]
 8003fa2:	b90e      	cbnz	r6, 8003fa8 <_printf_i+0x118>
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	d04d      	beq.n	8004044 <_printf_i+0x1b4>
 8003fa8:	4615      	mov	r5, r2
 8003faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fae:	fb03 6711 	mls	r7, r3, r1, r6
 8003fb2:	5dc7      	ldrb	r7, [r0, r7]
 8003fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fb8:	4637      	mov	r7, r6
 8003fba:	42bb      	cmp	r3, r7
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	d9f4      	bls.n	8003faa <_printf_i+0x11a>
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d10b      	bne.n	8003fdc <_printf_i+0x14c>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	07de      	lsls	r6, r3, #31
 8003fc8:	d508      	bpl.n	8003fdc <_printf_i+0x14c>
 8003fca:	6923      	ldr	r3, [r4, #16]
 8003fcc:	6861      	ldr	r1, [r4, #4]
 8003fce:	4299      	cmp	r1, r3
 8003fd0:	bfde      	ittt	le
 8003fd2:	2330      	movle	r3, #48	; 0x30
 8003fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fdc:	1b52      	subs	r2, r2, r5
 8003fde:	6122      	str	r2, [r4, #16]
 8003fe0:	f8cd a000 	str.w	sl, [sp]
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	aa03      	add	r2, sp, #12
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4640      	mov	r0, r8
 8003fec:	f7ff fee2 	bl	8003db4 <_printf_common>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d14c      	bne.n	800408e <_printf_i+0x1fe>
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff8:	b004      	add	sp, #16
 8003ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffe:	4835      	ldr	r0, [pc, #212]	; (80040d4 <_printf_i+0x244>)
 8004000:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004004:	6829      	ldr	r1, [r5, #0]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	f851 6b04 	ldr.w	r6, [r1], #4
 800400c:	6029      	str	r1, [r5, #0]
 800400e:	061d      	lsls	r5, r3, #24
 8004010:	d514      	bpl.n	800403c <_printf_i+0x1ac>
 8004012:	07df      	lsls	r7, r3, #31
 8004014:	bf44      	itt	mi
 8004016:	f043 0320 	orrmi.w	r3, r3, #32
 800401a:	6023      	strmi	r3, [r4, #0]
 800401c:	b91e      	cbnz	r6, 8004026 <_printf_i+0x196>
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	f023 0320 	bic.w	r3, r3, #32
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	2310      	movs	r3, #16
 8004028:	e7b0      	b.n	8003f8c <_printf_i+0xfc>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	2378      	movs	r3, #120	; 0x78
 8004034:	4828      	ldr	r0, [pc, #160]	; (80040d8 <_printf_i+0x248>)
 8004036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800403a:	e7e3      	b.n	8004004 <_printf_i+0x174>
 800403c:	0659      	lsls	r1, r3, #25
 800403e:	bf48      	it	mi
 8004040:	b2b6      	uxthmi	r6, r6
 8004042:	e7e6      	b.n	8004012 <_printf_i+0x182>
 8004044:	4615      	mov	r5, r2
 8004046:	e7bb      	b.n	8003fc0 <_printf_i+0x130>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	6826      	ldr	r6, [r4, #0]
 800404c:	6961      	ldr	r1, [r4, #20]
 800404e:	1d18      	adds	r0, r3, #4
 8004050:	6028      	str	r0, [r5, #0]
 8004052:	0635      	lsls	r5, r6, #24
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	d501      	bpl.n	800405c <_printf_i+0x1cc>
 8004058:	6019      	str	r1, [r3, #0]
 800405a:	e002      	b.n	8004062 <_printf_i+0x1d2>
 800405c:	0670      	lsls	r0, r6, #25
 800405e:	d5fb      	bpl.n	8004058 <_printf_i+0x1c8>
 8004060:	8019      	strh	r1, [r3, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	6123      	str	r3, [r4, #16]
 8004066:	4615      	mov	r5, r2
 8004068:	e7ba      	b.n	8003fe0 <_printf_i+0x150>
 800406a:	682b      	ldr	r3, [r5, #0]
 800406c:	1d1a      	adds	r2, r3, #4
 800406e:	602a      	str	r2, [r5, #0]
 8004070:	681d      	ldr	r5, [r3, #0]
 8004072:	6862      	ldr	r2, [r4, #4]
 8004074:	2100      	movs	r1, #0
 8004076:	4628      	mov	r0, r5
 8004078:	f7fc f8ba 	bl	80001f0 <memchr>
 800407c:	b108      	cbz	r0, 8004082 <_printf_i+0x1f2>
 800407e:	1b40      	subs	r0, r0, r5
 8004080:	6060      	str	r0, [r4, #4]
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	2300      	movs	r3, #0
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408c:	e7a8      	b.n	8003fe0 <_printf_i+0x150>
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	462a      	mov	r2, r5
 8004092:	4649      	mov	r1, r9
 8004094:	4640      	mov	r0, r8
 8004096:	47d0      	blx	sl
 8004098:	3001      	adds	r0, #1
 800409a:	d0ab      	beq.n	8003ff4 <_printf_i+0x164>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	079b      	lsls	r3, r3, #30
 80040a0:	d413      	bmi.n	80040ca <_printf_i+0x23a>
 80040a2:	68e0      	ldr	r0, [r4, #12]
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	4298      	cmp	r0, r3
 80040a8:	bfb8      	it	lt
 80040aa:	4618      	movlt	r0, r3
 80040ac:	e7a4      	b.n	8003ff8 <_printf_i+0x168>
 80040ae:	2301      	movs	r3, #1
 80040b0:	4632      	mov	r2, r6
 80040b2:	4649      	mov	r1, r9
 80040b4:	4640      	mov	r0, r8
 80040b6:	47d0      	blx	sl
 80040b8:	3001      	adds	r0, #1
 80040ba:	d09b      	beq.n	8003ff4 <_printf_i+0x164>
 80040bc:	3501      	adds	r5, #1
 80040be:	68e3      	ldr	r3, [r4, #12]
 80040c0:	9903      	ldr	r1, [sp, #12]
 80040c2:	1a5b      	subs	r3, r3, r1
 80040c4:	42ab      	cmp	r3, r5
 80040c6:	dcf2      	bgt.n	80040ae <_printf_i+0x21e>
 80040c8:	e7eb      	b.n	80040a2 <_printf_i+0x212>
 80040ca:	2500      	movs	r5, #0
 80040cc:	f104 0619 	add.w	r6, r4, #25
 80040d0:	e7f5      	b.n	80040be <_printf_i+0x22e>
 80040d2:	bf00      	nop
 80040d4:	08004b91 	.word	0x08004b91
 80040d8:	08004ba2 	.word	0x08004ba2

080040dc <__swbuf_r>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	460e      	mov	r6, r1
 80040e0:	4614      	mov	r4, r2
 80040e2:	4605      	mov	r5, r0
 80040e4:	b118      	cbz	r0, 80040ee <__swbuf_r+0x12>
 80040e6:	6983      	ldr	r3, [r0, #24]
 80040e8:	b90b      	cbnz	r3, 80040ee <__swbuf_r+0x12>
 80040ea:	f000 f9d9 	bl	80044a0 <__sinit>
 80040ee:	4b21      	ldr	r3, [pc, #132]	; (8004174 <__swbuf_r+0x98>)
 80040f0:	429c      	cmp	r4, r3
 80040f2:	d12b      	bne.n	800414c <__swbuf_r+0x70>
 80040f4:	686c      	ldr	r4, [r5, #4]
 80040f6:	69a3      	ldr	r3, [r4, #24]
 80040f8:	60a3      	str	r3, [r4, #8]
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	071a      	lsls	r2, r3, #28
 80040fe:	d52f      	bpl.n	8004160 <__swbuf_r+0x84>
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	b36b      	cbz	r3, 8004160 <__swbuf_r+0x84>
 8004104:	6923      	ldr	r3, [r4, #16]
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	1ac0      	subs	r0, r0, r3
 800410a:	6963      	ldr	r3, [r4, #20]
 800410c:	b2f6      	uxtb	r6, r6
 800410e:	4283      	cmp	r3, r0
 8004110:	4637      	mov	r7, r6
 8004112:	dc04      	bgt.n	800411e <__swbuf_r+0x42>
 8004114:	4621      	mov	r1, r4
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f92e 	bl	8004378 <_fflush_r>
 800411c:	bb30      	cbnz	r0, 800416c <__swbuf_r+0x90>
 800411e:	68a3      	ldr	r3, [r4, #8]
 8004120:	3b01      	subs	r3, #1
 8004122:	60a3      	str	r3, [r4, #8]
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	6022      	str	r2, [r4, #0]
 800412a:	701e      	strb	r6, [r3, #0]
 800412c:	6963      	ldr	r3, [r4, #20]
 800412e:	3001      	adds	r0, #1
 8004130:	4283      	cmp	r3, r0
 8004132:	d004      	beq.n	800413e <__swbuf_r+0x62>
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	07db      	lsls	r3, r3, #31
 8004138:	d506      	bpl.n	8004148 <__swbuf_r+0x6c>
 800413a:	2e0a      	cmp	r6, #10
 800413c:	d104      	bne.n	8004148 <__swbuf_r+0x6c>
 800413e:	4621      	mov	r1, r4
 8004140:	4628      	mov	r0, r5
 8004142:	f000 f919 	bl	8004378 <_fflush_r>
 8004146:	b988      	cbnz	r0, 800416c <__swbuf_r+0x90>
 8004148:	4638      	mov	r0, r7
 800414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <__swbuf_r+0x9c>)
 800414e:	429c      	cmp	r4, r3
 8004150:	d101      	bne.n	8004156 <__swbuf_r+0x7a>
 8004152:	68ac      	ldr	r4, [r5, #8]
 8004154:	e7cf      	b.n	80040f6 <__swbuf_r+0x1a>
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <__swbuf_r+0xa0>)
 8004158:	429c      	cmp	r4, r3
 800415a:	bf08      	it	eq
 800415c:	68ec      	ldreq	r4, [r5, #12]
 800415e:	e7ca      	b.n	80040f6 <__swbuf_r+0x1a>
 8004160:	4621      	mov	r1, r4
 8004162:	4628      	mov	r0, r5
 8004164:	f000 f80c 	bl	8004180 <__swsetup_r>
 8004168:	2800      	cmp	r0, #0
 800416a:	d0cb      	beq.n	8004104 <__swbuf_r+0x28>
 800416c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004170:	e7ea      	b.n	8004148 <__swbuf_r+0x6c>
 8004172:	bf00      	nop
 8004174:	08004bd4 	.word	0x08004bd4
 8004178:	08004bf4 	.word	0x08004bf4
 800417c:	08004bb4 	.word	0x08004bb4

08004180 <__swsetup_r>:
 8004180:	4b32      	ldr	r3, [pc, #200]	; (800424c <__swsetup_r+0xcc>)
 8004182:	b570      	push	{r4, r5, r6, lr}
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	4606      	mov	r6, r0
 8004188:	460c      	mov	r4, r1
 800418a:	b125      	cbz	r5, 8004196 <__swsetup_r+0x16>
 800418c:	69ab      	ldr	r3, [r5, #24]
 800418e:	b913      	cbnz	r3, 8004196 <__swsetup_r+0x16>
 8004190:	4628      	mov	r0, r5
 8004192:	f000 f985 	bl	80044a0 <__sinit>
 8004196:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <__swsetup_r+0xd0>)
 8004198:	429c      	cmp	r4, r3
 800419a:	d10f      	bne.n	80041bc <__swsetup_r+0x3c>
 800419c:	686c      	ldr	r4, [r5, #4]
 800419e:	89a3      	ldrh	r3, [r4, #12]
 80041a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041a4:	0719      	lsls	r1, r3, #28
 80041a6:	d42c      	bmi.n	8004202 <__swsetup_r+0x82>
 80041a8:	06dd      	lsls	r5, r3, #27
 80041aa:	d411      	bmi.n	80041d0 <__swsetup_r+0x50>
 80041ac:	2309      	movs	r3, #9
 80041ae:	6033      	str	r3, [r6, #0]
 80041b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041b4:	81a3      	strh	r3, [r4, #12]
 80041b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ba:	e03e      	b.n	800423a <__swsetup_r+0xba>
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <__swsetup_r+0xd4>)
 80041be:	429c      	cmp	r4, r3
 80041c0:	d101      	bne.n	80041c6 <__swsetup_r+0x46>
 80041c2:	68ac      	ldr	r4, [r5, #8]
 80041c4:	e7eb      	b.n	800419e <__swsetup_r+0x1e>
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <__swsetup_r+0xd8>)
 80041c8:	429c      	cmp	r4, r3
 80041ca:	bf08      	it	eq
 80041cc:	68ec      	ldreq	r4, [r5, #12]
 80041ce:	e7e6      	b.n	800419e <__swsetup_r+0x1e>
 80041d0:	0758      	lsls	r0, r3, #29
 80041d2:	d512      	bpl.n	80041fa <__swsetup_r+0x7a>
 80041d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041d6:	b141      	cbz	r1, 80041ea <__swsetup_r+0x6a>
 80041d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041dc:	4299      	cmp	r1, r3
 80041de:	d002      	beq.n	80041e6 <__swsetup_r+0x66>
 80041e0:	4630      	mov	r0, r6
 80041e2:	f000 fa63 	bl	80046ac <_free_r>
 80041e6:	2300      	movs	r3, #0
 80041e8:	6363      	str	r3, [r4, #52]	; 0x34
 80041ea:	89a3      	ldrh	r3, [r4, #12]
 80041ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	2300      	movs	r3, #0
 80041f4:	6063      	str	r3, [r4, #4]
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0308 	orr.w	r3, r3, #8
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	b94b      	cbnz	r3, 800421a <__swsetup_r+0x9a>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800420c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004210:	d003      	beq.n	800421a <__swsetup_r+0x9a>
 8004212:	4621      	mov	r1, r4
 8004214:	4630      	mov	r0, r6
 8004216:	f000 fa09 	bl	800462c <__smakebuf_r>
 800421a:	89a0      	ldrh	r0, [r4, #12]
 800421c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004220:	f010 0301 	ands.w	r3, r0, #1
 8004224:	d00a      	beq.n	800423c <__swsetup_r+0xbc>
 8004226:	2300      	movs	r3, #0
 8004228:	60a3      	str	r3, [r4, #8]
 800422a:	6963      	ldr	r3, [r4, #20]
 800422c:	425b      	negs	r3, r3
 800422e:	61a3      	str	r3, [r4, #24]
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	b943      	cbnz	r3, 8004246 <__swsetup_r+0xc6>
 8004234:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004238:	d1ba      	bne.n	80041b0 <__swsetup_r+0x30>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	0781      	lsls	r1, r0, #30
 800423e:	bf58      	it	pl
 8004240:	6963      	ldrpl	r3, [r4, #20]
 8004242:	60a3      	str	r3, [r4, #8]
 8004244:	e7f4      	b.n	8004230 <__swsetup_r+0xb0>
 8004246:	2000      	movs	r0, #0
 8004248:	e7f7      	b.n	800423a <__swsetup_r+0xba>
 800424a:	bf00      	nop
 800424c:	20000048 	.word	0x20000048
 8004250:	08004bd4 	.word	0x08004bd4
 8004254:	08004bf4 	.word	0x08004bf4
 8004258:	08004bb4 	.word	0x08004bb4

0800425c <abort>:
 800425c:	b508      	push	{r3, lr}
 800425e:	2006      	movs	r0, #6
 8004260:	f000 fb3c 	bl	80048dc <raise>
 8004264:	2001      	movs	r0, #1
 8004266:	f7fc fe4f 	bl	8000f08 <_exit>
	...

0800426c <__sflush_r>:
 800426c:	898a      	ldrh	r2, [r1, #12]
 800426e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004272:	4605      	mov	r5, r0
 8004274:	0710      	lsls	r0, r2, #28
 8004276:	460c      	mov	r4, r1
 8004278:	d458      	bmi.n	800432c <__sflush_r+0xc0>
 800427a:	684b      	ldr	r3, [r1, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	dc05      	bgt.n	800428c <__sflush_r+0x20>
 8004280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	dc02      	bgt.n	800428c <__sflush_r+0x20>
 8004286:	2000      	movs	r0, #0
 8004288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800428c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800428e:	2e00      	cmp	r6, #0
 8004290:	d0f9      	beq.n	8004286 <__sflush_r+0x1a>
 8004292:	2300      	movs	r3, #0
 8004294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004298:	682f      	ldr	r7, [r5, #0]
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	d032      	beq.n	8004304 <__sflush_r+0x98>
 800429e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	075a      	lsls	r2, r3, #29
 80042a4:	d505      	bpl.n	80042b2 <__sflush_r+0x46>
 80042a6:	6863      	ldr	r3, [r4, #4]
 80042a8:	1ac0      	subs	r0, r0, r3
 80042aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042ac:	b10b      	cbz	r3, 80042b2 <__sflush_r+0x46>
 80042ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042b0:	1ac0      	subs	r0, r0, r3
 80042b2:	2300      	movs	r3, #0
 80042b4:	4602      	mov	r2, r0
 80042b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042b8:	6a21      	ldr	r1, [r4, #32]
 80042ba:	4628      	mov	r0, r5
 80042bc:	47b0      	blx	r6
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	d106      	bne.n	80042d2 <__sflush_r+0x66>
 80042c4:	6829      	ldr	r1, [r5, #0]
 80042c6:	291d      	cmp	r1, #29
 80042c8:	d82c      	bhi.n	8004324 <__sflush_r+0xb8>
 80042ca:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <__sflush_r+0x108>)
 80042cc:	40ca      	lsrs	r2, r1
 80042ce:	07d6      	lsls	r6, r2, #31
 80042d0:	d528      	bpl.n	8004324 <__sflush_r+0xb8>
 80042d2:	2200      	movs	r2, #0
 80042d4:	6062      	str	r2, [r4, #4]
 80042d6:	04d9      	lsls	r1, r3, #19
 80042d8:	6922      	ldr	r2, [r4, #16]
 80042da:	6022      	str	r2, [r4, #0]
 80042dc:	d504      	bpl.n	80042e8 <__sflush_r+0x7c>
 80042de:	1c42      	adds	r2, r0, #1
 80042e0:	d101      	bne.n	80042e6 <__sflush_r+0x7a>
 80042e2:	682b      	ldr	r3, [r5, #0]
 80042e4:	b903      	cbnz	r3, 80042e8 <__sflush_r+0x7c>
 80042e6:	6560      	str	r0, [r4, #84]	; 0x54
 80042e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ea:	602f      	str	r7, [r5, #0]
 80042ec:	2900      	cmp	r1, #0
 80042ee:	d0ca      	beq.n	8004286 <__sflush_r+0x1a>
 80042f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042f4:	4299      	cmp	r1, r3
 80042f6:	d002      	beq.n	80042fe <__sflush_r+0x92>
 80042f8:	4628      	mov	r0, r5
 80042fa:	f000 f9d7 	bl	80046ac <_free_r>
 80042fe:	2000      	movs	r0, #0
 8004300:	6360      	str	r0, [r4, #52]	; 0x34
 8004302:	e7c1      	b.n	8004288 <__sflush_r+0x1c>
 8004304:	6a21      	ldr	r1, [r4, #32]
 8004306:	2301      	movs	r3, #1
 8004308:	4628      	mov	r0, r5
 800430a:	47b0      	blx	r6
 800430c:	1c41      	adds	r1, r0, #1
 800430e:	d1c7      	bne.n	80042a0 <__sflush_r+0x34>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0c4      	beq.n	80042a0 <__sflush_r+0x34>
 8004316:	2b1d      	cmp	r3, #29
 8004318:	d001      	beq.n	800431e <__sflush_r+0xb2>
 800431a:	2b16      	cmp	r3, #22
 800431c:	d101      	bne.n	8004322 <__sflush_r+0xb6>
 800431e:	602f      	str	r7, [r5, #0]
 8004320:	e7b1      	b.n	8004286 <__sflush_r+0x1a>
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004328:	81a3      	strh	r3, [r4, #12]
 800432a:	e7ad      	b.n	8004288 <__sflush_r+0x1c>
 800432c:	690f      	ldr	r7, [r1, #16]
 800432e:	2f00      	cmp	r7, #0
 8004330:	d0a9      	beq.n	8004286 <__sflush_r+0x1a>
 8004332:	0793      	lsls	r3, r2, #30
 8004334:	680e      	ldr	r6, [r1, #0]
 8004336:	bf08      	it	eq
 8004338:	694b      	ldreq	r3, [r1, #20]
 800433a:	600f      	str	r7, [r1, #0]
 800433c:	bf18      	it	ne
 800433e:	2300      	movne	r3, #0
 8004340:	eba6 0807 	sub.w	r8, r6, r7
 8004344:	608b      	str	r3, [r1, #8]
 8004346:	f1b8 0f00 	cmp.w	r8, #0
 800434a:	dd9c      	ble.n	8004286 <__sflush_r+0x1a>
 800434c:	6a21      	ldr	r1, [r4, #32]
 800434e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004350:	4643      	mov	r3, r8
 8004352:	463a      	mov	r2, r7
 8004354:	4628      	mov	r0, r5
 8004356:	47b0      	blx	r6
 8004358:	2800      	cmp	r0, #0
 800435a:	dc06      	bgt.n	800436a <__sflush_r+0xfe>
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004368:	e78e      	b.n	8004288 <__sflush_r+0x1c>
 800436a:	4407      	add	r7, r0
 800436c:	eba8 0800 	sub.w	r8, r8, r0
 8004370:	e7e9      	b.n	8004346 <__sflush_r+0xda>
 8004372:	bf00      	nop
 8004374:	20400001 	.word	0x20400001

08004378 <_fflush_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	690b      	ldr	r3, [r1, #16]
 800437c:	4605      	mov	r5, r0
 800437e:	460c      	mov	r4, r1
 8004380:	b913      	cbnz	r3, 8004388 <_fflush_r+0x10>
 8004382:	2500      	movs	r5, #0
 8004384:	4628      	mov	r0, r5
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	b118      	cbz	r0, 8004392 <_fflush_r+0x1a>
 800438a:	6983      	ldr	r3, [r0, #24]
 800438c:	b90b      	cbnz	r3, 8004392 <_fflush_r+0x1a>
 800438e:	f000 f887 	bl	80044a0 <__sinit>
 8004392:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <_fflush_r+0x6c>)
 8004394:	429c      	cmp	r4, r3
 8004396:	d11b      	bne.n	80043d0 <_fflush_r+0x58>
 8004398:	686c      	ldr	r4, [r5, #4]
 800439a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0ef      	beq.n	8004382 <_fflush_r+0xa>
 80043a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043a4:	07d0      	lsls	r0, r2, #31
 80043a6:	d404      	bmi.n	80043b2 <_fflush_r+0x3a>
 80043a8:	0599      	lsls	r1, r3, #22
 80043aa:	d402      	bmi.n	80043b2 <_fflush_r+0x3a>
 80043ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ae:	f000 f915 	bl	80045dc <__retarget_lock_acquire_recursive>
 80043b2:	4628      	mov	r0, r5
 80043b4:	4621      	mov	r1, r4
 80043b6:	f7ff ff59 	bl	800426c <__sflush_r>
 80043ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043bc:	07da      	lsls	r2, r3, #31
 80043be:	4605      	mov	r5, r0
 80043c0:	d4e0      	bmi.n	8004384 <_fflush_r+0xc>
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	059b      	lsls	r3, r3, #22
 80043c6:	d4dd      	bmi.n	8004384 <_fflush_r+0xc>
 80043c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ca:	f000 f908 	bl	80045de <__retarget_lock_release_recursive>
 80043ce:	e7d9      	b.n	8004384 <_fflush_r+0xc>
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <_fflush_r+0x70>)
 80043d2:	429c      	cmp	r4, r3
 80043d4:	d101      	bne.n	80043da <_fflush_r+0x62>
 80043d6:	68ac      	ldr	r4, [r5, #8]
 80043d8:	e7df      	b.n	800439a <_fflush_r+0x22>
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <_fflush_r+0x74>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	bf08      	it	eq
 80043e0:	68ec      	ldreq	r4, [r5, #12]
 80043e2:	e7da      	b.n	800439a <_fflush_r+0x22>
 80043e4:	08004bd4 	.word	0x08004bd4
 80043e8:	08004bf4 	.word	0x08004bf4
 80043ec:	08004bb4 	.word	0x08004bb4

080043f0 <std>:
 80043f0:	2300      	movs	r3, #0
 80043f2:	b510      	push	{r4, lr}
 80043f4:	4604      	mov	r4, r0
 80043f6:	e9c0 3300 	strd	r3, r3, [r0]
 80043fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043fe:	6083      	str	r3, [r0, #8]
 8004400:	8181      	strh	r1, [r0, #12]
 8004402:	6643      	str	r3, [r0, #100]	; 0x64
 8004404:	81c2      	strh	r2, [r0, #14]
 8004406:	6183      	str	r3, [r0, #24]
 8004408:	4619      	mov	r1, r3
 800440a:	2208      	movs	r2, #8
 800440c:	305c      	adds	r0, #92	; 0x5c
 800440e:	f7ff fb6f 	bl	8003af0 <memset>
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <std+0x38>)
 8004414:	6263      	str	r3, [r4, #36]	; 0x24
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <std+0x3c>)
 8004418:	62a3      	str	r3, [r4, #40]	; 0x28
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <std+0x40>)
 800441c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <std+0x44>)
 8004420:	6224      	str	r4, [r4, #32]
 8004422:	6323      	str	r3, [r4, #48]	; 0x30
 8004424:	bd10      	pop	{r4, pc}
 8004426:	bf00      	nop
 8004428:	08004915 	.word	0x08004915
 800442c:	08004937 	.word	0x08004937
 8004430:	0800496f 	.word	0x0800496f
 8004434:	08004993 	.word	0x08004993

08004438 <_cleanup_r>:
 8004438:	4901      	ldr	r1, [pc, #4]	; (8004440 <_cleanup_r+0x8>)
 800443a:	f000 b8af 	b.w	800459c <_fwalk_reent>
 800443e:	bf00      	nop
 8004440:	08004379 	.word	0x08004379

08004444 <__sfmoreglue>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	2268      	movs	r2, #104	; 0x68
 8004448:	1e4d      	subs	r5, r1, #1
 800444a:	4355      	muls	r5, r2
 800444c:	460e      	mov	r6, r1
 800444e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004452:	f000 f997 	bl	8004784 <_malloc_r>
 8004456:	4604      	mov	r4, r0
 8004458:	b140      	cbz	r0, 800446c <__sfmoreglue+0x28>
 800445a:	2100      	movs	r1, #0
 800445c:	e9c0 1600 	strd	r1, r6, [r0]
 8004460:	300c      	adds	r0, #12
 8004462:	60a0      	str	r0, [r4, #8]
 8004464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004468:	f7ff fb42 	bl	8003af0 <memset>
 800446c:	4620      	mov	r0, r4
 800446e:	bd70      	pop	{r4, r5, r6, pc}

08004470 <__sfp_lock_acquire>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__sfp_lock_acquire+0x8>)
 8004472:	f000 b8b3 	b.w	80045dc <__retarget_lock_acquire_recursive>
 8004476:	bf00      	nop
 8004478:	200008d1 	.word	0x200008d1

0800447c <__sfp_lock_release>:
 800447c:	4801      	ldr	r0, [pc, #4]	; (8004484 <__sfp_lock_release+0x8>)
 800447e:	f000 b8ae 	b.w	80045de <__retarget_lock_release_recursive>
 8004482:	bf00      	nop
 8004484:	200008d1 	.word	0x200008d1

08004488 <__sinit_lock_acquire>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__sinit_lock_acquire+0x8>)
 800448a:	f000 b8a7 	b.w	80045dc <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	200008d2 	.word	0x200008d2

08004494 <__sinit_lock_release>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__sinit_lock_release+0x8>)
 8004496:	f000 b8a2 	b.w	80045de <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	200008d2 	.word	0x200008d2

080044a0 <__sinit>:
 80044a0:	b510      	push	{r4, lr}
 80044a2:	4604      	mov	r4, r0
 80044a4:	f7ff fff0 	bl	8004488 <__sinit_lock_acquire>
 80044a8:	69a3      	ldr	r3, [r4, #24]
 80044aa:	b11b      	cbz	r3, 80044b4 <__sinit+0x14>
 80044ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b0:	f7ff bff0 	b.w	8004494 <__sinit_lock_release>
 80044b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044b8:	6523      	str	r3, [r4, #80]	; 0x50
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <__sinit+0x68>)
 80044bc:	4a13      	ldr	r2, [pc, #76]	; (800450c <__sinit+0x6c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80044c2:	42a3      	cmp	r3, r4
 80044c4:	bf04      	itt	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	61a3      	streq	r3, [r4, #24]
 80044ca:	4620      	mov	r0, r4
 80044cc:	f000 f820 	bl	8004510 <__sfp>
 80044d0:	6060      	str	r0, [r4, #4]
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 f81c 	bl	8004510 <__sfp>
 80044d8:	60a0      	str	r0, [r4, #8]
 80044da:	4620      	mov	r0, r4
 80044dc:	f000 f818 	bl	8004510 <__sfp>
 80044e0:	2200      	movs	r2, #0
 80044e2:	60e0      	str	r0, [r4, #12]
 80044e4:	2104      	movs	r1, #4
 80044e6:	6860      	ldr	r0, [r4, #4]
 80044e8:	f7ff ff82 	bl	80043f0 <std>
 80044ec:	68a0      	ldr	r0, [r4, #8]
 80044ee:	2201      	movs	r2, #1
 80044f0:	2109      	movs	r1, #9
 80044f2:	f7ff ff7d 	bl	80043f0 <std>
 80044f6:	68e0      	ldr	r0, [r4, #12]
 80044f8:	2202      	movs	r2, #2
 80044fa:	2112      	movs	r1, #18
 80044fc:	f7ff ff78 	bl	80043f0 <std>
 8004500:	2301      	movs	r3, #1
 8004502:	61a3      	str	r3, [r4, #24]
 8004504:	e7d2      	b.n	80044ac <__sinit+0xc>
 8004506:	bf00      	nop
 8004508:	08004b7c 	.word	0x08004b7c
 800450c:	08004439 	.word	0x08004439

08004510 <__sfp>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	4607      	mov	r7, r0
 8004514:	f7ff ffac 	bl	8004470 <__sfp_lock_acquire>
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <__sfp+0x84>)
 800451a:	681e      	ldr	r6, [r3, #0]
 800451c:	69b3      	ldr	r3, [r6, #24]
 800451e:	b913      	cbnz	r3, 8004526 <__sfp+0x16>
 8004520:	4630      	mov	r0, r6
 8004522:	f7ff ffbd 	bl	80044a0 <__sinit>
 8004526:	3648      	adds	r6, #72	; 0x48
 8004528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800452c:	3b01      	subs	r3, #1
 800452e:	d503      	bpl.n	8004538 <__sfp+0x28>
 8004530:	6833      	ldr	r3, [r6, #0]
 8004532:	b30b      	cbz	r3, 8004578 <__sfp+0x68>
 8004534:	6836      	ldr	r6, [r6, #0]
 8004536:	e7f7      	b.n	8004528 <__sfp+0x18>
 8004538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800453c:	b9d5      	cbnz	r5, 8004574 <__sfp+0x64>
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <__sfp+0x88>)
 8004540:	60e3      	str	r3, [r4, #12]
 8004542:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004546:	6665      	str	r5, [r4, #100]	; 0x64
 8004548:	f000 f847 	bl	80045da <__retarget_lock_init_recursive>
 800454c:	f7ff ff96 	bl	800447c <__sfp_lock_release>
 8004550:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004554:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004558:	6025      	str	r5, [r4, #0]
 800455a:	61a5      	str	r5, [r4, #24]
 800455c:	2208      	movs	r2, #8
 800455e:	4629      	mov	r1, r5
 8004560:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004564:	f7ff fac4 	bl	8003af0 <memset>
 8004568:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800456c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004570:	4620      	mov	r0, r4
 8004572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004574:	3468      	adds	r4, #104	; 0x68
 8004576:	e7d9      	b.n	800452c <__sfp+0x1c>
 8004578:	2104      	movs	r1, #4
 800457a:	4638      	mov	r0, r7
 800457c:	f7ff ff62 	bl	8004444 <__sfmoreglue>
 8004580:	4604      	mov	r4, r0
 8004582:	6030      	str	r0, [r6, #0]
 8004584:	2800      	cmp	r0, #0
 8004586:	d1d5      	bne.n	8004534 <__sfp+0x24>
 8004588:	f7ff ff78 	bl	800447c <__sfp_lock_release>
 800458c:	230c      	movs	r3, #12
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	e7ee      	b.n	8004570 <__sfp+0x60>
 8004592:	bf00      	nop
 8004594:	08004b7c 	.word	0x08004b7c
 8004598:	ffff0001 	.word	0xffff0001

0800459c <_fwalk_reent>:
 800459c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a0:	4606      	mov	r6, r0
 80045a2:	4688      	mov	r8, r1
 80045a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045a8:	2700      	movs	r7, #0
 80045aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045ae:	f1b9 0901 	subs.w	r9, r9, #1
 80045b2:	d505      	bpl.n	80045c0 <_fwalk_reent+0x24>
 80045b4:	6824      	ldr	r4, [r4, #0]
 80045b6:	2c00      	cmp	r4, #0
 80045b8:	d1f7      	bne.n	80045aa <_fwalk_reent+0xe>
 80045ba:	4638      	mov	r0, r7
 80045bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c0:	89ab      	ldrh	r3, [r5, #12]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d907      	bls.n	80045d6 <_fwalk_reent+0x3a>
 80045c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045ca:	3301      	adds	r3, #1
 80045cc:	d003      	beq.n	80045d6 <_fwalk_reent+0x3a>
 80045ce:	4629      	mov	r1, r5
 80045d0:	4630      	mov	r0, r6
 80045d2:	47c0      	blx	r8
 80045d4:	4307      	orrs	r7, r0
 80045d6:	3568      	adds	r5, #104	; 0x68
 80045d8:	e7e9      	b.n	80045ae <_fwalk_reent+0x12>

080045da <__retarget_lock_init_recursive>:
 80045da:	4770      	bx	lr

080045dc <__retarget_lock_acquire_recursive>:
 80045dc:	4770      	bx	lr

080045de <__retarget_lock_release_recursive>:
 80045de:	4770      	bx	lr

080045e0 <__swhatbuf_r>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	460e      	mov	r6, r1
 80045e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e8:	2900      	cmp	r1, #0
 80045ea:	b096      	sub	sp, #88	; 0x58
 80045ec:	4614      	mov	r4, r2
 80045ee:	461d      	mov	r5, r3
 80045f0:	da08      	bge.n	8004604 <__swhatbuf_r+0x24>
 80045f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	602a      	str	r2, [r5, #0]
 80045fa:	061a      	lsls	r2, r3, #24
 80045fc:	d410      	bmi.n	8004620 <__swhatbuf_r+0x40>
 80045fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004602:	e00e      	b.n	8004622 <__swhatbuf_r+0x42>
 8004604:	466a      	mov	r2, sp
 8004606:	f000 f9eb 	bl	80049e0 <_fstat_r>
 800460a:	2800      	cmp	r0, #0
 800460c:	dbf1      	blt.n	80045f2 <__swhatbuf_r+0x12>
 800460e:	9a01      	ldr	r2, [sp, #4]
 8004610:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004614:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004618:	425a      	negs	r2, r3
 800461a:	415a      	adcs	r2, r3
 800461c:	602a      	str	r2, [r5, #0]
 800461e:	e7ee      	b.n	80045fe <__swhatbuf_r+0x1e>
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	2000      	movs	r0, #0
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	b016      	add	sp, #88	; 0x58
 8004628:	bd70      	pop	{r4, r5, r6, pc}
	...

0800462c <__smakebuf_r>:
 800462c:	898b      	ldrh	r3, [r1, #12]
 800462e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004630:	079d      	lsls	r5, r3, #30
 8004632:	4606      	mov	r6, r0
 8004634:	460c      	mov	r4, r1
 8004636:	d507      	bpl.n	8004648 <__smakebuf_r+0x1c>
 8004638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	2301      	movs	r3, #1
 8004642:	6163      	str	r3, [r4, #20]
 8004644:	b002      	add	sp, #8
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	ab01      	add	r3, sp, #4
 800464a:	466a      	mov	r2, sp
 800464c:	f7ff ffc8 	bl	80045e0 <__swhatbuf_r>
 8004650:	9900      	ldr	r1, [sp, #0]
 8004652:	4605      	mov	r5, r0
 8004654:	4630      	mov	r0, r6
 8004656:	f000 f895 	bl	8004784 <_malloc_r>
 800465a:	b948      	cbnz	r0, 8004670 <__smakebuf_r+0x44>
 800465c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004660:	059a      	lsls	r2, r3, #22
 8004662:	d4ef      	bmi.n	8004644 <__smakebuf_r+0x18>
 8004664:	f023 0303 	bic.w	r3, r3, #3
 8004668:	f043 0302 	orr.w	r3, r3, #2
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	e7e3      	b.n	8004638 <__smakebuf_r+0xc>
 8004670:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <__smakebuf_r+0x7c>)
 8004672:	62b3      	str	r3, [r6, #40]	; 0x28
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	6020      	str	r0, [r4, #0]
 8004678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	9b00      	ldr	r3, [sp, #0]
 8004680:	6163      	str	r3, [r4, #20]
 8004682:	9b01      	ldr	r3, [sp, #4]
 8004684:	6120      	str	r0, [r4, #16]
 8004686:	b15b      	cbz	r3, 80046a0 <__smakebuf_r+0x74>
 8004688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800468c:	4630      	mov	r0, r6
 800468e:	f000 f9b9 	bl	8004a04 <_isatty_r>
 8004692:	b128      	cbz	r0, 80046a0 <__smakebuf_r+0x74>
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	81a3      	strh	r3, [r4, #12]
 80046a0:	89a0      	ldrh	r0, [r4, #12]
 80046a2:	4305      	orrs	r5, r0
 80046a4:	81a5      	strh	r5, [r4, #12]
 80046a6:	e7cd      	b.n	8004644 <__smakebuf_r+0x18>
 80046a8:	08004439 	.word	0x08004439

080046ac <_free_r>:
 80046ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046ae:	2900      	cmp	r1, #0
 80046b0:	d044      	beq.n	800473c <_free_r+0x90>
 80046b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b6:	9001      	str	r0, [sp, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f1a1 0404 	sub.w	r4, r1, #4
 80046be:	bfb8      	it	lt
 80046c0:	18e4      	addlt	r4, r4, r3
 80046c2:	f000 f9c1 	bl	8004a48 <__malloc_lock>
 80046c6:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <_free_r+0x94>)
 80046c8:	9801      	ldr	r0, [sp, #4]
 80046ca:	6813      	ldr	r3, [r2, #0]
 80046cc:	b933      	cbnz	r3, 80046dc <_free_r+0x30>
 80046ce:	6063      	str	r3, [r4, #4]
 80046d0:	6014      	str	r4, [r2, #0]
 80046d2:	b003      	add	sp, #12
 80046d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046d8:	f000 b9bc 	b.w	8004a54 <__malloc_unlock>
 80046dc:	42a3      	cmp	r3, r4
 80046de:	d908      	bls.n	80046f2 <_free_r+0x46>
 80046e0:	6825      	ldr	r5, [r4, #0]
 80046e2:	1961      	adds	r1, r4, r5
 80046e4:	428b      	cmp	r3, r1
 80046e6:	bf01      	itttt	eq
 80046e8:	6819      	ldreq	r1, [r3, #0]
 80046ea:	685b      	ldreq	r3, [r3, #4]
 80046ec:	1949      	addeq	r1, r1, r5
 80046ee:	6021      	streq	r1, [r4, #0]
 80046f0:	e7ed      	b.n	80046ce <_free_r+0x22>
 80046f2:	461a      	mov	r2, r3
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	b10b      	cbz	r3, 80046fc <_free_r+0x50>
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d9fa      	bls.n	80046f2 <_free_r+0x46>
 80046fc:	6811      	ldr	r1, [r2, #0]
 80046fe:	1855      	adds	r5, r2, r1
 8004700:	42a5      	cmp	r5, r4
 8004702:	d10b      	bne.n	800471c <_free_r+0x70>
 8004704:	6824      	ldr	r4, [r4, #0]
 8004706:	4421      	add	r1, r4
 8004708:	1854      	adds	r4, r2, r1
 800470a:	42a3      	cmp	r3, r4
 800470c:	6011      	str	r1, [r2, #0]
 800470e:	d1e0      	bne.n	80046d2 <_free_r+0x26>
 8004710:	681c      	ldr	r4, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	6053      	str	r3, [r2, #4]
 8004716:	4421      	add	r1, r4
 8004718:	6011      	str	r1, [r2, #0]
 800471a:	e7da      	b.n	80046d2 <_free_r+0x26>
 800471c:	d902      	bls.n	8004724 <_free_r+0x78>
 800471e:	230c      	movs	r3, #12
 8004720:	6003      	str	r3, [r0, #0]
 8004722:	e7d6      	b.n	80046d2 <_free_r+0x26>
 8004724:	6825      	ldr	r5, [r4, #0]
 8004726:	1961      	adds	r1, r4, r5
 8004728:	428b      	cmp	r3, r1
 800472a:	bf04      	itt	eq
 800472c:	6819      	ldreq	r1, [r3, #0]
 800472e:	685b      	ldreq	r3, [r3, #4]
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	bf04      	itt	eq
 8004734:	1949      	addeq	r1, r1, r5
 8004736:	6021      	streq	r1, [r4, #0]
 8004738:	6054      	str	r4, [r2, #4]
 800473a:	e7ca      	b.n	80046d2 <_free_r+0x26>
 800473c:	b003      	add	sp, #12
 800473e:	bd30      	pop	{r4, r5, pc}
 8004740:	200008d4 	.word	0x200008d4

08004744 <sbrk_aligned>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4e0e      	ldr	r6, [pc, #56]	; (8004780 <sbrk_aligned+0x3c>)
 8004748:	460c      	mov	r4, r1
 800474a:	6831      	ldr	r1, [r6, #0]
 800474c:	4605      	mov	r5, r0
 800474e:	b911      	cbnz	r1, 8004756 <sbrk_aligned+0x12>
 8004750:	f000 f88c 	bl	800486c <_sbrk_r>
 8004754:	6030      	str	r0, [r6, #0]
 8004756:	4621      	mov	r1, r4
 8004758:	4628      	mov	r0, r5
 800475a:	f000 f887 	bl	800486c <_sbrk_r>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	d00a      	beq.n	8004778 <sbrk_aligned+0x34>
 8004762:	1cc4      	adds	r4, r0, #3
 8004764:	f024 0403 	bic.w	r4, r4, #3
 8004768:	42a0      	cmp	r0, r4
 800476a:	d007      	beq.n	800477c <sbrk_aligned+0x38>
 800476c:	1a21      	subs	r1, r4, r0
 800476e:	4628      	mov	r0, r5
 8004770:	f000 f87c 	bl	800486c <_sbrk_r>
 8004774:	3001      	adds	r0, #1
 8004776:	d101      	bne.n	800477c <sbrk_aligned+0x38>
 8004778:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800477c:	4620      	mov	r0, r4
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	200008d8 	.word	0x200008d8

08004784 <_malloc_r>:
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	1ccd      	adds	r5, r1, #3
 800478a:	f025 0503 	bic.w	r5, r5, #3
 800478e:	3508      	adds	r5, #8
 8004790:	2d0c      	cmp	r5, #12
 8004792:	bf38      	it	cc
 8004794:	250c      	movcc	r5, #12
 8004796:	2d00      	cmp	r5, #0
 8004798:	4607      	mov	r7, r0
 800479a:	db01      	blt.n	80047a0 <_malloc_r+0x1c>
 800479c:	42a9      	cmp	r1, r5
 800479e:	d905      	bls.n	80047ac <_malloc_r+0x28>
 80047a0:	230c      	movs	r3, #12
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	2600      	movs	r6, #0
 80047a6:	4630      	mov	r0, r6
 80047a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ac:	4e2e      	ldr	r6, [pc, #184]	; (8004868 <_malloc_r+0xe4>)
 80047ae:	f000 f94b 	bl	8004a48 <__malloc_lock>
 80047b2:	6833      	ldr	r3, [r6, #0]
 80047b4:	461c      	mov	r4, r3
 80047b6:	bb34      	cbnz	r4, 8004806 <_malloc_r+0x82>
 80047b8:	4629      	mov	r1, r5
 80047ba:	4638      	mov	r0, r7
 80047bc:	f7ff ffc2 	bl	8004744 <sbrk_aligned>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	4604      	mov	r4, r0
 80047c4:	d14d      	bne.n	8004862 <_malloc_r+0xde>
 80047c6:	6834      	ldr	r4, [r6, #0]
 80047c8:	4626      	mov	r6, r4
 80047ca:	2e00      	cmp	r6, #0
 80047cc:	d140      	bne.n	8004850 <_malloc_r+0xcc>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	4631      	mov	r1, r6
 80047d2:	4638      	mov	r0, r7
 80047d4:	eb04 0803 	add.w	r8, r4, r3
 80047d8:	f000 f848 	bl	800486c <_sbrk_r>
 80047dc:	4580      	cmp	r8, r0
 80047de:	d13a      	bne.n	8004856 <_malloc_r+0xd2>
 80047e0:	6821      	ldr	r1, [r4, #0]
 80047e2:	3503      	adds	r5, #3
 80047e4:	1a6d      	subs	r5, r5, r1
 80047e6:	f025 0503 	bic.w	r5, r5, #3
 80047ea:	3508      	adds	r5, #8
 80047ec:	2d0c      	cmp	r5, #12
 80047ee:	bf38      	it	cc
 80047f0:	250c      	movcc	r5, #12
 80047f2:	4629      	mov	r1, r5
 80047f4:	4638      	mov	r0, r7
 80047f6:	f7ff ffa5 	bl	8004744 <sbrk_aligned>
 80047fa:	3001      	adds	r0, #1
 80047fc:	d02b      	beq.n	8004856 <_malloc_r+0xd2>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	442b      	add	r3, r5
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	e00e      	b.n	8004824 <_malloc_r+0xa0>
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	1b52      	subs	r2, r2, r5
 800480a:	d41e      	bmi.n	800484a <_malloc_r+0xc6>
 800480c:	2a0b      	cmp	r2, #11
 800480e:	d916      	bls.n	800483e <_malloc_r+0xba>
 8004810:	1961      	adds	r1, r4, r5
 8004812:	42a3      	cmp	r3, r4
 8004814:	6025      	str	r5, [r4, #0]
 8004816:	bf18      	it	ne
 8004818:	6059      	strne	r1, [r3, #4]
 800481a:	6863      	ldr	r3, [r4, #4]
 800481c:	bf08      	it	eq
 800481e:	6031      	streq	r1, [r6, #0]
 8004820:	5162      	str	r2, [r4, r5]
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	4638      	mov	r0, r7
 8004826:	f104 060b 	add.w	r6, r4, #11
 800482a:	f000 f913 	bl	8004a54 <__malloc_unlock>
 800482e:	f026 0607 	bic.w	r6, r6, #7
 8004832:	1d23      	adds	r3, r4, #4
 8004834:	1af2      	subs	r2, r6, r3
 8004836:	d0b6      	beq.n	80047a6 <_malloc_r+0x22>
 8004838:	1b9b      	subs	r3, r3, r6
 800483a:	50a3      	str	r3, [r4, r2]
 800483c:	e7b3      	b.n	80047a6 <_malloc_r+0x22>
 800483e:	6862      	ldr	r2, [r4, #4]
 8004840:	42a3      	cmp	r3, r4
 8004842:	bf0c      	ite	eq
 8004844:	6032      	streq	r2, [r6, #0]
 8004846:	605a      	strne	r2, [r3, #4]
 8004848:	e7ec      	b.n	8004824 <_malloc_r+0xa0>
 800484a:	4623      	mov	r3, r4
 800484c:	6864      	ldr	r4, [r4, #4]
 800484e:	e7b2      	b.n	80047b6 <_malloc_r+0x32>
 8004850:	4634      	mov	r4, r6
 8004852:	6876      	ldr	r6, [r6, #4]
 8004854:	e7b9      	b.n	80047ca <_malloc_r+0x46>
 8004856:	230c      	movs	r3, #12
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4638      	mov	r0, r7
 800485c:	f000 f8fa 	bl	8004a54 <__malloc_unlock>
 8004860:	e7a1      	b.n	80047a6 <_malloc_r+0x22>
 8004862:	6025      	str	r5, [r4, #0]
 8004864:	e7de      	b.n	8004824 <_malloc_r+0xa0>
 8004866:	bf00      	nop
 8004868:	200008d4 	.word	0x200008d4

0800486c <_sbrk_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d06      	ldr	r5, [pc, #24]	; (8004888 <_sbrk_r+0x1c>)
 8004870:	2300      	movs	r3, #0
 8004872:	4604      	mov	r4, r0
 8004874:	4608      	mov	r0, r1
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	f7fc fbbe 	bl	8000ff8 <_sbrk>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_sbrk_r+0x1a>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_sbrk_r+0x1a>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200008dc 	.word	0x200008dc

0800488c <_raise_r>:
 800488c:	291f      	cmp	r1, #31
 800488e:	b538      	push	{r3, r4, r5, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	460d      	mov	r5, r1
 8004894:	d904      	bls.n	80048a0 <_raise_r+0x14>
 8004896:	2316      	movs	r3, #22
 8004898:	6003      	str	r3, [r0, #0]
 800489a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80048a2:	b112      	cbz	r2, 80048aa <_raise_r+0x1e>
 80048a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80048a8:	b94b      	cbnz	r3, 80048be <_raise_r+0x32>
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 f830 	bl	8004910 <_getpid_r>
 80048b0:	462a      	mov	r2, r5
 80048b2:	4601      	mov	r1, r0
 80048b4:	4620      	mov	r0, r4
 80048b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ba:	f000 b817 	b.w	80048ec <_kill_r>
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d00a      	beq.n	80048d8 <_raise_r+0x4c>
 80048c2:	1c59      	adds	r1, r3, #1
 80048c4:	d103      	bne.n	80048ce <_raise_r+0x42>
 80048c6:	2316      	movs	r3, #22
 80048c8:	6003      	str	r3, [r0, #0]
 80048ca:	2001      	movs	r0, #1
 80048cc:	e7e7      	b.n	800489e <_raise_r+0x12>
 80048ce:	2400      	movs	r4, #0
 80048d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80048d4:	4628      	mov	r0, r5
 80048d6:	4798      	blx	r3
 80048d8:	2000      	movs	r0, #0
 80048da:	e7e0      	b.n	800489e <_raise_r+0x12>

080048dc <raise>:
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <raise+0xc>)
 80048de:	4601      	mov	r1, r0
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	f7ff bfd3 	b.w	800488c <_raise_r>
 80048e6:	bf00      	nop
 80048e8:	20000048 	.word	0x20000048

080048ec <_kill_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d07      	ldr	r5, [pc, #28]	; (800490c <_kill_r+0x20>)
 80048f0:	2300      	movs	r3, #0
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	f7fc faf5 	bl	8000ee8 <_kill>
 80048fe:	1c43      	adds	r3, r0, #1
 8004900:	d102      	bne.n	8004908 <_kill_r+0x1c>
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	b103      	cbz	r3, 8004908 <_kill_r+0x1c>
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	bd38      	pop	{r3, r4, r5, pc}
 800490a:	bf00      	nop
 800490c:	200008dc 	.word	0x200008dc

08004910 <_getpid_r>:
 8004910:	f7fc bae2 	b.w	8000ed8 <_getpid>

08004914 <__sread>:
 8004914:	b510      	push	{r4, lr}
 8004916:	460c      	mov	r4, r1
 8004918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491c:	f000 f8a0 	bl	8004a60 <_read_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	bfab      	itete	ge
 8004924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004926:	89a3      	ldrhlt	r3, [r4, #12]
 8004928:	181b      	addge	r3, r3, r0
 800492a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800492e:	bfac      	ite	ge
 8004930:	6563      	strge	r3, [r4, #84]	; 0x54
 8004932:	81a3      	strhlt	r3, [r4, #12]
 8004934:	bd10      	pop	{r4, pc}

08004936 <__swrite>:
 8004936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493a:	461f      	mov	r7, r3
 800493c:	898b      	ldrh	r3, [r1, #12]
 800493e:	05db      	lsls	r3, r3, #23
 8004940:	4605      	mov	r5, r0
 8004942:	460c      	mov	r4, r1
 8004944:	4616      	mov	r6, r2
 8004946:	d505      	bpl.n	8004954 <__swrite+0x1e>
 8004948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494c:	2302      	movs	r3, #2
 800494e:	2200      	movs	r2, #0
 8004950:	f000 f868 	bl	8004a24 <_lseek_r>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800495a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	4632      	mov	r2, r6
 8004962:	463b      	mov	r3, r7
 8004964:	4628      	mov	r0, r5
 8004966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800496a:	f000 b817 	b.w	800499c <_write_r>

0800496e <__sseek>:
 800496e:	b510      	push	{r4, lr}
 8004970:	460c      	mov	r4, r1
 8004972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004976:	f000 f855 	bl	8004a24 <_lseek_r>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	bf15      	itete	ne
 8004980:	6560      	strne	r0, [r4, #84]	; 0x54
 8004982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800498a:	81a3      	strheq	r3, [r4, #12]
 800498c:	bf18      	it	ne
 800498e:	81a3      	strhne	r3, [r4, #12]
 8004990:	bd10      	pop	{r4, pc}

08004992 <__sclose>:
 8004992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004996:	f000 b813 	b.w	80049c0 <_close_r>
	...

0800499c <_write_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4d07      	ldr	r5, [pc, #28]	; (80049bc <_write_r+0x20>)
 80049a0:	4604      	mov	r4, r0
 80049a2:	4608      	mov	r0, r1
 80049a4:	4611      	mov	r1, r2
 80049a6:	2200      	movs	r2, #0
 80049a8:	602a      	str	r2, [r5, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f7fc fad3 	bl	8000f56 <_write>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_write_r+0x1e>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_write_r+0x1e>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	200008dc 	.word	0x200008dc

080049c0 <_close_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d06      	ldr	r5, [pc, #24]	; (80049dc <_close_r+0x1c>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f7fc fadf 	bl	8000f8e <_close>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_close_r+0x1a>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_close_r+0x1a>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	200008dc 	.word	0x200008dc

080049e0 <_fstat_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d07      	ldr	r5, [pc, #28]	; (8004a00 <_fstat_r+0x20>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	f7fc fada 	bl	8000fa6 <_fstat>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	d102      	bne.n	80049fc <_fstat_r+0x1c>
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	b103      	cbz	r3, 80049fc <_fstat_r+0x1c>
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	bd38      	pop	{r3, r4, r5, pc}
 80049fe:	bf00      	nop
 8004a00:	200008dc 	.word	0x200008dc

08004a04 <_isatty_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d06      	ldr	r5, [pc, #24]	; (8004a20 <_isatty_r+0x1c>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	f7fc fad9 	bl	8000fc6 <_isatty>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_isatty_r+0x1a>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_isatty_r+0x1a>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	200008dc 	.word	0x200008dc

08004a24 <_lseek_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4d07      	ldr	r5, [pc, #28]	; (8004a44 <_lseek_r+0x20>)
 8004a28:	4604      	mov	r4, r0
 8004a2a:	4608      	mov	r0, r1
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	2200      	movs	r2, #0
 8004a30:	602a      	str	r2, [r5, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f7fc fad2 	bl	8000fdc <_lseek>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_lseek_r+0x1e>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_lseek_r+0x1e>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	200008dc 	.word	0x200008dc

08004a48 <__malloc_lock>:
 8004a48:	4801      	ldr	r0, [pc, #4]	; (8004a50 <__malloc_lock+0x8>)
 8004a4a:	f7ff bdc7 	b.w	80045dc <__retarget_lock_acquire_recursive>
 8004a4e:	bf00      	nop
 8004a50:	200008d0 	.word	0x200008d0

08004a54 <__malloc_unlock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	; (8004a5c <__malloc_unlock+0x8>)
 8004a56:	f7ff bdc2 	b.w	80045de <__retarget_lock_release_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	200008d0 	.word	0x200008d0

08004a60 <_read_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d07      	ldr	r5, [pc, #28]	; (8004a80 <_read_r+0x20>)
 8004a64:	4604      	mov	r4, r0
 8004a66:	4608      	mov	r0, r1
 8004a68:	4611      	mov	r1, r2
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	602a      	str	r2, [r5, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f7fc fa54 	bl	8000f1c <_read>
 8004a74:	1c43      	adds	r3, r0, #1
 8004a76:	d102      	bne.n	8004a7e <_read_r+0x1e>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	b103      	cbz	r3, 8004a7e <_read_r+0x1e>
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	200008dc 	.word	0x200008dc

08004a84 <_init>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	bf00      	nop
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr

08004a90 <_fini>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr
