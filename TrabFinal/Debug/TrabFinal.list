
TrabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fdc  08004fdc  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe4  08004fe4  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08004fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020108  2**0
                  CONTENTS
 10 .bss          00000858  20000108  20000108  00020108  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000960  20000960  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013679  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002afd  00000000  00000000  000337b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  000362b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e80  00000000  00000000  00037258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263e1  00000000  00000000  000380d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001270e  00000000  00000000  0005e4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deff6  00000000  00000000  00070bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014fbbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049b0  00000000  00000000  0014fc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004de0 	.word	0x08004de0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	08004de0 	.word	0x08004de0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b089      	sub	sp, #36	; 0x24
 8000598:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059a:	f001 f97b 	bl	8001894 <HAL_Init>

	// Inicializar la estructura de delay 'DelayDebounce,', 'delayGhost' y 'Delay3'
	// con un tiempo específico definido por 'TIME_DEBOUNCE' y'TIMEGHOST y 'TIME3'
	// Esto configura un timer, que es un contador para manejar delays. del antirrebote 
	// y de la transisión de fantasmas 
	delayInit(&DelayDebounce, TIME_DEBOUNCE);
 800059e:	2128      	movs	r1, #40	; 0x28
 80005a0:	4869      	ldr	r0, [pc, #420]	; (8000748 <main+0x1b4>)
 80005a2:	f000 fdd7 	bl	8001154 <delayInit>
	delayInit(&delayGhost, TIMEGHOST);
 80005a6:	21c8      	movs	r1, #200	; 0xc8
 80005a8:	4868      	ldr	r0, [pc, #416]	; (800074c <main+0x1b8>)
 80005aa:	f000 fdd3 	bl	8001154 <delayInit>

	// Inicializar la Máquina de Estados Finitos (FSM) para el antirrebote.
	// Esta función maneja el comportamiento de botones o
	// interruptores para asegurarse  de que una sola pulsación
	// sea leída como una, y no múltiples debido al efecto rebote.
	debounceFSM_init(&DelayDebounce);
 80005ae:	4866      	ldr	r0, [pc, #408]	; (8000748 <main+0x1b4>)
 80005b0:	f000 fd1a 	bl	8000fe8 <debounceFSM_init>

	// Inicializar la Máquina de Estados Finitos (MEF) del juego.
	// Esta función configura el estado inicial y prepare todo para que el programa
	// funcione adecuadamente con base en la lógica de la MEF.
	inicializarMEF();
 80005b4:	f001 f87a 	bl	80016ac <inicializarMEF>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005b8:	f000 f8da 	bl	8000770 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	spi_init();
 80005bc:	f000 ff04 	bl	80013c8 <spi_init>

	MX_ETH_Init();
 80005c0:	f000 f942 	bl	8000848 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80005c4:	f000 f98e 	bl	80008e4 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f9b6 	bl	8000938 <MX_USB_OTG_FS_PCD_Init>

	/* USER CODE BEGIN 2 */

	init_led();
 80005cc:	f000 fe1e 	bl	800120c <init_led>

	estado = SET_ini;
 80005d0:	4b5f      	ldr	r3, [pc, #380]	; (8000750 <main+0x1bc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	tick_t speed_play;
	/*velocidad del juego que va de menos a mayor velocidad
	 * a medida que se avanza en el juego
	 */

	tick_t level[] = { SPEED1, SPEED2, SPEED3, SPEED3 };
 80005d6:	4b5f      	ldr	r3, [pc, #380]	; (8000754 <main+0x1c0>)
 80005d8:	463c      	mov	r4, r7
 80005da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t score = SCORE_INI;  // inicializamos el contador de puntos del juego
 80005e0:	2300      	movs	r3, #0
 80005e2:	83fb      	strh	r3, [r7, #30]
	int16_t level_min = LEVEL_MIN; // establecemos una variable con el valor minimo de velocidad del juego 
 80005e4:	2300      	movs	r3, #0
 80005e6:	833b      	strh	r3, [r7, #24]
	int16_t level_i = level_min; //  establecemos ese valor minimo al valor con el que partirá el juego
 80005e8:	8b3b      	ldrh	r3, [r7, #24]
 80005ea:	83bb      	strh	r3, [r7, #28]
	int16_t level_max; // establecemos una  variable que definira la posición de la maxima velocidad 
	level_max = (int16_t) (sizeof(level) / sizeof(level[0])); // calculamos el numero maximo de velocidaddes que con que establecio el juego
 80005ec:	2304      	movs	r3, #4
 80005ee:	82fb      	strh	r3, [r7, #22]
	// inicializamos la velocidad con el nivel minimo;
	speed_play = level[level_i];
 80005f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	3320      	adds	r3, #32
 80005f8:	443b      	add	r3, r7
 80005fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80005fe:	613b      	str	r3, [r7, #16]

	delayInit(&Delay_play, speed_play);
 8000600:	6939      	ldr	r1, [r7, #16]
 8000602:	4855      	ldr	r0, [pc, #340]	; (8000758 <main+0x1c4>)
 8000604:	f000 fda6 	bl	8001154 <delayInit>

	bool_t flag;

	flag = true;
 8000608:	2301      	movs	r3, #1
 800060a:	76fb      	strb	r3, [r7, #27]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Actualizar la Máquina de Estados Finitos y obtener el estado actual.
		estado = actualizarMEF(&Delay_play);
 800060c:	4852      	ldr	r0, [pc, #328]	; (8000758 <main+0x1c4>)
 800060e:	f001 f859 	bl	80016c4 <actualizarMEF>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <main+0x1bc>)
 8000618:	701a      	strb	r2, [r3, #0]
		if (score > 5) {
 800061a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800061e:	2b05      	cmp	r3, #5
 8000620:	dd01      	ble.n	8000626 <main+0x92>
			score = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	83fb      	strh	r3, [r7, #30]
		}

		// Dependiendo del estado actual, mostrar un patrón o imagen específica en la matriz LED.
		switch (estado) {
 8000626:	4b4a      	ldr	r3, [pc, #296]	; (8000750 <main+0x1bc>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b05      	cmp	r3, #5
 800062c:	d8ee      	bhi.n	800060c <main+0x78>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <main+0xa0>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	0800064d 	.word	0x0800064d
 8000638:	0800065f 	.word	0x0800065f
 800063c:	0800066b 	.word	0x0800066b
 8000640:	08000673 	.word	0x08000673
 8000644:	0800067b 	.word	0x0800067b
 8000648:	080006df 	.word	0x080006df
		case SET_ini:
			// En caso de estar en el estado inicial, iluminar la matriz LED de alguna forma específica.
			update_led(levels_led[score]);
 800064c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000650:	4a42      	ldr	r2, [pc, #264]	; (800075c <main+0x1c8>)
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe14 	bl	8001284 <update_led>
			//lit_led();
			break;
 800065c:	e072      	b.n	8000744 <main+0x1b0>

		case FIRST:
			// En el primer estado, mostrar el patrón o imagen 'A' en la matriz LED.
			flag = true;
 800065e:	2301      	movs	r3, #1
 8000660:	76fb      	strb	r3, [r7, #27]
			update_led(A);
 8000662:	483f      	ldr	r0, [pc, #252]	; (8000760 <main+0x1cc>)
 8000664:	f000 fe0e 	bl	8001284 <update_led>
			break;
 8000668:	e06c      	b.n	8000744 <main+0x1b0>

		case SECOND:
			// En el segundo estado, mostrar el patrón o imagen 'B'.
			update_led(B);
 800066a:	483e      	ldr	r0, [pc, #248]	; (8000764 <main+0x1d0>)
 800066c:	f000 fe0a 	bl	8001284 <update_led>
			break;
 8000670:	e068      	b.n	8000744 <main+0x1b0>

		case THIRD:
			// En el tercer estado, mostrar el patrón o imagen 'C'.
			update_led(C);
 8000672:	483d      	ldr	r0, [pc, #244]	; (8000768 <main+0x1d4>)
 8000674:	f000 fe06 	bl	8001284 <update_led>
			break;
 8000678:	e064      	b.n	8000744 <main+0x1b0>

		case GOOD:
			// Si todo va bien, mostrar una cara sonriente en la matriz LED.
			update_led(smileyFace);
 800067a:	483c      	ldr	r0, [pc, #240]	; (800076c <main+0x1d8>)
 800067c:	f000 fe02 	bl	8001284 <update_led>
			if (flag) {
 8000680:	7efb      	ldrb	r3, [r7, #27]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d05b      	beq.n	800073e <main+0x1aa>
				flag = false;
 8000686:	2300      	movs	r3, #0
 8000688:	76fb      	strb	r3, [r7, #27]
				score = score + 1;
 800068a:	8bfb      	ldrh	r3, [r7, #30]
 800068c:	3301      	adds	r3, #1
 800068e:	b29b      	uxth	r3, r3
 8000690:	83fb      	strh	r3, [r7, #30]
				if (level_i >= level_max) {
 8000692:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000696:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800069a:	429a      	cmp	r2, r3
 800069c:	db0e      	blt.n	80006bc <main+0x128>
					level_i = level_min;
 800069e:	8b3b      	ldrh	r3, [r7, #24]
 80006a0:	83bb      	strh	r3, [r7, #28]
					speed_play = level[level_i];
 80006a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	3320      	adds	r3, #32
 80006aa:	443b      	add	r3, r7
 80006ac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80006b0:	613b      	str	r3, [r7, #16]
					delayInit(&Delay_play, speed_play);
 80006b2:	6939      	ldr	r1, [r7, #16]
 80006b4:	4828      	ldr	r0, [pc, #160]	; (8000758 <main+0x1c4>)
 80006b6:	f000 fd4d 	bl	8001154 <delayInit>
					delayInit(&Delay_play, speed_play);
					level_i = level_i + 1;
				}
			}

			break;
 80006ba:	e040      	b.n	800073e <main+0x1aa>
					speed_play = level[level_i];
 80006bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	3320      	adds	r3, #32
 80006c4:	443b      	add	r3, r7
 80006c6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80006ca:	613b      	str	r3, [r7, #16]
					delayInit(&Delay_play, speed_play);
 80006cc:	6939      	ldr	r1, [r7, #16]
 80006ce:	4822      	ldr	r0, [pc, #136]	; (8000758 <main+0x1c4>)
 80006d0:	f000 fd40 	bl	8001154 <delayInit>
					level_i = level_i + 1;
 80006d4:	8bbb      	ldrh	r3, [r7, #28]
 80006d6:	3301      	adds	r3, #1
 80006d8:	b29b      	uxth	r3, r3
 80006da:	83bb      	strh	r3, [r7, #28]
			break;
 80006dc:	e02f      	b.n	800073e <main+0x1aa>

		case BAD:
			// En caso de perder muestra la imagen de fantasma
			fantasma_led(&delayGhost);
 80006de:	481b      	ldr	r0, [pc, #108]	; (800074c <main+0x1b8>)
 80006e0:	f000 fdf0 	bl	80012c4 <fantasma_led>
			if (flag) {
 80006e4:	7efb      	ldrb	r3, [r7, #27]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d02b      	beq.n	8000742 <main+0x1ae>
				score = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	83fb      	strh	r3, [r7, #30]
				flag = false;
 80006ee:	2300      	movs	r3, #0
 80006f0:	76fb      	strb	r3, [r7, #27]
				if (level_i >= level_max) {
 80006f2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80006f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	db0e      	blt.n	800071c <main+0x188>
					level_i = level_min;
 80006fe:	8b3b      	ldrh	r3, [r7, #24]
 8000700:	83bb      	strh	r3, [r7, #28]
					speed_play = level[level_i];
 8000702:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	3320      	adds	r3, #32
 800070a:	443b      	add	r3, r7
 800070c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000710:	613b      	str	r3, [r7, #16]
					delayInit(&Delay_play, speed_play);
 8000712:	6939      	ldr	r1, [r7, #16]
 8000714:	4810      	ldr	r0, [pc, #64]	; (8000758 <main+0x1c4>)
 8000716:	f000 fd1d 	bl	8001154 <delayInit>
					speed_play = level[level_i];
					delayInit(&Delay_play, speed_play);
					level_i = level_i + 1;
				}
			}
			break;
 800071a:	e012      	b.n	8000742 <main+0x1ae>
					speed_play = level[level_i];
 800071c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	3320      	adds	r3, #32
 8000724:	443b      	add	r3, r7
 8000726:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800072a:	613b      	str	r3, [r7, #16]
					delayInit(&Delay_play, speed_play);
 800072c:	6939      	ldr	r1, [r7, #16]
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <main+0x1c4>)
 8000730:	f000 fd10 	bl	8001154 <delayInit>
					level_i = level_i + 1;
 8000734:	8bbb      	ldrh	r3, [r7, #28]
 8000736:	3301      	adds	r3, #1
 8000738:	b29b      	uxth	r3, r3
 800073a:	83bb      	strh	r3, [r7, #28]
			break;
 800073c:	e001      	b.n	8000742 <main+0x1ae>
			break;
 800073e:	bf00      	nop
 8000740:	e764      	b.n	800060c <main+0x78>
			break;
 8000742:	bf00      	nop
		estado = actualizarMEF(&Delay_play);
 8000744:	e762      	b.n	800060c <main+0x78>
 8000746:	bf00      	nop
 8000748:	200008b0 	.word	0x200008b0
 800074c:	200008bc 	.word	0x200008bc
 8000750:	200008c8 	.word	0x200008c8
 8000754:	08004df8 	.word	0x08004df8
 8000758:	200008a4 	.word	0x200008a4
 800075c:	20000048 	.word	0x20000048
 8000760:	20000008 	.word	0x20000008
 8000764:	20000010 	.word	0x20000010
 8000768:	20000018 	.word	0x20000018
 800076c:	20000000 	.word	0x20000000

08000770 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fb64 	bl	8003e4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <SystemClock_Config+0xd0>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <SystemClock_Config+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <SystemClock_Config+0xd4>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80007e8:	2348      	movs	r3, #72	; 0x48
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 ffe9 	bl	80027d0 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x98>
		Error_Handler();
 8000804:	f000 f8c6 	bl	8000994 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fa4a 	bl	8002cc0 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xc6>
		Error_Handler();
 8000832:	f000 f8af 	bl	8000994 <Error_Handler>
	}
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ETH_Init+0x84>)
 800084e:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <MX_ETH_Init+0x88>)
 8000850:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_ETH_Init+0x8c>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000860:	22e1      	movs	r2, #225	; 0xe1
 8000862:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000866:	2200      	movs	r2, #0
 8000868:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_ETH_Init+0x8c>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000872:	2200      	movs	r2, #0
 8000874:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_ETH_Init+0x84>)
 8000878:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <MX_ETH_Init+0x8c>)
 800087a:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ETH_Init+0x84>)
 800087e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000882:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_ETH_Init+0x84>)
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <MX_ETH_Init+0x90>)
 8000888:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_ETH_Init+0x84>)
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_ETH_Init+0x94>)
 800088e:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_ETH_Init+0x84>)
 8000892:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000896:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_ETH_Init+0x84>)
 800089a:	f001 f977 	bl	8001b8c <HAL_ETH_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ETH_Init+0x60>
		Error_Handler();
 80008a4:	f000 f876 	bl	8000994 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80008a8:	2238      	movs	r2, #56	; 0x38
 80008aa:	2100      	movs	r1, #0
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_ETH_Init+0x98>)
 80008ae:	f003 facd 	bl	8003e4c <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_ETH_Init+0x98>)
 80008b4:	2221      	movs	r2, #33	; 0x21
 80008b6:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_ETH_Init+0x98>)
 80008ba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008be:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_ETH_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200002a4 	.word	0x200002a4
 80008d0:	40028000 	.word	0x40028000
 80008d4:	200008cc 	.word	0x200008cc
 80008d8:	20000204 	.word	0x20000204
 80008dc:	20000164 	.word	0x20000164
 80008e0:	2000012c 	.word	0x2000012c

080008e4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_USART3_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 800091c:	f002 fc79 	bl	8003212 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000926:	f000 f835 	bl	8000994 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000354 	.word	0x20000354
 8000934:	40004800 	.word	0x40004800

08000938 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000942:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2204      	movs	r2, #4
 8000948:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2202      	movs	r2, #2
 800094e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2201      	movs	r2, #1
 8000960:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2201      	movs	r2, #1
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	f001 fe0b 	bl	8002596 <HAL_PCD_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000986:	f000 f805 	bl	8000994 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000398 	.word	0x20000398

08000994 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a55      	ldr	r2, [pc, #340]	; (8000b64 <HAL_ETH_MspInit+0x174>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	f040 80a4 	bne.w	8000b5c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a52      	ldr	r2, [pc, #328]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a2c:	623b      	str	r3, [r7, #32]
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
 8000a34:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a4b      	ldr	r2, [pc, #300]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b42      	ldr	r3, [pc, #264]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a3d      	ldr	r2, [pc, #244]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a36      	ldr	r2, [pc, #216]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a2f      	ldr	r2, [pc, #188]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <HAL_ETH_MspInit+0x178>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ad8:	2332      	movs	r3, #50	; 0x32
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae8:	230b      	movs	r3, #11
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	481e      	ldr	r0, [pc, #120]	; (8000b6c <HAL_ETH_MspInit+0x17c>)
 8000af4:	f001 fb72 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000af8:	2386      	movs	r3, #134	; 0x86
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b08:	230b      	movs	r3, #11
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4817      	ldr	r0, [pc, #92]	; (8000b70 <HAL_ETH_MspInit+0x180>)
 8000b14:	f001 fb62 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2a:	230b      	movs	r3, #11
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <HAL_ETH_MspInit+0x184>)
 8000b36:	f001 fb51 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <HAL_ETH_MspInit+0x188>)
 8000b58:	f001 fb40 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40028000 	.word	0x40028000
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40021800 	.word	0x40021800

08000b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <HAL_SPI_MspInit+0xc0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d14a      	bne.n	8000c34 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_SPI_MspInit+0xc4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c02:	2306      	movs	r3, #6
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <HAL_SPI_MspInit+0xc8>)
 8000c0e:	f001 fae5 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c24:	2306      	movs	r3, #6
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <HAL_SPI_MspInit+0xcc>)
 8000c30:	f001 fad4 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40003c00 	.word	0x40003c00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020800 	.word	0x40020800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12c      	bne.n	8000cc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000cc4:	f001 fa8a 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40004800 	.word	0x40004800
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020c00 	.word	0x40020c00

08000cdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cfc:	d13f      	bne.n	8000d7e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4815      	ldr	r0, [pc, #84]	; (8000d8c <HAL_PCD_MspInit+0xb0>)
 8000d38:	f001 fa50 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <HAL_PCD_MspInit+0xb0>)
 8000d52:	f001 fa43 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6353      	str	r3, [r2, #52]	; 0x34
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_PCD_MspInit+0xac>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 fdac 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return 1;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_kill>:

int _kill(int pid, int sig)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dfe:	f002 ffe9 	bl	8003dd4 <__errno>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2216      	movs	r2, #22
 8000e06:	601a      	str	r2, [r3, #0]
  return -1;
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_exit>:

void _exit (int status)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffe7 	bl	8000df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e26:	e7fe      	b.n	8000e26 <_exit+0x12>

08000e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00a      	b.n	8000e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3a:	f3af 8000 	nop.w
 8000e3e:	4601      	mov	r1, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <_read+0x12>
  }

  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e009      	b.n	8000e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf1      	blt.n	8000e74 <_write+0x12>
  }
  return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_close>:

int _close(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_isatty>:

int _isatty(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f002 ff4e 	bl	8003dd4 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20030000 	.word	0x20030000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	200008d4 	.word	0x200008d4
 8000f6c:	20000960 	.word	0x20000960

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fbe:	f7ff ffd7 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f002 ff1f 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fae5 	bl	8000594 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000fd8:	08004fec 	.word	0x08004fec
  ldr r2, =_sbss
 8000fdc:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000fe0:	20000960 	.word	0x20000960

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <debounceFSM_init>:
 *          at the start of the model.
 *
 * @param   None
 * @retval  None
 */
void debounceFSM_init(delay_t *delayi) {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	/* Initialize Estado */
	assert(&PressButton!=NULL);
	currentState = BUTTON_UP;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <debounceFSM_init+0x28>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
	current_edge_state = EDGE_INIT;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <debounceFSM_init+0x2c>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	701a      	strb	r2, [r3, #0]
	delay = delayi;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <debounceFSM_init+0x30>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
	return;
 8001002:	bf00      	nop
}
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200008d8 	.word	0x200008d8
 8001014:	200008d9 	.word	0x200008d9
 8001018:	200008dc 	.word	0x200008dc

0800101c <debounceFSM_update>:
 *          and updates the current state and outputs accordingly.
 *
 * @param   delay: pointer to the delay instance
 * @retval  None
 */
bool_t debounceFSM_update() {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	assert(delay!=NULL);
 8001022:	4b39      	ldr	r3, [pc, #228]	; (8001108 <debounceFSM_update+0xec>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <debounceFSM_update+0x1a>
 800102a:	4b38      	ldr	r3, [pc, #224]	; (800110c <debounceFSM_update+0xf0>)
 800102c:	4a38      	ldr	r2, [pc, #224]	; (8001110 <debounceFSM_update+0xf4>)
 800102e:	2178      	movs	r1, #120	; 0x78
 8001030:	4838      	ldr	r0, [pc, #224]	; (8001114 <debounceFSM_update+0xf8>)
 8001032:	f002 feb1 	bl	8003d98 <__assert_func>
	assert(&currentState!=NULL);
	bool_t value;
	value = false;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]

	switch (currentState) {
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <debounceFSM_update+0xfc>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d854      	bhi.n	80010ec <debounceFSM_update+0xd0>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <debounceFSM_update+0x2c>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	08001059 	.word	0x08001059
 800104c:	0800106d 	.word	0x0800106d
 8001050:	080010a7 	.word	0x080010a7
 8001054:	080010bb 	.word	0x080010bb
	/*
	 * In the BUTTON_UP state, it checks whether the button remains unpressed.
	 * Otherwise, that is, if the button is pressed, the state changes to BUTTON_FALLING.
	 */
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)) {
 8001058:	2000      	movs	r0, #0
 800105a:	f000 fc05 	bl	8001868 <BSP_PB_GetState>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d049      	beq.n	80010f8 <debounceFSM_update+0xdc>
			currentState = BUTTON_FALLING;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <debounceFSM_update+0xfc>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
		}
		break;
 800106a:	e045      	b.n	80010f8 <debounceFSM_update+0xdc>
		 * If it remains pressed (condition 'yes'), the state changes to BUTTON_DOWN and the
		 * state of LED1 is toggled. If the button does not remain pressed (condition 'no'),
		 * the state changes back to BUTTON_UP, interpreting this event as a bounce.
		 */
	case BUTTON_FALLING:
		if (BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 800106c:	2000      	movs	r0, #0
 800106e:	f000 fbfb 	bl	8001868 <BSP_PB_GetState>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d012      	beq.n	800109e <debounceFSM_update+0x82>
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <debounceFSM_update+0xec>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f887 	bl	8001190 <delayRead>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00a      	beq.n	800109e <debounceFSM_update+0x82>
			currentState = BUTTON_DOWN;
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <debounceFSM_update+0xfc>)
 800108a:	2202      	movs	r2, #2
 800108c:	701a      	strb	r2, [r3, #0]
			buttonPressed();
 800108e:	f000 f849 	bl	8001124 <buttonPressed>
			value = true;
 8001092:	2301      	movs	r3, #1
 8001094:	71fb      	strb	r3, [r7, #7]
			current_edge_state = EDGE_FALLING;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <debounceFSM_update+0x100>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
			//PressButton = !(PressButton);
		} else {
			//currentState=BUTTON_DOWN;
			currentState = BUTTON_UP;
		}
		break;
 800109c:	e02f      	b.n	80010fe <debounceFSM_update+0xe2>
			currentState = BUTTON_UP;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <debounceFSM_update+0xfc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
		break;
 80010a4:	e02b      	b.n	80010fe <debounceFSM_update+0xe2>
		/*
		 * In the BUTTON_DOWN state, if the button is released, the state changes to BUTTON_RAISING.
		 */
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)) {
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 fbde 	bl	8001868 <BSP_PB_GetState>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d124      	bne.n	80010fc <debounceFSM_update+0xe0>
			currentState = BUTTON_RAISING;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <debounceFSM_update+0xfc>)
 80010b4:	2203      	movs	r2, #3
 80010b6:	701a      	strb	r2, [r3, #0]

		}
		break;
 80010b8:	e020      	b.n	80010fc <debounceFSM_update+0xe0>
		 * If it remains unpressed (condition 'yes'), the state changes back to BUTTON_UP and
		 * the buttonReleased function is called. If the button is pressed again (condition 'no'),
		 * the state changes back to BUTTON_DOWN.
		 */
	case BUTTON_RAISING:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 fbd4 	bl	8001868 <BSP_PB_GetState>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10e      	bne.n	80010e4 <debounceFSM_update+0xc8>
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <debounceFSM_update+0xec>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f860 	bl	8001190 <delayRead>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <debounceFSM_update+0xc8>
			currentState = BUTTON_UP;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <debounceFSM_update+0xfc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
			current_edge_state = EDGE_RAISING;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <debounceFSM_update+0x100>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
			//buttonReleased();
		} else {

			currentState = BUTTON_DOWN;
		}
		break;
 80010e2:	e00c      	b.n	80010fe <debounceFSM_update+0xe2>
			currentState = BUTTON_DOWN;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <debounceFSM_update+0xfc>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	701a      	strb	r2, [r3, #0]
		break;
 80010ea:	e008      	b.n	80010fe <debounceFSM_update+0xe2>
	default:
		/* Handle unexpected state */
		assert(0);
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <debounceFSM_update+0x104>)
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <debounceFSM_update+0xf4>)
 80010f0:	21b4      	movs	r1, #180	; 0xb4
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <debounceFSM_update+0xf8>)
 80010f4:	f002 fe50 	bl	8003d98 <__assert_func>
		break;
 80010f8:	bf00      	nop
 80010fa:	e000      	b.n	80010fe <debounceFSM_update+0xe2>
		break;
 80010fc:	bf00      	nop
	}
	return value;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200008dc 	.word	0x200008dc
 800110c:	08004e54 	.word	0x08004e54
 8001110:	08004ecc 	.word	0x08004ecc
 8001114:	08004e30 	.word	0x08004e30
 8001118:	200008d8 	.word	0x200008d8
 800111c:	200008d9 	.word	0x200008d9
 8001120:	08004e2c 	.word	0x08004e2c

08001124 <buttonPressed>:
 * @brief   Toggles the state of LED2.
 *
 * @param   None
 * @retval  None
 */
static void buttonPressed() {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	PressButton = !(PressButton);
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <buttonPressed+0x2c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b03      	ldr	r3, [pc, #12]	; (8001150 <buttonPressed+0x2c>)
 8001144:	701a      	strb	r2, [r3, #0]
	return;
 8001146:	bf00      	nop
}
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	20000064 	.word	0x20000064

08001154 <delayInit>:
 * marcando el flag `running` como false. No inicia el conteo del retardo.
 *
 * @param delay Puntero al objeto de retardo.
 * @param duration Duración del retardo en ticks.
 */
void delayInit(delay_t *delay, tick_t duration) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <delayInit+0x1c>
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <delayInit+0x30>)
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <delayInit+0x34>)
 8001168:	2117      	movs	r1, #23
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <delayInit+0x38>)
 800116c:	f002 fe14 	bl	8003d98 <__assert_func>
	assert(duration >= 0);
	delay->duration = duration;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	721a      	strb	r2, [r3, #8]
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08004e60 	.word	0x08004e60
 8001188:	08004ee0 	.word	0x08004ee0
 800118c:	08004e70 	.word	0x08004e70

08001190 <delayRead>:
 * reinicia el objeto y devuelve true.
 *
 * @param delay Puntero al objeto de retardo.
 * @return true si el retardo ha alcanzado su duración, false en caso contrario.
 */
bool_t delayRead(delay_t *delay) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	static bool_t retValue; ///< Variable estática interna para retener el valor de retorno.
	retValue = false;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <delayRead+0x6c>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
	assert(delay != NULL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <delayRead+0x20>
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <delayRead+0x70>)
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <delayRead+0x74>)
 80011a8:	212a      	movs	r1, #42	; 0x2a
 80011aa:	4817      	ldr	r0, [pc, #92]	; (8001208 <delayRead+0x78>)
 80011ac:	f002 fdf4 	bl	8003d98 <__assert_func>
	assert(delay->duration >= 0);

	if (!delay->running) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7a1b      	ldrb	r3, [r3, #8]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d008      	beq.n	80011d0 <delayRead+0x40>
		delay->startTime = HAL_GetTick();
 80011be:	f000 fbcf 	bl	8001960 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	721a      	strb	r2, [r3, #8]
 80011ce:	e00f      	b.n	80011f0 <delayRead+0x60>
	} else {
		if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 80011d0:	f000 fbc6 	bl	8001960 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d305      	bcc.n	80011f0 <delayRead+0x60>
			delay->running = false;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	721a      	strb	r2, [r3, #8]
			retValue = true;
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <delayRead+0x6c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
		}
	}
	return retValue;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <delayRead+0x6c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200008e0 	.word	0x200008e0
 8001200:	08004e60 	.word	0x08004e60
 8001204:	08004eec 	.word	0x08004eec
 8001208:	08004e70 	.word	0x08004e70

0800120c <init_led>:
/**
 * @brief Inicializa los LEDs.
 *
 * Esta función configura los LEDs y establece sus valores iniciales.
 */
void init_led(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	spi_write(0x09, 0x00);       // No decoding.
 8001210:	2100      	movs	r1, #0
 8001212:	2009      	movs	r0, #9
 8001214:	f000 f90e 	bl	8001434 <spi_write>
	spi_write(0x0b, 0x07);       // Scan limit = 8 LEDs.
 8001218:	2107      	movs	r1, #7
 800121a:	200b      	movs	r0, #11
 800121c:	f000 f90a 	bl	8001434 <spi_write>
	spi_write(0x0c, 0x01);       // Power down = 0, normal mode = 1.
 8001220:	2101      	movs	r1, #1
 8001222:	200c      	movs	r0, #12
 8001224:	f000 f906 	bl	8001434 <spi_write>
	spi_write(0x0f, 0x00);       // No test display.
 8001228:	2100      	movs	r1, #0
 800122a:	200f      	movs	r0, #15
 800122c:	f000 f902 	bl	8001434 <spi_write>
	clear_led();
 8001230:	f000 f806 	bl	8001240 <clear_led>
	spi_write(0x0a, 0x05);       // Brightness intensity.
 8001234:	2105      	movs	r1, #5
 8001236:	200a      	movs	r0, #10
 8001238:	f000 f8fc 	bl	8001434 <spi_write>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <clear_led>:
/**
 * @brief Limpia o apaga todos los LEDs.
 *
 * Esta función recorre todas las direcciones de LEDs y les asigna el valor de apagado.
 */
void clear_led(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	for (int j = 0; j < 8; j++) {
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e00e      	b.n	800126a <clear_led+0x2a>
		spi_write(led_address[j], clear[j]);
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <clear_led+0x3c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	490a      	ldr	r1, [pc, #40]	; (8001280 <clear_led+0x40>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	440b      	add	r3, r1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f000 f8e8 	bl	8001434 <spi_write>
	for (int j = 0; j < 8; j++) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3301      	adds	r3, #1
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b07      	cmp	r3, #7
 800126e:	dded      	ble.n	800124c <clear_led+0xc>
	}
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000068 	.word	0x20000068
 8001280:	200008e4 	.word	0x200008e4

08001284 <update_led>:
 * Esta función toma una lista de valores y actualiza el estado de cada LED según
 * la lista proporcionada.
 *
 * @param paint_list Lista con los valores de los LEDs.
 */
void update_led(uint8_t paint_list[]) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	for (int j = 0; j < 8; j++) {
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	e00d      	b.n	80012ae <update_led+0x2a>
		spi_write(led_address[j], paint_list[j]);
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <update_led+0x3c>)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	7818      	ldrb	r0, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	f000 f8c6 	bl	8001434 <spi_write>
	for (int j = 0; j < 8; j++) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	ddee      	ble.n	8001292 <update_led+0xe>
	}
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000068 	.word	0x20000068

080012c4 <fantasma_led>:
 * Esta función genera una función de fantasma en la patalla led
 *
 *
 * @param vacio
 */
void fantasma_led(delay_t *delay_Ghost) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	switch (tipo_fantasma) {
 80012cc:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <fantasma_led+0xec>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d868      	bhi.n	80013a6 <fantasma_led+0xe2>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <fantasma_led+0x18>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	0800130f 	.word	0x0800130f
 80012e4:	08001329 	.word	0x08001329
 80012e8:	08001343 	.word	0x08001343
 80012ec:	0800135d 	.word	0x0800135d
 80012f0:	08001377 	.word	0x08001377
	case (GHOST1):
		update_led(ghost1);
 80012f4:	482f      	ldr	r0, [pc, #188]	; (80013b4 <fantasma_led+0xf0>)
 80012f6:	f7ff ffc5 	bl	8001284 <update_led>
		if (delayRead(delay_Ghost)) {
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff48 	bl	8001190 <delayRead>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d044      	beq.n	8001390 <fantasma_led+0xcc>
			tipo_fantasma = GHOST2;
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <fantasma_led+0xec>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800130c:	e040      	b.n	8001390 <fantasma_led+0xcc>
	case (GHOST2):
		update_led(ghost2);
 800130e:	482a      	ldr	r0, [pc, #168]	; (80013b8 <fantasma_led+0xf4>)
 8001310:	f7ff ffb8 	bl	8001284 <update_led>
		if (delayRead(delay_Ghost)) {
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff3b 	bl	8001190 <delayRead>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d039      	beq.n	8001394 <fantasma_led+0xd0>
			tipo_fantasma = GHOST3;
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <fantasma_led+0xec>)
 8001322:	2202      	movs	r2, #2
 8001324:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001326:	e035      	b.n	8001394 <fantasma_led+0xd0>
	case (GHOST3):
		update_led(ghost3);
 8001328:	4824      	ldr	r0, [pc, #144]	; (80013bc <fantasma_led+0xf8>)
 800132a:	f7ff ffab 	bl	8001284 <update_led>
		if (delayRead(delay_Ghost)) {
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff2e 	bl	8001190 <delayRead>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d02e      	beq.n	8001398 <fantasma_led+0xd4>
			tipo_fantasma = GHOST4;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <fantasma_led+0xec>)
 800133c:	2203      	movs	r2, #3
 800133e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001340:	e02a      	b.n	8001398 <fantasma_led+0xd4>
	case (GHOST4):
		update_led(ghost4);
 8001342:	481f      	ldr	r0, [pc, #124]	; (80013c0 <fantasma_led+0xfc>)
 8001344:	f7ff ff9e 	bl	8001284 <update_led>
		if (delayRead(delay_Ghost)) {
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff21 	bl	8001190 <delayRead>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d023      	beq.n	800139c <fantasma_led+0xd8>
			tipo_fantasma = GHOST5;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <fantasma_led+0xec>)
 8001356:	2204      	movs	r2, #4
 8001358:	701a      	strb	r2, [r3, #0]
		}
		break;
 800135a:	e01f      	b.n	800139c <fantasma_led+0xd8>
	case (GHOST5):
		update_led(ghost5);
 800135c:	4819      	ldr	r0, [pc, #100]	; (80013c4 <fantasma_led+0x100>)
 800135e:	f7ff ff91 	bl	8001284 <update_led>
		if (delayRead(delay_Ghost)) {
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff14 	bl	8001190 <delayRead>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d018      	beq.n	80013a0 <fantasma_led+0xdc>
			tipo_fantasma = GHOST6;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <fantasma_led+0xec>)
 8001370:	2205      	movs	r2, #5
 8001372:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001374:	e014      	b.n	80013a0 <fantasma_led+0xdc>
	case (GHOST6):
		update_led(ghost5);
 8001376:	4813      	ldr	r0, [pc, #76]	; (80013c4 <fantasma_led+0x100>)
 8001378:	f7ff ff84 	bl	8001284 <update_led>
		if (delayRead(delay_Ghost)) {
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff07 	bl	8001190 <delayRead>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00d      	beq.n	80013a4 <fantasma_led+0xe0>
			tipo_fantasma = GHOST1;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <fantasma_led+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800138e:	e009      	b.n	80013a4 <fantasma_led+0xe0>
		break;
 8001390:	bf00      	nop
 8001392:	e008      	b.n	80013a6 <fantasma_led+0xe2>
		break;
 8001394:	bf00      	nop
 8001396:	e006      	b.n	80013a6 <fantasma_led+0xe2>
		break;
 8001398:	bf00      	nop
 800139a:	e004      	b.n	80013a6 <fantasma_led+0xe2>
		break;
 800139c:	bf00      	nop
 800139e:	e002      	b.n	80013a6 <fantasma_led+0xe2>
		break;
 80013a0:	bf00      	nop
 80013a2:	e000      	b.n	80013a6 <fantasma_led+0xe2>
		break;
 80013a4:	bf00      	nop
	}
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200008ec 	.word	0x200008ec
 80013b4:	20000070 	.word	0x20000070
 80013b8:	20000078 	.word	0x20000078
 80013bc:	20000080 	.word	0x20000080
 80013c0:	20000088 	.word	0x20000088
 80013c4:	20000090 	.word	0x20000090

080013c8 <spi_init>:
 *
 */
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);

void spi_init(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80013cc:	f000 f864 	bl	8001498 <MX_GPIO_Init>
	MX_SPI3_Init();
 80013d0:	f000 f936 	bl	8001640 <MX_SPI3_Init>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <spi_write_byte>:
 * microcontrolador, sino que implementa la transmisión manualmente.
 *
 * @param byte Byte de datos que se desea enviar a través de SPI.
 *
 */
void spi_write_byte(uint8_t byte) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	// Itera a través de cada uno de los 8 bits del byte proporcionado.
	for (uint8_t i = 0; i < 8; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e01b      	b.n	8001420 <spi_write_byte+0x48>
		// Establece el pin del reloj (clock) en estado bajo.
		HAL_GPIO_WritePin(maxport, clock_Pin, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ee:	4810      	ldr	r0, [pc, #64]	; (8001430 <spi_write_byte+0x58>)
 80013f0:	f001 f8b8 	bl	8002564 <HAL_GPIO_WritePin>

		// Escribe el bit más significativo (MSB) del byte en el pin de datos (data).
		HAL_GPIO_WritePin(maxport, data_Pin, byte & 0x80);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <spi_write_byte+0x58>)
 8001404:	f001 f8ae 	bl	8002564 <HAL_GPIO_WritePin>

		// Desplaza el byte a la izquierda para preparar el siguiente bit.
		byte = byte << 1;
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	71fb      	strb	r3, [r7, #7]

		// Establece el pin del reloj (clock) en estado alto.
		HAL_GPIO_WritePin(maxport, clock_Pin, 1);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <spi_write_byte+0x58>)
 8001416:	f001 f8a5 	bl	8002564 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	3301      	adds	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b07      	cmp	r3, #7
 8001424:	d9e0      	bls.n	80013e8 <spi_write_byte+0x10>
	}
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40020c00 	.word	0x40020c00

08001434 <spi_write>:
 * múltiples veces según el valor predefinido de 'num'.
 *
 * @param address Byte de dirección que se desea enviar a través de SPI.
 * @param cmd Byte de comando que se desea enviar a través de SPI.
 */
void spi_write(uint8_t address, uint8_t cmd) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	4613      	mov	r3, r2
 8001442:	71bb      	strb	r3, [r7, #6]
	// Establece el pin CS (Chip Select) en estado bajo.
	HAL_GPIO_WritePin(maxport, cs_Pin, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <spi_write+0x60>)
 800144c:	f001 f88a 	bl	8002564 <HAL_GPIO_WritePin>

	// Envía el par de bytes (dirección y comando) 'num' veces.
	for (uint8_t i = 0; i < num; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e00a      	b.n	800146c <spi_write+0x38>
		// Envía el byte de dirección.
		spi_write_byte(address);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffbd 	bl	80013d8 <spi_write_byte>

		// Envía el byte de comando.
		spi_write_byte(cmd);
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffb9 	bl	80013d8 <spi_write_byte>
	for (uint8_t i = 0; i < num; i++) {
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3301      	adds	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f1      	beq.n	8001456 <spi_write+0x22>
	}

	// Establece el pin CS (Chip Select) en estado bajo.
	HAL_GPIO_WritePin(maxport, cs_Pin, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <spi_write+0x60>)
 800147a:	f001 f873 	bl	8002564 <HAL_GPIO_WritePin>

	// Establece el pin CS (Chip Select) en estado alto.
	HAL_GPIO_WritePin(maxport, cs_Pin, 1);
 800147e:	2201      	movs	r2, #1
 8001480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <spi_write+0x60>)
 8001486:	f001 f86d 	bl	8002564 <HAL_GPIO_WritePin>
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40020c00 	.word	0x40020c00

08001498 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	4b5e      	ldr	r3, [pc, #376]	; (800162c <MX_GPIO_Init+0x194>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a5d      	ldr	r2, [pc, #372]	; (800162c <MX_GPIO_Init+0x194>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b5b      	ldr	r3, [pc, #364]	; (800162c <MX_GPIO_Init+0x194>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <MX_GPIO_Init+0x194>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a56      	ldr	r2, [pc, #344]	; (800162c <MX_GPIO_Init+0x194>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <MX_GPIO_Init+0x194>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b50      	ldr	r3, [pc, #320]	; (800162c <MX_GPIO_Init+0x194>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a4f      	ldr	r2, [pc, #316]	; (800162c <MX_GPIO_Init+0x194>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b4d      	ldr	r3, [pc, #308]	; (800162c <MX_GPIO_Init+0x194>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b49      	ldr	r3, [pc, #292]	; (800162c <MX_GPIO_Init+0x194>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a48      	ldr	r2, [pc, #288]	; (800162c <MX_GPIO_Init+0x194>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <MX_GPIO_Init+0x194>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b42      	ldr	r3, [pc, #264]	; (800162c <MX_GPIO_Init+0x194>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a41      	ldr	r2, [pc, #260]	; (800162c <MX_GPIO_Init+0x194>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b3f      	ldr	r3, [pc, #252]	; (800162c <MX_GPIO_Init+0x194>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <MX_GPIO_Init+0x194>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a3a      	ldr	r2, [pc, #232]	; (800162c <MX_GPIO_Init+0x194>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <MX_GPIO_Init+0x194>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | GPIO_PIN_5 | LD2_Pin,
 8001556:	2200      	movs	r2, #0
 8001558:	f244 01a1 	movw	r1, #16545	; 0x40a1
 800155c:	4834      	ldr	r0, [pc, #208]	; (8001630 <MX_GPIO_Init+0x198>)
 800155e:	f001 f801 	bl	8002564 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, CS_Pin | DIN_Pin | CLK_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001568:	4832      	ldr	r0, [pc, #200]	; (8001634 <MX_GPIO_Init+0x19c>)
 800156a:	f000 fffb 	bl	8002564 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin | GPIO_PIN_15,
 800156e:	2200      	movs	r2, #0
 8001570:	f248 0140 	movw	r1, #32832	; 0x8040
 8001574:	4830      	ldr	r0, [pc, #192]	; (8001638 <MX_GPIO_Init+0x1a0>)
 8001576:	f000 fff5 	bl	8002564 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001580:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001584:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	482a      	ldr	r0, [pc, #168]	; (800163c <MX_GPIO_Init+0x1a4>)
 8001592:	f000 fe23 	bl	80021dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001596:	f244 0381 	movw	r3, #16513	; 0x4081
 800159a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4820      	ldr	r0, [pc, #128]	; (8001630 <MX_GPIO_Init+0x198>)
 80015b0:	f000 fe14 	bl	80021dc <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin DIN_Pin CLK_Pin */
	GPIO_InitStruct.Pin = CS_Pin | DIN_Pin | CLK_Pin;
 80015b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4819      	ldr	r0, [pc, #100]	; (8001634 <MX_GPIO_Init+0x19c>)
 80015ce:	f000 fe05 	bl	80021dc <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_PowerSwitchOn_Pin PG15 */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin | GPIO_PIN_15;
 80015d2:	f248 0340 	movw	r3, #32832	; 0x8040
 80015d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_GPIO_Init+0x1a0>)
 80015ec:	f000 fdf6 	bl	80021dc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_GPIO_Init+0x1a0>)
 8001604:	f000 fdea 	bl	80021dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001608:	2320      	movs	r3, #32
 800160a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_GPIO_Init+0x198>)
 8001620:	f000 fddc 	bl	80021dc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001624:	bf00      	nop
 8001626:	3730      	adds	r7, #48	; 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	40020400 	.word	0x40020400
 8001634:	40020c00 	.word	0x40020c00
 8001638:	40021800 	.word	0x40021800
 800163c:	40020800 	.word	0x40020800

08001640 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_SPI3_Init+0x64>)
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <MX_SPI3_Init+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_SPI3_Init+0x64>)
 800164c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001650:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_SPI3_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_SPI3_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_SPI3_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_SPI3_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_SPI3_Init+0x64>)
 800166c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001670:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_SPI3_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_SPI3_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_SPI3_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_SPI3_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_SPI3_Init+0x64>)
 800168c:	220a      	movs	r2, #10
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_SPI3_Init+0x64>)
 8001692:	f001 fd35 	bl	8003100 <HAL_SPI_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_SPI3_Init+0x60>
		Error_Handler();
 800169c:	f7ff f97a 	bl	8000994 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200008f0 	.word	0x200008f0
 80016a8:	40003c00 	.word	0x40003c00

080016ac <inicializarMEF>:
State_MEF_t estadoMEF;

/**
 * @brief Función para inicializar la MEF. Configura el estado inicial.
 */
void inicializarMEF(void) {
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	estadoMEF = SET_ini; /**< Configura el estado inicial. */
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <inicializarMEF+0x14>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
	return;
 80016b6:	bf00      	nop
}
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000948 	.word	0x20000948

080016c4 <actualizarMEF>:
 * Esta función evalúa el estado actual de la MEF y determina el próximo estado en función de las condiciones de entrada.
 *
 * @param delay Puntero al tipo de dato delay_t que define la estructura de retardo.
 * @return State_MEF_t: El estado actualizado de la MEF.
 */
State_MEF_t actualizarMEF(delay_t *delay) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	assert(&estadoMEF!=NULL); /**< Asegura que el puntero al estado actual no es nulo. */

	switch (estadoMEF) {
 80016cc:	4b62      	ldr	r3, [pc, #392]	; (8001858 <actualizarMEF+0x194>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	f200 80ac 	bhi.w	800182e <actualizarMEF+0x16a>
 80016d6:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <actualizarMEF+0x18>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	080016f5 	.word	0x080016f5
 80016e0:	08001711 	.word	0x08001711
 80016e4:	0800175b 	.word	0x0800175b
 80016e8:	080017a5 	.word	0x080017a5
 80016ec:	080017ef 	.word	0x080017ef
 80016f0:	0800180f 	.word	0x0800180f
	case SET_ini:
		if (delayRead(delay)) {
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fd4b 	bl	8001190 <delayRead>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <actualizarMEF+0x44>
			estadoMEF = FIRST;
 8001700:	4b55      	ldr	r3, [pc, #340]	; (8001858 <actualizarMEF+0x194>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
		} else if (!delayRead(delay)) {
			//estadoMEF = ;
		}
		break;
 8001706:	e0a1      	b.n	800184c <actualizarMEF+0x188>
		} else if (!delayRead(delay)) {
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fd41 	bl	8001190 <delayRead>
		break;
 800170e:	e09d      	b.n	800184c <actualizarMEF+0x188>
	case FIRST:
		if (!debounceFSM_update() && delayRead(delay)) {
 8001710:	f7ff fc84 	bl	800101c <debounceFSM_update>
 8001714:	4603      	mov	r3, r0
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <actualizarMEF+0x70>
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fd35 	bl	8001190 <delayRead>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <actualizarMEF+0x70>
			estadoMEF = SECOND;
 800172c:	4b4a      	ldr	r3, [pc, #296]	; (8001858 <actualizarMEF+0x194>)
 800172e:	2202      	movs	r2, #2
 8001730:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = BAD;
		}
		break;
 8001732:	e082      	b.n	800183a <actualizarMEF+0x176>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 8001734:	2000      	movs	r0, #0
 8001736:	f000 f897 	bl	8001868 <BSP_PB_GetState>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d07c      	beq.n	800183a <actualizarMEF+0x176>
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fd25 	bl	8001190 <delayRead>
 8001746:	4603      	mov	r3, r0
 8001748:	f083 0301 	eor.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d073      	beq.n	800183a <actualizarMEF+0x176>
			estadoMEF = BAD;
 8001752:	4b41      	ldr	r3, [pc, #260]	; (8001858 <actualizarMEF+0x194>)
 8001754:	2205      	movs	r2, #5
 8001756:	701a      	strb	r2, [r3, #0]
		break;
 8001758:	e06f      	b.n	800183a <actualizarMEF+0x176>
	case SECOND:
		if (!debounceFSM_update() && delayRead(delay)) {
 800175a:	f7ff fc5f 	bl	800101c <debounceFSM_update>
 800175e:	4603      	mov	r3, r0
 8001760:	f083 0301 	eor.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <actualizarMEF+0xba>
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fd10 	bl	8001190 <delayRead>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <actualizarMEF+0xba>
			estadoMEF = THIRD;
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <actualizarMEF+0x194>)
 8001778:	2203      	movs	r2, #3
 800177a:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = BAD;
		}
		break;
 800177c:	e05f      	b.n	800183e <actualizarMEF+0x17a>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f872 	bl	8001868 <BSP_PB_GetState>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d059      	beq.n	800183e <actualizarMEF+0x17a>
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fd00 	bl	8001190 <delayRead>
 8001790:	4603      	mov	r3, r0
 8001792:	f083 0301 	eor.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d050      	beq.n	800183e <actualizarMEF+0x17a>
			estadoMEF = BAD;
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <actualizarMEF+0x194>)
 800179e:	2205      	movs	r2, #5
 80017a0:	701a      	strb	r2, [r3, #0]
		break;
 80017a2:	e04c      	b.n	800183e <actualizarMEF+0x17a>
	case THIRD:
		if (!debounceFSM_update() && delayRead(delay)) {
 80017a4:	f7ff fc3a 	bl	800101c <debounceFSM_update>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f083 0301 	eor.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <actualizarMEF+0x104>
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fceb 	bl	8001190 <delayRead>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <actualizarMEF+0x104>
			estadoMEF = FIRST;
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <actualizarMEF+0x194>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
			estadoMEF = GOOD;
		}
		break;
 80017c6:	e03c      	b.n	8001842 <actualizarMEF+0x17e>
		} else if (BSP_PB_GetState(BUTTON_USER) && !delayRead(delay)) {
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f84d 	bl	8001868 <BSP_PB_GetState>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d036      	beq.n	8001842 <actualizarMEF+0x17e>
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fcdb 	bl	8001190 <delayRead>
 80017da:	4603      	mov	r3, r0
 80017dc:	f083 0301 	eor.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d02d      	beq.n	8001842 <actualizarMEF+0x17e>
			estadoMEF = GOOD;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <actualizarMEF+0x194>)
 80017e8:	2204      	movs	r2, #4
 80017ea:	701a      	strb	r2, [r3, #0]
		break;
 80017ec:	e029      	b.n	8001842 <actualizarMEF+0x17e>
	case GOOD:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f83a 	bl	8001868 <BSP_PB_GetState>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d125      	bne.n	8001846 <actualizarMEF+0x182>
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fcc8 	bl	8001190 <delayRead>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d01f      	beq.n	8001846 <actualizarMEF+0x182>
			estadoMEF = SET_ini;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <actualizarMEF+0x194>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800180c:	e01b      	b.n	8001846 <actualizarMEF+0x182>
	case BAD:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)) {
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f82a 	bl	8001868 <BSP_PB_GetState>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d117      	bne.n	800184a <actualizarMEF+0x186>
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fcb8 	bl	8001190 <delayRead>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d011      	beq.n	800184a <actualizarMEF+0x186>
			estadoMEF = SET_ini;
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <actualizarMEF+0x194>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800182c:	e00d      	b.n	800184a <actualizarMEF+0x186>
	default:
		/** En caso de llegar a un estado no definido, se fuerza una interrupción. */
		assert(0);
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <actualizarMEF+0x198>)
 8001830:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <actualizarMEF+0x19c>)
 8001832:	214e      	movs	r1, #78	; 0x4e
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <actualizarMEF+0x1a0>)
 8001836:	f002 faaf 	bl	8003d98 <__assert_func>
		break;
 800183a:	bf00      	nop
 800183c:	e006      	b.n	800184c <actualizarMEF+0x188>
		break;
 800183e:	bf00      	nop
 8001840:	e004      	b.n	800184c <actualizarMEF+0x188>
		break;
 8001842:	bf00      	nop
 8001844:	e002      	b.n	800184c <actualizarMEF+0x188>
		break;
 8001846:	bf00      	nop
 8001848:	e000      	b.n	800184c <actualizarMEF+0x188>
		break;
 800184a:	bf00      	nop
	}
	return (estadoMEF);
 800184c:	4b02      	ldr	r3, [pc, #8]	; (8001858 <actualizarMEF+0x194>)
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000948 	.word	0x20000948
 800185c:	08004e90 	.word	0x08004e90
 8001860:	08004ef8 	.word	0x08004ef8
 8001864:	08004e94 	.word	0x08004e94

08001868 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <BSP_PB_GetState+0x28>)
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fe57 	bl	8002534 <HAL_GPIO_ReadPin>
 8001886:	4603      	mov	r3, r0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000098 	.word	0x20000098

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f931 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff f86a 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f93b 	bl	8001b72 <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001914:	f000 f911 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000060 	.word	0x20000060
 8001930:	200000a0 	.word	0x200000a0
 8001934:	2000009c 	.word	0x2000009c

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200000a0 	.word	0x200000a0
 800195c:	2000094c 	.word	0x2000094c

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000094c 	.word	0x2000094c

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000a0 	.word	0x200000a0

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff47 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff5c 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffb0 	bl	8001ae0 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06c      	b.n	8001c78 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2223      	movs	r2, #35	; 0x23
 8001bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7fe ff1d 	bl	80009f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <HAL_ETH_Init+0xf4>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <HAL_ETH_Init+0xf4>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_ETH_Init+0xf4>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <HAL_ETH_Init+0xf8>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <HAL_ETH_Init+0xf8>)
 8001bd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bdc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_ETH_Init+0xf8>)
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4927      	ldr	r1, [pc, #156]	; (8001c84 <HAL_ETH_Init+0xf8>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_ETH_Init+0xf8>)
 8001bee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c08:	f7ff feaa 	bl	8001960 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c0e:	e011      	b.n	8001c34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c10:	f7ff fea6 	bl	8001960 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c1e:	d909      	bls.n	8001c34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2204      	movs	r2, #4
 8001c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	22e0      	movs	r2, #224	; 0xe0
 8001c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e021      	b.n	8001c78 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1e4      	bne.n	8001c10 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f958 	bl	8001efc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f9ff 	bl	8002050 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa55 	bl	8002102 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9bd 	bl	8001fe0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2210      	movs	r2, #16
 8001c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40013800 	.word	0x40013800

08001c88 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <ETH_SetMACConfig+0x15c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	7c1b      	ldrb	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <ETH_SetMACConfig+0x28>
 8001caa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cae:	e000      	b.n	8001cb2 <ETH_SetMACConfig+0x2a>
 8001cb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	7c5b      	ldrb	r3, [r3, #17]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <ETH_SetMACConfig+0x38>
 8001cba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cbe:	e000      	b.n	8001cc2 <ETH_SetMACConfig+0x3a>
 8001cc0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cc2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7fdb      	ldrb	r3, [r3, #31]
 8001cce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cd0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	7f92      	ldrb	r2, [r2, #30]
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d102      	bne.n	8001ce6 <ETH_SetMACConfig+0x5e>
 8001ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce4:	e000      	b.n	8001ce8 <ETH_SetMACConfig+0x60>
 8001ce6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ce8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7f1b      	ldrb	r3, [r3, #28]
 8001cee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cf0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cf6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	791b      	ldrb	r3, [r3, #4]
 8001cfc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	d102      	bne.n	8001d10 <ETH_SetMACConfig+0x88>
 8001d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0e:	e000      	b.n	8001d12 <ETH_SetMACConfig+0x8a>
 8001d10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	7bdb      	ldrb	r3, [r3, #15]
 8001d18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7ff fe18 	bl	8001978 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d6e:	2a00      	cmp	r2, #0
 8001d70:	d101      	bne.n	8001d76 <ETH_SetMACConfig+0xee>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	e000      	b.n	8001d78 <ETH_SetMACConfig+0xf0>
 8001d76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d86:	2a01      	cmp	r2, #1
 8001d88:	d101      	bne.n	8001d8e <ETH_SetMACConfig+0x106>
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	e000      	b.n	8001d90 <ETH_SetMACConfig+0x108>
 8001d8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d98:	2a01      	cmp	r2, #1
 8001d9a:	d101      	bne.n	8001da0 <ETH_SetMACConfig+0x118>
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	e000      	b.n	8001da2 <ETH_SetMACConfig+0x11a>
 8001da0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001da2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001daa:	2a01      	cmp	r2, #1
 8001dac:	d101      	bne.n	8001db2 <ETH_SetMACConfig+0x12a>
 8001dae:	2202      	movs	r2, #2
 8001db0:	e000      	b.n	8001db4 <ETH_SetMACConfig+0x12c>
 8001db2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001db4:	4313      	orrs	r3, r2
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff fdd3 	bl	8001978 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	ff20810f 	.word	0xff20810f

08001de8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <ETH_SetDMAConfig+0x110>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	7b1b      	ldrb	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <ETH_SetDMAConfig+0x2c>
 8001e0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e12:	e000      	b.n	8001e16 <ETH_SetDMAConfig+0x2e>
 8001e14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	7b5b      	ldrb	r3, [r3, #13]
 8001e1a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e1c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	7f52      	ldrb	r2, [r2, #29]
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d102      	bne.n	8001e2c <ETH_SetDMAConfig+0x44>
 8001e26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e2a:	e000      	b.n	8001e2e <ETH_SetDMAConfig+0x46>
 8001e2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	7b9b      	ldrb	r3, [r3, #14]
 8001e34:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e36:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
 8001e42:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7f9b      	ldrb	r3, [r3, #30]
 8001e4a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e4c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e5a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fd7a 	bl	8001978 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	791b      	ldrb	r3, [r3, #4]
 8001e96:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e9c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ea2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ea8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eb0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001eb2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ec0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ece:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff fd4b 	bl	8001978 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	f8de3f23 	.word	0xf8de3f23

08001efc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0a6      	sub	sp, #152	; 0x98
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f62:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f74:	4619      	mov	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fe86 	bl	8001c88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fb6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fbc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff08 	bl	8001de8 <ETH_SetDMAConfig>
}
 8001fd8:	bf00      	nop
 8001fda:	3798      	adds	r7, #152	; 0x98
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3305      	adds	r3, #5
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	3204      	adds	r2, #4
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <ETH_MACAddressConfig+0x68>)
 8002002:	4413      	add	r3, r2
 8002004:	461a      	mov	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3303      	adds	r3, #3
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	061a      	lsls	r2, r3, #24
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3302      	adds	r3, #2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3301      	adds	r3, #1
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	4313      	orrs	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <ETH_MACAddressConfig+0x6c>)
 8002032:	4413      	add	r3, r2
 8002034:	461a      	mov	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40028040 	.word	0x40028040
 800204c:	40028044 	.word	0x40028044

08002050 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e03e      	b.n	80020dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68d9      	ldr	r1, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	3206      	adds	r2, #6
 8002090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d80c      	bhi.n	80020c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	e004      	b.n	80020ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d9bd      	bls.n	800205e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f4:	611a      	str	r2, [r3, #16]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e046      	b.n	800219e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800214c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002154:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	3212      	adds	r2, #18
 800216a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d80c      	bhi.n	800218e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6919      	ldr	r1, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	e004      	b.n	8002198 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d9b5      	bls.n	8002110 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ce:	60da      	str	r2, [r3, #12]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e177      	b.n	80024e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8166 	bne.w	80024e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80c0 	beq.w	80024e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_GPIO_Init+0x324>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a65      	ldr	r2, [pc, #404]	; (8002500 <HAL_GPIO_Init+0x324>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_GPIO_Init+0x324>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HAL_GPIO_Init+0x328>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_GPIO_Init+0x32c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d037      	beq.n	800241a <HAL_GPIO_Init+0x23e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a57      	ldr	r2, [pc, #348]	; (800250c <HAL_GPIO_Init+0x330>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_GPIO_Init+0x23a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a56      	ldr	r2, [pc, #344]	; (8002510 <HAL_GPIO_Init+0x334>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x236>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a55      	ldr	r2, [pc, #340]	; (8002514 <HAL_GPIO_Init+0x338>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x232>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_GPIO_Init+0x33c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x22e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a53      	ldr	r2, [pc, #332]	; (800251c <HAL_GPIO_Init+0x340>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x22a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_GPIO_Init+0x344>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x226>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_GPIO_Init+0x348>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x222>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_GPIO_Init+0x34c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x21e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	; (800252c <HAL_GPIO_Init+0x350>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023f2:	2309      	movs	r3, #9
 80023f4:	e012      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023f6:	230a      	movs	r3, #10
 80023f8:	e010      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023fa:	2308      	movs	r3, #8
 80023fc:	e00e      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00c      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002402:	2306      	movs	r3, #6
 8002404:	e00a      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002406:	2305      	movs	r3, #5
 8002408:	e008      	b.n	800241c <HAL_GPIO_Init+0x240>
 800240a:	2304      	movs	r3, #4
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x240>
 800240e:	2303      	movs	r3, #3
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x240>
 800241a:	2300      	movs	r3, #0
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f002 0203 	and.w	r2, r2, #3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4093      	lsls	r3, r2
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242c:	4935      	ldr	r1, [pc, #212]	; (8002504 <HAL_GPIO_Init+0x328>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_GPIO_Init+0x354>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a34      	ldr	r2, [pc, #208]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <HAL_GPIO_Init+0x354>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b2:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	f67f ae84 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40021c00 	.word	0x40021c00
 8002528:	40022000 	.word	0x40022000
 800252c:	40022400 	.word	0x40022400
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e001      	b.n	8002556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002598:	b08f      	sub	sp, #60	; 0x3c
 800259a:	af0a      	add	r7, sp, #40	; 0x28
 800259c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e10f      	b.n	80027c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fb8a 	bl	8000cdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 f935 	bl	8003856 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	687e      	ldr	r6, [r7, #4]
 80025f4:	466d      	mov	r5, sp
 80025f6:	f106 0410 	add.w	r4, r6, #16
 80025fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002606:	e885 0003 	stmia.w	r5, {r0, r1}
 800260a:	1d33      	adds	r3, r6, #4
 800260c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f001 f8c0 	bl	8003794 <USB_CoreInit>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0d0      	b.n	80027c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f001 f923 	bl	8003878 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e04a      	b.n	80026ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	333d      	adds	r3, #61	; 0x3d
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	333c      	adds	r3, #60	; 0x3c
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	b298      	uxth	r0, r3
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3344      	adds	r3, #68	; 0x44
 8002674:	4602      	mov	r2, r0
 8002676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3340      	adds	r3, #64	; 0x40
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3348      	adds	r3, #72	; 0x48
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334c      	adds	r3, #76	; 0x4c
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3354      	adds	r3, #84	; 0x54
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3301      	adds	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3af      	bcc.n	8002638 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e044      	b.n	8002768 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3b5      	bcc.n	80026de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	687e      	ldr	r6, [r7, #4]
 800277a:	466d      	mov	r5, sp
 800277c:	f106 0410 	add.w	r4, r6, #16
 8002780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800278c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002790:	1d33      	adds	r3, r6, #4
 8002792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002794:	6838      	ldr	r0, [r7, #0]
 8002796:	f001 f8bb 	bl	8003910 <USB_DevInit>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e00d      	b.n	80027c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fa86 	bl	8003cd2 <USB_DevDisconnect>

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e267      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d075      	beq.n	80028da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ee:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d00c      	beq.n	8002814 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002802:	2b08      	cmp	r3, #8
 8002804:	d112      	bne.n	800282c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002806:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002812:	d10b      	bne.n	800282c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d05b      	beq.n	80028d8 <HAL_RCC_OscConfig+0x108>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d157      	bne.n	80028d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e242      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002834:	d106      	bne.n	8002844 <HAL_RCC_OscConfig+0x74>
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e01d      	b.n	8002880 <HAL_RCC_OscConfig+0xb0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x98>
 800284e:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6f      	ldr	r2, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6c      	ldr	r2, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0xb0>
 8002868:	4b69      	ldr	r3, [pc, #420]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a68      	ldr	r2, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a65      	ldr	r2, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7ff f86a 	bl	8001960 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff f866 	bl	8001960 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e207      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0xc0>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff f856 	bl	8001960 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b8:	f7ff f852 	bl	8001960 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1f3      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0xe8>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d063      	beq.n	80029ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028e6:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d11c      	bne.n	8002938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b44      	ldr	r3, [pc, #272]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_RCC_OscConfig+0x152>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e1c7      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4937      	ldr	r1, [pc, #220]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	e03a      	b.n	80029ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002940:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <HAL_RCC_OscConfig+0x244>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7ff f80b 	bl	8001960 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294e:	f7ff f807 	bl	8001960 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1a8      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4925      	ldr	r1, [pc, #148]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCC_OscConfig+0x244>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe ffea 	bl	8001960 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe ffe6 	bl	8001960 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e187      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d036      	beq.n	8002a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_RCC_OscConfig+0x248>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe ffca 	bl	8001960 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe ffc6 	bl	8001960 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e167      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x200>
 80029ee:	e01b      	b.n	8002a28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_OscConfig+0x248>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7fe ffb3 	bl	8001960 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	e00e      	b.n	8002a1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029fe:	f7fe ffaf 	bl	8001960 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d907      	bls.n	8002a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e150      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	42470000 	.word	0x42470000
 8002a18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ea      	bne.n	80029fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8097 	beq.w	8002b64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	4b7d      	ldr	r3, [pc, #500]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a7c      	ldr	r2, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b7a      	ldr	r3, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b77      	ldr	r3, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x474>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d118      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	4b74      	ldr	r3, [pc, #464]	; (8002c44 <HAL_RCC_OscConfig+0x474>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a73      	ldr	r2, [pc, #460]	; (8002c44 <HAL_RCC_OscConfig+0x474>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe ff6f 	bl	8001960 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7fe ff6b 	bl	8001960 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e10c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x474>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x2ea>
 8002aac:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a63      	ldr	r2, [pc, #396]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCC_OscConfig+0x324>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x30c>
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	4a5e      	ldr	r2, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ace:	4b5c      	ldr	r3, [pc, #368]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a5b      	ldr	r2, [pc, #364]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0x324>
 8002adc:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a54      	ldr	r2, [pc, #336]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe ff30 	bl	8001960 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe ff2c 	bl	8001960 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0cb      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ee      	beq.n	8002b04 <HAL_RCC_OscConfig+0x334>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b28:	f7fe ff1a 	bl	8001960 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe ff16 	bl	8001960 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0b5      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ee      	bne.n	8002b30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	4a38      	ldr	r2, [pc, #224]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a1 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d05c      	beq.n	8002c34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d141      	bne.n	8002c06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe feea 	bl	8001960 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fee6 	bl	8001960 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e087      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	491b      	ldr	r1, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe febf 	bl	8001960 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe febb 	bl	8001960 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e05c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x416>
 8002c04:	e054      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fea8 	bl	8001960 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fea4 	bl	8001960 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e045      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x444>
 8002c32:	e03d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e038      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_OscConfig+0x4ec>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d028      	beq.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d121      	bne.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d11a      	bne.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d111      	bne.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	3b01      	subs	r3, #1
 8002c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0cc      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d90c      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0b8      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d14:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d2c:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	494d      	ldr	r1, [pc, #308]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d044      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d119      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e067      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4934      	ldr	r1, [pc, #208]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fdd6 	bl	8001960 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe fdd2 	bl	8001960 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e04f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d20c      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e032      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4916      	ldr	r1, [pc, #88]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e46:	f000 f821 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	490a      	ldr	r1, [pc, #40]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	5ccb      	ldrb	r3, [r1, r3]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fd36 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023c00 	.word	0x40023c00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	08004eb4 	.word	0x08004eb4
 8002e84:	20000060 	.word	0x20000060
 8002e88:	2000009c 	.word	0x2000009c

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b094      	sub	sp, #80	; 0x50
 8002e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	647b      	str	r3, [r7, #68]	; 0x44
 8002e98:	2300      	movs	r3, #0
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea4:	4b79      	ldr	r3, [pc, #484]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d00d      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x40>
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	f200 80e1 	bhi.w	8003078 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ebe:	e0db      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b73      	ldr	r3, [pc, #460]	; (8003090 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ec4:	e0db      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ec6:	4b73      	ldr	r3, [pc, #460]	; (8003094 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ec8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eca:	e0d8      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8002efa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002efe:	4622      	mov	r2, r4
 8002f00:	462b      	mov	r3, r5
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4621      	mov	r1, r4
 8002f18:	1a51      	subs	r1, r2, r1
 8002f1a:	6139      	str	r1, [r7, #16]
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f30:	4659      	mov	r1, fp
 8002f32:	018b      	lsls	r3, r1, #6
 8002f34:	4651      	mov	r1, sl
 8002f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	018a      	lsls	r2, r1, #6
 8002f3e:	4651      	mov	r1, sl
 8002f40:	ebb2 0801 	subs.w	r8, r2, r1
 8002f44:	4659      	mov	r1, fp
 8002f46:	eb63 0901 	sbc.w	r9, r3, r1
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f5e:	4690      	mov	r8, r2
 8002f60:	4699      	mov	r9, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	eb18 0303 	adds.w	r3, r8, r3
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	eb49 0303 	adc.w	r3, r9, r3
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f7e:	4629      	mov	r1, r5
 8002f80:	024b      	lsls	r3, r1, #9
 8002f82:	4621      	mov	r1, r4
 8002f84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f88:	4621      	mov	r1, r4
 8002f8a:	024a      	lsls	r2, r1, #9
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f92:	2200      	movs	r2, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f9c:	f7fd f978 	bl	8000290 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa8:	e058      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b38      	ldr	r3, [pc, #224]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fba:	623b      	str	r3, [r7, #32]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	f04f 0000 	mov.w	r0, #0
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	0159      	lsls	r1, r3, #5
 8002fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd6:	0150      	lsls	r0, r2, #5
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4641      	mov	r1, r8
 8002fde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ff4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ff8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ffc:	ebb2 040a 	subs.w	r4, r2, sl
 8003000:	eb63 050b 	sbc.w	r5, r3, fp
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	00eb      	lsls	r3, r5, #3
 800300e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003012:	00e2      	lsls	r2, r4, #3
 8003014:	4614      	mov	r4, r2
 8003016:	461d      	mov	r5, r3
 8003018:	4643      	mov	r3, r8
 800301a:	18e3      	adds	r3, r4, r3
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	464b      	mov	r3, r9
 8003020:	eb45 0303 	adc.w	r3, r5, r3
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003032:	4629      	mov	r1, r5
 8003034:	028b      	lsls	r3, r1, #10
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800303c:	4621      	mov	r1, r4
 800303e:	028a      	lsls	r2, r1, #10
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003046:	2200      	movs	r2, #0
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	61fa      	str	r2, [r7, #28]
 800304c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003050:	f7fd f91e 	bl	8000290 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	3301      	adds	r3, #1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800306c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800306e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003076:	e002      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetSysClockFreq+0x204>)
 800307a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800307c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003080:	4618      	mov	r0, r3
 8003082:	3750      	adds	r7, #80	; 0x50
 8003084:	46bd      	mov	sp, r7
 8003086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	00f42400 	.word	0x00f42400
 8003094:	007a1200 	.word	0x007a1200

08003098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_RCC_GetHCLKFreq+0x14>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000060 	.word	0x20000060

080030b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030b4:	f7ff fff0 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0a9b      	lsrs	r3, r3, #10
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	08004ec4 	.word	0x08004ec4

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030dc:	f7ff ffdc 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0b5b      	lsrs	r3, r3, #13
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	08004ec4 	.word	0x08004ec4

08003100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e07b      	b.n	800320a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003122:	d009      	beq.n	8003138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
 800312a:	e005      	b.n	8003138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fd12 	bl	8000b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	f003 0104 	and.w	r1, r3, #4
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	f003 0210 	and.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e03f      	b.n	80032a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd fd07 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003254:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f828 	bl	80032ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800326a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800327a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800328a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b0:	b0c0      	sub	sp, #256	; 0x100
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c8:	68d9      	ldr	r1, [r3, #12]
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	ea40 0301 	orr.w	r3, r0, r1
 80032d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003304:	f021 010c 	bic.w	r1, r1, #12
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003312:	430b      	orrs	r3, r1
 8003314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	6999      	ldr	r1, [r3, #24]
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	ea40 0301 	orr.w	r3, r0, r1
 8003332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b8f      	ldr	r3, [pc, #572]	; (8003578 <UART_SetConfig+0x2cc>)
 800333c:	429a      	cmp	r2, r3
 800333e:	d005      	beq.n	800334c <UART_SetConfig+0xa0>
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4b8d      	ldr	r3, [pc, #564]	; (800357c <UART_SetConfig+0x2d0>)
 8003348:	429a      	cmp	r2, r3
 800334a:	d104      	bne.n	8003356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800334c:	f7ff fec4 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 8003350:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003354:	e003      	b.n	800335e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003356:	f7ff feab 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 800335a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	f040 810c 	bne.w	8003584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800336c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003376:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800337a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	1891      	adds	r1, r2, r2
 8003384:	65b9      	str	r1, [r7, #88]	; 0x58
 8003386:	415b      	adcs	r3, r3
 8003388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800338e:	4621      	mov	r1, r4
 8003390:	eb12 0801 	adds.w	r8, r2, r1
 8003394:	4629      	mov	r1, r5
 8003396:	eb43 0901 	adc.w	r9, r3, r1
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ae:	4690      	mov	r8, r2
 80033b0:	4699      	mov	r9, r3
 80033b2:	4623      	mov	r3, r4
 80033b4:	eb18 0303 	adds.w	r3, r8, r3
 80033b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033bc:	462b      	mov	r3, r5
 80033be:	eb49 0303 	adc.w	r3, r9, r3
 80033c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033da:	460b      	mov	r3, r1
 80033dc:	18db      	adds	r3, r3, r3
 80033de:	653b      	str	r3, [r7, #80]	; 0x50
 80033e0:	4613      	mov	r3, r2
 80033e2:	eb42 0303 	adc.w	r3, r2, r3
 80033e6:	657b      	str	r3, [r7, #84]	; 0x54
 80033e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033f0:	f7fc ff4e 	bl	8000290 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4b61      	ldr	r3, [pc, #388]	; (8003580 <UART_SetConfig+0x2d4>)
 80033fa:	fba3 2302 	umull	r2, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	011c      	lsls	r4, r3, #4
 8003402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800340c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	1891      	adds	r1, r2, r2
 800341a:	64b9      	str	r1, [r7, #72]	; 0x48
 800341c:	415b      	adcs	r3, r3
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003424:	4641      	mov	r1, r8
 8003426:	eb12 0a01 	adds.w	sl, r2, r1
 800342a:	4649      	mov	r1, r9
 800342c:	eb43 0b01 	adc.w	fp, r3, r1
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800343c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003444:	4692      	mov	sl, r2
 8003446:	469b      	mov	fp, r3
 8003448:	4643      	mov	r3, r8
 800344a:	eb1a 0303 	adds.w	r3, sl, r3
 800344e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003452:	464b      	mov	r3, r9
 8003454:	eb4b 0303 	adc.w	r3, fp, r3
 8003458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003468:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800346c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003470:	460b      	mov	r3, r1
 8003472:	18db      	adds	r3, r3, r3
 8003474:	643b      	str	r3, [r7, #64]	; 0x40
 8003476:	4613      	mov	r3, r2
 8003478:	eb42 0303 	adc.w	r3, r2, r3
 800347c:	647b      	str	r3, [r7, #68]	; 0x44
 800347e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003486:	f7fc ff03 	bl	8000290 <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4611      	mov	r1, r2
 8003490:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <UART_SetConfig+0x2d4>)
 8003492:	fba3 2301 	umull	r2, r3, r3, r1
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2264      	movs	r2, #100	; 0x64
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	1acb      	subs	r3, r1, r3
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034a6:	4b36      	ldr	r3, [pc, #216]	; (8003580 <UART_SetConfig+0x2d4>)
 80034a8:	fba3 2302 	umull	r2, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b4:	441c      	add	r4, r3
 80034b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034c8:	4642      	mov	r2, r8
 80034ca:	464b      	mov	r3, r9
 80034cc:	1891      	adds	r1, r2, r2
 80034ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80034d0:	415b      	adcs	r3, r3
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034d8:	4641      	mov	r1, r8
 80034da:	1851      	adds	r1, r2, r1
 80034dc:	6339      	str	r1, [r7, #48]	; 0x30
 80034de:	4649      	mov	r1, r9
 80034e0:	414b      	adcs	r3, r1
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034f0:	4659      	mov	r1, fp
 80034f2:	00cb      	lsls	r3, r1, #3
 80034f4:	4651      	mov	r1, sl
 80034f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034fa:	4651      	mov	r1, sl
 80034fc:	00ca      	lsls	r2, r1, #3
 80034fe:	4610      	mov	r0, r2
 8003500:	4619      	mov	r1, r3
 8003502:	4603      	mov	r3, r0
 8003504:	4642      	mov	r2, r8
 8003506:	189b      	adds	r3, r3, r2
 8003508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800350c:	464b      	mov	r3, r9
 800350e:	460a      	mov	r2, r1
 8003510:	eb42 0303 	adc.w	r3, r2, r3
 8003514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003524:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800352c:	460b      	mov	r3, r1
 800352e:	18db      	adds	r3, r3, r3
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
 8003532:	4613      	mov	r3, r2
 8003534:	eb42 0303 	adc.w	r3, r2, r3
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800353e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003542:	f7fc fea5 	bl	8000290 <__aeabi_uldivmod>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <UART_SetConfig+0x2d4>)
 800354c:	fba3 1302 	umull	r1, r3, r3, r2
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	2164      	movs	r1, #100	; 0x64
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	3332      	adds	r3, #50	; 0x32
 800355e:	4a08      	ldr	r2, [pc, #32]	; (8003580 <UART_SetConfig+0x2d4>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	f003 0207 	and.w	r2, r3, #7
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4422      	add	r2, r4
 8003572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003574:	e105      	b.n	8003782 <UART_SetConfig+0x4d6>
 8003576:	bf00      	nop
 8003578:	40011000 	.word	0x40011000
 800357c:	40011400 	.word	0x40011400
 8003580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003588:	2200      	movs	r2, #0
 800358a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800358e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003596:	4642      	mov	r2, r8
 8003598:	464b      	mov	r3, r9
 800359a:	1891      	adds	r1, r2, r2
 800359c:	6239      	str	r1, [r7, #32]
 800359e:	415b      	adcs	r3, r3
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
 80035a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035a6:	4641      	mov	r1, r8
 80035a8:	1854      	adds	r4, r2, r1
 80035aa:	4649      	mov	r1, r9
 80035ac:	eb43 0501 	adc.w	r5, r3, r1
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	00eb      	lsls	r3, r5, #3
 80035ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035be:	00e2      	lsls	r2, r4, #3
 80035c0:	4614      	mov	r4, r2
 80035c2:	461d      	mov	r5, r3
 80035c4:	4643      	mov	r3, r8
 80035c6:	18e3      	adds	r3, r4, r3
 80035c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035cc:	464b      	mov	r3, r9
 80035ce:	eb45 0303 	adc.w	r3, r5, r3
 80035d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035f2:	4629      	mov	r1, r5
 80035f4:	008b      	lsls	r3, r1, #2
 80035f6:	4621      	mov	r1, r4
 80035f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fc:	4621      	mov	r1, r4
 80035fe:	008a      	lsls	r2, r1, #2
 8003600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003604:	f7fc fe44 	bl	8000290 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4b60      	ldr	r3, [pc, #384]	; (8003790 <UART_SetConfig+0x4e4>)
 800360e:	fba3 2302 	umull	r2, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	011c      	lsls	r4, r3, #4
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	1891      	adds	r1, r2, r2
 800362e:	61b9      	str	r1, [r7, #24]
 8003630:	415b      	adcs	r3, r3
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003638:	4641      	mov	r1, r8
 800363a:	1851      	adds	r1, r2, r1
 800363c:	6139      	str	r1, [r7, #16]
 800363e:	4649      	mov	r1, r9
 8003640:	414b      	adcs	r3, r1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003650:	4659      	mov	r1, fp
 8003652:	00cb      	lsls	r3, r1, #3
 8003654:	4651      	mov	r1, sl
 8003656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365a:	4651      	mov	r1, sl
 800365c:	00ca      	lsls	r2, r1, #3
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	4603      	mov	r3, r0
 8003664:	4642      	mov	r2, r8
 8003666:	189b      	adds	r3, r3, r2
 8003668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800366c:	464b      	mov	r3, r9
 800366e:	460a      	mov	r2, r1
 8003670:	eb42 0303 	adc.w	r3, r2, r3
 8003674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	67bb      	str	r3, [r7, #120]	; 0x78
 8003682:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003690:	4649      	mov	r1, r9
 8003692:	008b      	lsls	r3, r1, #2
 8003694:	4641      	mov	r1, r8
 8003696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800369a:	4641      	mov	r1, r8
 800369c:	008a      	lsls	r2, r1, #2
 800369e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036a2:	f7fc fdf5 	bl	8000290 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4b39      	ldr	r3, [pc, #228]	; (8003790 <UART_SetConfig+0x4e4>)
 80036ac:	fba3 1302 	umull	r1, r3, r3, r2
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	2164      	movs	r1, #100	; 0x64
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	3332      	adds	r3, #50	; 0x32
 80036be:	4a34      	ldr	r2, [pc, #208]	; (8003790 <UART_SetConfig+0x4e4>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ca:	441c      	add	r4, r3
 80036cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d0:	2200      	movs	r2, #0
 80036d2:	673b      	str	r3, [r7, #112]	; 0x70
 80036d4:	677a      	str	r2, [r7, #116]	; 0x74
 80036d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036da:	4642      	mov	r2, r8
 80036dc:	464b      	mov	r3, r9
 80036de:	1891      	adds	r1, r2, r2
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	415b      	adcs	r3, r3
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ea:	4641      	mov	r1, r8
 80036ec:	1851      	adds	r1, r2, r1
 80036ee:	6039      	str	r1, [r7, #0]
 80036f0:	4649      	mov	r1, r9
 80036f2:	414b      	adcs	r3, r1
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003702:	4659      	mov	r1, fp
 8003704:	00cb      	lsls	r3, r1, #3
 8003706:	4651      	mov	r1, sl
 8003708:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370c:	4651      	mov	r1, sl
 800370e:	00ca      	lsls	r2, r1, #3
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	4603      	mov	r3, r0
 8003716:	4642      	mov	r2, r8
 8003718:	189b      	adds	r3, r3, r2
 800371a:	66bb      	str	r3, [r7, #104]	; 0x68
 800371c:	464b      	mov	r3, r9
 800371e:	460a      	mov	r2, r1
 8003720:	eb42 0303 	adc.w	r3, r2, r3
 8003724:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	663b      	str	r3, [r7, #96]	; 0x60
 8003730:	667a      	str	r2, [r7, #100]	; 0x64
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800373e:	4649      	mov	r1, r9
 8003740:	008b      	lsls	r3, r1, #2
 8003742:	4641      	mov	r1, r8
 8003744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003748:	4641      	mov	r1, r8
 800374a:	008a      	lsls	r2, r1, #2
 800374c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003750:	f7fc fd9e 	bl	8000290 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <UART_SetConfig+0x4e4>)
 800375a:	fba3 1302 	umull	r1, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2164      	movs	r1, #100	; 0x64
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	3332      	adds	r3, #50	; 0x32
 800376c:	4a08      	ldr	r2, [pc, #32]	; (8003790 <UART_SetConfig+0x4e4>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4422      	add	r2, r4
 8003780:	609a      	str	r2, [r3, #8]
}
 8003782:	bf00      	nop
 8003784:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003788:	46bd      	mov	sp, r7
 800378a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378e:	bf00      	nop
 8003790:	51eb851f 	.word	0x51eb851f

08003794 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003794:	b084      	sub	sp, #16
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	f107 001c 	add.w	r0, r7, #28
 80037a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d122      	bne.n	80037f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 faa2 	bl	8003d30 <USB_CoreReset>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e01a      	b.n	8003828 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa96 	bl	8003d30 <USB_CoreReset>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
 800381a:	e005      	b.n	8003828 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10b      	bne.n	8003846 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f043 0206 	orr.w	r2, r3, #6
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003852:	b004      	add	sp, #16
 8003854:	4770      	bx	lr

08003856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 0201 	bic.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d115      	bne.n	80038c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038a6:	2001      	movs	r0, #1
 80038a8:	f7fe f866 	bl	8001978 <HAL_Delay>
      ms++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa2e 	bl	8003d14 <USB_GetMode>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d01e      	beq.n	80038fc <USB_SetCurrentMode+0x84>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b31      	cmp	r3, #49	; 0x31
 80038c2:	d9f0      	bls.n	80038a6 <USB_SetCurrentMode+0x2e>
 80038c4:	e01a      	b.n	80038fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d115      	bne.n	80038f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038d8:	2001      	movs	r0, #1
 80038da:	f7fe f84d 	bl	8001978 <HAL_Delay>
      ms++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa15 	bl	8003d14 <USB_GetMode>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <USB_SetCurrentMode+0x84>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b31      	cmp	r3, #49	; 0x31
 80038f4:	d9f0      	bls.n	80038d8 <USB_SetCurrentMode+0x60>
 80038f6:	e001      	b.n	80038fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e005      	b.n	8003908 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b32      	cmp	r3, #50	; 0x32
 8003900:	d101      	bne.n	8003906 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003910:	b084      	sub	sp, #16
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800391e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e009      	b.n	8003944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	3340      	adds	r3, #64	; 0x40
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	2200      	movs	r2, #0
 800393c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	3301      	adds	r3, #1
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b0e      	cmp	r3, #14
 8003948:	d9f2      	bls.n	8003930 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800394a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11c      	bne.n	800398a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800395e:	f043 0302 	orr.w	r3, r3, #2
 8003962:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
 8003988:	e00b      	b.n	80039a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039a8:	461a      	mov	r2, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	4619      	mov	r1, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	461a      	mov	r2, r3
 80039be:	680b      	ldr	r3, [r1, #0]
 80039c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10c      	bne.n	80039e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d104      	bne.n	80039d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039ce:	2100      	movs	r1, #0
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f965 	bl	8003ca0 <USB_SetDevSpeed>
 80039d6:	e008      	b.n	80039ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039d8:	2101      	movs	r1, #1
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f960 	bl	8003ca0 <USB_SetDevSpeed>
 80039e0:	e003      	b.n	80039ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039e2:	2103      	movs	r1, #3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f95b 	bl	8003ca0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039ea:	2110      	movs	r1, #16
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f8f3 	bl	8003bd8 <USB_FlushTxFifo>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f91f 	bl	8003c40 <USB_FlushRxFifo>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	461a      	mov	r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2300      	movs	r3, #0
 8003a22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e043      	b.n	8003abe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a4c:	d118      	bne.n	8003a80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a60:	461a      	mov	r2, r3
 8003a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e013      	b.n	8003a92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a76:	461a      	mov	r2, r3
 8003a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e008      	b.n	8003a92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	3301      	adds	r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d3b7      	bcc.n	8003a36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e043      	b.n	8003b54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae2:	d118      	bne.n	8003b16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af6:	461a      	mov	r2, r3
 8003af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e013      	b.n	8003b28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	e008      	b.n	8003b28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	461a      	mov	r2, r3
 8003b24:	2300      	movs	r3, #0
 8003b26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	3301      	adds	r3, #1
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d3b7      	bcc.n	8003acc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <USB_DevInit+0x2c4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f043 0208 	orr.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d107      	bne.n	8003bc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bd0:	b004      	add	sp, #16
 8003bd2:	4770      	bx	lr
 8003bd4:	803c3800 	.word	0x803c3800

08003bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3301      	adds	r3, #1
 8003bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <USB_FlushTxFifo+0x64>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e01b      	b.n	8003c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	daf2      	bge.n	8003be6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	019b      	lsls	r3, r3, #6
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3301      	adds	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <USB_FlushTxFifo+0x64>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e006      	b.n	8003c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d0f0      	beq.n	8003c10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	00030d40 	.word	0x00030d40

08003c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <USB_FlushRxFifo+0x5c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e018      	b.n	8003c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	daf2      	bge.n	8003c4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <USB_FlushRxFifo+0x5c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e006      	b.n	8003c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d0f0      	beq.n	8003c70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	00030d40 	.word	0x00030d40

08003ca0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003cec:	f023 0303 	bic.w	r3, r3, #3
 8003cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0301 	and.w	r3, r3, #1
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <USB_CoreReset+0x64>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e01b      	b.n	8003d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	daf2      	bge.n	8003d3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <USB_CoreReset+0x64>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e006      	b.n	8003d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d0f0      	beq.n	8003d66 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	00030d40 	.word	0x00030d40

08003d98 <__assert_func>:
 8003d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d9a:	4614      	mov	r4, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <__assert_func+0x2c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4605      	mov	r5, r0
 8003da4:	68d8      	ldr	r0, [r3, #12]
 8003da6:	b14c      	cbz	r4, 8003dbc <__assert_func+0x24>
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <__assert_func+0x30>)
 8003daa:	9100      	str	r1, [sp, #0]
 8003dac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003db0:	4906      	ldr	r1, [pc, #24]	; (8003dcc <__assert_func+0x34>)
 8003db2:	462b      	mov	r3, r5
 8003db4:	f000 f814 	bl	8003de0 <fiprintf>
 8003db8:	f000 fbfe 	bl	80045b8 <abort>
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <__assert_func+0x38>)
 8003dbe:	461c      	mov	r4, r3
 8003dc0:	e7f3      	b.n	8003daa <__assert_func+0x12>
 8003dc2:	bf00      	nop
 8003dc4:	200000a4 	.word	0x200000a4
 8003dc8:	08004f06 	.word	0x08004f06
 8003dcc:	08004f13 	.word	0x08004f13
 8003dd0:	08004f41 	.word	0x08004f41

08003dd4 <__errno>:
 8003dd4:	4b01      	ldr	r3, [pc, #4]	; (8003ddc <__errno+0x8>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	200000a4 	.word	0x200000a4

08003de0 <fiprintf>:
 8003de0:	b40e      	push	{r1, r2, r3}
 8003de2:	b503      	push	{r0, r1, lr}
 8003de4:	4601      	mov	r1, r0
 8003de6:	ab03      	add	r3, sp, #12
 8003de8:	4805      	ldr	r0, [pc, #20]	; (8003e00 <fiprintf+0x20>)
 8003dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dee:	6800      	ldr	r0, [r0, #0]
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	f000 f85d 	bl	8003eb0 <_vfiprintf_r>
 8003df6:	b002      	add	sp, #8
 8003df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dfc:	b003      	add	sp, #12
 8003dfe:	4770      	bx	lr
 8003e00:	200000a4 	.word	0x200000a4

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4d0d      	ldr	r5, [pc, #52]	; (8003e3c <__libc_init_array+0x38>)
 8003e08:	4c0d      	ldr	r4, [pc, #52]	; (8003e40 <__libc_init_array+0x3c>)
 8003e0a:	1b64      	subs	r4, r4, r5
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	2600      	movs	r6, #0
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	4d0b      	ldr	r5, [pc, #44]	; (8003e44 <__libc_init_array+0x40>)
 8003e16:	4c0c      	ldr	r4, [pc, #48]	; (8003e48 <__libc_init_array+0x44>)
 8003e18:	f000 ffe2 	bl	8004de0 <_init>
 8003e1c:	1b64      	subs	r4, r4, r5
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	2600      	movs	r6, #0
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	08004fe4 	.word	0x08004fe4
 8003e40:	08004fe4 	.word	0x08004fe4
 8003e44:	08004fe4 	.word	0x08004fe4
 8003e48:	08004fe8 	.word	0x08004fe8

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <__sfputc_r>:
 8003e5c:	6893      	ldr	r3, [r2, #8]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	b410      	push	{r4}
 8003e64:	6093      	str	r3, [r2, #8]
 8003e66:	da08      	bge.n	8003e7a <__sfputc_r+0x1e>
 8003e68:	6994      	ldr	r4, [r2, #24]
 8003e6a:	42a3      	cmp	r3, r4
 8003e6c:	db01      	blt.n	8003e72 <__sfputc_r+0x16>
 8003e6e:	290a      	cmp	r1, #10
 8003e70:	d103      	bne.n	8003e7a <__sfputc_r+0x1e>
 8003e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e76:	f000 badf 	b.w	8004438 <__swbuf_r>
 8003e7a:	6813      	ldr	r3, [r2, #0]
 8003e7c:	1c58      	adds	r0, r3, #1
 8003e7e:	6010      	str	r0, [r2, #0]
 8003e80:	7019      	strb	r1, [r3, #0]
 8003e82:	4608      	mov	r0, r1
 8003e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <__sfputs_r>:
 8003e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	460f      	mov	r7, r1
 8003e90:	4614      	mov	r4, r2
 8003e92:	18d5      	adds	r5, r2, r3
 8003e94:	42ac      	cmp	r4, r5
 8003e96:	d101      	bne.n	8003e9c <__sfputs_r+0x12>
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e007      	b.n	8003eac <__sfputs_r+0x22>
 8003e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea0:	463a      	mov	r2, r7
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7ff ffda 	bl	8003e5c <__sfputc_r>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d1f3      	bne.n	8003e94 <__sfputs_r+0xa>
 8003eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eb0 <_vfiprintf_r>:
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb4:	460d      	mov	r5, r1
 8003eb6:	b09d      	sub	sp, #116	; 0x74
 8003eb8:	4614      	mov	r4, r2
 8003eba:	4698      	mov	r8, r3
 8003ebc:	4606      	mov	r6, r0
 8003ebe:	b118      	cbz	r0, 8003ec8 <_vfiprintf_r+0x18>
 8003ec0:	6983      	ldr	r3, [r0, #24]
 8003ec2:	b90b      	cbnz	r3, 8003ec8 <_vfiprintf_r+0x18>
 8003ec4:	f000 fc9a 	bl	80047fc <__sinit>
 8003ec8:	4b89      	ldr	r3, [pc, #548]	; (80040f0 <_vfiprintf_r+0x240>)
 8003eca:	429d      	cmp	r5, r3
 8003ecc:	d11b      	bne.n	8003f06 <_vfiprintf_r+0x56>
 8003ece:	6875      	ldr	r5, [r6, #4]
 8003ed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ed2:	07d9      	lsls	r1, r3, #31
 8003ed4:	d405      	bmi.n	8003ee2 <_vfiprintf_r+0x32>
 8003ed6:	89ab      	ldrh	r3, [r5, #12]
 8003ed8:	059a      	lsls	r2, r3, #22
 8003eda:	d402      	bmi.n	8003ee2 <_vfiprintf_r+0x32>
 8003edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ede:	f000 fd2b 	bl	8004938 <__retarget_lock_acquire_recursive>
 8003ee2:	89ab      	ldrh	r3, [r5, #12]
 8003ee4:	071b      	lsls	r3, r3, #28
 8003ee6:	d501      	bpl.n	8003eec <_vfiprintf_r+0x3c>
 8003ee8:	692b      	ldr	r3, [r5, #16]
 8003eea:	b9eb      	cbnz	r3, 8003f28 <_vfiprintf_r+0x78>
 8003eec:	4629      	mov	r1, r5
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f000 faf4 	bl	80044dc <__swsetup_r>
 8003ef4:	b1c0      	cbz	r0, 8003f28 <_vfiprintf_r+0x78>
 8003ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ef8:	07dc      	lsls	r4, r3, #31
 8003efa:	d50e      	bpl.n	8003f1a <_vfiprintf_r+0x6a>
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f00:	b01d      	add	sp, #116	; 0x74
 8003f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f06:	4b7b      	ldr	r3, [pc, #492]	; (80040f4 <_vfiprintf_r+0x244>)
 8003f08:	429d      	cmp	r5, r3
 8003f0a:	d101      	bne.n	8003f10 <_vfiprintf_r+0x60>
 8003f0c:	68b5      	ldr	r5, [r6, #8]
 8003f0e:	e7df      	b.n	8003ed0 <_vfiprintf_r+0x20>
 8003f10:	4b79      	ldr	r3, [pc, #484]	; (80040f8 <_vfiprintf_r+0x248>)
 8003f12:	429d      	cmp	r5, r3
 8003f14:	bf08      	it	eq
 8003f16:	68f5      	ldreq	r5, [r6, #12]
 8003f18:	e7da      	b.n	8003ed0 <_vfiprintf_r+0x20>
 8003f1a:	89ab      	ldrh	r3, [r5, #12]
 8003f1c:	0598      	lsls	r0, r3, #22
 8003f1e:	d4ed      	bmi.n	8003efc <_vfiprintf_r+0x4c>
 8003f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f22:	f000 fd0a 	bl	800493a <__retarget_lock_release_recursive>
 8003f26:	e7e9      	b.n	8003efc <_vfiprintf_r+0x4c>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f36:	2330      	movs	r3, #48	; 0x30
 8003f38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040fc <_vfiprintf_r+0x24c>
 8003f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f40:	f04f 0901 	mov.w	r9, #1
 8003f44:	4623      	mov	r3, r4
 8003f46:	469a      	mov	sl, r3
 8003f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f4c:	b10a      	cbz	r2, 8003f52 <_vfiprintf_r+0xa2>
 8003f4e:	2a25      	cmp	r2, #37	; 0x25
 8003f50:	d1f9      	bne.n	8003f46 <_vfiprintf_r+0x96>
 8003f52:	ebba 0b04 	subs.w	fp, sl, r4
 8003f56:	d00b      	beq.n	8003f70 <_vfiprintf_r+0xc0>
 8003f58:	465b      	mov	r3, fp
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f7ff ff93 	bl	8003e8a <__sfputs_r>
 8003f64:	3001      	adds	r0, #1
 8003f66:	f000 80aa 	beq.w	80040be <_vfiprintf_r+0x20e>
 8003f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f6c:	445a      	add	r2, fp
 8003f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f70:	f89a 3000 	ldrb.w	r3, [sl]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a2 	beq.w	80040be <_vfiprintf_r+0x20e>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f84:	f10a 0a01 	add.w	sl, sl, #1
 8003f88:	9304      	str	r3, [sp, #16]
 8003f8a:	9307      	str	r3, [sp, #28]
 8003f8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f90:	931a      	str	r3, [sp, #104]	; 0x68
 8003f92:	4654      	mov	r4, sl
 8003f94:	2205      	movs	r2, #5
 8003f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9a:	4858      	ldr	r0, [pc, #352]	; (80040fc <_vfiprintf_r+0x24c>)
 8003f9c:	f7fc f928 	bl	80001f0 <memchr>
 8003fa0:	9a04      	ldr	r2, [sp, #16]
 8003fa2:	b9d8      	cbnz	r0, 8003fdc <_vfiprintf_r+0x12c>
 8003fa4:	06d1      	lsls	r1, r2, #27
 8003fa6:	bf44      	itt	mi
 8003fa8:	2320      	movmi	r3, #32
 8003faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fae:	0713      	lsls	r3, r2, #28
 8003fb0:	bf44      	itt	mi
 8003fb2:	232b      	movmi	r3, #43	; 0x2b
 8003fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8003fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003fbe:	d015      	beq.n	8003fec <_vfiprintf_r+0x13c>
 8003fc0:	9a07      	ldr	r2, [sp, #28]
 8003fc2:	4654      	mov	r4, sl
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f04f 0c0a 	mov.w	ip, #10
 8003fca:	4621      	mov	r1, r4
 8003fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fd0:	3b30      	subs	r3, #48	; 0x30
 8003fd2:	2b09      	cmp	r3, #9
 8003fd4:	d94e      	bls.n	8004074 <_vfiprintf_r+0x1c4>
 8003fd6:	b1b0      	cbz	r0, 8004006 <_vfiprintf_r+0x156>
 8003fd8:	9207      	str	r2, [sp, #28]
 8003fda:	e014      	b.n	8004006 <_vfiprintf_r+0x156>
 8003fdc:	eba0 0308 	sub.w	r3, r0, r8
 8003fe0:	fa09 f303 	lsl.w	r3, r9, r3
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	9304      	str	r3, [sp, #16]
 8003fe8:	46a2      	mov	sl, r4
 8003fea:	e7d2      	b.n	8003f92 <_vfiprintf_r+0xe2>
 8003fec:	9b03      	ldr	r3, [sp, #12]
 8003fee:	1d19      	adds	r1, r3, #4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	9103      	str	r1, [sp, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bfbb      	ittet	lt
 8003ff8:	425b      	neglt	r3, r3
 8003ffa:	f042 0202 	orrlt.w	r2, r2, #2
 8003ffe:	9307      	strge	r3, [sp, #28]
 8004000:	9307      	strlt	r3, [sp, #28]
 8004002:	bfb8      	it	lt
 8004004:	9204      	strlt	r2, [sp, #16]
 8004006:	7823      	ldrb	r3, [r4, #0]
 8004008:	2b2e      	cmp	r3, #46	; 0x2e
 800400a:	d10c      	bne.n	8004026 <_vfiprintf_r+0x176>
 800400c:	7863      	ldrb	r3, [r4, #1]
 800400e:	2b2a      	cmp	r3, #42	; 0x2a
 8004010:	d135      	bne.n	800407e <_vfiprintf_r+0x1ce>
 8004012:	9b03      	ldr	r3, [sp, #12]
 8004014:	1d1a      	adds	r2, r3, #4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	9203      	str	r2, [sp, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfb8      	it	lt
 800401e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004022:	3402      	adds	r4, #2
 8004024:	9305      	str	r3, [sp, #20]
 8004026:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800410c <_vfiprintf_r+0x25c>
 800402a:	7821      	ldrb	r1, [r4, #0]
 800402c:	2203      	movs	r2, #3
 800402e:	4650      	mov	r0, sl
 8004030:	f7fc f8de 	bl	80001f0 <memchr>
 8004034:	b140      	cbz	r0, 8004048 <_vfiprintf_r+0x198>
 8004036:	2340      	movs	r3, #64	; 0x40
 8004038:	eba0 000a 	sub.w	r0, r0, sl
 800403c:	fa03 f000 	lsl.w	r0, r3, r0
 8004040:	9b04      	ldr	r3, [sp, #16]
 8004042:	4303      	orrs	r3, r0
 8004044:	3401      	adds	r4, #1
 8004046:	9304      	str	r3, [sp, #16]
 8004048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404c:	482c      	ldr	r0, [pc, #176]	; (8004100 <_vfiprintf_r+0x250>)
 800404e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004052:	2206      	movs	r2, #6
 8004054:	f7fc f8cc 	bl	80001f0 <memchr>
 8004058:	2800      	cmp	r0, #0
 800405a:	d03f      	beq.n	80040dc <_vfiprintf_r+0x22c>
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <_vfiprintf_r+0x254>)
 800405e:	bb1b      	cbnz	r3, 80040a8 <_vfiprintf_r+0x1f8>
 8004060:	9b03      	ldr	r3, [sp, #12]
 8004062:	3307      	adds	r3, #7
 8004064:	f023 0307 	bic.w	r3, r3, #7
 8004068:	3308      	adds	r3, #8
 800406a:	9303      	str	r3, [sp, #12]
 800406c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800406e:	443b      	add	r3, r7
 8004070:	9309      	str	r3, [sp, #36]	; 0x24
 8004072:	e767      	b.n	8003f44 <_vfiprintf_r+0x94>
 8004074:	fb0c 3202 	mla	r2, ip, r2, r3
 8004078:	460c      	mov	r4, r1
 800407a:	2001      	movs	r0, #1
 800407c:	e7a5      	b.n	8003fca <_vfiprintf_r+0x11a>
 800407e:	2300      	movs	r3, #0
 8004080:	3401      	adds	r4, #1
 8004082:	9305      	str	r3, [sp, #20]
 8004084:	4619      	mov	r1, r3
 8004086:	f04f 0c0a 	mov.w	ip, #10
 800408a:	4620      	mov	r0, r4
 800408c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004090:	3a30      	subs	r2, #48	; 0x30
 8004092:	2a09      	cmp	r2, #9
 8004094:	d903      	bls.n	800409e <_vfiprintf_r+0x1ee>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0c5      	beq.n	8004026 <_vfiprintf_r+0x176>
 800409a:	9105      	str	r1, [sp, #20]
 800409c:	e7c3      	b.n	8004026 <_vfiprintf_r+0x176>
 800409e:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a2:	4604      	mov	r4, r0
 80040a4:	2301      	movs	r3, #1
 80040a6:	e7f0      	b.n	800408a <_vfiprintf_r+0x1da>
 80040a8:	ab03      	add	r3, sp, #12
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	462a      	mov	r2, r5
 80040ae:	4b16      	ldr	r3, [pc, #88]	; (8004108 <_vfiprintf_r+0x258>)
 80040b0:	a904      	add	r1, sp, #16
 80040b2:	4630      	mov	r0, r6
 80040b4:	f3af 8000 	nop.w
 80040b8:	4607      	mov	r7, r0
 80040ba:	1c78      	adds	r0, r7, #1
 80040bc:	d1d6      	bne.n	800406c <_vfiprintf_r+0x1bc>
 80040be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c0:	07d9      	lsls	r1, r3, #31
 80040c2:	d405      	bmi.n	80040d0 <_vfiprintf_r+0x220>
 80040c4:	89ab      	ldrh	r3, [r5, #12]
 80040c6:	059a      	lsls	r2, r3, #22
 80040c8:	d402      	bmi.n	80040d0 <_vfiprintf_r+0x220>
 80040ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040cc:	f000 fc35 	bl	800493a <__retarget_lock_release_recursive>
 80040d0:	89ab      	ldrh	r3, [r5, #12]
 80040d2:	065b      	lsls	r3, r3, #25
 80040d4:	f53f af12 	bmi.w	8003efc <_vfiprintf_r+0x4c>
 80040d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040da:	e711      	b.n	8003f00 <_vfiprintf_r+0x50>
 80040dc:	ab03      	add	r3, sp, #12
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	462a      	mov	r2, r5
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <_vfiprintf_r+0x258>)
 80040e4:	a904      	add	r1, sp, #16
 80040e6:	4630      	mov	r0, r6
 80040e8:	f000 f880 	bl	80041ec <_printf_i>
 80040ec:	e7e4      	b.n	80040b8 <_vfiprintf_r+0x208>
 80040ee:	bf00      	nop
 80040f0:	08004f9c 	.word	0x08004f9c
 80040f4:	08004fbc 	.word	0x08004fbc
 80040f8:	08004f7c 	.word	0x08004f7c
 80040fc:	08004f48 	.word	0x08004f48
 8004100:	08004f52 	.word	0x08004f52
 8004104:	00000000 	.word	0x00000000
 8004108:	08003e8b 	.word	0x08003e8b
 800410c:	08004f4e 	.word	0x08004f4e

08004110 <_printf_common>:
 8004110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	4616      	mov	r6, r2
 8004116:	4699      	mov	r9, r3
 8004118:	688a      	ldr	r2, [r1, #8]
 800411a:	690b      	ldr	r3, [r1, #16]
 800411c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004120:	4293      	cmp	r3, r2
 8004122:	bfb8      	it	lt
 8004124:	4613      	movlt	r3, r2
 8004126:	6033      	str	r3, [r6, #0]
 8004128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800412c:	4607      	mov	r7, r0
 800412e:	460c      	mov	r4, r1
 8004130:	b10a      	cbz	r2, 8004136 <_printf_common+0x26>
 8004132:	3301      	adds	r3, #1
 8004134:	6033      	str	r3, [r6, #0]
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	0699      	lsls	r1, r3, #26
 800413a:	bf42      	ittt	mi
 800413c:	6833      	ldrmi	r3, [r6, #0]
 800413e:	3302      	addmi	r3, #2
 8004140:	6033      	strmi	r3, [r6, #0]
 8004142:	6825      	ldr	r5, [r4, #0]
 8004144:	f015 0506 	ands.w	r5, r5, #6
 8004148:	d106      	bne.n	8004158 <_printf_common+0x48>
 800414a:	f104 0a19 	add.w	sl, r4, #25
 800414e:	68e3      	ldr	r3, [r4, #12]
 8004150:	6832      	ldr	r2, [r6, #0]
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	42ab      	cmp	r3, r5
 8004156:	dc26      	bgt.n	80041a6 <_printf_common+0x96>
 8004158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800415c:	1e13      	subs	r3, r2, #0
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	bf18      	it	ne
 8004162:	2301      	movne	r3, #1
 8004164:	0692      	lsls	r2, r2, #26
 8004166:	d42b      	bmi.n	80041c0 <_printf_common+0xb0>
 8004168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800416c:	4649      	mov	r1, r9
 800416e:	4638      	mov	r0, r7
 8004170:	47c0      	blx	r8
 8004172:	3001      	adds	r0, #1
 8004174:	d01e      	beq.n	80041b4 <_printf_common+0xa4>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	68e5      	ldr	r5, [r4, #12]
 800417a:	6832      	ldr	r2, [r6, #0]
 800417c:	f003 0306 	and.w	r3, r3, #6
 8004180:	2b04      	cmp	r3, #4
 8004182:	bf08      	it	eq
 8004184:	1aad      	subeq	r5, r5, r2
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	6922      	ldr	r2, [r4, #16]
 800418a:	bf0c      	ite	eq
 800418c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004190:	2500      	movne	r5, #0
 8004192:	4293      	cmp	r3, r2
 8004194:	bfc4      	itt	gt
 8004196:	1a9b      	subgt	r3, r3, r2
 8004198:	18ed      	addgt	r5, r5, r3
 800419a:	2600      	movs	r6, #0
 800419c:	341a      	adds	r4, #26
 800419e:	42b5      	cmp	r5, r6
 80041a0:	d11a      	bne.n	80041d8 <_printf_common+0xc8>
 80041a2:	2000      	movs	r0, #0
 80041a4:	e008      	b.n	80041b8 <_printf_common+0xa8>
 80041a6:	2301      	movs	r3, #1
 80041a8:	4652      	mov	r2, sl
 80041aa:	4649      	mov	r1, r9
 80041ac:	4638      	mov	r0, r7
 80041ae:	47c0      	blx	r8
 80041b0:	3001      	adds	r0, #1
 80041b2:	d103      	bne.n	80041bc <_printf_common+0xac>
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041bc:	3501      	adds	r5, #1
 80041be:	e7c6      	b.n	800414e <_printf_common+0x3e>
 80041c0:	18e1      	adds	r1, r4, r3
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	2030      	movs	r0, #48	; 0x30
 80041c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ca:	4422      	add	r2, r4
 80041cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041d4:	3302      	adds	r3, #2
 80041d6:	e7c7      	b.n	8004168 <_printf_common+0x58>
 80041d8:	2301      	movs	r3, #1
 80041da:	4622      	mov	r2, r4
 80041dc:	4649      	mov	r1, r9
 80041de:	4638      	mov	r0, r7
 80041e0:	47c0      	blx	r8
 80041e2:	3001      	adds	r0, #1
 80041e4:	d0e6      	beq.n	80041b4 <_printf_common+0xa4>
 80041e6:	3601      	adds	r6, #1
 80041e8:	e7d9      	b.n	800419e <_printf_common+0x8e>
	...

080041ec <_printf_i>:
 80041ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f0:	7e0f      	ldrb	r7, [r1, #24]
 80041f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041f4:	2f78      	cmp	r7, #120	; 0x78
 80041f6:	4691      	mov	r9, r2
 80041f8:	4680      	mov	r8, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	469a      	mov	sl, r3
 80041fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004202:	d807      	bhi.n	8004214 <_printf_i+0x28>
 8004204:	2f62      	cmp	r7, #98	; 0x62
 8004206:	d80a      	bhi.n	800421e <_printf_i+0x32>
 8004208:	2f00      	cmp	r7, #0
 800420a:	f000 80d8 	beq.w	80043be <_printf_i+0x1d2>
 800420e:	2f58      	cmp	r7, #88	; 0x58
 8004210:	f000 80a3 	beq.w	800435a <_printf_i+0x16e>
 8004214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800421c:	e03a      	b.n	8004294 <_printf_i+0xa8>
 800421e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004222:	2b15      	cmp	r3, #21
 8004224:	d8f6      	bhi.n	8004214 <_printf_i+0x28>
 8004226:	a101      	add	r1, pc, #4	; (adr r1, 800422c <_printf_i+0x40>)
 8004228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800422c:	08004285 	.word	0x08004285
 8004230:	08004299 	.word	0x08004299
 8004234:	08004215 	.word	0x08004215
 8004238:	08004215 	.word	0x08004215
 800423c:	08004215 	.word	0x08004215
 8004240:	08004215 	.word	0x08004215
 8004244:	08004299 	.word	0x08004299
 8004248:	08004215 	.word	0x08004215
 800424c:	08004215 	.word	0x08004215
 8004250:	08004215 	.word	0x08004215
 8004254:	08004215 	.word	0x08004215
 8004258:	080043a5 	.word	0x080043a5
 800425c:	080042c9 	.word	0x080042c9
 8004260:	08004387 	.word	0x08004387
 8004264:	08004215 	.word	0x08004215
 8004268:	08004215 	.word	0x08004215
 800426c:	080043c7 	.word	0x080043c7
 8004270:	08004215 	.word	0x08004215
 8004274:	080042c9 	.word	0x080042c9
 8004278:	08004215 	.word	0x08004215
 800427c:	08004215 	.word	0x08004215
 8004280:	0800438f 	.word	0x0800438f
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	602a      	str	r2, [r5, #0]
 800428c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004294:	2301      	movs	r3, #1
 8004296:	e0a3      	b.n	80043e0 <_printf_i+0x1f4>
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	6829      	ldr	r1, [r5, #0]
 800429c:	0606      	lsls	r6, r0, #24
 800429e:	f101 0304 	add.w	r3, r1, #4
 80042a2:	d50a      	bpl.n	80042ba <_printf_i+0xce>
 80042a4:	680e      	ldr	r6, [r1, #0]
 80042a6:	602b      	str	r3, [r5, #0]
 80042a8:	2e00      	cmp	r6, #0
 80042aa:	da03      	bge.n	80042b4 <_printf_i+0xc8>
 80042ac:	232d      	movs	r3, #45	; 0x2d
 80042ae:	4276      	negs	r6, r6
 80042b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b4:	485e      	ldr	r0, [pc, #376]	; (8004430 <_printf_i+0x244>)
 80042b6:	230a      	movs	r3, #10
 80042b8:	e019      	b.n	80042ee <_printf_i+0x102>
 80042ba:	680e      	ldr	r6, [r1, #0]
 80042bc:	602b      	str	r3, [r5, #0]
 80042be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042c2:	bf18      	it	ne
 80042c4:	b236      	sxthne	r6, r6
 80042c6:	e7ef      	b.n	80042a8 <_printf_i+0xbc>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	6820      	ldr	r0, [r4, #0]
 80042cc:	1d19      	adds	r1, r3, #4
 80042ce:	6029      	str	r1, [r5, #0]
 80042d0:	0601      	lsls	r1, r0, #24
 80042d2:	d501      	bpl.n	80042d8 <_printf_i+0xec>
 80042d4:	681e      	ldr	r6, [r3, #0]
 80042d6:	e002      	b.n	80042de <_printf_i+0xf2>
 80042d8:	0646      	lsls	r6, r0, #25
 80042da:	d5fb      	bpl.n	80042d4 <_printf_i+0xe8>
 80042dc:	881e      	ldrh	r6, [r3, #0]
 80042de:	4854      	ldr	r0, [pc, #336]	; (8004430 <_printf_i+0x244>)
 80042e0:	2f6f      	cmp	r7, #111	; 0x6f
 80042e2:	bf0c      	ite	eq
 80042e4:	2308      	moveq	r3, #8
 80042e6:	230a      	movne	r3, #10
 80042e8:	2100      	movs	r1, #0
 80042ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ee:	6865      	ldr	r5, [r4, #4]
 80042f0:	60a5      	str	r5, [r4, #8]
 80042f2:	2d00      	cmp	r5, #0
 80042f4:	bfa2      	ittt	ge
 80042f6:	6821      	ldrge	r1, [r4, #0]
 80042f8:	f021 0104 	bicge.w	r1, r1, #4
 80042fc:	6021      	strge	r1, [r4, #0]
 80042fe:	b90e      	cbnz	r6, 8004304 <_printf_i+0x118>
 8004300:	2d00      	cmp	r5, #0
 8004302:	d04d      	beq.n	80043a0 <_printf_i+0x1b4>
 8004304:	4615      	mov	r5, r2
 8004306:	fbb6 f1f3 	udiv	r1, r6, r3
 800430a:	fb03 6711 	mls	r7, r3, r1, r6
 800430e:	5dc7      	ldrb	r7, [r0, r7]
 8004310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004314:	4637      	mov	r7, r6
 8004316:	42bb      	cmp	r3, r7
 8004318:	460e      	mov	r6, r1
 800431a:	d9f4      	bls.n	8004306 <_printf_i+0x11a>
 800431c:	2b08      	cmp	r3, #8
 800431e:	d10b      	bne.n	8004338 <_printf_i+0x14c>
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	07de      	lsls	r6, r3, #31
 8004324:	d508      	bpl.n	8004338 <_printf_i+0x14c>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	6861      	ldr	r1, [r4, #4]
 800432a:	4299      	cmp	r1, r3
 800432c:	bfde      	ittt	le
 800432e:	2330      	movle	r3, #48	; 0x30
 8004330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004334:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004338:	1b52      	subs	r2, r2, r5
 800433a:	6122      	str	r2, [r4, #16]
 800433c:	f8cd a000 	str.w	sl, [sp]
 8004340:	464b      	mov	r3, r9
 8004342:	aa03      	add	r2, sp, #12
 8004344:	4621      	mov	r1, r4
 8004346:	4640      	mov	r0, r8
 8004348:	f7ff fee2 	bl	8004110 <_printf_common>
 800434c:	3001      	adds	r0, #1
 800434e:	d14c      	bne.n	80043ea <_printf_i+0x1fe>
 8004350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004354:	b004      	add	sp, #16
 8004356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435a:	4835      	ldr	r0, [pc, #212]	; (8004430 <_printf_i+0x244>)
 800435c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004360:	6829      	ldr	r1, [r5, #0]
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f851 6b04 	ldr.w	r6, [r1], #4
 8004368:	6029      	str	r1, [r5, #0]
 800436a:	061d      	lsls	r5, r3, #24
 800436c:	d514      	bpl.n	8004398 <_printf_i+0x1ac>
 800436e:	07df      	lsls	r7, r3, #31
 8004370:	bf44      	itt	mi
 8004372:	f043 0320 	orrmi.w	r3, r3, #32
 8004376:	6023      	strmi	r3, [r4, #0]
 8004378:	b91e      	cbnz	r6, 8004382 <_printf_i+0x196>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f023 0320 	bic.w	r3, r3, #32
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	2310      	movs	r3, #16
 8004384:	e7b0      	b.n	80042e8 <_printf_i+0xfc>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	2378      	movs	r3, #120	; 0x78
 8004390:	4828      	ldr	r0, [pc, #160]	; (8004434 <_printf_i+0x248>)
 8004392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004396:	e7e3      	b.n	8004360 <_printf_i+0x174>
 8004398:	0659      	lsls	r1, r3, #25
 800439a:	bf48      	it	mi
 800439c:	b2b6      	uxthmi	r6, r6
 800439e:	e7e6      	b.n	800436e <_printf_i+0x182>
 80043a0:	4615      	mov	r5, r2
 80043a2:	e7bb      	b.n	800431c <_printf_i+0x130>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	6826      	ldr	r6, [r4, #0]
 80043a8:	6961      	ldr	r1, [r4, #20]
 80043aa:	1d18      	adds	r0, r3, #4
 80043ac:	6028      	str	r0, [r5, #0]
 80043ae:	0635      	lsls	r5, r6, #24
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	d501      	bpl.n	80043b8 <_printf_i+0x1cc>
 80043b4:	6019      	str	r1, [r3, #0]
 80043b6:	e002      	b.n	80043be <_printf_i+0x1d2>
 80043b8:	0670      	lsls	r0, r6, #25
 80043ba:	d5fb      	bpl.n	80043b4 <_printf_i+0x1c8>
 80043bc:	8019      	strh	r1, [r3, #0]
 80043be:	2300      	movs	r3, #0
 80043c0:	6123      	str	r3, [r4, #16]
 80043c2:	4615      	mov	r5, r2
 80043c4:	e7ba      	b.n	800433c <_printf_i+0x150>
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	1d1a      	adds	r2, r3, #4
 80043ca:	602a      	str	r2, [r5, #0]
 80043cc:	681d      	ldr	r5, [r3, #0]
 80043ce:	6862      	ldr	r2, [r4, #4]
 80043d0:	2100      	movs	r1, #0
 80043d2:	4628      	mov	r0, r5
 80043d4:	f7fb ff0c 	bl	80001f0 <memchr>
 80043d8:	b108      	cbz	r0, 80043de <_printf_i+0x1f2>
 80043da:	1b40      	subs	r0, r0, r5
 80043dc:	6060      	str	r0, [r4, #4]
 80043de:	6863      	ldr	r3, [r4, #4]
 80043e0:	6123      	str	r3, [r4, #16]
 80043e2:	2300      	movs	r3, #0
 80043e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e8:	e7a8      	b.n	800433c <_printf_i+0x150>
 80043ea:	6923      	ldr	r3, [r4, #16]
 80043ec:	462a      	mov	r2, r5
 80043ee:	4649      	mov	r1, r9
 80043f0:	4640      	mov	r0, r8
 80043f2:	47d0      	blx	sl
 80043f4:	3001      	adds	r0, #1
 80043f6:	d0ab      	beq.n	8004350 <_printf_i+0x164>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	079b      	lsls	r3, r3, #30
 80043fc:	d413      	bmi.n	8004426 <_printf_i+0x23a>
 80043fe:	68e0      	ldr	r0, [r4, #12]
 8004400:	9b03      	ldr	r3, [sp, #12]
 8004402:	4298      	cmp	r0, r3
 8004404:	bfb8      	it	lt
 8004406:	4618      	movlt	r0, r3
 8004408:	e7a4      	b.n	8004354 <_printf_i+0x168>
 800440a:	2301      	movs	r3, #1
 800440c:	4632      	mov	r2, r6
 800440e:	4649      	mov	r1, r9
 8004410:	4640      	mov	r0, r8
 8004412:	47d0      	blx	sl
 8004414:	3001      	adds	r0, #1
 8004416:	d09b      	beq.n	8004350 <_printf_i+0x164>
 8004418:	3501      	adds	r5, #1
 800441a:	68e3      	ldr	r3, [r4, #12]
 800441c:	9903      	ldr	r1, [sp, #12]
 800441e:	1a5b      	subs	r3, r3, r1
 8004420:	42ab      	cmp	r3, r5
 8004422:	dcf2      	bgt.n	800440a <_printf_i+0x21e>
 8004424:	e7eb      	b.n	80043fe <_printf_i+0x212>
 8004426:	2500      	movs	r5, #0
 8004428:	f104 0619 	add.w	r6, r4, #25
 800442c:	e7f5      	b.n	800441a <_printf_i+0x22e>
 800442e:	bf00      	nop
 8004430:	08004f59 	.word	0x08004f59
 8004434:	08004f6a 	.word	0x08004f6a

08004438 <__swbuf_r>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	460e      	mov	r6, r1
 800443c:	4614      	mov	r4, r2
 800443e:	4605      	mov	r5, r0
 8004440:	b118      	cbz	r0, 800444a <__swbuf_r+0x12>
 8004442:	6983      	ldr	r3, [r0, #24]
 8004444:	b90b      	cbnz	r3, 800444a <__swbuf_r+0x12>
 8004446:	f000 f9d9 	bl	80047fc <__sinit>
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <__swbuf_r+0x98>)
 800444c:	429c      	cmp	r4, r3
 800444e:	d12b      	bne.n	80044a8 <__swbuf_r+0x70>
 8004450:	686c      	ldr	r4, [r5, #4]
 8004452:	69a3      	ldr	r3, [r4, #24]
 8004454:	60a3      	str	r3, [r4, #8]
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	071a      	lsls	r2, r3, #28
 800445a:	d52f      	bpl.n	80044bc <__swbuf_r+0x84>
 800445c:	6923      	ldr	r3, [r4, #16]
 800445e:	b36b      	cbz	r3, 80044bc <__swbuf_r+0x84>
 8004460:	6923      	ldr	r3, [r4, #16]
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	1ac0      	subs	r0, r0, r3
 8004466:	6963      	ldr	r3, [r4, #20]
 8004468:	b2f6      	uxtb	r6, r6
 800446a:	4283      	cmp	r3, r0
 800446c:	4637      	mov	r7, r6
 800446e:	dc04      	bgt.n	800447a <__swbuf_r+0x42>
 8004470:	4621      	mov	r1, r4
 8004472:	4628      	mov	r0, r5
 8004474:	f000 f92e 	bl	80046d4 <_fflush_r>
 8004478:	bb30      	cbnz	r0, 80044c8 <__swbuf_r+0x90>
 800447a:	68a3      	ldr	r3, [r4, #8]
 800447c:	3b01      	subs	r3, #1
 800447e:	60a3      	str	r3, [r4, #8]
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	6022      	str	r2, [r4, #0]
 8004486:	701e      	strb	r6, [r3, #0]
 8004488:	6963      	ldr	r3, [r4, #20]
 800448a:	3001      	adds	r0, #1
 800448c:	4283      	cmp	r3, r0
 800448e:	d004      	beq.n	800449a <__swbuf_r+0x62>
 8004490:	89a3      	ldrh	r3, [r4, #12]
 8004492:	07db      	lsls	r3, r3, #31
 8004494:	d506      	bpl.n	80044a4 <__swbuf_r+0x6c>
 8004496:	2e0a      	cmp	r6, #10
 8004498:	d104      	bne.n	80044a4 <__swbuf_r+0x6c>
 800449a:	4621      	mov	r1, r4
 800449c:	4628      	mov	r0, r5
 800449e:	f000 f919 	bl	80046d4 <_fflush_r>
 80044a2:	b988      	cbnz	r0, 80044c8 <__swbuf_r+0x90>
 80044a4:	4638      	mov	r0, r7
 80044a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <__swbuf_r+0x9c>)
 80044aa:	429c      	cmp	r4, r3
 80044ac:	d101      	bne.n	80044b2 <__swbuf_r+0x7a>
 80044ae:	68ac      	ldr	r4, [r5, #8]
 80044b0:	e7cf      	b.n	8004452 <__swbuf_r+0x1a>
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <__swbuf_r+0xa0>)
 80044b4:	429c      	cmp	r4, r3
 80044b6:	bf08      	it	eq
 80044b8:	68ec      	ldreq	r4, [r5, #12]
 80044ba:	e7ca      	b.n	8004452 <__swbuf_r+0x1a>
 80044bc:	4621      	mov	r1, r4
 80044be:	4628      	mov	r0, r5
 80044c0:	f000 f80c 	bl	80044dc <__swsetup_r>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d0cb      	beq.n	8004460 <__swbuf_r+0x28>
 80044c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80044cc:	e7ea      	b.n	80044a4 <__swbuf_r+0x6c>
 80044ce:	bf00      	nop
 80044d0:	08004f9c 	.word	0x08004f9c
 80044d4:	08004fbc 	.word	0x08004fbc
 80044d8:	08004f7c 	.word	0x08004f7c

080044dc <__swsetup_r>:
 80044dc:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <__swsetup_r+0xcc>)
 80044de:	b570      	push	{r4, r5, r6, lr}
 80044e0:	681d      	ldr	r5, [r3, #0]
 80044e2:	4606      	mov	r6, r0
 80044e4:	460c      	mov	r4, r1
 80044e6:	b125      	cbz	r5, 80044f2 <__swsetup_r+0x16>
 80044e8:	69ab      	ldr	r3, [r5, #24]
 80044ea:	b913      	cbnz	r3, 80044f2 <__swsetup_r+0x16>
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 f985 	bl	80047fc <__sinit>
 80044f2:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <__swsetup_r+0xd0>)
 80044f4:	429c      	cmp	r4, r3
 80044f6:	d10f      	bne.n	8004518 <__swsetup_r+0x3c>
 80044f8:	686c      	ldr	r4, [r5, #4]
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004500:	0719      	lsls	r1, r3, #28
 8004502:	d42c      	bmi.n	800455e <__swsetup_r+0x82>
 8004504:	06dd      	lsls	r5, r3, #27
 8004506:	d411      	bmi.n	800452c <__swsetup_r+0x50>
 8004508:	2309      	movs	r3, #9
 800450a:	6033      	str	r3, [r6, #0]
 800450c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004516:	e03e      	b.n	8004596 <__swsetup_r+0xba>
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <__swsetup_r+0xd4>)
 800451a:	429c      	cmp	r4, r3
 800451c:	d101      	bne.n	8004522 <__swsetup_r+0x46>
 800451e:	68ac      	ldr	r4, [r5, #8]
 8004520:	e7eb      	b.n	80044fa <__swsetup_r+0x1e>
 8004522:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <__swsetup_r+0xd8>)
 8004524:	429c      	cmp	r4, r3
 8004526:	bf08      	it	eq
 8004528:	68ec      	ldreq	r4, [r5, #12]
 800452a:	e7e6      	b.n	80044fa <__swsetup_r+0x1e>
 800452c:	0758      	lsls	r0, r3, #29
 800452e:	d512      	bpl.n	8004556 <__swsetup_r+0x7a>
 8004530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004532:	b141      	cbz	r1, 8004546 <__swsetup_r+0x6a>
 8004534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004538:	4299      	cmp	r1, r3
 800453a:	d002      	beq.n	8004542 <__swsetup_r+0x66>
 800453c:	4630      	mov	r0, r6
 800453e:	f000 fa63 	bl	8004a08 <_free_r>
 8004542:	2300      	movs	r3, #0
 8004544:	6363      	str	r3, [r4, #52]	; 0x34
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	2300      	movs	r3, #0
 8004550:	6063      	str	r3, [r4, #4]
 8004552:	6923      	ldr	r3, [r4, #16]
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f043 0308 	orr.w	r3, r3, #8
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	6923      	ldr	r3, [r4, #16]
 8004560:	b94b      	cbnz	r3, 8004576 <__swsetup_r+0x9a>
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800456c:	d003      	beq.n	8004576 <__swsetup_r+0x9a>
 800456e:	4621      	mov	r1, r4
 8004570:	4630      	mov	r0, r6
 8004572:	f000 fa09 	bl	8004988 <__smakebuf_r>
 8004576:	89a0      	ldrh	r0, [r4, #12]
 8004578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800457c:	f010 0301 	ands.w	r3, r0, #1
 8004580:	d00a      	beq.n	8004598 <__swsetup_r+0xbc>
 8004582:	2300      	movs	r3, #0
 8004584:	60a3      	str	r3, [r4, #8]
 8004586:	6963      	ldr	r3, [r4, #20]
 8004588:	425b      	negs	r3, r3
 800458a:	61a3      	str	r3, [r4, #24]
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	b943      	cbnz	r3, 80045a2 <__swsetup_r+0xc6>
 8004590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004594:	d1ba      	bne.n	800450c <__swsetup_r+0x30>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	0781      	lsls	r1, r0, #30
 800459a:	bf58      	it	pl
 800459c:	6963      	ldrpl	r3, [r4, #20]
 800459e:	60a3      	str	r3, [r4, #8]
 80045a0:	e7f4      	b.n	800458c <__swsetup_r+0xb0>
 80045a2:	2000      	movs	r0, #0
 80045a4:	e7f7      	b.n	8004596 <__swsetup_r+0xba>
 80045a6:	bf00      	nop
 80045a8:	200000a4 	.word	0x200000a4
 80045ac:	08004f9c 	.word	0x08004f9c
 80045b0:	08004fbc 	.word	0x08004fbc
 80045b4:	08004f7c 	.word	0x08004f7c

080045b8 <abort>:
 80045b8:	b508      	push	{r3, lr}
 80045ba:	2006      	movs	r0, #6
 80045bc:	f000 fb3c 	bl	8004c38 <raise>
 80045c0:	2001      	movs	r0, #1
 80045c2:	f7fc fc27 	bl	8000e14 <_exit>
	...

080045c8 <__sflush_r>:
 80045c8:	898a      	ldrh	r2, [r1, #12]
 80045ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	4605      	mov	r5, r0
 80045d0:	0710      	lsls	r0, r2, #28
 80045d2:	460c      	mov	r4, r1
 80045d4:	d458      	bmi.n	8004688 <__sflush_r+0xc0>
 80045d6:	684b      	ldr	r3, [r1, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	dc05      	bgt.n	80045e8 <__sflush_r+0x20>
 80045dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	dc02      	bgt.n	80045e8 <__sflush_r+0x20>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ea:	2e00      	cmp	r6, #0
 80045ec:	d0f9      	beq.n	80045e2 <__sflush_r+0x1a>
 80045ee:	2300      	movs	r3, #0
 80045f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045f4:	682f      	ldr	r7, [r5, #0]
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	d032      	beq.n	8004660 <__sflush_r+0x98>
 80045fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	075a      	lsls	r2, r3, #29
 8004600:	d505      	bpl.n	800460e <__sflush_r+0x46>
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	1ac0      	subs	r0, r0, r3
 8004606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004608:	b10b      	cbz	r3, 800460e <__sflush_r+0x46>
 800460a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800460c:	1ac0      	subs	r0, r0, r3
 800460e:	2300      	movs	r3, #0
 8004610:	4602      	mov	r2, r0
 8004612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004614:	6a21      	ldr	r1, [r4, #32]
 8004616:	4628      	mov	r0, r5
 8004618:	47b0      	blx	r6
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	d106      	bne.n	800462e <__sflush_r+0x66>
 8004620:	6829      	ldr	r1, [r5, #0]
 8004622:	291d      	cmp	r1, #29
 8004624:	d82c      	bhi.n	8004680 <__sflush_r+0xb8>
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <__sflush_r+0x108>)
 8004628:	40ca      	lsrs	r2, r1
 800462a:	07d6      	lsls	r6, r2, #31
 800462c:	d528      	bpl.n	8004680 <__sflush_r+0xb8>
 800462e:	2200      	movs	r2, #0
 8004630:	6062      	str	r2, [r4, #4]
 8004632:	04d9      	lsls	r1, r3, #19
 8004634:	6922      	ldr	r2, [r4, #16]
 8004636:	6022      	str	r2, [r4, #0]
 8004638:	d504      	bpl.n	8004644 <__sflush_r+0x7c>
 800463a:	1c42      	adds	r2, r0, #1
 800463c:	d101      	bne.n	8004642 <__sflush_r+0x7a>
 800463e:	682b      	ldr	r3, [r5, #0]
 8004640:	b903      	cbnz	r3, 8004644 <__sflush_r+0x7c>
 8004642:	6560      	str	r0, [r4, #84]	; 0x54
 8004644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004646:	602f      	str	r7, [r5, #0]
 8004648:	2900      	cmp	r1, #0
 800464a:	d0ca      	beq.n	80045e2 <__sflush_r+0x1a>
 800464c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004650:	4299      	cmp	r1, r3
 8004652:	d002      	beq.n	800465a <__sflush_r+0x92>
 8004654:	4628      	mov	r0, r5
 8004656:	f000 f9d7 	bl	8004a08 <_free_r>
 800465a:	2000      	movs	r0, #0
 800465c:	6360      	str	r0, [r4, #52]	; 0x34
 800465e:	e7c1      	b.n	80045e4 <__sflush_r+0x1c>
 8004660:	6a21      	ldr	r1, [r4, #32]
 8004662:	2301      	movs	r3, #1
 8004664:	4628      	mov	r0, r5
 8004666:	47b0      	blx	r6
 8004668:	1c41      	adds	r1, r0, #1
 800466a:	d1c7      	bne.n	80045fc <__sflush_r+0x34>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0c4      	beq.n	80045fc <__sflush_r+0x34>
 8004672:	2b1d      	cmp	r3, #29
 8004674:	d001      	beq.n	800467a <__sflush_r+0xb2>
 8004676:	2b16      	cmp	r3, #22
 8004678:	d101      	bne.n	800467e <__sflush_r+0xb6>
 800467a:	602f      	str	r7, [r5, #0]
 800467c:	e7b1      	b.n	80045e2 <__sflush_r+0x1a>
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	e7ad      	b.n	80045e4 <__sflush_r+0x1c>
 8004688:	690f      	ldr	r7, [r1, #16]
 800468a:	2f00      	cmp	r7, #0
 800468c:	d0a9      	beq.n	80045e2 <__sflush_r+0x1a>
 800468e:	0793      	lsls	r3, r2, #30
 8004690:	680e      	ldr	r6, [r1, #0]
 8004692:	bf08      	it	eq
 8004694:	694b      	ldreq	r3, [r1, #20]
 8004696:	600f      	str	r7, [r1, #0]
 8004698:	bf18      	it	ne
 800469a:	2300      	movne	r3, #0
 800469c:	eba6 0807 	sub.w	r8, r6, r7
 80046a0:	608b      	str	r3, [r1, #8]
 80046a2:	f1b8 0f00 	cmp.w	r8, #0
 80046a6:	dd9c      	ble.n	80045e2 <__sflush_r+0x1a>
 80046a8:	6a21      	ldr	r1, [r4, #32]
 80046aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046ac:	4643      	mov	r3, r8
 80046ae:	463a      	mov	r2, r7
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b0      	blx	r6
 80046b4:	2800      	cmp	r0, #0
 80046b6:	dc06      	bgt.n	80046c6 <__sflush_r+0xfe>
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c4:	e78e      	b.n	80045e4 <__sflush_r+0x1c>
 80046c6:	4407      	add	r7, r0
 80046c8:	eba8 0800 	sub.w	r8, r8, r0
 80046cc:	e7e9      	b.n	80046a2 <__sflush_r+0xda>
 80046ce:	bf00      	nop
 80046d0:	20400001 	.word	0x20400001

080046d4 <_fflush_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	690b      	ldr	r3, [r1, #16]
 80046d8:	4605      	mov	r5, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	b913      	cbnz	r3, 80046e4 <_fflush_r+0x10>
 80046de:	2500      	movs	r5, #0
 80046e0:	4628      	mov	r0, r5
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	b118      	cbz	r0, 80046ee <_fflush_r+0x1a>
 80046e6:	6983      	ldr	r3, [r0, #24]
 80046e8:	b90b      	cbnz	r3, 80046ee <_fflush_r+0x1a>
 80046ea:	f000 f887 	bl	80047fc <__sinit>
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <_fflush_r+0x6c>)
 80046f0:	429c      	cmp	r4, r3
 80046f2:	d11b      	bne.n	800472c <_fflush_r+0x58>
 80046f4:	686c      	ldr	r4, [r5, #4]
 80046f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ef      	beq.n	80046de <_fflush_r+0xa>
 80046fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004700:	07d0      	lsls	r0, r2, #31
 8004702:	d404      	bmi.n	800470e <_fflush_r+0x3a>
 8004704:	0599      	lsls	r1, r3, #22
 8004706:	d402      	bmi.n	800470e <_fflush_r+0x3a>
 8004708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470a:	f000 f915 	bl	8004938 <__retarget_lock_acquire_recursive>
 800470e:	4628      	mov	r0, r5
 8004710:	4621      	mov	r1, r4
 8004712:	f7ff ff59 	bl	80045c8 <__sflush_r>
 8004716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004718:	07da      	lsls	r2, r3, #31
 800471a:	4605      	mov	r5, r0
 800471c:	d4e0      	bmi.n	80046e0 <_fflush_r+0xc>
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	059b      	lsls	r3, r3, #22
 8004722:	d4dd      	bmi.n	80046e0 <_fflush_r+0xc>
 8004724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004726:	f000 f908 	bl	800493a <__retarget_lock_release_recursive>
 800472a:	e7d9      	b.n	80046e0 <_fflush_r+0xc>
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <_fflush_r+0x70>)
 800472e:	429c      	cmp	r4, r3
 8004730:	d101      	bne.n	8004736 <_fflush_r+0x62>
 8004732:	68ac      	ldr	r4, [r5, #8]
 8004734:	e7df      	b.n	80046f6 <_fflush_r+0x22>
 8004736:	4b04      	ldr	r3, [pc, #16]	; (8004748 <_fflush_r+0x74>)
 8004738:	429c      	cmp	r4, r3
 800473a:	bf08      	it	eq
 800473c:	68ec      	ldreq	r4, [r5, #12]
 800473e:	e7da      	b.n	80046f6 <_fflush_r+0x22>
 8004740:	08004f9c 	.word	0x08004f9c
 8004744:	08004fbc 	.word	0x08004fbc
 8004748:	08004f7c 	.word	0x08004f7c

0800474c <std>:
 800474c:	2300      	movs	r3, #0
 800474e:	b510      	push	{r4, lr}
 8004750:	4604      	mov	r4, r0
 8004752:	e9c0 3300 	strd	r3, r3, [r0]
 8004756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800475a:	6083      	str	r3, [r0, #8]
 800475c:	8181      	strh	r1, [r0, #12]
 800475e:	6643      	str	r3, [r0, #100]	; 0x64
 8004760:	81c2      	strh	r2, [r0, #14]
 8004762:	6183      	str	r3, [r0, #24]
 8004764:	4619      	mov	r1, r3
 8004766:	2208      	movs	r2, #8
 8004768:	305c      	adds	r0, #92	; 0x5c
 800476a:	f7ff fb6f 	bl	8003e4c <memset>
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <std+0x38>)
 8004770:	6263      	str	r3, [r4, #36]	; 0x24
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <std+0x3c>)
 8004774:	62a3      	str	r3, [r4, #40]	; 0x28
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <std+0x40>)
 8004778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <std+0x44>)
 800477c:	6224      	str	r4, [r4, #32]
 800477e:	6323      	str	r3, [r4, #48]	; 0x30
 8004780:	bd10      	pop	{r4, pc}
 8004782:	bf00      	nop
 8004784:	08004c71 	.word	0x08004c71
 8004788:	08004c93 	.word	0x08004c93
 800478c:	08004ccb 	.word	0x08004ccb
 8004790:	08004cef 	.word	0x08004cef

08004794 <_cleanup_r>:
 8004794:	4901      	ldr	r1, [pc, #4]	; (800479c <_cleanup_r+0x8>)
 8004796:	f000 b8af 	b.w	80048f8 <_fwalk_reent>
 800479a:	bf00      	nop
 800479c:	080046d5 	.word	0x080046d5

080047a0 <__sfmoreglue>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	2268      	movs	r2, #104	; 0x68
 80047a4:	1e4d      	subs	r5, r1, #1
 80047a6:	4355      	muls	r5, r2
 80047a8:	460e      	mov	r6, r1
 80047aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047ae:	f000 f997 	bl	8004ae0 <_malloc_r>
 80047b2:	4604      	mov	r4, r0
 80047b4:	b140      	cbz	r0, 80047c8 <__sfmoreglue+0x28>
 80047b6:	2100      	movs	r1, #0
 80047b8:	e9c0 1600 	strd	r1, r6, [r0]
 80047bc:	300c      	adds	r0, #12
 80047be:	60a0      	str	r0, [r4, #8]
 80047c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047c4:	f7ff fb42 	bl	8003e4c <memset>
 80047c8:	4620      	mov	r0, r4
 80047ca:	bd70      	pop	{r4, r5, r6, pc}

080047cc <__sfp_lock_acquire>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__sfp_lock_acquire+0x8>)
 80047ce:	f000 b8b3 	b.w	8004938 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	20000951 	.word	0x20000951

080047d8 <__sfp_lock_release>:
 80047d8:	4801      	ldr	r0, [pc, #4]	; (80047e0 <__sfp_lock_release+0x8>)
 80047da:	f000 b8ae 	b.w	800493a <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	20000951 	.word	0x20000951

080047e4 <__sinit_lock_acquire>:
 80047e4:	4801      	ldr	r0, [pc, #4]	; (80047ec <__sinit_lock_acquire+0x8>)
 80047e6:	f000 b8a7 	b.w	8004938 <__retarget_lock_acquire_recursive>
 80047ea:	bf00      	nop
 80047ec:	20000952 	.word	0x20000952

080047f0 <__sinit_lock_release>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__sinit_lock_release+0x8>)
 80047f2:	f000 b8a2 	b.w	800493a <__retarget_lock_release_recursive>
 80047f6:	bf00      	nop
 80047f8:	20000952 	.word	0x20000952

080047fc <__sinit>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4604      	mov	r4, r0
 8004800:	f7ff fff0 	bl	80047e4 <__sinit_lock_acquire>
 8004804:	69a3      	ldr	r3, [r4, #24]
 8004806:	b11b      	cbz	r3, 8004810 <__sinit+0x14>
 8004808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480c:	f7ff bff0 	b.w	80047f0 <__sinit_lock_release>
 8004810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004814:	6523      	str	r3, [r4, #80]	; 0x50
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <__sinit+0x68>)
 8004818:	4a13      	ldr	r2, [pc, #76]	; (8004868 <__sinit+0x6c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	62a2      	str	r2, [r4, #40]	; 0x28
 800481e:	42a3      	cmp	r3, r4
 8004820:	bf04      	itt	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	61a3      	streq	r3, [r4, #24]
 8004826:	4620      	mov	r0, r4
 8004828:	f000 f820 	bl	800486c <__sfp>
 800482c:	6060      	str	r0, [r4, #4]
 800482e:	4620      	mov	r0, r4
 8004830:	f000 f81c 	bl	800486c <__sfp>
 8004834:	60a0      	str	r0, [r4, #8]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f818 	bl	800486c <__sfp>
 800483c:	2200      	movs	r2, #0
 800483e:	60e0      	str	r0, [r4, #12]
 8004840:	2104      	movs	r1, #4
 8004842:	6860      	ldr	r0, [r4, #4]
 8004844:	f7ff ff82 	bl	800474c <std>
 8004848:	68a0      	ldr	r0, [r4, #8]
 800484a:	2201      	movs	r2, #1
 800484c:	2109      	movs	r1, #9
 800484e:	f7ff ff7d 	bl	800474c <std>
 8004852:	68e0      	ldr	r0, [r4, #12]
 8004854:	2202      	movs	r2, #2
 8004856:	2112      	movs	r1, #18
 8004858:	f7ff ff78 	bl	800474c <std>
 800485c:	2301      	movs	r3, #1
 800485e:	61a3      	str	r3, [r4, #24]
 8004860:	e7d2      	b.n	8004808 <__sinit+0xc>
 8004862:	bf00      	nop
 8004864:	08004f44 	.word	0x08004f44
 8004868:	08004795 	.word	0x08004795

0800486c <__sfp>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	4607      	mov	r7, r0
 8004870:	f7ff ffac 	bl	80047cc <__sfp_lock_acquire>
 8004874:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <__sfp+0x84>)
 8004876:	681e      	ldr	r6, [r3, #0]
 8004878:	69b3      	ldr	r3, [r6, #24]
 800487a:	b913      	cbnz	r3, 8004882 <__sfp+0x16>
 800487c:	4630      	mov	r0, r6
 800487e:	f7ff ffbd 	bl	80047fc <__sinit>
 8004882:	3648      	adds	r6, #72	; 0x48
 8004884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004888:	3b01      	subs	r3, #1
 800488a:	d503      	bpl.n	8004894 <__sfp+0x28>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	b30b      	cbz	r3, 80048d4 <__sfp+0x68>
 8004890:	6836      	ldr	r6, [r6, #0]
 8004892:	e7f7      	b.n	8004884 <__sfp+0x18>
 8004894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004898:	b9d5      	cbnz	r5, 80048d0 <__sfp+0x64>
 800489a:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <__sfp+0x88>)
 800489c:	60e3      	str	r3, [r4, #12]
 800489e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048a2:	6665      	str	r5, [r4, #100]	; 0x64
 80048a4:	f000 f847 	bl	8004936 <__retarget_lock_init_recursive>
 80048a8:	f7ff ff96 	bl	80047d8 <__sfp_lock_release>
 80048ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048b4:	6025      	str	r5, [r4, #0]
 80048b6:	61a5      	str	r5, [r4, #24]
 80048b8:	2208      	movs	r2, #8
 80048ba:	4629      	mov	r1, r5
 80048bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048c0:	f7ff fac4 	bl	8003e4c <memset>
 80048c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048cc:	4620      	mov	r0, r4
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d0:	3468      	adds	r4, #104	; 0x68
 80048d2:	e7d9      	b.n	8004888 <__sfp+0x1c>
 80048d4:	2104      	movs	r1, #4
 80048d6:	4638      	mov	r0, r7
 80048d8:	f7ff ff62 	bl	80047a0 <__sfmoreglue>
 80048dc:	4604      	mov	r4, r0
 80048de:	6030      	str	r0, [r6, #0]
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d1d5      	bne.n	8004890 <__sfp+0x24>
 80048e4:	f7ff ff78 	bl	80047d8 <__sfp_lock_release>
 80048e8:	230c      	movs	r3, #12
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	e7ee      	b.n	80048cc <__sfp+0x60>
 80048ee:	bf00      	nop
 80048f0:	08004f44 	.word	0x08004f44
 80048f4:	ffff0001 	.word	0xffff0001

080048f8 <_fwalk_reent>:
 80048f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048fc:	4606      	mov	r6, r0
 80048fe:	4688      	mov	r8, r1
 8004900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004904:	2700      	movs	r7, #0
 8004906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800490a:	f1b9 0901 	subs.w	r9, r9, #1
 800490e:	d505      	bpl.n	800491c <_fwalk_reent+0x24>
 8004910:	6824      	ldr	r4, [r4, #0]
 8004912:	2c00      	cmp	r4, #0
 8004914:	d1f7      	bne.n	8004906 <_fwalk_reent+0xe>
 8004916:	4638      	mov	r0, r7
 8004918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491c:	89ab      	ldrh	r3, [r5, #12]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d907      	bls.n	8004932 <_fwalk_reent+0x3a>
 8004922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004926:	3301      	adds	r3, #1
 8004928:	d003      	beq.n	8004932 <_fwalk_reent+0x3a>
 800492a:	4629      	mov	r1, r5
 800492c:	4630      	mov	r0, r6
 800492e:	47c0      	blx	r8
 8004930:	4307      	orrs	r7, r0
 8004932:	3568      	adds	r5, #104	; 0x68
 8004934:	e7e9      	b.n	800490a <_fwalk_reent+0x12>

08004936 <__retarget_lock_init_recursive>:
 8004936:	4770      	bx	lr

08004938 <__retarget_lock_acquire_recursive>:
 8004938:	4770      	bx	lr

0800493a <__retarget_lock_release_recursive>:
 800493a:	4770      	bx	lr

0800493c <__swhatbuf_r>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	460e      	mov	r6, r1
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	2900      	cmp	r1, #0
 8004946:	b096      	sub	sp, #88	; 0x58
 8004948:	4614      	mov	r4, r2
 800494a:	461d      	mov	r5, r3
 800494c:	da08      	bge.n	8004960 <__swhatbuf_r+0x24>
 800494e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	602a      	str	r2, [r5, #0]
 8004956:	061a      	lsls	r2, r3, #24
 8004958:	d410      	bmi.n	800497c <__swhatbuf_r+0x40>
 800495a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495e:	e00e      	b.n	800497e <__swhatbuf_r+0x42>
 8004960:	466a      	mov	r2, sp
 8004962:	f000 f9eb 	bl	8004d3c <_fstat_r>
 8004966:	2800      	cmp	r0, #0
 8004968:	dbf1      	blt.n	800494e <__swhatbuf_r+0x12>
 800496a:	9a01      	ldr	r2, [sp, #4]
 800496c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004970:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004974:	425a      	negs	r2, r3
 8004976:	415a      	adcs	r2, r3
 8004978:	602a      	str	r2, [r5, #0]
 800497a:	e7ee      	b.n	800495a <__swhatbuf_r+0x1e>
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	2000      	movs	r0, #0
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	b016      	add	sp, #88	; 0x58
 8004984:	bd70      	pop	{r4, r5, r6, pc}
	...

08004988 <__smakebuf_r>:
 8004988:	898b      	ldrh	r3, [r1, #12]
 800498a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800498c:	079d      	lsls	r5, r3, #30
 800498e:	4606      	mov	r6, r0
 8004990:	460c      	mov	r4, r1
 8004992:	d507      	bpl.n	80049a4 <__smakebuf_r+0x1c>
 8004994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	2301      	movs	r3, #1
 800499e:	6163      	str	r3, [r4, #20]
 80049a0:	b002      	add	sp, #8
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
 80049a4:	ab01      	add	r3, sp, #4
 80049a6:	466a      	mov	r2, sp
 80049a8:	f7ff ffc8 	bl	800493c <__swhatbuf_r>
 80049ac:	9900      	ldr	r1, [sp, #0]
 80049ae:	4605      	mov	r5, r0
 80049b0:	4630      	mov	r0, r6
 80049b2:	f000 f895 	bl	8004ae0 <_malloc_r>
 80049b6:	b948      	cbnz	r0, 80049cc <__smakebuf_r+0x44>
 80049b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049bc:	059a      	lsls	r2, r3, #22
 80049be:	d4ef      	bmi.n	80049a0 <__smakebuf_r+0x18>
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	e7e3      	b.n	8004994 <__smakebuf_r+0xc>
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <__smakebuf_r+0x7c>)
 80049ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	6020      	str	r0, [r4, #0]
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	9b00      	ldr	r3, [sp, #0]
 80049dc:	6163      	str	r3, [r4, #20]
 80049de:	9b01      	ldr	r3, [sp, #4]
 80049e0:	6120      	str	r0, [r4, #16]
 80049e2:	b15b      	cbz	r3, 80049fc <__smakebuf_r+0x74>
 80049e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 f9b9 	bl	8004d60 <_isatty_r>
 80049ee:	b128      	cbz	r0, 80049fc <__smakebuf_r+0x74>
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	89a0      	ldrh	r0, [r4, #12]
 80049fe:	4305      	orrs	r5, r0
 8004a00:	81a5      	strh	r5, [r4, #12]
 8004a02:	e7cd      	b.n	80049a0 <__smakebuf_r+0x18>
 8004a04:	08004795 	.word	0x08004795

08004a08 <_free_r>:
 8004a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	d044      	beq.n	8004a98 <_free_r+0x90>
 8004a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a12:	9001      	str	r0, [sp, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f1a1 0404 	sub.w	r4, r1, #4
 8004a1a:	bfb8      	it	lt
 8004a1c:	18e4      	addlt	r4, r4, r3
 8004a1e:	f000 f9c1 	bl	8004da4 <__malloc_lock>
 8004a22:	4a1e      	ldr	r2, [pc, #120]	; (8004a9c <_free_r+0x94>)
 8004a24:	9801      	ldr	r0, [sp, #4]
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	b933      	cbnz	r3, 8004a38 <_free_r+0x30>
 8004a2a:	6063      	str	r3, [r4, #4]
 8004a2c:	6014      	str	r4, [r2, #0]
 8004a2e:	b003      	add	sp, #12
 8004a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a34:	f000 b9bc 	b.w	8004db0 <__malloc_unlock>
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d908      	bls.n	8004a4e <_free_r+0x46>
 8004a3c:	6825      	ldr	r5, [r4, #0]
 8004a3e:	1961      	adds	r1, r4, r5
 8004a40:	428b      	cmp	r3, r1
 8004a42:	bf01      	itttt	eq
 8004a44:	6819      	ldreq	r1, [r3, #0]
 8004a46:	685b      	ldreq	r3, [r3, #4]
 8004a48:	1949      	addeq	r1, r1, r5
 8004a4a:	6021      	streq	r1, [r4, #0]
 8004a4c:	e7ed      	b.n	8004a2a <_free_r+0x22>
 8004a4e:	461a      	mov	r2, r3
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b10b      	cbz	r3, 8004a58 <_free_r+0x50>
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d9fa      	bls.n	8004a4e <_free_r+0x46>
 8004a58:	6811      	ldr	r1, [r2, #0]
 8004a5a:	1855      	adds	r5, r2, r1
 8004a5c:	42a5      	cmp	r5, r4
 8004a5e:	d10b      	bne.n	8004a78 <_free_r+0x70>
 8004a60:	6824      	ldr	r4, [r4, #0]
 8004a62:	4421      	add	r1, r4
 8004a64:	1854      	adds	r4, r2, r1
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	d1e0      	bne.n	8004a2e <_free_r+0x26>
 8004a6c:	681c      	ldr	r4, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	6053      	str	r3, [r2, #4]
 8004a72:	4421      	add	r1, r4
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	e7da      	b.n	8004a2e <_free_r+0x26>
 8004a78:	d902      	bls.n	8004a80 <_free_r+0x78>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	6003      	str	r3, [r0, #0]
 8004a7e:	e7d6      	b.n	8004a2e <_free_r+0x26>
 8004a80:	6825      	ldr	r5, [r4, #0]
 8004a82:	1961      	adds	r1, r4, r5
 8004a84:	428b      	cmp	r3, r1
 8004a86:	bf04      	itt	eq
 8004a88:	6819      	ldreq	r1, [r3, #0]
 8004a8a:	685b      	ldreq	r3, [r3, #4]
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	bf04      	itt	eq
 8004a90:	1949      	addeq	r1, r1, r5
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	6054      	str	r4, [r2, #4]
 8004a96:	e7ca      	b.n	8004a2e <_free_r+0x26>
 8004a98:	b003      	add	sp, #12
 8004a9a:	bd30      	pop	{r4, r5, pc}
 8004a9c:	20000954 	.word	0x20000954

08004aa0 <sbrk_aligned>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4e0e      	ldr	r6, [pc, #56]	; (8004adc <sbrk_aligned+0x3c>)
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	6831      	ldr	r1, [r6, #0]
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	b911      	cbnz	r1, 8004ab2 <sbrk_aligned+0x12>
 8004aac:	f000 f88c 	bl	8004bc8 <_sbrk_r>
 8004ab0:	6030      	str	r0, [r6, #0]
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f887 	bl	8004bc8 <_sbrk_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d00a      	beq.n	8004ad4 <sbrk_aligned+0x34>
 8004abe:	1cc4      	adds	r4, r0, #3
 8004ac0:	f024 0403 	bic.w	r4, r4, #3
 8004ac4:	42a0      	cmp	r0, r4
 8004ac6:	d007      	beq.n	8004ad8 <sbrk_aligned+0x38>
 8004ac8:	1a21      	subs	r1, r4, r0
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 f87c 	bl	8004bc8 <_sbrk_r>
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d101      	bne.n	8004ad8 <sbrk_aligned+0x38>
 8004ad4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ad8:	4620      	mov	r0, r4
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	20000958 	.word	0x20000958

08004ae0 <_malloc_r>:
 8004ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae4:	1ccd      	adds	r5, r1, #3
 8004ae6:	f025 0503 	bic.w	r5, r5, #3
 8004aea:	3508      	adds	r5, #8
 8004aec:	2d0c      	cmp	r5, #12
 8004aee:	bf38      	it	cc
 8004af0:	250c      	movcc	r5, #12
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	4607      	mov	r7, r0
 8004af6:	db01      	blt.n	8004afc <_malloc_r+0x1c>
 8004af8:	42a9      	cmp	r1, r5
 8004afa:	d905      	bls.n	8004b08 <_malloc_r+0x28>
 8004afc:	230c      	movs	r3, #12
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	2600      	movs	r6, #0
 8004b02:	4630      	mov	r0, r6
 8004b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b08:	4e2e      	ldr	r6, [pc, #184]	; (8004bc4 <_malloc_r+0xe4>)
 8004b0a:	f000 f94b 	bl	8004da4 <__malloc_lock>
 8004b0e:	6833      	ldr	r3, [r6, #0]
 8004b10:	461c      	mov	r4, r3
 8004b12:	bb34      	cbnz	r4, 8004b62 <_malloc_r+0x82>
 8004b14:	4629      	mov	r1, r5
 8004b16:	4638      	mov	r0, r7
 8004b18:	f7ff ffc2 	bl	8004aa0 <sbrk_aligned>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	4604      	mov	r4, r0
 8004b20:	d14d      	bne.n	8004bbe <_malloc_r+0xde>
 8004b22:	6834      	ldr	r4, [r6, #0]
 8004b24:	4626      	mov	r6, r4
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	d140      	bne.n	8004bac <_malloc_r+0xcc>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	4638      	mov	r0, r7
 8004b30:	eb04 0803 	add.w	r8, r4, r3
 8004b34:	f000 f848 	bl	8004bc8 <_sbrk_r>
 8004b38:	4580      	cmp	r8, r0
 8004b3a:	d13a      	bne.n	8004bb2 <_malloc_r+0xd2>
 8004b3c:	6821      	ldr	r1, [r4, #0]
 8004b3e:	3503      	adds	r5, #3
 8004b40:	1a6d      	subs	r5, r5, r1
 8004b42:	f025 0503 	bic.w	r5, r5, #3
 8004b46:	3508      	adds	r5, #8
 8004b48:	2d0c      	cmp	r5, #12
 8004b4a:	bf38      	it	cc
 8004b4c:	250c      	movcc	r5, #12
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4638      	mov	r0, r7
 8004b52:	f7ff ffa5 	bl	8004aa0 <sbrk_aligned>
 8004b56:	3001      	adds	r0, #1
 8004b58:	d02b      	beq.n	8004bb2 <_malloc_r+0xd2>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	442b      	add	r3, r5
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	e00e      	b.n	8004b80 <_malloc_r+0xa0>
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	1b52      	subs	r2, r2, r5
 8004b66:	d41e      	bmi.n	8004ba6 <_malloc_r+0xc6>
 8004b68:	2a0b      	cmp	r2, #11
 8004b6a:	d916      	bls.n	8004b9a <_malloc_r+0xba>
 8004b6c:	1961      	adds	r1, r4, r5
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	6025      	str	r5, [r4, #0]
 8004b72:	bf18      	it	ne
 8004b74:	6059      	strne	r1, [r3, #4]
 8004b76:	6863      	ldr	r3, [r4, #4]
 8004b78:	bf08      	it	eq
 8004b7a:	6031      	streq	r1, [r6, #0]
 8004b7c:	5162      	str	r2, [r4, r5]
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	4638      	mov	r0, r7
 8004b82:	f104 060b 	add.w	r6, r4, #11
 8004b86:	f000 f913 	bl	8004db0 <__malloc_unlock>
 8004b8a:	f026 0607 	bic.w	r6, r6, #7
 8004b8e:	1d23      	adds	r3, r4, #4
 8004b90:	1af2      	subs	r2, r6, r3
 8004b92:	d0b6      	beq.n	8004b02 <_malloc_r+0x22>
 8004b94:	1b9b      	subs	r3, r3, r6
 8004b96:	50a3      	str	r3, [r4, r2]
 8004b98:	e7b3      	b.n	8004b02 <_malloc_r+0x22>
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	bf0c      	ite	eq
 8004ba0:	6032      	streq	r2, [r6, #0]
 8004ba2:	605a      	strne	r2, [r3, #4]
 8004ba4:	e7ec      	b.n	8004b80 <_malloc_r+0xa0>
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	6864      	ldr	r4, [r4, #4]
 8004baa:	e7b2      	b.n	8004b12 <_malloc_r+0x32>
 8004bac:	4634      	mov	r4, r6
 8004bae:	6876      	ldr	r6, [r6, #4]
 8004bb0:	e7b9      	b.n	8004b26 <_malloc_r+0x46>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f000 f8fa 	bl	8004db0 <__malloc_unlock>
 8004bbc:	e7a1      	b.n	8004b02 <_malloc_r+0x22>
 8004bbe:	6025      	str	r5, [r4, #0]
 8004bc0:	e7de      	b.n	8004b80 <_malloc_r+0xa0>
 8004bc2:	bf00      	nop
 8004bc4:	20000954 	.word	0x20000954

08004bc8 <_sbrk_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d06      	ldr	r5, [pc, #24]	; (8004be4 <_sbrk_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fc f996 	bl	8000f04 <_sbrk>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_sbrk_r+0x1a>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_sbrk_r+0x1a>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	2000095c 	.word	0x2000095c

08004be8 <_raise_r>:
 8004be8:	291f      	cmp	r1, #31
 8004bea:	b538      	push	{r3, r4, r5, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	d904      	bls.n	8004bfc <_raise_r+0x14>
 8004bf2:	2316      	movs	r3, #22
 8004bf4:	6003      	str	r3, [r0, #0]
 8004bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004bfe:	b112      	cbz	r2, 8004c06 <_raise_r+0x1e>
 8004c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c04:	b94b      	cbnz	r3, 8004c1a <_raise_r+0x32>
 8004c06:	4620      	mov	r0, r4
 8004c08:	f000 f830 	bl	8004c6c <_getpid_r>
 8004c0c:	462a      	mov	r2, r5
 8004c0e:	4601      	mov	r1, r0
 8004c10:	4620      	mov	r0, r4
 8004c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c16:	f000 b817 	b.w	8004c48 <_kill_r>
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d00a      	beq.n	8004c34 <_raise_r+0x4c>
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	d103      	bne.n	8004c2a <_raise_r+0x42>
 8004c22:	2316      	movs	r3, #22
 8004c24:	6003      	str	r3, [r0, #0]
 8004c26:	2001      	movs	r0, #1
 8004c28:	e7e7      	b.n	8004bfa <_raise_r+0x12>
 8004c2a:	2400      	movs	r4, #0
 8004c2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c30:	4628      	mov	r0, r5
 8004c32:	4798      	blx	r3
 8004c34:	2000      	movs	r0, #0
 8004c36:	e7e0      	b.n	8004bfa <_raise_r+0x12>

08004c38 <raise>:
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <raise+0xc>)
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f7ff bfd3 	b.w	8004be8 <_raise_r>
 8004c42:	bf00      	nop
 8004c44:	200000a4 	.word	0x200000a4

08004c48 <_kill_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d07      	ldr	r5, [pc, #28]	; (8004c68 <_kill_r+0x20>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	f7fc f8cd 	bl	8000df4 <_kill>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d102      	bne.n	8004c64 <_kill_r+0x1c>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	b103      	cbz	r3, 8004c64 <_kill_r+0x1c>
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	2000095c 	.word	0x2000095c

08004c6c <_getpid_r>:
 8004c6c:	f7fc b8ba 	b.w	8000de4 <_getpid>

08004c70 <__sread>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	460c      	mov	r4, r1
 8004c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c78:	f000 f8a0 	bl	8004dbc <_read_r>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	bfab      	itete	ge
 8004c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c82:	89a3      	ldrhlt	r3, [r4, #12]
 8004c84:	181b      	addge	r3, r3, r0
 8004c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c8a:	bfac      	ite	ge
 8004c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c8e:	81a3      	strhlt	r3, [r4, #12]
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <__swrite>:
 8004c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c96:	461f      	mov	r7, r3
 8004c98:	898b      	ldrh	r3, [r1, #12]
 8004c9a:	05db      	lsls	r3, r3, #23
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	4616      	mov	r6, r2
 8004ca2:	d505      	bpl.n	8004cb0 <__swrite+0x1e>
 8004ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca8:	2302      	movs	r3, #2
 8004caa:	2200      	movs	r2, #0
 8004cac:	f000 f868 	bl	8004d80 <_lseek_r>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cba:	81a3      	strh	r3, [r4, #12]
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc6:	f000 b817 	b.w	8004cf8 <_write_r>

08004cca <__sseek>:
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	460c      	mov	r4, r1
 8004cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd2:	f000 f855 	bl	8004d80 <_lseek_r>
 8004cd6:	1c43      	adds	r3, r0, #1
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	bf15      	itete	ne
 8004cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ce6:	81a3      	strheq	r3, [r4, #12]
 8004ce8:	bf18      	it	ne
 8004cea:	81a3      	strhne	r3, [r4, #12]
 8004cec:	bd10      	pop	{r4, pc}

08004cee <__sclose>:
 8004cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf2:	f000 b813 	b.w	8004d1c <_close_r>
	...

08004cf8 <_write_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d07      	ldr	r5, [pc, #28]	; (8004d18 <_write_r+0x20>)
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	4608      	mov	r0, r1
 8004d00:	4611      	mov	r1, r2
 8004d02:	2200      	movs	r2, #0
 8004d04:	602a      	str	r2, [r5, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f7fc f8ab 	bl	8000e62 <_write>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_write_r+0x1e>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_write_r+0x1e>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	2000095c 	.word	0x2000095c

08004d1c <_close_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d06      	ldr	r5, [pc, #24]	; (8004d38 <_close_r+0x1c>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f7fc f8b7 	bl	8000e9a <_close>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_close_r+0x1a>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_close_r+0x1a>
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	2000095c 	.word	0x2000095c

08004d3c <_fstat_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4d07      	ldr	r5, [pc, #28]	; (8004d5c <_fstat_r+0x20>)
 8004d40:	2300      	movs	r3, #0
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	f7fc f8b2 	bl	8000eb2 <_fstat>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d102      	bne.n	8004d58 <_fstat_r+0x1c>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	b103      	cbz	r3, 8004d58 <_fstat_r+0x1c>
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	bd38      	pop	{r3, r4, r5, pc}
 8004d5a:	bf00      	nop
 8004d5c:	2000095c 	.word	0x2000095c

08004d60 <_isatty_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4d06      	ldr	r5, [pc, #24]	; (8004d7c <_isatty_r+0x1c>)
 8004d64:	2300      	movs	r3, #0
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	f7fc f8b1 	bl	8000ed2 <_isatty>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_isatty_r+0x1a>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_isatty_r+0x1a>
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	2000095c 	.word	0x2000095c

08004d80 <_lseek_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d07      	ldr	r5, [pc, #28]	; (8004da0 <_lseek_r+0x20>)
 8004d84:	4604      	mov	r4, r0
 8004d86:	4608      	mov	r0, r1
 8004d88:	4611      	mov	r1, r2
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	602a      	str	r2, [r5, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f7fc f8aa 	bl	8000ee8 <_lseek>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_lseek_r+0x1e>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_lseek_r+0x1e>
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	2000095c 	.word	0x2000095c

08004da4 <__malloc_lock>:
 8004da4:	4801      	ldr	r0, [pc, #4]	; (8004dac <__malloc_lock+0x8>)
 8004da6:	f7ff bdc7 	b.w	8004938 <__retarget_lock_acquire_recursive>
 8004daa:	bf00      	nop
 8004dac:	20000950 	.word	0x20000950

08004db0 <__malloc_unlock>:
 8004db0:	4801      	ldr	r0, [pc, #4]	; (8004db8 <__malloc_unlock+0x8>)
 8004db2:	f7ff bdc2 	b.w	800493a <__retarget_lock_release_recursive>
 8004db6:	bf00      	nop
 8004db8:	20000950 	.word	0x20000950

08004dbc <_read_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d07      	ldr	r5, [pc, #28]	; (8004ddc <_read_r+0x20>)
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7fc f82c 	bl	8000e28 <_read>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_read_r+0x1e>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_read_r+0x1e>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	2000095c 	.word	0x2000095c

08004de0 <_init>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr

08004dec <_fini>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr
