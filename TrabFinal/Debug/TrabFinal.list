
TrabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003388  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800354c  0800354c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003554  08003554  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800355c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000800  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  20000824  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b74  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002040  00000000  00000000  00030bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00032c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c90  00000000  00000000  00033960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002448b  00000000  00000000  000345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f053  00000000  00000000  00058a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db168  00000000  00000000  00067ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142c36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000383c  00000000  00000000  00142c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800351c 	.word	0x0800351c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	0800351c 	.word	0x0800351c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fd7c 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f822 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f968 	bl	80007d0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000500:	f000 f88a 	bl	8000618 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f90c 	bl	8000720 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 f934 	bl	8000774 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 800050c:	f000 f8d2 	bl	80006b4 <MX_SPI3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  init_led();
 8000510:	f000 fc95 	bl	8000e3e <init_led>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  update_led(ghost1);
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <main+0x4c>)
 8000516:	f000 fceb 	bl	8000ef0 <update_led>

	  HAL_Delay(1000);
 800051a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051e:	f000 fdd9 	bl	80010d4 <HAL_Delay>

	  clear_led();
 8000522:	f000 fca1 	bl	8000e68 <clear_led>
	  HAL_Delay(500);
 8000526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052a:	f000 fdd3 	bl	80010d4 <HAL_Delay>

	  lit_led();
 800052e:	f000 fcbd 	bl	8000eac <lit_led>
	  HAL_Delay(500);
 8000532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000536:	f000 fdcd 	bl	80010d4 <HAL_Delay>
	  update_led(ghost1);
 800053a:	e7eb      	b.n	8000514 <main+0x24>
 800053c:	20000000 	.word	0x20000000

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 ffdc 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a28      	ldr	r2, [pc, #160]	; (8000610 <SystemClock_Config+0xd0>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <SystemClock_Config+0xd0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xd4>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b8:	2348      	movs	r3, #72	; 0x48
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c0:	2303      	movs	r3, #3
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fc97 	bl	8001efc <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d4:	f000 f9d0 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fef8 	bl	80023ec <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000602:	f000 f9b9 	bl	8000978 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ETH_Init+0x84>)
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <MX_ETH_Init+0x88>)
 8000620:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ETH_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ETH_Init+0x8c>)
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ETH_Init+0x8c>)
 8000630:	22e1      	movs	r2, #225	; 0xe1
 8000632:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ETH_Init+0x8c>)
 8000636:	2200      	movs	r2, #0
 8000638:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ETH_Init+0x8c>)
 800063c:	2200      	movs	r2, #0
 800063e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ETH_Init+0x8c>)
 8000642:	2200      	movs	r2, #0
 8000644:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_ETH_Init+0x84>)
 8000648:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <MX_ETH_Init+0x8c>)
 800064a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_ETH_Init+0x84>)
 800064e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000652:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_ETH_Init+0x84>)
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <MX_ETH_Init+0x90>)
 8000658:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_ETH_Init+0x84>)
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <MX_ETH_Init+0x94>)
 800065e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_ETH_Init+0x84>)
 8000662:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000666:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_ETH_Init+0x84>)
 800066a:	f000 fe3d 	bl	80012e8 <HAL_ETH_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000674:	f000 f980 	bl	8000978 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000678:	2238      	movs	r2, #56	; 0x38
 800067a:	2100      	movs	r1, #0
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <MX_ETH_Init+0x98>)
 800067e:	f002 ff45 	bl	800350c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_ETH_Init+0x98>)
 8000684:	2221      	movs	r2, #33	; 0x21
 8000686:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_ETH_Init+0x98>)
 800068a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800068e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_ETH_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200001b8 	.word	0x200001b8
 80006a0:	40028000 	.word	0x40028000
 80006a4:	20000810 	.word	0x20000810
 80006a8:	20000118 	.word	0x20000118
 80006ac:	20000078 	.word	0x20000078
 80006b0:	20000040 	.word	0x20000040

080006b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_SPI3_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_SPI3_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_SPI3_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_SPI3_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_SPI3_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_SPI3_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_SPI3_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_SPI3_Init+0x64>)
 80006e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_SPI3_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_SPI3_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_SPI3_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_SPI3_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_SPI3_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_SPI3_Init+0x64>)
 8000706:	f002 f891 	bl	800282c <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f932 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000268 	.word	0x20000268
 800071c:	40003c00 	.word	0x40003c00

08000720 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART3_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART3_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART3_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000758:	f002 f8f1 	bl	800293e <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f909 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200002c0 	.word	0x200002c0
 8000770:	40004800 	.word	0x40004800

08000774 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800077e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2204      	movs	r2, #4
 8000784:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2202      	movs	r2, #2
 800078a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2202      	movs	r2, #2
 8000796:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2201      	movs	r2, #1
 800079c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	f001 fa83 	bl	8001cc2 <HAL_PCD_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f8d9 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000304 	.word	0x20000304

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	4b5e      	ldr	r3, [pc, #376]	; (8000964 <MX_GPIO_Init+0x194>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a5d      	ldr	r2, [pc, #372]	; (8000964 <MX_GPIO_Init+0x194>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b5b      	ldr	r3, [pc, #364]	; (8000964 <MX_GPIO_Init+0x194>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b57      	ldr	r3, [pc, #348]	; (8000964 <MX_GPIO_Init+0x194>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a56      	ldr	r2, [pc, #344]	; (8000964 <MX_GPIO_Init+0x194>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b54      	ldr	r3, [pc, #336]	; (8000964 <MX_GPIO_Init+0x194>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b50      	ldr	r3, [pc, #320]	; (8000964 <MX_GPIO_Init+0x194>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a4f      	ldr	r2, [pc, #316]	; (8000964 <MX_GPIO_Init+0x194>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b4d      	ldr	r3, [pc, #308]	; (8000964 <MX_GPIO_Init+0x194>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <MX_GPIO_Init+0x194>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a48      	ldr	r2, [pc, #288]	; (8000964 <MX_GPIO_Init+0x194>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b46      	ldr	r3, [pc, #280]	; (8000964 <MX_GPIO_Init+0x194>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <MX_GPIO_Init+0x194>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a41      	ldr	r2, [pc, #260]	; (8000964 <MX_GPIO_Init+0x194>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <MX_GPIO_Init+0x194>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MX_GPIO_Init+0x194>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <MX_GPIO_Init+0x194>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_GPIO_Init+0x194>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_5|LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f244 01a1 	movw	r1, #16545	; 0x40a1
 8000894:	4834      	ldr	r0, [pc, #208]	; (8000968 <MX_GPIO_Init+0x198>)
 8000896:	f001 f9fb 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_Pin|DIN_Pin|CLK_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80008a0:	4832      	ldr	r0, [pc, #200]	; (800096c <MX_GPIO_Init+0x19c>)
 80008a2:	f001 f9f5 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f248 0140 	movw	r1, #32832	; 0x8040
 80008ac:	4830      	ldr	r0, [pc, #192]	; (8000970 <MX_GPIO_Init+0x1a0>)
 80008ae:	f001 f9ef 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	482a      	ldr	r0, [pc, #168]	; (8000974 <MX_GPIO_Init+0x1a4>)
 80008ca:	f001 f835 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4820      	ldr	r0, [pc, #128]	; (8000968 <MX_GPIO_Init+0x198>)
 80008e8:	f001 f826 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DIN_Pin CLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DIN_Pin|CLK_Pin;
 80008ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4819      	ldr	r0, [pc, #100]	; (800096c <MX_GPIO_Init+0x19c>)
 8000906:	f001 f817 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG15 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_15;
 800090a:	f248 0340 	movw	r3, #32832	; 0x8040
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_GPIO_Init+0x1a0>)
 8000924:	f001 f808 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_GPIO_Init+0x1a0>)
 800093c:	f000 fffc 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000940:	2320      	movs	r3, #32
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000948:	2301      	movs	r3, #1
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_GPIO_Init+0x198>)
 8000958:	f000 ffee 	bl	8001938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095c:	bf00      	nop
 800095e:	3730      	adds	r7, #48	; 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40020c00 	.word	0x40020c00
 8000970:	40021800 	.word	0x40021800
 8000974:	40020800 	.word	0x40020800

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	; 0x38
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a55      	ldr	r2, [pc, #340]	; (8000b48 <HAL_ETH_MspInit+0x174>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	f040 80a4 	bne.w	8000b40 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
 80009fc:	4b53      	ldr	r3, [pc, #332]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a52      	ldr	r2, [pc, #328]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
 8000a08:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a4b      	ldr	r2, [pc, #300]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a44      	ldr	r2, [pc, #272]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a3d      	ldr	r2, [pc, #244]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a36      	ldr	r2, [pc, #216]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a2f      	ldr	r2, [pc, #188]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000abc:	2332      	movs	r3, #50	; 0x32
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000acc:	230b      	movs	r3, #11
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481e      	ldr	r0, [pc, #120]	; (8000b50 <HAL_ETH_MspInit+0x17c>)
 8000ad8:	f000 ff2e 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000adc:	2386      	movs	r3, #134	; 0x86
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aec:	230b      	movs	r3, #11
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4817      	ldr	r0, [pc, #92]	; (8000b54 <HAL_ETH_MspInit+0x180>)
 8000af8:	f000 ff1e 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0e:	230b      	movs	r3, #11
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <HAL_ETH_MspInit+0x184>)
 8000b1a:	f000 ff0d 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <HAL_ETH_MspInit+0x188>)
 8000b3c:	f000 fefc 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3738      	adds	r7, #56	; 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40028000 	.word	0x40028000
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40021800 	.word	0x40021800

08000b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <HAL_SPI_MspInit+0xc0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d14a      	bne.n	8000c18 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_SPI_MspInit+0xc4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be6:	2306      	movs	r3, #6
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <HAL_SPI_MspInit+0xc8>)
 8000bf2:	f000 fea1 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000bf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c08:	2306      	movs	r3, #6
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <HAL_SPI_MspInit+0xcc>)
 8000c14:	f000 fe90 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40003c00 	.word	0x40003c00
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020800 	.word	0x40020800

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca8:	f000 fe46 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40004800 	.word	0x40004800
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ce0:	d13f      	bne.n	8000d62 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <HAL_PCD_MspInit+0xac>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <HAL_PCD_MspInit+0xac>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_PCD_MspInit+0xac>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d10:	230a      	movs	r3, #10
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4815      	ldr	r0, [pc, #84]	; (8000d70 <HAL_PCD_MspInit+0xb0>)
 8000d1c:	f000 fe0c 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	480e      	ldr	r0, [pc, #56]	; (8000d70 <HAL_PCD_MspInit+0xb0>)
 8000d36:	f000 fdff 	bl	8001938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_PCD_MspInit+0xac>)
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <HAL_PCD_MspInit+0xac>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	6353      	str	r3, [r2, #52]	; 0x34
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_PCD_MspInit+0xac>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_PCD_MspInit+0xac>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_PCD_MspInit+0xac>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f968 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df2:	490e      	ldr	r1, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e08:	4c0b      	ldr	r4, [pc, #44]	; (8000e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e16:	f7ff ffd7 	bl	8000dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f002 fb53 	bl	80034c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fb67 	bl	80004f0 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000e30:	0800355c 	.word	0x0800355c
  ldr r2, =_sbss
 8000e34:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000e38:	20000824 	.word	0x20000824

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>

08000e3e <init_led>:
	C,
	GOOD,
	BAD,
} def_Led_t;

void init_led(void){
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
	spi_write(0x09, 0x00);       //  no decoding
 8000e42:	2100      	movs	r1, #0
 8000e44:	2009      	movs	r0, #9
 8000e46:	f000 f8a1 	bl	8000f8c <spi_write>
	spi_write(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000e4a:	2107      	movs	r1, #7
 8000e4c:	200b      	movs	r0, #11
 8000e4e:	f000 f89d 	bl	8000f8c <spi_write>
	spi_write(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000e52:	2101      	movs	r1, #1
 8000e54:	200c      	movs	r0, #12
 8000e56:	f000 f899 	bl	8000f8c <spi_write>
	spi_write(0x0f, 0x00);       //  no test display
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	f000 f895 	bl	8000f8c <spi_write>
};
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <clear_led>:

void clear_led(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	for(int j = 0; j < 8; j++) {
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	e00e      	b.n	8000e92 <clear_led+0x2a>
		spi_write(led_address[j], clear[j] );
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <clear_led+0x3c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	490a      	ldr	r1, [pc, #40]	; (8000ea8 <clear_led+0x40>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	440b      	add	r3, r1
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4610      	mov	r0, r2
 8000e88:	f000 f880 	bl	8000f8c <spi_write>
	for(int j = 0; j < 8; j++) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	dded      	ble.n	8000e74 <clear_led+0xc>
	}
};
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	20000818 	.word	0x20000818

08000eac <lit_led>:

void lit_led(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	for(int j = 0; j < 8; j++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e00e      	b.n	8000ed6 <lit_led+0x2a>
		spi_write(led_address[j], matrizEncendida[j]);
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <lit_led+0x3c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	490a      	ldr	r1, [pc, #40]	; (8000eec <lit_led+0x40>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	440b      	add	r3, r1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4610      	mov	r0, r2
 8000ecc:	f000 f85e 	bl	8000f8c <spi_write>
	for(int j = 0; j < 8; j++) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b07      	cmp	r3, #7
 8000eda:	dded      	ble.n	8000eb8 <lit_led+0xc>
	}
};
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000014 	.word	0x20000014

08000ef0 <update_led>:

/* se dibuja una lista de caracteres binarios en forma decimal
 * dondde cada valor escrito en exadeciamal representa una fila de la matriz
 * led_adress son el nombre de cada comluna escrito en exadecimal*/
void update_led(uint8_t  paint_list[]){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	 for(int j = 0; j < 8; j++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e00d      	b.n	8000f1a <update_led+0x2a>
			 spi_write(led_address[j], paint_list[j]);
 8000efe:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <update_led+0x3c>)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	7818      	ldrb	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f000 f83c 	bl	8000f8c <spi_write>
	 for(int j = 0; j < 8; j++) {
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	ddee      	ble.n	8000efe <update_led+0xe>
		 }
};
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000000c 	.word	0x2000000c

08000f30 <spi_write_byte>:
#include <stdbool.h> /* esta para incluir los tipos bool (boolianos) */
#include "API_spi.h"


void spi_write_byte (uint8_t byte)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i<8; i++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e01b      	b.n	8000f78 <spi_write_byte+0x48>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f46:	4810      	ldr	r0, [pc, #64]	; (8000f88 <spi_write_byte+0x58>)
 8000f48:	f000 fea2 	bl	8001c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <spi_write_byte+0x58>)
 8000f5c:	f000 fe98 	bl	8001c90 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6c:	4806      	ldr	r0, [pc, #24]	; (8000f88 <spi_write_byte+0x58>)
 8000f6e:	f000 fe8f 	bl	8001c90 <HAL_GPIO_WritePin>
	for (uint8_t i =0; i<8; i++)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3301      	adds	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b07      	cmp	r3, #7
 8000f7c:	d9e0      	bls.n	8000f40 <spi_write_byte+0x10>
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020c00 	.word	0x40020c00

08000f8c <spi_write>:


void spi_write(uint8_t address, uint8_t cmd)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	460a      	mov	r2, r1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa2:	4812      	ldr	r0, [pc, #72]	; (8000fec <spi_write+0x60>)
 8000fa4:	f000 fe74 	bl	8001c90 <HAL_GPIO_WritePin>
	for (uint8_t i=0;i<num; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e00a      	b.n	8000fc4 <spi_write+0x38>
	{
		spi_write_byte (address);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffbd 	bl	8000f30 <spi_write_byte>
		spi_write_byte (cmd);
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ffb9 	bl	8000f30 <spi_write_byte>
	for (uint8_t i=0;i<num; i++)
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f1      	beq.n	8000fae <spi_write+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <spi_write+0x60>)
 8000fd2:	f000 fe5d 	bl	8001c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <spi_write+0x60>)
 8000fde:	f000 fe57 	bl	8001c90 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f931 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f808 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fcae 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f93b 	bl	80012ce <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001070:	f000 f911 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000008 	.word	0x20000008
 800108c:	20000020 	.word	0x20000020
 8001090:	2000001c 	.word	0x2000001c

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000020 	.word	0x20000020
 80010b8:	20000820 	.word	0x20000820

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000820 	.word	0x20000820

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000020 	.word	0x20000020

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff47 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff5c 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffb0 	bl	800123c <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e06c      	b.n	80013d4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2223      	movs	r2, #35	; 0x23
 8001308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fb61 	bl	80009d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <HAL_ETH_Init+0xf4>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a30      	ldr	r2, [pc, #192]	; (80013dc <HAL_ETH_Init+0xf4>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <HAL_ETH_Init+0xf4>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800132e:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_ETH_Init+0xf8>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <HAL_ETH_Init+0xf8>)
 8001334:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001338:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800133a:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <HAL_ETH_Init+0xf8>)
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	4927      	ldr	r1, [pc, #156]	; (80013e0 <HAL_ETH_Init+0xf8>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_ETH_Init+0xf8>)
 800134a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001362:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001364:	f7ff feaa 	bl	80010bc <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800136a:	e011      	b.n	8001390 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800136c:	f7ff fea6 	bl	80010bc <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137a:	d909      	bls.n	8001390 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	22e0      	movs	r2, #224	; 0xe0
 8001388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e021      	b.n	80013d4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1e4      	bne.n	800136c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f958 	bl	8001658 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f9ff 	bl	80017ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fa55 	bl	800185e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	461a      	mov	r2, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f9bd 	bl	800173c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2210      	movs	r2, #16
 80013ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800

080013e4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4b51      	ldr	r3, [pc, #324]	; (8001540 <ETH_SetMACConfig+0x15c>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7c1b      	ldrb	r3, [r3, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <ETH_SetMACConfig+0x28>
 8001406:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800140a:	e000      	b.n	800140e <ETH_SetMACConfig+0x2a>
 800140c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	7c5b      	ldrb	r3, [r3, #17]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <ETH_SetMACConfig+0x38>
 8001416:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800141a:	e000      	b.n	800141e <ETH_SetMACConfig+0x3a>
 800141c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800141e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001424:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	7fdb      	ldrb	r3, [r3, #31]
 800142a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800142c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001432:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	7f92      	ldrb	r2, [r2, #30]
 8001438:	2a00      	cmp	r2, #0
 800143a:	d102      	bne.n	8001442 <ETH_SetMACConfig+0x5e>
 800143c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001440:	e000      	b.n	8001444 <ETH_SetMACConfig+0x60>
 8001442:	2200      	movs	r2, #0
                        macconf->Speed |
 8001444:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	7f1b      	ldrb	r3, [r3, #28]
 800144a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800144c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001452:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	791b      	ldrb	r3, [r3, #4]
 8001458:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800145a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001462:	2a00      	cmp	r2, #0
 8001464:	d102      	bne.n	800146c <ETH_SetMACConfig+0x88>
 8001466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146a:	e000      	b.n	800146e <ETH_SetMACConfig+0x8a>
 800146c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800146e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	7bdb      	ldrb	r3, [r3, #15]
 8001474:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001476:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800147c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001484:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001486:	4313      	orrs	r3, r2
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fe18 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014ba:	4013      	ands	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d101      	bne.n	80014d2 <ETH_SetMACConfig+0xee>
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	e000      	b.n	80014d4 <ETH_SetMACConfig+0xf0>
 80014d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014d4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80014e2:	2a01      	cmp	r2, #1
 80014e4:	d101      	bne.n	80014ea <ETH_SetMACConfig+0x106>
 80014e6:	2208      	movs	r2, #8
 80014e8:	e000      	b.n	80014ec <ETH_SetMACConfig+0x108>
 80014ea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	d101      	bne.n	80014fc <ETH_SetMACConfig+0x118>
 80014f8:	2204      	movs	r2, #4
 80014fa:	e000      	b.n	80014fe <ETH_SetMACConfig+0x11a>
 80014fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001506:	2a01      	cmp	r2, #1
 8001508:	d101      	bne.n	800150e <ETH_SetMACConfig+0x12a>
 800150a:	2202      	movs	r2, #2
 800150c:	e000      	b.n	8001510 <ETH_SetMACConfig+0x12c>
 800150e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001510:	4313      	orrs	r3, r2
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff fdd3 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	ff20810f 	.word	0xff20810f

08001544 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <ETH_SetDMAConfig+0x110>)
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	7b1b      	ldrb	r3, [r3, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <ETH_SetDMAConfig+0x2c>
 800156a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800156e:	e000      	b.n	8001572 <ETH_SetDMAConfig+0x2e>
 8001570:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	7b5b      	ldrb	r3, [r3, #13]
 8001576:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001578:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	7f52      	ldrb	r2, [r2, #29]
 800157e:	2a00      	cmp	r2, #0
 8001580:	d102      	bne.n	8001588 <ETH_SetDMAConfig+0x44>
 8001582:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001586:	e000      	b.n	800158a <ETH_SetDMAConfig+0x46>
 8001588:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800158a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	7b9b      	ldrb	r3, [r3, #14]
 8001590:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001592:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001598:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	7f1b      	ldrb	r3, [r3, #28]
 800159e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	7f9b      	ldrb	r3, [r3, #30]
 80015a6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015a8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015b6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015b8:	4313      	orrs	r3, r2
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff fd7a 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e8:	461a      	mov	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015f8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015fe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001604:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800160c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800160e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001616:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800161c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800162a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff fd4b 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	f8de3f23 	.word	0xf8de3f23

08001658 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0a6      	sub	sp, #152	; 0x98
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001660:	2301      	movs	r3, #1
 8001662:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800166c:	2300      	movs	r3, #0
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001694:	2300      	movs	r3, #0
 8001696:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fe86 	bl	80013e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016d8:	2301      	movs	r3, #1
 80016da:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016dc:	2301      	movs	r3, #1
 80016de:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016fe:	2301      	movs	r3, #1
 8001700:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001704:	2301      	movs	r3, #1
 8001706:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800170e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001712:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001718:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff08 	bl	8001544 <ETH_SetDMAConfig>
}
 8001734:	bf00      	nop
 8001736:	3798      	adds	r7, #152	; 0x98
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3305      	adds	r3, #5
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	3204      	adds	r2, #4
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <ETH_MACAddressConfig+0x68>)
 800175e:	4413      	add	r3, r2
 8001760:	461a      	mov	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3303      	adds	r3, #3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	061a      	lsls	r2, r3, #24
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3302      	adds	r3, #2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	4313      	orrs	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	4313      	orrs	r3, r2
 8001788:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <ETH_MACAddressConfig+0x6c>)
 800178e:	4413      	add	r3, r2
 8001790:	461a      	mov	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	6013      	str	r3, [r2, #0]
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40028040 	.word	0x40028040
 80017a8:	40028044 	.word	0x40028044

080017ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e03e      	b.n	8001838 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	3206      	adds	r2, #6
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d80c      	bhi.n	800181c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	461a      	mov	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	e004      	b.n	8001826 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d9bd      	bls.n	80017ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001850:	611a      	str	r2, [r3, #16]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e046      	b.n	80018fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6919      	ldr	r1, [r3, #16]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	3212      	adds	r2, #18
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d80c      	bhi.n	80018ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6919      	ldr	r1, [r3, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	461a      	mov	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	e004      	b.n	80018f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d9b5      	bls.n	800186c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192a:	60da      	str	r2, [r3, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e177      	b.n	8001c44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8166 	bne.w	8001c3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80c0 	beq.w	8001c3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a65      	ldr	r2, [pc, #404]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ada:	4a61      	ldr	r2, [pc, #388]	; (8001c60 <HAL_GPIO_Init+0x328>)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_GPIO_Init+0x32c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d037      	beq.n	8001b76 <HAL_GPIO_Init+0x23e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <HAL_GPIO_Init+0x330>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d031      	beq.n	8001b72 <HAL_GPIO_Init+0x23a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a56      	ldr	r2, [pc, #344]	; (8001c6c <HAL_GPIO_Init+0x334>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d02b      	beq.n	8001b6e <HAL_GPIO_Init+0x236>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_GPIO_Init+0x338>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d025      	beq.n	8001b6a <HAL_GPIO_Init+0x232>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a54      	ldr	r2, [pc, #336]	; (8001c74 <HAL_GPIO_Init+0x33c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01f      	beq.n	8001b66 <HAL_GPIO_Init+0x22e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a53      	ldr	r2, [pc, #332]	; (8001c78 <HAL_GPIO_Init+0x340>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x22a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_GPIO_Init+0x344>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x226>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a51      	ldr	r2, [pc, #324]	; (8001c80 <HAL_GPIO_Init+0x348>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x222>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <HAL_GPIO_Init+0x34c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x21e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	; (8001c88 <HAL_GPIO_Init+0x350>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x21a>
 8001b4e:	2309      	movs	r3, #9
 8001b50:	e012      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b52:	230a      	movs	r3, #10
 8001b54:	e010      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b56:	2308      	movs	r3, #8
 8001b58:	e00e      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e00c      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b5e:	2306      	movs	r3, #6
 8001b60:	e00a      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b62:	2305      	movs	r3, #5
 8001b64:	e008      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b66:	2304      	movs	r3, #4
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e004      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b76:	2300      	movs	r3, #0
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f002 0203 	and.w	r2, r2, #3
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	4093      	lsls	r3, r2
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b88:	4935      	ldr	r1, [pc, #212]	; (8001c60 <HAL_GPIO_Init+0x328>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_GPIO_Init+0x354>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bba:	4a34      	ldr	r2, [pc, #208]	; (8001c8c <HAL_GPIO_Init+0x354>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_GPIO_Init+0x354>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be4:	4a29      	ldr	r2, [pc, #164]	; (8001c8c <HAL_GPIO_Init+0x354>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_GPIO_Init+0x354>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0e:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_GPIO_Init+0x354>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_GPIO_Init+0x354>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <HAL_GPIO_Init+0x354>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b0f      	cmp	r3, #15
 8001c48:	f67f ae84 	bls.w	8001954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40021400 	.word	0x40021400
 8001c7c:	40021800 	.word	0x40021800
 8001c80:	40021c00 	.word	0x40021c00
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40022400 	.word	0x40022400
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc4:	b08f      	sub	sp, #60	; 0x3c
 8001cc6:	af0a      	add	r7, sp, #40	; 0x28
 8001cc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e10f      	b.n	8001ef4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe ffe6 	bl	8000cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f001 f935 	bl	8002f82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	687e      	ldr	r6, [r7, #4]
 8001d20:	466d      	mov	r5, sp
 8001d22:	f106 0410 	add.w	r4, r6, #16
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d36:	1d33      	adds	r3, r6, #4
 8001d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f001 f8c0 	bl	8002ec0 <USB_CoreInit>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0d0      	b.n	8001ef4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 f923 	bl	8002fa4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e04a      	b.n	8001dfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	333d      	adds	r3, #61	; 0x3d
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	333c      	adds	r3, #60	; 0x3c
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	b298      	uxth	r0, r3
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3344      	adds	r3, #68	; 0x44
 8001da0:	4602      	mov	r2, r0
 8001da2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3340      	adds	r3, #64	; 0x40
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3348      	adds	r3, #72	; 0x48
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	334c      	adds	r3, #76	; 0x4c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3354      	adds	r3, #84	; 0x54
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	3301      	adds	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d3af      	bcc.n	8001d64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e044      	b.n	8001e94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	3301      	adds	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d3b5      	bcc.n	8001e0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	687e      	ldr	r6, [r7, #4]
 8001ea6:	466d      	mov	r5, sp
 8001ea8:	f106 0410 	add.w	r4, r6, #16
 8001eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ebc:	1d33      	adds	r3, r6, #4
 8001ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f001 f8bb 	bl	800303c <USB_DevInit>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e00d      	b.n	8001ef4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 fa86 	bl	80033fe <USB_DevDisconnect>

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e267      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d075      	beq.n	8002006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1a:	4b88      	ldr	r3, [pc, #544]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4b85      	ldr	r3, [pc, #532]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b82      	ldr	r3, [pc, #520]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b7e      	ldr	r3, [pc, #504]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05b      	beq.n	8002004 <HAL_RCC_OscConfig+0x108>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d157      	bne.n	8002004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e242      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0x74>
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a75      	ldr	r2, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x98>
 8001f7a:	4b70      	ldr	r3, [pc, #448]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6f      	ldr	r2, [pc, #444]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b6d      	ldr	r3, [pc, #436]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6c      	ldr	r2, [pc, #432]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f94:	4b69      	ldr	r3, [pc, #420]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a68      	ldr	r2, [pc, #416]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b66      	ldr	r3, [pc, #408]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a65      	ldr	r2, [pc, #404]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f882 	bl	80010bc <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff f87e 	bl	80010bc <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e207      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xc0>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f86e 	bl	80010bc <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff f86a 	bl	80010bc <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1f3      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xe8>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <HAL_RCC_OscConfig+0x240>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1c7      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4937      	ldr	r1, [pc, #220]	; (800213c <HAL_RCC_OscConfig+0x240>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e03a      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b34      	ldr	r3, [pc, #208]	; (8002140 <HAL_RCC_OscConfig+0x244>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7ff f823 	bl	80010bc <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207a:	f7ff f81f 	bl	80010bc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1a8      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b28      	ldr	r3, [pc, #160]	; (800213c <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4925      	ldr	r1, [pc, #148]	; (800213c <HAL_RCC_OscConfig+0x240>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x244>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff f802 	bl	80010bc <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020bc:	f7fe fffe 	bl	80010bc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e187      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d036      	beq.n	8002154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d016      	beq.n	800211c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_RCC_OscConfig+0x248>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7fe ffe2 	bl	80010bc <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7fe ffde 	bl	80010bc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e167      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x240>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x200>
 800211a:	e01b      	b.n	8002154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_OscConfig+0x248>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe ffcb 	bl	80010bc <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	e00e      	b.n	8002148 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212a:	f7fe ffc7 	bl	80010bc <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d907      	bls.n	8002148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e150      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
 800213c:	40023800 	.word	0x40023800
 8002140:	42470000 	.word	0x42470000
 8002144:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	4b88      	ldr	r3, [pc, #544]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800214a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ea      	bne.n	800212a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8097 	beq.w	8002290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b7d      	ldr	r3, [pc, #500]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a7c      	ldr	r2, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b7a      	ldr	r3, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b77      	ldr	r3, [pc, #476]	; (8002370 <HAL_RCC_OscConfig+0x474>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b74      	ldr	r3, [pc, #464]	; (8002370 <HAL_RCC_OscConfig+0x474>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a73      	ldr	r2, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x474>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7fe ff87 	bl	80010bc <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7fe ff83 	bl	80010bc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e10c      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <HAL_RCC_OscConfig+0x474>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2ea>
 80021d8:	4b64      	ldr	r3, [pc, #400]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a63      	ldr	r2, [pc, #396]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	e01c      	b.n	8002220 <HAL_RCC_OscConfig+0x324>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x30c>
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a5e      	ldr	r2, [pc, #376]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
 80021fa:	4b5c      	ldr	r3, [pc, #368]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a5b      	ldr	r2, [pc, #364]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0x324>
 8002208:	4b58      	ldr	r3, [pc, #352]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a57      	ldr	r2, [pc, #348]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	4b55      	ldr	r3, [pc, #340]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	4a54      	ldr	r2, [pc, #336]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800221a:	f023 0304 	bic.w	r3, r3, #4
 800221e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d015      	beq.n	8002254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7fe ff48 	bl	80010bc <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7fe ff44 	bl	80010bc <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0cb      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ee      	beq.n	8002230 <HAL_RCC_OscConfig+0x334>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7fe ff32 	bl	80010bc <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	e00a      	b.n	8002272 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f7fe ff2e 	bl	80010bc <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0b5      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ee      	bne.n	800225c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b39      	ldr	r3, [pc, #228]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a38      	ldr	r2, [pc, #224]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800228a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a1 	beq.w	80023dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229a:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCC_OscConfig+0x470>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d05c      	beq.n	8002360 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d141      	bne.n	8002332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_OscConfig+0x478>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe ff02 	bl	80010bc <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fefe 	bl	80010bc <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e087      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x470>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	019b      	lsls	r3, r3, #6
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	491b      	ldr	r1, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x478>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe fed7 	bl	80010bc <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe fed3 	bl	80010bc <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e05c      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x416>
 8002330:	e054      	b.n	80023dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_RCC_OscConfig+0x478>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fec0 	bl	80010bc <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe febc 	bl	80010bc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e045      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_OscConfig+0x470>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x444>
 800235e:	e03d      	b.n	80023dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e038      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000
 8002374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x4ec>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d028      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d121      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d11a      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d111      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0cc      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d90c      	bls.n	8002428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d044      	beq.n	800250c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d119      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d003      	beq.n	80024aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e067      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ca:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 0203 	bic.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4934      	ldr	r1, [pc, #208]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024dc:	f7fe fdee 	bl	80010bc <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7fe fdea 	bl	80010bc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e04f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 020c 	and.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d1eb      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d20c      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fd4e 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08003534 	.word	0x08003534
 80025b0:	20000008 	.word	0x20000008
 80025b4:	2000001c 	.word	0x2000001c

080025b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b094      	sub	sp, #80	; 0x50
 80025be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	647b      	str	r3, [r7, #68]	; 0x44
 80025c4:	2300      	movs	r3, #0
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c8:	2300      	movs	r3, #0
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d0:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d00d      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x40>
 80025dc:	2b08      	cmp	r3, #8
 80025de:	f200 80e1 	bhi.w	80027a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x34>
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ea:	e0db      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b73      	ldr	r3, [pc, #460]	; (80027bc <HAL_RCC_GetSysClockFreq+0x204>)
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025f0:	e0db      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80025f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025f6:	e0d8      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f8:	4b6f      	ldr	r3, [pc, #444]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002600:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002602:	4b6d      	ldr	r3, [pc, #436]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d063      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260e:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	2200      	movs	r2, #0
 8002616:	63bb      	str	r3, [r7, #56]	; 0x38
 8002618:	63fa      	str	r2, [r7, #60]	; 0x3c
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
 8002622:	2300      	movs	r3, #0
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
 8002626:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800262a:	4622      	mov	r2, r4
 800262c:	462b      	mov	r3, r5
 800262e:	f04f 0000 	mov.w	r0, #0
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	0159      	lsls	r1, r3, #5
 8002638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263c:	0150      	lsls	r0, r2, #5
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4621      	mov	r1, r4
 8002644:	1a51      	subs	r1, r2, r1
 8002646:	6139      	str	r1, [r7, #16]
 8002648:	4629      	mov	r1, r5
 800264a:	eb63 0301 	sbc.w	r3, r3, r1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800265c:	4659      	mov	r1, fp
 800265e:	018b      	lsls	r3, r1, #6
 8002660:	4651      	mov	r1, sl
 8002662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002666:	4651      	mov	r1, sl
 8002668:	018a      	lsls	r2, r1, #6
 800266a:	4651      	mov	r1, sl
 800266c:	ebb2 0801 	subs.w	r8, r2, r1
 8002670:	4659      	mov	r1, fp
 8002672:	eb63 0901 	sbc.w	r9, r3, r1
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800268a:	4690      	mov	r8, r2
 800268c:	4699      	mov	r9, r3
 800268e:	4623      	mov	r3, r4
 8002690:	eb18 0303 	adds.w	r3, r8, r3
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	462b      	mov	r3, r5
 8002698:	eb49 0303 	adc.w	r3, r9, r3
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026aa:	4629      	mov	r1, r5
 80026ac:	024b      	lsls	r3, r1, #9
 80026ae:	4621      	mov	r1, r4
 80026b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026b4:	4621      	mov	r1, r4
 80026b6:	024a      	lsls	r2, r1, #9
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026be:	2200      	movs	r2, #0
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026c8:	f7fd fd90 	bl	80001ec <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4613      	mov	r3, r2
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d4:	e058      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d6:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	2200      	movs	r2, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	4611      	mov	r1, r2
 80026e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026e6:	623b      	str	r3, [r7, #32]
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026f0:	4642      	mov	r2, r8
 80026f2:	464b      	mov	r3, r9
 80026f4:	f04f 0000 	mov.w	r0, #0
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	0159      	lsls	r1, r3, #5
 80026fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002702:	0150      	lsls	r0, r2, #5
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4641      	mov	r1, r8
 800270a:	ebb2 0a01 	subs.w	sl, r2, r1
 800270e:	4649      	mov	r1, r9
 8002710:	eb63 0b01 	sbc.w	fp, r3, r1
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002720:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002724:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002728:	ebb2 040a 	subs.w	r4, r2, sl
 800272c:	eb63 050b 	sbc.w	r5, r3, fp
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	00eb      	lsls	r3, r5, #3
 800273a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800273e:	00e2      	lsls	r2, r4, #3
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	4643      	mov	r3, r8
 8002746:	18e3      	adds	r3, r4, r3
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	464b      	mov	r3, r9
 800274c:	eb45 0303 	adc.w	r3, r5, r3
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800275e:	4629      	mov	r1, r5
 8002760:	028b      	lsls	r3, r1, #10
 8002762:	4621      	mov	r1, r4
 8002764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002768:	4621      	mov	r1, r4
 800276a:	028a      	lsls	r2, r1, #10
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002772:	2200      	movs	r2, #0
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	61fa      	str	r2, [r7, #28]
 8002778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277c:	f7fd fd36 	bl	80001ec <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4613      	mov	r3, r2
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	3301      	adds	r3, #1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800279a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a2:	e002      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetSysClockFreq+0x204>)
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3750      	adds	r7, #80	; 0x50
 80027b0:	46bd      	mov	sp, r7
 80027b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	00f42400 	.word	0x00f42400
 80027c0:	007a1200 	.word	0x007a1200

080027c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000008 	.word	0x20000008

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0a9b      	lsrs	r3, r3, #10
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4903      	ldr	r1, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	08003544 	.word	0x08003544

08002804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002808:	f7ff ffdc 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0b5b      	lsrs	r3, r3, #13
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4903      	ldr	r1, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	08003544 	.word	0x08003544

0800282c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07b      	b.n	8002936 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800284e:	d009      	beq.n	8002864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
 8002856:	e005      	b.n	8002864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe f96e 	bl	8000b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e8:	ea42 0103 	orr.w	r1, r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0104 	and.w	r1, r3, #4
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f003 0210 	and.w	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002924:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e03f      	b.n	80029d0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7fe f963 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2224      	movs	r2, #36	; 0x24
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002980:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f828 	bl	80029d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002996:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029dc:	b0c0      	sub	sp, #256	; 0x100
 80029de:	af00      	add	r7, sp, #0
 80029e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	ea40 0301 	orr.w	r3, r0, r1
 8002a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a30:	f021 010c 	bic.w	r1, r1, #12
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a52:	6999      	ldr	r1, [r3, #24]
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	ea40 0301 	orr.w	r3, r0, r1
 8002a5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b8f      	ldr	r3, [pc, #572]	; (8002ca4 <UART_SetConfig+0x2cc>)
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d005      	beq.n	8002a78 <UART_SetConfig+0xa0>
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b8d      	ldr	r3, [pc, #564]	; (8002ca8 <UART_SetConfig+0x2d0>)
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d104      	bne.n	8002a82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a78:	f7ff fec4 	bl	8002804 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a80:	e003      	b.n	8002a8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a82:	f7ff feab 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8002a86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a94:	f040 810c 	bne.w	8002cb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002aa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002aaa:	4622      	mov	r2, r4
 8002aac:	462b      	mov	r3, r5
 8002aae:	1891      	adds	r1, r2, r2
 8002ab0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ab2:	415b      	adcs	r3, r3
 8002ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ab6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002aba:	4621      	mov	r1, r4
 8002abc:	eb12 0801 	adds.w	r8, r2, r1
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	eb43 0901 	adc.w	r9, r3, r1
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ada:	4690      	mov	r8, r2
 8002adc:	4699      	mov	r9, r3
 8002ade:	4623      	mov	r3, r4
 8002ae0:	eb18 0303 	adds.w	r3, r8, r3
 8002ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ae8:	462b      	mov	r3, r5
 8002aea:	eb49 0303 	adc.w	r3, r9, r3
 8002aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002afe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b06:	460b      	mov	r3, r1
 8002b08:	18db      	adds	r3, r3, r3
 8002b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	eb42 0303 	adc.w	r3, r2, r3
 8002b12:	657b      	str	r3, [r7, #84]	; 0x54
 8002b14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b1c:	f7fd fb66 	bl	80001ec <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4b61      	ldr	r3, [pc, #388]	; (8002cac <UART_SetConfig+0x2d4>)
 8002b26:	fba3 2302 	umull	r2, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	011c      	lsls	r4, r3, #4
 8002b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b40:	4642      	mov	r2, r8
 8002b42:	464b      	mov	r3, r9
 8002b44:	1891      	adds	r1, r2, r2
 8002b46:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b48:	415b      	adcs	r3, r3
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b50:	4641      	mov	r1, r8
 8002b52:	eb12 0a01 	adds.w	sl, r2, r1
 8002b56:	4649      	mov	r1, r9
 8002b58:	eb43 0b01 	adc.w	fp, r3, r1
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b70:	4692      	mov	sl, r2
 8002b72:	469b      	mov	fp, r3
 8002b74:	4643      	mov	r3, r8
 8002b76:	eb1a 0303 	adds.w	r3, sl, r3
 8002b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b7e:	464b      	mov	r3, r9
 8002b80:	eb4b 0303 	adc.w	r3, fp, r3
 8002b84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	18db      	adds	r3, r3, r3
 8002ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8002baa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bb2:	f7fd fb1b 	bl	80001ec <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <UART_SetConfig+0x2d4>)
 8002bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2264      	movs	r2, #100	; 0x64
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	1acb      	subs	r3, r1, r3
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <UART_SetConfig+0x2d4>)
 8002bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002be0:	441c      	add	r4, r3
 8002be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	1891      	adds	r1, r2, r2
 8002bfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bfc:	415b      	adcs	r3, r3
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c04:	4641      	mov	r1, r8
 8002c06:	1851      	adds	r1, r2, r1
 8002c08:	6339      	str	r1, [r7, #48]	; 0x30
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	414b      	adcs	r3, r1
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c1c:	4659      	mov	r1, fp
 8002c1e:	00cb      	lsls	r3, r1, #3
 8002c20:	4651      	mov	r1, sl
 8002c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c26:	4651      	mov	r1, sl
 8002c28:	00ca      	lsls	r2, r1, #3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4642      	mov	r2, r8
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c38:	464b      	mov	r3, r9
 8002c3a:	460a      	mov	r2, r1
 8002c3c:	eb42 0303 	adc.w	r3, r2, r3
 8002c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c58:	460b      	mov	r3, r1
 8002c5a:	18db      	adds	r3, r3, r3
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5e:	4613      	mov	r3, r2
 8002c60:	eb42 0303 	adc.w	r3, r2, r3
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c6e:	f7fd fabd 	bl	80001ec <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <UART_SetConfig+0x2d4>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2164      	movs	r1, #100	; 0x64
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	3332      	adds	r3, #50	; 0x32
 8002c8a:	4a08      	ldr	r2, [pc, #32]	; (8002cac <UART_SetConfig+0x2d4>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 0207 	and.w	r2, r3, #7
 8002c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4422      	add	r2, r4
 8002c9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ca0:	e105      	b.n	8002eae <UART_SetConfig+0x4d6>
 8002ca2:	bf00      	nop
 8002ca4:	40011000 	.word	0x40011000
 8002ca8:	40011400 	.word	0x40011400
 8002cac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cc2:	4642      	mov	r2, r8
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	1891      	adds	r1, r2, r2
 8002cc8:	6239      	str	r1, [r7, #32]
 8002cca:	415b      	adcs	r3, r3
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cd2:	4641      	mov	r1, r8
 8002cd4:	1854      	adds	r4, r2, r1
 8002cd6:	4649      	mov	r1, r9
 8002cd8:	eb43 0501 	adc.w	r5, r3, r1
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	00eb      	lsls	r3, r5, #3
 8002ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cea:	00e2      	lsls	r2, r4, #3
 8002cec:	4614      	mov	r4, r2
 8002cee:	461d      	mov	r5, r3
 8002cf0:	4643      	mov	r3, r8
 8002cf2:	18e3      	adds	r3, r4, r3
 8002cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cf8:	464b      	mov	r3, r9
 8002cfa:	eb45 0303 	adc.w	r3, r5, r3
 8002cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d1e:	4629      	mov	r1, r5
 8002d20:	008b      	lsls	r3, r1, #2
 8002d22:	4621      	mov	r1, r4
 8002d24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d28:	4621      	mov	r1, r4
 8002d2a:	008a      	lsls	r2, r1, #2
 8002d2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d30:	f7fd fa5c 	bl	80001ec <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4b60      	ldr	r3, [pc, #384]	; (8002ebc <UART_SetConfig+0x4e4>)
 8002d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	011c      	lsls	r4, r3, #4
 8002d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d54:	4642      	mov	r2, r8
 8002d56:	464b      	mov	r3, r9
 8002d58:	1891      	adds	r1, r2, r2
 8002d5a:	61b9      	str	r1, [r7, #24]
 8002d5c:	415b      	adcs	r3, r3
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d64:	4641      	mov	r1, r8
 8002d66:	1851      	adds	r1, r2, r1
 8002d68:	6139      	str	r1, [r7, #16]
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	414b      	adcs	r3, r1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	00cb      	lsls	r3, r1, #3
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d86:	4651      	mov	r1, sl
 8002d88:	00ca      	lsls	r2, r1, #3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4642      	mov	r2, r8
 8002d92:	189b      	adds	r3, r3, r2
 8002d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d98:	464b      	mov	r3, r9
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	eb42 0303 	adc.w	r3, r2, r3
 8002da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	008b      	lsls	r3, r1, #2
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	008a      	lsls	r2, r1, #2
 8002dca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dce:	f7fd fa0d 	bl	80001ec <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <UART_SetConfig+0x4e4>)
 8002dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	2164      	movs	r1, #100	; 0x64
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	3332      	adds	r3, #50	; 0x32
 8002dea:	4a34      	ldr	r2, [pc, #208]	; (8002ebc <UART_SetConfig+0x4e4>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df6:	441c      	add	r4, r3
 8002df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8002e00:	677a      	str	r2, [r7, #116]	; 0x74
 8002e02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e06:	4642      	mov	r2, r8
 8002e08:	464b      	mov	r3, r9
 8002e0a:	1891      	adds	r1, r2, r2
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	415b      	adcs	r3, r3
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e16:	4641      	mov	r1, r8
 8002e18:	1851      	adds	r1, r2, r1
 8002e1a:	6039      	str	r1, [r7, #0]
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	414b      	adcs	r3, r1
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e2e:	4659      	mov	r1, fp
 8002e30:	00cb      	lsls	r3, r1, #3
 8002e32:	4651      	mov	r1, sl
 8002e34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e38:	4651      	mov	r1, sl
 8002e3a:	00ca      	lsls	r2, r1, #3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4603      	mov	r3, r0
 8002e42:	4642      	mov	r2, r8
 8002e44:	189b      	adds	r3, r3, r2
 8002e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e48:	464b      	mov	r3, r9
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e5c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	008b      	lsls	r3, r1, #2
 8002e6e:	4641      	mov	r1, r8
 8002e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e74:	4641      	mov	r1, r8
 8002e76:	008a      	lsls	r2, r1, #2
 8002e78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e7c:	f7fd f9b6 	bl	80001ec <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <UART_SetConfig+0x4e4>)
 8002e86:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2164      	movs	r1, #100	; 0x64
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	3332      	adds	r3, #50	; 0x32
 8002e98:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <UART_SetConfig+0x4e4>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4422      	add	r2, r4
 8002eac:	609a      	str	r2, [r3, #8]
}
 8002eae:	bf00      	nop
 8002eb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eba:	bf00      	nop
 8002ebc:	51eb851f 	.word	0x51eb851f

08002ec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	f107 001c 	add.w	r0, r7, #28
 8002ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d122      	bne.n	8002f1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 faa2 	bl	800345c <USB_CoreReset>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e01a      	b.n	8002f54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa96 	bl	800345c <USB_CoreReset>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
 8002f46:	e005      	b.n	8002f54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10b      	bne.n	8002f72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f043 0206 	orr.w	r2, r3, #6
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f7e:	b004      	add	sp, #16
 8002f80:	4770      	bx	lr

08002f82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d115      	bne.n	8002ff2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f7fe f87e 	bl	80010d4 <HAL_Delay>
      ms++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa2e 	bl	8003440 <USB_GetMode>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d01e      	beq.n	8003028 <USB_SetCurrentMode+0x84>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b31      	cmp	r3, #49	; 0x31
 8002fee:	d9f0      	bls.n	8002fd2 <USB_SetCurrentMode+0x2e>
 8002ff0:	e01a      	b.n	8003028 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d115      	bne.n	8003024 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003004:	2001      	movs	r0, #1
 8003006:	f7fe f865 	bl	80010d4 <HAL_Delay>
      ms++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3301      	adds	r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fa15 	bl	8003440 <USB_GetMode>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <USB_SetCurrentMode+0x84>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b31      	cmp	r3, #49	; 0x31
 8003020:	d9f0      	bls.n	8003004 <USB_SetCurrentMode+0x60>
 8003022:	e001      	b.n	8003028 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e005      	b.n	8003034 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b32      	cmp	r3, #50	; 0x32
 800302c:	d101      	bne.n	8003032 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800303c:	b084      	sub	sp, #16
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800304a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	e009      	b.n	8003070 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	3340      	adds	r3, #64	; 0x40
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	2200      	movs	r2, #0
 8003068:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	3301      	adds	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b0e      	cmp	r3, #14
 8003074:	d9f2      	bls.n	800305c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11c      	bne.n	80030b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308a:	f043 0302 	orr.w	r3, r3, #2
 800308e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
 80030b4:	e00b      	b.n	80030ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030d4:	461a      	mov	r2, r3
 80030d6:	2300      	movs	r3, #0
 80030d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	4619      	mov	r1, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e8:	461a      	mov	r2, r3
 80030ea:	680b      	ldr	r3, [r1, #0]
 80030ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10c      	bne.n	800310e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030fa:	2100      	movs	r1, #0
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f965 	bl	80033cc <USB_SetDevSpeed>
 8003102:	e008      	b.n	8003116 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003104:	2101      	movs	r1, #1
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f960 	bl	80033cc <USB_SetDevSpeed>
 800310c:	e003      	b.n	8003116 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800310e:	2103      	movs	r1, #3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f95b 	bl	80033cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003116:	2110      	movs	r1, #16
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f8f3 	bl	8003304 <USB_FlushTxFifo>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f91f 	bl	800336c <USB_FlushRxFifo>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313e:	461a      	mov	r2, r3
 8003140:	2300      	movs	r3, #0
 8003142:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314a:	461a      	mov	r2, r3
 800314c:	2300      	movs	r3, #0
 800314e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003156:	461a      	mov	r2, r3
 8003158:	2300      	movs	r3, #0
 800315a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	e043      	b.n	80031ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003178:	d118      	bne.n	80031ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318c:	461a      	mov	r2, r3
 800318e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e013      	b.n	80031be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a2:	461a      	mov	r2, r3
 80031a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e008      	b.n	80031be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b8:	461a      	mov	r2, r3
 80031ba:	2300      	movs	r3, #0
 80031bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ca:	461a      	mov	r2, r3
 80031cc:	2300      	movs	r3, #0
 80031ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031dc:	461a      	mov	r2, r3
 80031de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	3301      	adds	r3, #1
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d3b7      	bcc.n	8003162 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e043      	b.n	8003280 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800320a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800320e:	d118      	bne.n	8003242 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003222:	461a      	mov	r2, r3
 8003224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e013      	b.n	8003254 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e008      	b.n	8003254 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	2300      	movs	r3, #0
 8003252:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003260:	461a      	mov	r2, r3
 8003262:	2300      	movs	r3, #0
 8003264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	461a      	mov	r2, r3
 8003274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	3301      	adds	r3, #1
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	429a      	cmp	r2, r3
 8003286:	d3b7      	bcc.n	80031f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800329a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f043 0210 	orr.w	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <USB_DevInit+0x2c4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f043 0208 	orr.w	r2, r3, #8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032fc:	b004      	add	sp, #16
 80032fe:	4770      	bx	lr
 8003300:	803c3800 	.word	0x803c3800

08003304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a13      	ldr	r2, [pc, #76]	; (8003368 <USB_FlushTxFifo+0x64>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e01b      	b.n	800335c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	daf2      	bge.n	8003312 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	019b      	lsls	r3, r3, #6
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3301      	adds	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a08      	ldr	r2, [pc, #32]	; (8003368 <USB_FlushTxFifo+0x64>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e006      	b.n	800335c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b20      	cmp	r3, #32
 8003358:	d0f0      	beq.n	800333c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	00030d40 	.word	0x00030d40

0800336c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <USB_FlushRxFifo+0x5c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e018      	b.n	80033bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	daf2      	bge.n	8003378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2210      	movs	r2, #16
 800339a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <USB_FlushRxFifo+0x5c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e006      	b.n	80033bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d0f0      	beq.n	800339c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	00030d40 	.word	0x00030d40

080033cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003418:	f023 0303 	bic.w	r3, r3, #3
 800341c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0301 	and.w	r3, r3, #1
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <USB_CoreReset+0x64>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e01b      	b.n	80034b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	daf2      	bge.n	8003468 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <USB_CoreReset+0x64>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e006      	b.n	80034b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d0f0      	beq.n	8003492 <USB_CoreReset+0x36>

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	00030d40 	.word	0x00030d40

080034c4 <__libc_init_array>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	4d0d      	ldr	r5, [pc, #52]	; (80034fc <__libc_init_array+0x38>)
 80034c8:	4c0d      	ldr	r4, [pc, #52]	; (8003500 <__libc_init_array+0x3c>)
 80034ca:	1b64      	subs	r4, r4, r5
 80034cc:	10a4      	asrs	r4, r4, #2
 80034ce:	2600      	movs	r6, #0
 80034d0:	42a6      	cmp	r6, r4
 80034d2:	d109      	bne.n	80034e8 <__libc_init_array+0x24>
 80034d4:	4d0b      	ldr	r5, [pc, #44]	; (8003504 <__libc_init_array+0x40>)
 80034d6:	4c0c      	ldr	r4, [pc, #48]	; (8003508 <__libc_init_array+0x44>)
 80034d8:	f000 f820 	bl	800351c <_init>
 80034dc:	1b64      	subs	r4, r4, r5
 80034de:	10a4      	asrs	r4, r4, #2
 80034e0:	2600      	movs	r6, #0
 80034e2:	42a6      	cmp	r6, r4
 80034e4:	d105      	bne.n	80034f2 <__libc_init_array+0x2e>
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ec:	4798      	blx	r3
 80034ee:	3601      	adds	r6, #1
 80034f0:	e7ee      	b.n	80034d0 <__libc_init_array+0xc>
 80034f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f6:	4798      	blx	r3
 80034f8:	3601      	adds	r6, #1
 80034fa:	e7f2      	b.n	80034e2 <__libc_init_array+0x1e>
 80034fc:	08003554 	.word	0x08003554
 8003500:	08003554 	.word	0x08003554
 8003504:	08003554 	.word	0x08003554
 8003508:	08003558 	.word	0x08003558

0800350c <memset>:
 800350c:	4402      	add	r2, r0
 800350e:	4603      	mov	r3, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr
