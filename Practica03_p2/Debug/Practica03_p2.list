
Practica03_p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002938  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c2c  08002c2c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c34  08002c34  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000038  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000051c5  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000149c  00000000  00000000  00025271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000590  00000000  00000000  00026710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004c8  00000000  00000000  00026ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a9b  00000000  00000000  00027168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008090  00000000  00000000  0004cc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2555  00000000  00000000  00054c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001371e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d40  00000000  00000000  00137238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002ad0 	.word	0x08002ad0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08002ad0 	.word	0x08002ad0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <delayInit>:
/* delayInit debe cargar el valor de duración del retardo en la estructura, en el campo
correspondiente. No debe iniciar el conteo del retardo. Debe inicializar el flag running
en `false´. */

void delayInit( delay_t * delay, tick_t duration )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d105      	bne.n	80005b0 <delayInit+0x1c>
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <delayInit+0x30>)
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <delayInit+0x34>)
 80005a8:	2113      	movs	r1, #19
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <delayInit+0x38>)
 80005ac:	f001 fa6c 	bl	8001a88 <__assert_func>
	assert(delay->duration >=0);
	delay->duration = duration;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	721a      	strb	r2, [r3, #8]
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	08002ae8 	.word	0x08002ae8
 80005c8:	08002b28 	.word	0x08002b28
 80005cc:	08002af8 	.word	0x08002af8

080005d0 <delayRead>:
○ true, hacer la cuenta para saber si el tiempo del retardo se cumplió o no:
‘marca de tiempo actual - marca de tiempo inicial es mayor o igual a duración
del retardo’ y devolver un valor booleano que indique si el tiempo se cumplió o no.
○ Cuando el tiempo se cumple se debe cambiar el flag running a false.*/

bool_t delayRead( delay_t * delay ){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

	static bool_t retValue; // variable estatica interna
	retValue = false;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <delayRead+0x6c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	assert(delay !=NULL);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d105      	bne.n	80005f0 <delayRead+0x20>
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <delayRead+0x70>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <delayRead+0x74>)
 80005e8:	2124      	movs	r1, #36	; 0x24
 80005ea:	4817      	ldr	r0, [pc, #92]	; (8000648 <delayRead+0x78>)
 80005ec:	f001 fa4c 	bl	8001a88 <__assert_func>
	assert(delay->duration >= 0);

	if (delay->running == false){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7a1b      	ldrb	r3, [r3, #8]
 80005f4:	f083 0301 	eor.w	r3, r3, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <delayRead+0x40>
		delay->startTime = HAL_GetTick();
 80005fe:	f000 fa17 	bl	8000a30 <HAL_GetTick>
 8000602:	4602      	mov	r2, r0
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	721a      	strb	r2, [r3, #8]
 800060e:	e00f      	b.n	8000630 <delayRead+0x60>
	}
	else{
		 if((HAL_GetTick()-delay->startTime) >= delay->duration){
 8000610:	f000 fa0e 	bl	8000a30 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1ad2      	subs	r2, r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	d305      	bcc.n	8000630 <delayRead+0x60>
			 delay->running = false;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	721a      	strb	r2, [r3, #8]
			 retValue = true;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <delayRead+0x6c>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
		 }
	}
	return retValue;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <delayRead+0x6c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000098 	.word	0x20000098
 8000640:	08002b18 	.word	0x08002b18
 8000644:	08002b34 	.word	0x08002b34
 8000648:	08002af8 	.word	0x08002af8

0800064c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10e      	bne.n	800067a <BSP_LED_Init+0x2e>
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <BSP_LED_Init+0x94>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <BSP_LED_Init+0x94>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <BSP_LED_Init+0x94>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	e00d      	b.n	8000696 <BSP_LED_Init+0x4a>
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <BSP_LED_Init+0x94>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <BSP_LED_Init+0x94>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <BSP_LED_Init+0x94>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <BSP_LED_Init+0x98>)
 800069a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <BSP_LED_Init+0x9c>)
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	f107 0214 	add.w	r2, r7, #20
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fa7a 	bl	8000bb4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <BSP_LED_Init+0x9c>)
 80006c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <BSP_LED_Init+0x98>)
 80006cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f000 fc1a 	bl	8000f0c <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	08002b40 	.word	0x08002b40
 80006e8:	20000000 	.word	0x20000000

080006ec <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <BSP_LED_On+0x2c>)
 80006fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <BSP_LED_On+0x30>)
 8000702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	f000 fbff 	bl	8000f0c <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000000 	.word	0x20000000
 800071c:	08002b40 	.word	0x08002b40

08000720 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <BSP_LED_Off+0x2c>)
 800072e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <BSP_LED_Off+0x30>)
 8000736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	f000 fbe5 	bl	8000f0c <HAL_GPIO_WritePin>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000
 8000750:	08002b40 	.word	0x08002b40

08000754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <SystemInit+0x60>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <SystemInit+0x60>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <SystemInit+0x64>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <SystemInit+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x64>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <SystemInit+0x64>)
 8000780:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000788:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <SystemInit+0x64>)
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <SystemInit+0x68>)
 800078e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <SystemInit+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <SystemInit+0x64>)
 8000796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <SystemInit+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SystemInit+0x60>)
 80007a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a8:	609a      	str	r2, [r3, #8]
#endif
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	40023800 	.word	0x40023800
 80007bc:	24003010 	.word	0x24003010

080007c0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000814:	f000 f8f8 	bl	8000a08 <HAL_IncTick>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <_kill>:

int _kill(int pid, int sig)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000836:	f001 f945 	bl	8001ac4 <__errno>
 800083a:	4603      	mov	r3, r0
 800083c:	2216      	movs	r2, #22
 800083e:	601a      	str	r2, [r3, #0]
	return -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_exit>:

void _exit (int status)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ffe7 	bl	800082c <_kill>
	while (1) {}		/* Make sure we hang here */
 800085e:	e7fe      	b.n	800085e <_exit+0x12>

08000860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	e00a      	b.n	8000888 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000872:	f3af 8000 	nop.w
 8000876:	4601      	mov	r1, r0
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	60ba      	str	r2, [r7, #8]
 800087e:	b2ca      	uxtb	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	3301      	adds	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	dbf0      	blt.n	8000872 <_read+0x12>
	}

return len;
 8000890:	687b      	ldr	r3, [r7, #4]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e009      	b.n	80008c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbf1      	blt.n	80008ac <_write+0x12>
	}
	return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_close>:

int _close(int file)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
	return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fa:	605a      	str	r2, [r3, #4]
	return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <_isatty>:

int _isatty(int file)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	return 1;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	return 0;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <_sbrk+0x5c>)
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <_sbrk+0x60>)
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <_sbrk+0x64>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <_sbrk+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800096c:	f001 f8aa 	bl	8001ac4 <__errno>
 8000970:	4603      	mov	r3, r0
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800097a:	e009      	b.n	8000990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_sbrk+0x64>)
 800098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20030000 	.word	0x20030000
 800099c:	00000400 	.word	0x00000400
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	200000b8 	.word	0x200000b8

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f8e8 	bl	8000b9c <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e4:	f000 f8be 	bl	8000b64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	20000014 	.word	0x20000014
 8000a04:	20000010 	.word	0x20000010

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000014 	.word	0x20000014
 8000a2c:	200000a0 	.word	0x200000a0

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	200000a0 	.word	0x200000a0

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b44:	f7ff ff8e 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b76:	f7ff ff67 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	6978      	ldr	r0, [r7, #20]
 8000b82:	f7ff ff99 	bl	8000ab8 <NVIC_EncodePriority>
 8000b86:	4602      	mov	r2, r0
 8000b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff68 	bl	8000a64 <__NVIC_SetPriority>
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ffbb 	bl	8000b20 <SysTick_Config>
 8000baa:	4603      	mov	r3, r0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	e177      	b.n	8000ec0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	f040 8166 	bne.w	8000eba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d005      	beq.n	8000c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d130      	bne.n	8000c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	091b      	lsrs	r3, r3, #4
 8000c52:	f003 0201 	and.w	r2, r3, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	d017      	beq.n	8000ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d123      	bne.n	8000cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	08da      	lsrs	r2, r3, #3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	69b9      	ldr	r1, [r7, #24]
 8000cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0203 	and.w	r2, r3, #3
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80c0 	beq.w	8000eba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b66      	ldr	r3, [pc, #408]	; (8000ed8 <HAL_GPIO_Init+0x324>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a65      	ldr	r2, [pc, #404]	; (8000ed8 <HAL_GPIO_Init+0x324>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b63      	ldr	r3, [pc, #396]	; (8000ed8 <HAL_GPIO_Init+0x324>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d56:	4a61      	ldr	r2, [pc, #388]	; (8000edc <HAL_GPIO_Init+0x328>)
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a58      	ldr	r2, [pc, #352]	; (8000ee0 <HAL_GPIO_Init+0x32c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d037      	beq.n	8000df2 <HAL_GPIO_Init+0x23e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a57      	ldr	r2, [pc, #348]	; (8000ee4 <HAL_GPIO_Init+0x330>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d031      	beq.n	8000dee <HAL_GPIO_Init+0x23a>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a56      	ldr	r2, [pc, #344]	; (8000ee8 <HAL_GPIO_Init+0x334>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d02b      	beq.n	8000dea <HAL_GPIO_Init+0x236>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a55      	ldr	r2, [pc, #340]	; (8000eec <HAL_GPIO_Init+0x338>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d025      	beq.n	8000de6 <HAL_GPIO_Init+0x232>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a54      	ldr	r2, [pc, #336]	; (8000ef0 <HAL_GPIO_Init+0x33c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d01f      	beq.n	8000de2 <HAL_GPIO_Init+0x22e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a53      	ldr	r2, [pc, #332]	; (8000ef4 <HAL_GPIO_Init+0x340>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d019      	beq.n	8000dde <HAL_GPIO_Init+0x22a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a52      	ldr	r2, [pc, #328]	; (8000ef8 <HAL_GPIO_Init+0x344>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0x226>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a51      	ldr	r2, [pc, #324]	; (8000efc <HAL_GPIO_Init+0x348>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d00d      	beq.n	8000dd6 <HAL_GPIO_Init+0x222>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <HAL_GPIO_Init+0x34c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x21e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4f      	ldr	r2, [pc, #316]	; (8000f04 <HAL_GPIO_Init+0x350>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_GPIO_Init+0x21a>
 8000dca:	2309      	movs	r3, #9
 8000dcc:	e012      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000dce:	230a      	movs	r3, #10
 8000dd0:	e010      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	e00e      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	e00c      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000dda:	2306      	movs	r3, #6
 8000ddc:	e00a      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000dde:	2305      	movs	r3, #5
 8000de0:	e008      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000de2:	2304      	movs	r3, #4
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e004      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <HAL_GPIO_Init+0x240>
 8000df2:	2300      	movs	r3, #0
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	f002 0203 	and.w	r2, r2, #3
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e04:	4935      	ldr	r1, [pc, #212]	; (8000edc <HAL_GPIO_Init+0x328>)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e12:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <HAL_GPIO_Init+0x354>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e36:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <HAL_GPIO_Init+0x354>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_GPIO_Init+0x354>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e60:	4a29      	ldr	r2, [pc, #164]	; (8000f08 <HAL_GPIO_Init+0x354>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_GPIO_Init+0x354>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <HAL_GPIO_Init+0x354>)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_GPIO_Init+0x354>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_GPIO_Init+0x354>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	f67f ae84 	bls.w	8000bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020c00 	.word	0x40020c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40021400 	.word	0x40021400
 8000ef8:	40021800 	.word	0x40021800
 8000efc:	40021c00 	.word	0x40021c00
 8000f00:	40022000 	.word	0x40022000
 8000f04:	40022400 	.word	0x40022400
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_PWREx_EnableOverDrive+0x94>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f6c:	f7ff fd60 	bl	8000a30 <HAL_GetTick>
 8000f70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f72:	e009      	b.n	8000f88 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f74:	f7ff fd5c 	bl	8000a30 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f82:	d901      	bls.n	8000f88 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e01f      	b.n	8000fc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f94:	d1ee      	bne.n	8000f74 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f9c:	f7ff fd48 	bl	8000a30 <HAL_GetTick>
 8000fa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fa2:	e009      	b.n	8000fb8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fa4:	f7ff fd44 	bl	8000a30 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fb2:	d901      	bls.n	8000fb8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e007      	b.n	8000fc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fc4:	d1ee      	bne.n	8000fa4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	420e0040 	.word	0x420e0040
 8000fd8:	40007000 	.word	0x40007000
 8000fdc:	420e0044 	.word	0x420e0044

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e267      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d075      	beq.n	80010ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ffe:	4b88      	ldr	r3, [pc, #544]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b04      	cmp	r3, #4
 8001008:	d00c      	beq.n	8001024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100a:	4b85      	ldr	r3, [pc, #532]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001012:	2b08      	cmp	r3, #8
 8001014:	d112      	bne.n	800103c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001016:	4b82      	ldr	r3, [pc, #520]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001022:	d10b      	bne.n	800103c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	4b7e      	ldr	r3, [pc, #504]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d05b      	beq.n	80010e8 <HAL_RCC_OscConfig+0x108>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d157      	bne.n	80010e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e242      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001044:	d106      	bne.n	8001054 <HAL_RCC_OscConfig+0x74>
 8001046:	4b76      	ldr	r3, [pc, #472]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a75      	ldr	r2, [pc, #468]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e01d      	b.n	8001090 <HAL_RCC_OscConfig+0xb0>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x98>
 800105e:	4b70      	ldr	r3, [pc, #448]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a6f      	ldr	r2, [pc, #444]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b6d      	ldr	r3, [pc, #436]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a6c      	ldr	r2, [pc, #432]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0xb0>
 8001078:	4b69      	ldr	r3, [pc, #420]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a68      	ldr	r2, [pc, #416]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800107e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b66      	ldr	r3, [pc, #408]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a65      	ldr	r2, [pc, #404]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800108a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fcca 	bl	8000a30 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fcc6 	bl	8000a30 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e207      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0xc0>
 80010be:	e014      	b.n	80010ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fcb6 	bl	8000a30 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fcb2 	bl	8000a30 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e1f3      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010da:	4b51      	ldr	r3, [pc, #324]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0xe8>
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d063      	beq.n	80011be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f6:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00b      	beq.n	800111a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110a:	2b08      	cmp	r3, #8
 800110c:	d11c      	bne.n	8001148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d116      	bne.n	8001148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <HAL_RCC_OscConfig+0x152>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d001      	beq.n	8001132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e1c7      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4937      	ldr	r1, [pc, #220]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	e03a      	b.n	80011be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d020      	beq.n	8001192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <HAL_RCC_OscConfig+0x244>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001156:	f7ff fc6b 	bl	8000a30 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115e:	f7ff fc67 	bl	8000a30 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1a8      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4925      	ldr	r1, [pc, #148]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
 8001190:	e015      	b.n	80011be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_RCC_OscConfig+0x244>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001198:	f7ff fc4a 	bl	8000a30 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc46 	bl	8000a30 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e187      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d036      	beq.n	8001238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d016      	beq.n	8001200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_RCC_OscConfig+0x248>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d8:	f7ff fc2a 	bl	8000a30 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc26 	bl	8000a30 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e167      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_RCC_OscConfig+0x240>)
 80011f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0x200>
 80011fe:	e01b      	b.n	8001238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_RCC_OscConfig+0x248>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fc13 	bl	8000a30 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120c:	e00e      	b.n	800122c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120e:	f7ff fc0f 	bl	8000a30 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d907      	bls.n	800122c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e150      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
 8001220:	40023800 	.word	0x40023800
 8001224:	42470000 	.word	0x42470000
 8001228:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122c:	4b88      	ldr	r3, [pc, #544]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 800122e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1ea      	bne.n	800120e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 8097 	beq.w	8001374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124a:	4b81      	ldr	r3, [pc, #516]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a7c      	ldr	r2, [pc, #496]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001272:	2301      	movs	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001276:	4b77      	ldr	r3, [pc, #476]	; (8001454 <HAL_RCC_OscConfig+0x474>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d118      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001282:	4b74      	ldr	r3, [pc, #464]	; (8001454 <HAL_RCC_OscConfig+0x474>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a73      	ldr	r2, [pc, #460]	; (8001454 <HAL_RCC_OscConfig+0x474>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128e:	f7ff fbcf 	bl	8000a30 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001296:	f7ff fbcb 	bl	8000a30 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e10c      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <HAL_RCC_OscConfig+0x474>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x2ea>
 80012bc:	4b64      	ldr	r3, [pc, #400]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c0:	4a63      	ldr	r2, [pc, #396]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6713      	str	r3, [r2, #112]	; 0x70
 80012c8:	e01c      	b.n	8001304 <HAL_RCC_OscConfig+0x324>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b05      	cmp	r3, #5
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x30c>
 80012d2:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d6:	4a5e      	ldr	r2, [pc, #376]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6713      	str	r3, [r2, #112]	; 0x70
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	4a5b      	ldr	r2, [pc, #364]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0x324>
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f0:	4a57      	ldr	r2, [pc, #348]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	6713      	str	r3, [r2, #112]	; 0x70
 80012f8:	4b55      	ldr	r3, [pc, #340]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fc:	4a54      	ldr	r2, [pc, #336]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80012fe:	f023 0304 	bic.w	r3, r3, #4
 8001302:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d015      	beq.n	8001338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fb90 	bl	8000a30 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff fb8c 	bl	8000a30 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0cb      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0ee      	beq.n	8001314 <HAL_RCC_OscConfig+0x334>
 8001336:	e014      	b.n	8001362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fb7a 	bl	8000a30 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133e:	e00a      	b.n	8001356 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fb76 	bl	8000a30 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e0b5      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001356:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1ee      	bne.n	8001340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d105      	bne.n	8001374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a38      	ldr	r2, [pc, #224]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 800136e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a1 	beq.w	80014c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b08      	cmp	r3, #8
 8001388:	d05c      	beq.n	8001444 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d141      	bne.n	8001416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_RCC_OscConfig+0x478>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fb4a 	bl	8000a30 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fb46 	bl	8000a30 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e087      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69da      	ldr	r2, [r3, #28]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	019b      	lsls	r3, r3, #6
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	3b01      	subs	r3, #1
 80013d8:	041b      	lsls	r3, r3, #16
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	491b      	ldr	r1, [pc, #108]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_RCC_OscConfig+0x478>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fb1f 	bl	8000a30 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff fb1b 	bl	8000a30 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e05c      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x416>
 8001414:	e054      	b.n	80014c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_RCC_OscConfig+0x478>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fb08 	bl	8000a30 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff fb04 	bl	8000a30 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e045      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x470>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x444>
 8001442:	e03d      	b.n	80014c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d107      	bne.n	800145c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e038      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000
 8001458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_RCC_OscConfig+0x4ec>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d028      	beq.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d121      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d11a      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800148c:	4013      	ands	r3, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001494:	4293      	cmp	r3, r2
 8001496:	d111      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	085b      	lsrs	r3, r3, #1
 80014a4:	3b01      	subs	r3, #1
 80014a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d107      	bne.n	80014bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0cc      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d90c      	bls.n	800150c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0b8      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001524:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800152e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a52      	ldr	r2, [pc, #328]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	494d      	ldr	r1, [pc, #308]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d044      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d119      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e07f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	2b03      	cmp	r3, #3
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e067      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4934      	ldr	r1, [pc, #208]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c0:	f7ff fa36 	bl	8000a30 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	e00a      	b.n	80015de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff fa32 	bl	8000a30 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e04f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 020c 	and.w	r2, r3, #12
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1eb      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d20c      	bcs.n	8001618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e032      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4916      	ldr	r1, [pc, #88]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	490e      	ldr	r1, [pc, #56]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001656:	f000 f821 	bl	800169c <HAL_RCC_GetSysClockFreq>
 800165a:	4602      	mov	r2, r0
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	490a      	ldr	r1, [pc, #40]	; (8001690 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	5ccb      	ldrb	r3, [r1, r3]
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f996 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00
 800168c:	40023800 	.word	0x40023800
 8001690:	08002b48 	.word	0x08002b48
 8001694:	2000000c 	.word	0x2000000c
 8001698:	20000010 	.word	0x20000010

0800169c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800169c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a0:	b094      	sub	sp, #80	; 0x50
 80016a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
 80016a8:	2300      	movs	r3, #0
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016ac:	2300      	movs	r3, #0
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b4:	4b79      	ldr	r3, [pc, #484]	; (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d00d      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x40>
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	f200 80e1 	bhi.w	8001888 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x34>
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80016ce:	e0db      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80016d4:	e0db      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80016d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016da:	e0d8      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016dc:	4b6f      	ldr	r3, [pc, #444]	; (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e6:	4b6d      	ldr	r3, [pc, #436]	; (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f2:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	099b      	lsrs	r3, r3, #6
 80016f8:	2200      	movs	r2, #0
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80016fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80016fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
 800170a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800170e:	4622      	mov	r2, r4
 8001710:	462b      	mov	r3, r5
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0159      	lsls	r1, r3, #5
 800171c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001720:	0150      	lsls	r0, r2, #5
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4621      	mov	r1, r4
 8001728:	1a51      	subs	r1, r2, r1
 800172a:	6139      	str	r1, [r7, #16]
 800172c:	4629      	mov	r1, r5
 800172e:	eb63 0301 	sbc.w	r3, r3, r1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001740:	4659      	mov	r1, fp
 8001742:	018b      	lsls	r3, r1, #6
 8001744:	4651      	mov	r1, sl
 8001746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174a:	4651      	mov	r1, sl
 800174c:	018a      	lsls	r2, r1, #6
 800174e:	4651      	mov	r1, sl
 8001750:	ebb2 0801 	subs.w	r8, r2, r1
 8001754:	4659      	mov	r1, fp
 8001756:	eb63 0901 	sbc.w	r9, r3, r1
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800176a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800176e:	4690      	mov	r8, r2
 8001770:	4699      	mov	r9, r3
 8001772:	4623      	mov	r3, r4
 8001774:	eb18 0303 	adds.w	r3, r8, r3
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	462b      	mov	r3, r5
 800177c:	eb49 0303 	adc.w	r3, r9, r3
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800178e:	4629      	mov	r1, r5
 8001790:	024b      	lsls	r3, r1, #9
 8001792:	4621      	mov	r1, r4
 8001794:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001798:	4621      	mov	r1, r4
 800179a:	024a      	lsls	r2, r1, #9
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a2:	2200      	movs	r2, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017ac:	f7fe fd70 	bl	8000290 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017b8:	e058      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	2200      	movs	r2, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	4611      	mov	r1, r2
 80017c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
 80017d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017d4:	4642      	mov	r2, r8
 80017d6:	464b      	mov	r3, r9
 80017d8:	f04f 0000 	mov.w	r0, #0
 80017dc:	f04f 0100 	mov.w	r1, #0
 80017e0:	0159      	lsls	r1, r3, #5
 80017e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e6:	0150      	lsls	r0, r2, #5
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4641      	mov	r1, r8
 80017ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80017f2:	4649      	mov	r1, r9
 80017f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800180c:	ebb2 040a 	subs.w	r4, r2, sl
 8001810:	eb63 050b 	sbc.w	r5, r3, fp
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	00eb      	lsls	r3, r5, #3
 800181e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001822:	00e2      	lsls	r2, r4, #3
 8001824:	4614      	mov	r4, r2
 8001826:	461d      	mov	r5, r3
 8001828:	4643      	mov	r3, r8
 800182a:	18e3      	adds	r3, r4, r3
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	464b      	mov	r3, r9
 8001830:	eb45 0303 	adc.w	r3, r5, r3
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001842:	4629      	mov	r1, r5
 8001844:	028b      	lsls	r3, r1, #10
 8001846:	4621      	mov	r1, r4
 8001848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800184c:	4621      	mov	r1, r4
 800184e:	028a      	lsls	r2, r1, #10
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001856:	2200      	movs	r2, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	61fa      	str	r2, [r7, #28]
 800185c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001860:	f7fe fd16 	bl	8000290 <__aeabi_uldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4613      	mov	r3, r2
 800186a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_GetSysClockFreq+0x200>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	3301      	adds	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800187c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800187e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001886:	e002      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800188c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001890:	4618      	mov	r0, r3
 8001892:	3750      	adds	r7, #80	; 0x50
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	007a1200 	.word	0x007a1200

080018a8 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
       - Low Level Initialization
	 */
	//HAL_Init();

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80018ae:	f000 f859 	bl	8001964 <SystemClock_Config>

	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7fe feca 	bl	800064c <BSP_LED_Init>
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED2);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7fe fec7 	bl	800064c <BSP_LED_Init>
	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED3);
 80018be:	2002      	movs	r0, #2
 80018c0:	f7fe fec4 	bl	800064c <BSP_LED_Init>

    delay_t Delay1;

    /* Inicializamos las tres estructuras con distinto tiempo (100,500,1000)*/

    delayInit(&Delay1, TIME1); // Inicializa el retardo a 100 ticks
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	21c8      	movs	r1, #200	; 0xc8
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe63 	bl	8000594 <delayInit>

    int LED_select = LED_init; // LED inicial
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
    int Estado_LED = OFF ; // EStado de LED  inicial
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]


	/* Infinite loop */
    while (1) {
    	if (delayRead(&Delay1)){
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe79 	bl	80005d0 <delayRead>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f8      	beq.n	80018d6 <main+0x2e>
        if (LED_select == PRIMERO) { // El retardo se ha cumplido, encender o apaga LED1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d111      	bne.n	800190e <main+0x66>
        	if (Estado_LED == OFF){ // se prende el led 1 y se mantiene en LED 1
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d107      	bne.n	8001900 <main+0x58>
        		BSP_LED_On(LED1);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7fe fefb 	bl	80006ec <BSP_LED_On>
        		Estado_LED = ON;
 80018f6:	2301      	movs	r3, #1
 80018f8:	613b      	str	r3, [r7, #16]
        		LED_select = PRIMERO;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e006      	b.n	800190e <main+0x66>
        	}
        	else{ // la segunda vez que pasa apaga el LED 1 y selecciona el LED2 para encender
        		BSP_LED_Off(LED1);
 8001900:	2000      	movs	r0, #0
 8001902:	f7fe ff0d 	bl	8000720 <BSP_LED_Off>
        		LED_select = SEGUNDO;
 8001906:	2302      	movs	r3, #2
 8001908:	617b      	str	r3, [r7, #20]
        		Estado_LED = OFF;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
        	}
        }
        if (LED_select == SEGUNDO ) { // El retardo se ha cumplido, encender o apaga LED2
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d111      	bne.n	8001938 <main+0x90>
        	if (Estado_LED == OFF){ // Enciende LED2
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d107      	bne.n	800192a <main+0x82>
        		BSP_LED_On(LED2);
 800191a:	2001      	movs	r0, #1
 800191c:	f7fe fee6 	bl	80006ec <BSP_LED_On>
        		Estado_LED = ON;
 8001920:	2301      	movs	r3, #1
 8001922:	613b      	str	r3, [r7, #16]
        		LED_select = SEGUNDO;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e006      	b.n	8001938 <main+0x90>
        	}
        	else{ // APAGA LED2 y Seleciona LED3
        		BSP_LED_Off(LED2);
 800192a:	2001      	movs	r0, #1
 800192c:	f7fe fef8 	bl	8000720 <BSP_LED_Off>
        		LED_select = TERCERO;
 8001930:	2303      	movs	r3, #3
 8001932:	617b      	str	r3, [r7, #20]
        		Estado_LED = OFF;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
        	}
        }
        if (LED_select == TERCERO) { // El retardo se ha cumplido, encender o apagar LED3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d1cb      	bne.n	80018d6 <main+0x2e>
        	if (Estado_LED == OFF){ // Enciende LED3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <main+0xac>
        		BSP_LED_On(LED3);
 8001944:	2002      	movs	r0, #2
 8001946:	f7fe fed1 	bl	80006ec <BSP_LED_On>
        		Estado_LED = ON;
 800194a:	2301      	movs	r3, #1
 800194c:	613b      	str	r3, [r7, #16]
        		LED_select = TERCERO;
 800194e:	2303      	movs	r3, #3
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e7c0      	b.n	80018d6 <main+0x2e>
        	}
        	else{ // APAGA LED3 y Seleciona LED1
        		BSP_LED_Off(LED3);
 8001954:	2002      	movs	r0, #2
 8001956:	f7fe fee3 	bl	8000720 <BSP_LED_Off>
        		LED_select = PRIMERO;
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
        		Estado_LED = OFF;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
    	if (delayRead(&Delay1)){
 8001962:	e7b8      	b.n	80018d6 <main+0x2e>

08001964 <SystemClock_Config>:
}



static void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	; 0x50
 8001968:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <SystemClock_Config+0xbc>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a2b      	ldr	r2, [pc, #172]	; (8001a20 <SystemClock_Config+0xbc>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <SystemClock_Config+0xbc>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <SystemClock_Config+0xc0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <SystemClock_Config+0xc0>)
 8001990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <SystemClock_Config+0xc0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019aa:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ac:	2302      	movs	r3, #2
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80019b6:	2308      	movs	r3, #8
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80019ba:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80019c4:	2307      	movs	r3, #7
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fb07 	bl	8000fe0 <HAL_RCC_OscConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 80019d8:	f000 f826 	bl	8001a28 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019dc:	f7ff fab0 	bl	8000f40 <HAL_PWREx_EnableOverDrive>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 80019e6:	f000 f81f 	bl	8001a28 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80019ea:	230f      	movs	r3, #15
 80019ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ee:	2302      	movs	r3, #2
 80019f0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a00:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a06:	2105      	movs	r1, #5
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fd61 	bl	80014d0 <HAL_RCC_ClockConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8001a14:	f000 f808 	bl	8001a28 <Error_Handler>
	}
}
 8001a18:	bf00      	nop
 8001a1a:	3750      	adds	r7, #80	; 0x50
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7fe fe5d 	bl	80006ec <BSP_LED_On>
	while (1)
 8001a32:	e7fe      	b.n	8001a32 <Error_Handler+0xa>

08001a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a6c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a3a:	e003      	b.n	8001a44 <LoopCopyDataInit>

08001a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a42:	3104      	adds	r1, #4

08001a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a4c:	d3f6      	bcc.n	8001a3c <CopyDataInit>
  ldr  r2, =_sbss
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a50:	e002      	b.n	8001a58 <LoopFillZerobss>

08001a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a54:	f842 3b04 	str.w	r3, [r2], #4

08001a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a5c:	d3f9      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a5e:	f7fe fe79 	bl	8000754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f000 f847 	bl	8001af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a66:	f7ff ff1f 	bl	80018a8 <main>
  bx  lr    
 8001a6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a6c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001a70:	08002c3c 	.word	0x08002c3c
  ldr  r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a78:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001a7c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001a80:	200000b4 	.word	0x200000b4

08001a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC_IRQHandler>
	...

08001a88 <__assert_func>:
 8001a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <__assert_func+0x2c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4605      	mov	r5, r0
 8001a94:	68d8      	ldr	r0, [r3, #12]
 8001a96:	b14c      	cbz	r4, 8001aac <__assert_func+0x24>
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <__assert_func+0x30>)
 8001a9a:	9100      	str	r1, [sp, #0]
 8001a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001aa0:	4906      	ldr	r1, [pc, #24]	; (8001abc <__assert_func+0x34>)
 8001aa2:	462b      	mov	r3, r5
 8001aa4:	f000 f814 	bl	8001ad0 <fiprintf>
 8001aa8:	f000 fbfe 	bl	80022a8 <abort>
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__assert_func+0x38>)
 8001aae:	461c      	mov	r4, r3
 8001ab0:	e7f3      	b.n	8001a9a <__assert_func+0x12>
 8001ab2:	bf00      	nop
 8001ab4:	20000018 	.word	0x20000018
 8001ab8:	08002b58 	.word	0x08002b58
 8001abc:	08002b65 	.word	0x08002b65
 8001ac0:	08002b93 	.word	0x08002b93

08001ac4 <__errno>:
 8001ac4:	4b01      	ldr	r3, [pc, #4]	; (8001acc <__errno+0x8>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000018 	.word	0x20000018

08001ad0 <fiprintf>:
 8001ad0:	b40e      	push	{r1, r2, r3}
 8001ad2:	b503      	push	{r0, r1, lr}
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	ab03      	add	r3, sp, #12
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <fiprintf+0x20>)
 8001ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ade:	6800      	ldr	r0, [r0, #0]
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	f000 f85d 	bl	8001ba0 <_vfiprintf_r>
 8001ae6:	b002      	add	sp, #8
 8001ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001aec:	b003      	add	sp, #12
 8001aee:	4770      	bx	lr
 8001af0:	20000018 	.word	0x20000018

08001af4 <__libc_init_array>:
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	4d0d      	ldr	r5, [pc, #52]	; (8001b2c <__libc_init_array+0x38>)
 8001af8:	4c0d      	ldr	r4, [pc, #52]	; (8001b30 <__libc_init_array+0x3c>)
 8001afa:	1b64      	subs	r4, r4, r5
 8001afc:	10a4      	asrs	r4, r4, #2
 8001afe:	2600      	movs	r6, #0
 8001b00:	42a6      	cmp	r6, r4
 8001b02:	d109      	bne.n	8001b18 <__libc_init_array+0x24>
 8001b04:	4d0b      	ldr	r5, [pc, #44]	; (8001b34 <__libc_init_array+0x40>)
 8001b06:	4c0c      	ldr	r4, [pc, #48]	; (8001b38 <__libc_init_array+0x44>)
 8001b08:	f000 ffe2 	bl	8002ad0 <_init>
 8001b0c:	1b64      	subs	r4, r4, r5
 8001b0e:	10a4      	asrs	r4, r4, #2
 8001b10:	2600      	movs	r6, #0
 8001b12:	42a6      	cmp	r6, r4
 8001b14:	d105      	bne.n	8001b22 <__libc_init_array+0x2e>
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
 8001b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b1c:	4798      	blx	r3
 8001b1e:	3601      	adds	r6, #1
 8001b20:	e7ee      	b.n	8001b00 <__libc_init_array+0xc>
 8001b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b26:	4798      	blx	r3
 8001b28:	3601      	adds	r6, #1
 8001b2a:	e7f2      	b.n	8001b12 <__libc_init_array+0x1e>
 8001b2c:	08002c34 	.word	0x08002c34
 8001b30:	08002c34 	.word	0x08002c34
 8001b34:	08002c34 	.word	0x08002c34
 8001b38:	08002c38 	.word	0x08002c38

08001b3c <memset>:
 8001b3c:	4402      	add	r2, r0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d100      	bne.n	8001b46 <memset+0xa>
 8001b44:	4770      	bx	lr
 8001b46:	f803 1b01 	strb.w	r1, [r3], #1
 8001b4a:	e7f9      	b.n	8001b40 <memset+0x4>

08001b4c <__sfputc_r>:
 8001b4c:	6893      	ldr	r3, [r2, #8]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	b410      	push	{r4}
 8001b54:	6093      	str	r3, [r2, #8]
 8001b56:	da08      	bge.n	8001b6a <__sfputc_r+0x1e>
 8001b58:	6994      	ldr	r4, [r2, #24]
 8001b5a:	42a3      	cmp	r3, r4
 8001b5c:	db01      	blt.n	8001b62 <__sfputc_r+0x16>
 8001b5e:	290a      	cmp	r1, #10
 8001b60:	d103      	bne.n	8001b6a <__sfputc_r+0x1e>
 8001b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b66:	f000 badf 	b.w	8002128 <__swbuf_r>
 8001b6a:	6813      	ldr	r3, [r2, #0]
 8001b6c:	1c58      	adds	r0, r3, #1
 8001b6e:	6010      	str	r0, [r2, #0]
 8001b70:	7019      	strb	r1, [r3, #0]
 8001b72:	4608      	mov	r0, r1
 8001b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <__sfputs_r>:
 8001b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7c:	4606      	mov	r6, r0
 8001b7e:	460f      	mov	r7, r1
 8001b80:	4614      	mov	r4, r2
 8001b82:	18d5      	adds	r5, r2, r3
 8001b84:	42ac      	cmp	r4, r5
 8001b86:	d101      	bne.n	8001b8c <__sfputs_r+0x12>
 8001b88:	2000      	movs	r0, #0
 8001b8a:	e007      	b.n	8001b9c <__sfputs_r+0x22>
 8001b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b90:	463a      	mov	r2, r7
 8001b92:	4630      	mov	r0, r6
 8001b94:	f7ff ffda 	bl	8001b4c <__sfputc_r>
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	d1f3      	bne.n	8001b84 <__sfputs_r+0xa>
 8001b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ba0 <_vfiprintf_r>:
 8001ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba4:	460d      	mov	r5, r1
 8001ba6:	b09d      	sub	sp, #116	; 0x74
 8001ba8:	4614      	mov	r4, r2
 8001baa:	4698      	mov	r8, r3
 8001bac:	4606      	mov	r6, r0
 8001bae:	b118      	cbz	r0, 8001bb8 <_vfiprintf_r+0x18>
 8001bb0:	6983      	ldr	r3, [r0, #24]
 8001bb2:	b90b      	cbnz	r3, 8001bb8 <_vfiprintf_r+0x18>
 8001bb4:	f000 fc9a 	bl	80024ec <__sinit>
 8001bb8:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <_vfiprintf_r+0x240>)
 8001bba:	429d      	cmp	r5, r3
 8001bbc:	d11b      	bne.n	8001bf6 <_vfiprintf_r+0x56>
 8001bbe:	6875      	ldr	r5, [r6, #4]
 8001bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bc2:	07d9      	lsls	r1, r3, #31
 8001bc4:	d405      	bmi.n	8001bd2 <_vfiprintf_r+0x32>
 8001bc6:	89ab      	ldrh	r3, [r5, #12]
 8001bc8:	059a      	lsls	r2, r3, #22
 8001bca:	d402      	bmi.n	8001bd2 <_vfiprintf_r+0x32>
 8001bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bce:	f000 fd2b 	bl	8002628 <__retarget_lock_acquire_recursive>
 8001bd2:	89ab      	ldrh	r3, [r5, #12]
 8001bd4:	071b      	lsls	r3, r3, #28
 8001bd6:	d501      	bpl.n	8001bdc <_vfiprintf_r+0x3c>
 8001bd8:	692b      	ldr	r3, [r5, #16]
 8001bda:	b9eb      	cbnz	r3, 8001c18 <_vfiprintf_r+0x78>
 8001bdc:	4629      	mov	r1, r5
 8001bde:	4630      	mov	r0, r6
 8001be0:	f000 faf4 	bl	80021cc <__swsetup_r>
 8001be4:	b1c0      	cbz	r0, 8001c18 <_vfiprintf_r+0x78>
 8001be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001be8:	07dc      	lsls	r4, r3, #31
 8001bea:	d50e      	bpl.n	8001c0a <_vfiprintf_r+0x6a>
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf0:	b01d      	add	sp, #116	; 0x74
 8001bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bf6:	4b7b      	ldr	r3, [pc, #492]	; (8001de4 <_vfiprintf_r+0x244>)
 8001bf8:	429d      	cmp	r5, r3
 8001bfa:	d101      	bne.n	8001c00 <_vfiprintf_r+0x60>
 8001bfc:	68b5      	ldr	r5, [r6, #8]
 8001bfe:	e7df      	b.n	8001bc0 <_vfiprintf_r+0x20>
 8001c00:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <_vfiprintf_r+0x248>)
 8001c02:	429d      	cmp	r5, r3
 8001c04:	bf08      	it	eq
 8001c06:	68f5      	ldreq	r5, [r6, #12]
 8001c08:	e7da      	b.n	8001bc0 <_vfiprintf_r+0x20>
 8001c0a:	89ab      	ldrh	r3, [r5, #12]
 8001c0c:	0598      	lsls	r0, r3, #22
 8001c0e:	d4ed      	bmi.n	8001bec <_vfiprintf_r+0x4c>
 8001c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c12:	f000 fd0a 	bl	800262a <__retarget_lock_release_recursive>
 8001c16:	e7e9      	b.n	8001bec <_vfiprintf_r+0x4c>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c26:	2330      	movs	r3, #48	; 0x30
 8001c28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001dec <_vfiprintf_r+0x24c>
 8001c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c30:	f04f 0901 	mov.w	r9, #1
 8001c34:	4623      	mov	r3, r4
 8001c36:	469a      	mov	sl, r3
 8001c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c3c:	b10a      	cbz	r2, 8001c42 <_vfiprintf_r+0xa2>
 8001c3e:	2a25      	cmp	r2, #37	; 0x25
 8001c40:	d1f9      	bne.n	8001c36 <_vfiprintf_r+0x96>
 8001c42:	ebba 0b04 	subs.w	fp, sl, r4
 8001c46:	d00b      	beq.n	8001c60 <_vfiprintf_r+0xc0>
 8001c48:	465b      	mov	r3, fp
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff ff93 	bl	8001b7a <__sfputs_r>
 8001c54:	3001      	adds	r0, #1
 8001c56:	f000 80aa 	beq.w	8001dae <_vfiprintf_r+0x20e>
 8001c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c5c:	445a      	add	r2, fp
 8001c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8001c60:	f89a 3000 	ldrb.w	r3, [sl]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a2 	beq.w	8001dae <_vfiprintf_r+0x20e>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c74:	f10a 0a01 	add.w	sl, sl, #1
 8001c78:	9304      	str	r3, [sp, #16]
 8001c7a:	9307      	str	r3, [sp, #28]
 8001c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c80:	931a      	str	r3, [sp, #104]	; 0x68
 8001c82:	4654      	mov	r4, sl
 8001c84:	2205      	movs	r2, #5
 8001c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c8a:	4858      	ldr	r0, [pc, #352]	; (8001dec <_vfiprintf_r+0x24c>)
 8001c8c:	f7fe fab0 	bl	80001f0 <memchr>
 8001c90:	9a04      	ldr	r2, [sp, #16]
 8001c92:	b9d8      	cbnz	r0, 8001ccc <_vfiprintf_r+0x12c>
 8001c94:	06d1      	lsls	r1, r2, #27
 8001c96:	bf44      	itt	mi
 8001c98:	2320      	movmi	r3, #32
 8001c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c9e:	0713      	lsls	r3, r2, #28
 8001ca0:	bf44      	itt	mi
 8001ca2:	232b      	movmi	r3, #43	; 0x2b
 8001ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8001cac:	2b2a      	cmp	r3, #42	; 0x2a
 8001cae:	d015      	beq.n	8001cdc <_vfiprintf_r+0x13c>
 8001cb0:	9a07      	ldr	r2, [sp, #28]
 8001cb2:	4654      	mov	r4, sl
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f04f 0c0a 	mov.w	ip, #10
 8001cba:	4621      	mov	r1, r4
 8001cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cc0:	3b30      	subs	r3, #48	; 0x30
 8001cc2:	2b09      	cmp	r3, #9
 8001cc4:	d94e      	bls.n	8001d64 <_vfiprintf_r+0x1c4>
 8001cc6:	b1b0      	cbz	r0, 8001cf6 <_vfiprintf_r+0x156>
 8001cc8:	9207      	str	r2, [sp, #28]
 8001cca:	e014      	b.n	8001cf6 <_vfiprintf_r+0x156>
 8001ccc:	eba0 0308 	sub.w	r3, r0, r8
 8001cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	9304      	str	r3, [sp, #16]
 8001cd8:	46a2      	mov	sl, r4
 8001cda:	e7d2      	b.n	8001c82 <_vfiprintf_r+0xe2>
 8001cdc:	9b03      	ldr	r3, [sp, #12]
 8001cde:	1d19      	adds	r1, r3, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	9103      	str	r1, [sp, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bfbb      	ittet	lt
 8001ce8:	425b      	neglt	r3, r3
 8001cea:	f042 0202 	orrlt.w	r2, r2, #2
 8001cee:	9307      	strge	r3, [sp, #28]
 8001cf0:	9307      	strlt	r3, [sp, #28]
 8001cf2:	bfb8      	it	lt
 8001cf4:	9204      	strlt	r2, [sp, #16]
 8001cf6:	7823      	ldrb	r3, [r4, #0]
 8001cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8001cfa:	d10c      	bne.n	8001d16 <_vfiprintf_r+0x176>
 8001cfc:	7863      	ldrb	r3, [r4, #1]
 8001cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8001d00:	d135      	bne.n	8001d6e <_vfiprintf_r+0x1ce>
 8001d02:	9b03      	ldr	r3, [sp, #12]
 8001d04:	1d1a      	adds	r2, r3, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	9203      	str	r2, [sp, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	bfb8      	it	lt
 8001d0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001d12:	3402      	adds	r4, #2
 8001d14:	9305      	str	r3, [sp, #20]
 8001d16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001dfc <_vfiprintf_r+0x25c>
 8001d1a:	7821      	ldrb	r1, [r4, #0]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	4650      	mov	r0, sl
 8001d20:	f7fe fa66 	bl	80001f0 <memchr>
 8001d24:	b140      	cbz	r0, 8001d38 <_vfiprintf_r+0x198>
 8001d26:	2340      	movs	r3, #64	; 0x40
 8001d28:	eba0 000a 	sub.w	r0, r0, sl
 8001d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8001d30:	9b04      	ldr	r3, [sp, #16]
 8001d32:	4303      	orrs	r3, r0
 8001d34:	3401      	adds	r4, #1
 8001d36:	9304      	str	r3, [sp, #16]
 8001d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d3c:	482c      	ldr	r0, [pc, #176]	; (8001df0 <_vfiprintf_r+0x250>)
 8001d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d42:	2206      	movs	r2, #6
 8001d44:	f7fe fa54 	bl	80001f0 <memchr>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d03f      	beq.n	8001dcc <_vfiprintf_r+0x22c>
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <_vfiprintf_r+0x254>)
 8001d4e:	bb1b      	cbnz	r3, 8001d98 <_vfiprintf_r+0x1f8>
 8001d50:	9b03      	ldr	r3, [sp, #12]
 8001d52:	3307      	adds	r3, #7
 8001d54:	f023 0307 	bic.w	r3, r3, #7
 8001d58:	3308      	adds	r3, #8
 8001d5a:	9303      	str	r3, [sp, #12]
 8001d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d5e:	443b      	add	r3, r7
 8001d60:	9309      	str	r3, [sp, #36]	; 0x24
 8001d62:	e767      	b.n	8001c34 <_vfiprintf_r+0x94>
 8001d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d68:	460c      	mov	r4, r1
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	e7a5      	b.n	8001cba <_vfiprintf_r+0x11a>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	3401      	adds	r4, #1
 8001d72:	9305      	str	r3, [sp, #20]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 0c0a 	mov.w	ip, #10
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d80:	3a30      	subs	r2, #48	; 0x30
 8001d82:	2a09      	cmp	r2, #9
 8001d84:	d903      	bls.n	8001d8e <_vfiprintf_r+0x1ee>
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0c5      	beq.n	8001d16 <_vfiprintf_r+0x176>
 8001d8a:	9105      	str	r1, [sp, #20]
 8001d8c:	e7c3      	b.n	8001d16 <_vfiprintf_r+0x176>
 8001d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d92:	4604      	mov	r4, r0
 8001d94:	2301      	movs	r3, #1
 8001d96:	e7f0      	b.n	8001d7a <_vfiprintf_r+0x1da>
 8001d98:	ab03      	add	r3, sp, #12
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	462a      	mov	r2, r5
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <_vfiprintf_r+0x258>)
 8001da0:	a904      	add	r1, sp, #16
 8001da2:	4630      	mov	r0, r6
 8001da4:	f3af 8000 	nop.w
 8001da8:	4607      	mov	r7, r0
 8001daa:	1c78      	adds	r0, r7, #1
 8001dac:	d1d6      	bne.n	8001d5c <_vfiprintf_r+0x1bc>
 8001dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001db0:	07d9      	lsls	r1, r3, #31
 8001db2:	d405      	bmi.n	8001dc0 <_vfiprintf_r+0x220>
 8001db4:	89ab      	ldrh	r3, [r5, #12]
 8001db6:	059a      	lsls	r2, r3, #22
 8001db8:	d402      	bmi.n	8001dc0 <_vfiprintf_r+0x220>
 8001dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001dbc:	f000 fc35 	bl	800262a <__retarget_lock_release_recursive>
 8001dc0:	89ab      	ldrh	r3, [r5, #12]
 8001dc2:	065b      	lsls	r3, r3, #25
 8001dc4:	f53f af12 	bmi.w	8001bec <_vfiprintf_r+0x4c>
 8001dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dca:	e711      	b.n	8001bf0 <_vfiprintf_r+0x50>
 8001dcc:	ab03      	add	r3, sp, #12
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	462a      	mov	r2, r5
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <_vfiprintf_r+0x258>)
 8001dd4:	a904      	add	r1, sp, #16
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f000 f880 	bl	8001edc <_printf_i>
 8001ddc:	e7e4      	b.n	8001da8 <_vfiprintf_r+0x208>
 8001dde:	bf00      	nop
 8001de0:	08002bec 	.word	0x08002bec
 8001de4:	08002c0c 	.word	0x08002c0c
 8001de8:	08002bcc 	.word	0x08002bcc
 8001dec:	08002b98 	.word	0x08002b98
 8001df0:	08002ba2 	.word	0x08002ba2
 8001df4:	00000000 	.word	0x00000000
 8001df8:	08001b7b 	.word	0x08001b7b
 8001dfc:	08002b9e 	.word	0x08002b9e

08001e00 <_printf_common>:
 8001e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e04:	4616      	mov	r6, r2
 8001e06:	4699      	mov	r9, r3
 8001e08:	688a      	ldr	r2, [r1, #8]
 8001e0a:	690b      	ldr	r3, [r1, #16]
 8001e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e10:	4293      	cmp	r3, r2
 8001e12:	bfb8      	it	lt
 8001e14:	4613      	movlt	r3, r2
 8001e16:	6033      	str	r3, [r6, #0]
 8001e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e1c:	4607      	mov	r7, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	b10a      	cbz	r2, 8001e26 <_printf_common+0x26>
 8001e22:	3301      	adds	r3, #1
 8001e24:	6033      	str	r3, [r6, #0]
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	0699      	lsls	r1, r3, #26
 8001e2a:	bf42      	ittt	mi
 8001e2c:	6833      	ldrmi	r3, [r6, #0]
 8001e2e:	3302      	addmi	r3, #2
 8001e30:	6033      	strmi	r3, [r6, #0]
 8001e32:	6825      	ldr	r5, [r4, #0]
 8001e34:	f015 0506 	ands.w	r5, r5, #6
 8001e38:	d106      	bne.n	8001e48 <_printf_common+0x48>
 8001e3a:	f104 0a19 	add.w	sl, r4, #25
 8001e3e:	68e3      	ldr	r3, [r4, #12]
 8001e40:	6832      	ldr	r2, [r6, #0]
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	42ab      	cmp	r3, r5
 8001e46:	dc26      	bgt.n	8001e96 <_printf_common+0x96>
 8001e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e4c:	1e13      	subs	r3, r2, #0
 8001e4e:	6822      	ldr	r2, [r4, #0]
 8001e50:	bf18      	it	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	0692      	lsls	r2, r2, #26
 8001e56:	d42b      	bmi.n	8001eb0 <_printf_common+0xb0>
 8001e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	4638      	mov	r0, r7
 8001e60:	47c0      	blx	r8
 8001e62:	3001      	adds	r0, #1
 8001e64:	d01e      	beq.n	8001ea4 <_printf_common+0xa4>
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	68e5      	ldr	r5, [r4, #12]
 8001e6a:	6832      	ldr	r2, [r6, #0]
 8001e6c:	f003 0306 	and.w	r3, r3, #6
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	bf08      	it	eq
 8001e74:	1aad      	subeq	r5, r5, r2
 8001e76:	68a3      	ldr	r3, [r4, #8]
 8001e78:	6922      	ldr	r2, [r4, #16]
 8001e7a:	bf0c      	ite	eq
 8001e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e80:	2500      	movne	r5, #0
 8001e82:	4293      	cmp	r3, r2
 8001e84:	bfc4      	itt	gt
 8001e86:	1a9b      	subgt	r3, r3, r2
 8001e88:	18ed      	addgt	r5, r5, r3
 8001e8a:	2600      	movs	r6, #0
 8001e8c:	341a      	adds	r4, #26
 8001e8e:	42b5      	cmp	r5, r6
 8001e90:	d11a      	bne.n	8001ec8 <_printf_common+0xc8>
 8001e92:	2000      	movs	r0, #0
 8001e94:	e008      	b.n	8001ea8 <_printf_common+0xa8>
 8001e96:	2301      	movs	r3, #1
 8001e98:	4652      	mov	r2, sl
 8001e9a:	4649      	mov	r1, r9
 8001e9c:	4638      	mov	r0, r7
 8001e9e:	47c0      	blx	r8
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	d103      	bne.n	8001eac <_printf_common+0xac>
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eac:	3501      	adds	r5, #1
 8001eae:	e7c6      	b.n	8001e3e <_printf_common+0x3e>
 8001eb0:	18e1      	adds	r1, r4, r3
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	2030      	movs	r0, #48	; 0x30
 8001eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001eba:	4422      	add	r2, r4
 8001ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	e7c7      	b.n	8001e58 <_printf_common+0x58>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	4622      	mov	r2, r4
 8001ecc:	4649      	mov	r1, r9
 8001ece:	4638      	mov	r0, r7
 8001ed0:	47c0      	blx	r8
 8001ed2:	3001      	adds	r0, #1
 8001ed4:	d0e6      	beq.n	8001ea4 <_printf_common+0xa4>
 8001ed6:	3601      	adds	r6, #1
 8001ed8:	e7d9      	b.n	8001e8e <_printf_common+0x8e>
	...

08001edc <_printf_i>:
 8001edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ee0:	7e0f      	ldrb	r7, [r1, #24]
 8001ee2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ee4:	2f78      	cmp	r7, #120	; 0x78
 8001ee6:	4691      	mov	r9, r2
 8001ee8:	4680      	mov	r8, r0
 8001eea:	460c      	mov	r4, r1
 8001eec:	469a      	mov	sl, r3
 8001eee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ef2:	d807      	bhi.n	8001f04 <_printf_i+0x28>
 8001ef4:	2f62      	cmp	r7, #98	; 0x62
 8001ef6:	d80a      	bhi.n	8001f0e <_printf_i+0x32>
 8001ef8:	2f00      	cmp	r7, #0
 8001efa:	f000 80d8 	beq.w	80020ae <_printf_i+0x1d2>
 8001efe:	2f58      	cmp	r7, #88	; 0x58
 8001f00:	f000 80a3 	beq.w	800204a <_printf_i+0x16e>
 8001f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f0c:	e03a      	b.n	8001f84 <_printf_i+0xa8>
 8001f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f12:	2b15      	cmp	r3, #21
 8001f14:	d8f6      	bhi.n	8001f04 <_printf_i+0x28>
 8001f16:	a101      	add	r1, pc, #4	; (adr r1, 8001f1c <_printf_i+0x40>)
 8001f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f1c:	08001f75 	.word	0x08001f75
 8001f20:	08001f89 	.word	0x08001f89
 8001f24:	08001f05 	.word	0x08001f05
 8001f28:	08001f05 	.word	0x08001f05
 8001f2c:	08001f05 	.word	0x08001f05
 8001f30:	08001f05 	.word	0x08001f05
 8001f34:	08001f89 	.word	0x08001f89
 8001f38:	08001f05 	.word	0x08001f05
 8001f3c:	08001f05 	.word	0x08001f05
 8001f40:	08001f05 	.word	0x08001f05
 8001f44:	08001f05 	.word	0x08001f05
 8001f48:	08002095 	.word	0x08002095
 8001f4c:	08001fb9 	.word	0x08001fb9
 8001f50:	08002077 	.word	0x08002077
 8001f54:	08001f05 	.word	0x08001f05
 8001f58:	08001f05 	.word	0x08001f05
 8001f5c:	080020b7 	.word	0x080020b7
 8001f60:	08001f05 	.word	0x08001f05
 8001f64:	08001fb9 	.word	0x08001fb9
 8001f68:	08001f05 	.word	0x08001f05
 8001f6c:	08001f05 	.word	0x08001f05
 8001f70:	0800207f 	.word	0x0800207f
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	1d1a      	adds	r2, r3, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	602a      	str	r2, [r5, #0]
 8001f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0a3      	b.n	80020d0 <_printf_i+0x1f4>
 8001f88:	6820      	ldr	r0, [r4, #0]
 8001f8a:	6829      	ldr	r1, [r5, #0]
 8001f8c:	0606      	lsls	r6, r0, #24
 8001f8e:	f101 0304 	add.w	r3, r1, #4
 8001f92:	d50a      	bpl.n	8001faa <_printf_i+0xce>
 8001f94:	680e      	ldr	r6, [r1, #0]
 8001f96:	602b      	str	r3, [r5, #0]
 8001f98:	2e00      	cmp	r6, #0
 8001f9a:	da03      	bge.n	8001fa4 <_printf_i+0xc8>
 8001f9c:	232d      	movs	r3, #45	; 0x2d
 8001f9e:	4276      	negs	r6, r6
 8001fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fa4:	485e      	ldr	r0, [pc, #376]	; (8002120 <_printf_i+0x244>)
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	e019      	b.n	8001fde <_printf_i+0x102>
 8001faa:	680e      	ldr	r6, [r1, #0]
 8001fac:	602b      	str	r3, [r5, #0]
 8001fae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fb2:	bf18      	it	ne
 8001fb4:	b236      	sxthne	r6, r6
 8001fb6:	e7ef      	b.n	8001f98 <_printf_i+0xbc>
 8001fb8:	682b      	ldr	r3, [r5, #0]
 8001fba:	6820      	ldr	r0, [r4, #0]
 8001fbc:	1d19      	adds	r1, r3, #4
 8001fbe:	6029      	str	r1, [r5, #0]
 8001fc0:	0601      	lsls	r1, r0, #24
 8001fc2:	d501      	bpl.n	8001fc8 <_printf_i+0xec>
 8001fc4:	681e      	ldr	r6, [r3, #0]
 8001fc6:	e002      	b.n	8001fce <_printf_i+0xf2>
 8001fc8:	0646      	lsls	r6, r0, #25
 8001fca:	d5fb      	bpl.n	8001fc4 <_printf_i+0xe8>
 8001fcc:	881e      	ldrh	r6, [r3, #0]
 8001fce:	4854      	ldr	r0, [pc, #336]	; (8002120 <_printf_i+0x244>)
 8001fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2308      	moveq	r3, #8
 8001fd6:	230a      	movne	r3, #10
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fde:	6865      	ldr	r5, [r4, #4]
 8001fe0:	60a5      	str	r5, [r4, #8]
 8001fe2:	2d00      	cmp	r5, #0
 8001fe4:	bfa2      	ittt	ge
 8001fe6:	6821      	ldrge	r1, [r4, #0]
 8001fe8:	f021 0104 	bicge.w	r1, r1, #4
 8001fec:	6021      	strge	r1, [r4, #0]
 8001fee:	b90e      	cbnz	r6, 8001ff4 <_printf_i+0x118>
 8001ff0:	2d00      	cmp	r5, #0
 8001ff2:	d04d      	beq.n	8002090 <_printf_i+0x1b4>
 8001ff4:	4615      	mov	r5, r2
 8001ff6:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ffa:	fb03 6711 	mls	r7, r3, r1, r6
 8001ffe:	5dc7      	ldrb	r7, [r0, r7]
 8002000:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002004:	4637      	mov	r7, r6
 8002006:	42bb      	cmp	r3, r7
 8002008:	460e      	mov	r6, r1
 800200a:	d9f4      	bls.n	8001ff6 <_printf_i+0x11a>
 800200c:	2b08      	cmp	r3, #8
 800200e:	d10b      	bne.n	8002028 <_printf_i+0x14c>
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	07de      	lsls	r6, r3, #31
 8002014:	d508      	bpl.n	8002028 <_printf_i+0x14c>
 8002016:	6923      	ldr	r3, [r4, #16]
 8002018:	6861      	ldr	r1, [r4, #4]
 800201a:	4299      	cmp	r1, r3
 800201c:	bfde      	ittt	le
 800201e:	2330      	movle	r3, #48	; 0x30
 8002020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002024:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002028:	1b52      	subs	r2, r2, r5
 800202a:	6122      	str	r2, [r4, #16]
 800202c:	f8cd a000 	str.w	sl, [sp]
 8002030:	464b      	mov	r3, r9
 8002032:	aa03      	add	r2, sp, #12
 8002034:	4621      	mov	r1, r4
 8002036:	4640      	mov	r0, r8
 8002038:	f7ff fee2 	bl	8001e00 <_printf_common>
 800203c:	3001      	adds	r0, #1
 800203e:	d14c      	bne.n	80020da <_printf_i+0x1fe>
 8002040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002044:	b004      	add	sp, #16
 8002046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800204a:	4835      	ldr	r0, [pc, #212]	; (8002120 <_printf_i+0x244>)
 800204c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002050:	6829      	ldr	r1, [r5, #0]
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	f851 6b04 	ldr.w	r6, [r1], #4
 8002058:	6029      	str	r1, [r5, #0]
 800205a:	061d      	lsls	r5, r3, #24
 800205c:	d514      	bpl.n	8002088 <_printf_i+0x1ac>
 800205e:	07df      	lsls	r7, r3, #31
 8002060:	bf44      	itt	mi
 8002062:	f043 0320 	orrmi.w	r3, r3, #32
 8002066:	6023      	strmi	r3, [r4, #0]
 8002068:	b91e      	cbnz	r6, 8002072 <_printf_i+0x196>
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	f023 0320 	bic.w	r3, r3, #32
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	2310      	movs	r3, #16
 8002074:	e7b0      	b.n	8001fd8 <_printf_i+0xfc>
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	2378      	movs	r3, #120	; 0x78
 8002080:	4828      	ldr	r0, [pc, #160]	; (8002124 <_printf_i+0x248>)
 8002082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002086:	e7e3      	b.n	8002050 <_printf_i+0x174>
 8002088:	0659      	lsls	r1, r3, #25
 800208a:	bf48      	it	mi
 800208c:	b2b6      	uxthmi	r6, r6
 800208e:	e7e6      	b.n	800205e <_printf_i+0x182>
 8002090:	4615      	mov	r5, r2
 8002092:	e7bb      	b.n	800200c <_printf_i+0x130>
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	6826      	ldr	r6, [r4, #0]
 8002098:	6961      	ldr	r1, [r4, #20]
 800209a:	1d18      	adds	r0, r3, #4
 800209c:	6028      	str	r0, [r5, #0]
 800209e:	0635      	lsls	r5, r6, #24
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	d501      	bpl.n	80020a8 <_printf_i+0x1cc>
 80020a4:	6019      	str	r1, [r3, #0]
 80020a6:	e002      	b.n	80020ae <_printf_i+0x1d2>
 80020a8:	0670      	lsls	r0, r6, #25
 80020aa:	d5fb      	bpl.n	80020a4 <_printf_i+0x1c8>
 80020ac:	8019      	strh	r1, [r3, #0]
 80020ae:	2300      	movs	r3, #0
 80020b0:	6123      	str	r3, [r4, #16]
 80020b2:	4615      	mov	r5, r2
 80020b4:	e7ba      	b.n	800202c <_printf_i+0x150>
 80020b6:	682b      	ldr	r3, [r5, #0]
 80020b8:	1d1a      	adds	r2, r3, #4
 80020ba:	602a      	str	r2, [r5, #0]
 80020bc:	681d      	ldr	r5, [r3, #0]
 80020be:	6862      	ldr	r2, [r4, #4]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4628      	mov	r0, r5
 80020c4:	f7fe f894 	bl	80001f0 <memchr>
 80020c8:	b108      	cbz	r0, 80020ce <_printf_i+0x1f2>
 80020ca:	1b40      	subs	r0, r0, r5
 80020cc:	6060      	str	r0, [r4, #4]
 80020ce:	6863      	ldr	r3, [r4, #4]
 80020d0:	6123      	str	r3, [r4, #16]
 80020d2:	2300      	movs	r3, #0
 80020d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020d8:	e7a8      	b.n	800202c <_printf_i+0x150>
 80020da:	6923      	ldr	r3, [r4, #16]
 80020dc:	462a      	mov	r2, r5
 80020de:	4649      	mov	r1, r9
 80020e0:	4640      	mov	r0, r8
 80020e2:	47d0      	blx	sl
 80020e4:	3001      	adds	r0, #1
 80020e6:	d0ab      	beq.n	8002040 <_printf_i+0x164>
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	079b      	lsls	r3, r3, #30
 80020ec:	d413      	bmi.n	8002116 <_printf_i+0x23a>
 80020ee:	68e0      	ldr	r0, [r4, #12]
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	4298      	cmp	r0, r3
 80020f4:	bfb8      	it	lt
 80020f6:	4618      	movlt	r0, r3
 80020f8:	e7a4      	b.n	8002044 <_printf_i+0x168>
 80020fa:	2301      	movs	r3, #1
 80020fc:	4632      	mov	r2, r6
 80020fe:	4649      	mov	r1, r9
 8002100:	4640      	mov	r0, r8
 8002102:	47d0      	blx	sl
 8002104:	3001      	adds	r0, #1
 8002106:	d09b      	beq.n	8002040 <_printf_i+0x164>
 8002108:	3501      	adds	r5, #1
 800210a:	68e3      	ldr	r3, [r4, #12]
 800210c:	9903      	ldr	r1, [sp, #12]
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	42ab      	cmp	r3, r5
 8002112:	dcf2      	bgt.n	80020fa <_printf_i+0x21e>
 8002114:	e7eb      	b.n	80020ee <_printf_i+0x212>
 8002116:	2500      	movs	r5, #0
 8002118:	f104 0619 	add.w	r6, r4, #25
 800211c:	e7f5      	b.n	800210a <_printf_i+0x22e>
 800211e:	bf00      	nop
 8002120:	08002ba9 	.word	0x08002ba9
 8002124:	08002bba 	.word	0x08002bba

08002128 <__swbuf_r>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	460e      	mov	r6, r1
 800212c:	4614      	mov	r4, r2
 800212e:	4605      	mov	r5, r0
 8002130:	b118      	cbz	r0, 800213a <__swbuf_r+0x12>
 8002132:	6983      	ldr	r3, [r0, #24]
 8002134:	b90b      	cbnz	r3, 800213a <__swbuf_r+0x12>
 8002136:	f000 f9d9 	bl	80024ec <__sinit>
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <__swbuf_r+0x98>)
 800213c:	429c      	cmp	r4, r3
 800213e:	d12b      	bne.n	8002198 <__swbuf_r+0x70>
 8002140:	686c      	ldr	r4, [r5, #4]
 8002142:	69a3      	ldr	r3, [r4, #24]
 8002144:	60a3      	str	r3, [r4, #8]
 8002146:	89a3      	ldrh	r3, [r4, #12]
 8002148:	071a      	lsls	r2, r3, #28
 800214a:	d52f      	bpl.n	80021ac <__swbuf_r+0x84>
 800214c:	6923      	ldr	r3, [r4, #16]
 800214e:	b36b      	cbz	r3, 80021ac <__swbuf_r+0x84>
 8002150:	6923      	ldr	r3, [r4, #16]
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	1ac0      	subs	r0, r0, r3
 8002156:	6963      	ldr	r3, [r4, #20]
 8002158:	b2f6      	uxtb	r6, r6
 800215a:	4283      	cmp	r3, r0
 800215c:	4637      	mov	r7, r6
 800215e:	dc04      	bgt.n	800216a <__swbuf_r+0x42>
 8002160:	4621      	mov	r1, r4
 8002162:	4628      	mov	r0, r5
 8002164:	f000 f92e 	bl	80023c4 <_fflush_r>
 8002168:	bb30      	cbnz	r0, 80021b8 <__swbuf_r+0x90>
 800216a:	68a3      	ldr	r3, [r4, #8]
 800216c:	3b01      	subs	r3, #1
 800216e:	60a3      	str	r3, [r4, #8]
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	6022      	str	r2, [r4, #0]
 8002176:	701e      	strb	r6, [r3, #0]
 8002178:	6963      	ldr	r3, [r4, #20]
 800217a:	3001      	adds	r0, #1
 800217c:	4283      	cmp	r3, r0
 800217e:	d004      	beq.n	800218a <__swbuf_r+0x62>
 8002180:	89a3      	ldrh	r3, [r4, #12]
 8002182:	07db      	lsls	r3, r3, #31
 8002184:	d506      	bpl.n	8002194 <__swbuf_r+0x6c>
 8002186:	2e0a      	cmp	r6, #10
 8002188:	d104      	bne.n	8002194 <__swbuf_r+0x6c>
 800218a:	4621      	mov	r1, r4
 800218c:	4628      	mov	r0, r5
 800218e:	f000 f919 	bl	80023c4 <_fflush_r>
 8002192:	b988      	cbnz	r0, 80021b8 <__swbuf_r+0x90>
 8002194:	4638      	mov	r0, r7
 8002196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <__swbuf_r+0x9c>)
 800219a:	429c      	cmp	r4, r3
 800219c:	d101      	bne.n	80021a2 <__swbuf_r+0x7a>
 800219e:	68ac      	ldr	r4, [r5, #8]
 80021a0:	e7cf      	b.n	8002142 <__swbuf_r+0x1a>
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <__swbuf_r+0xa0>)
 80021a4:	429c      	cmp	r4, r3
 80021a6:	bf08      	it	eq
 80021a8:	68ec      	ldreq	r4, [r5, #12]
 80021aa:	e7ca      	b.n	8002142 <__swbuf_r+0x1a>
 80021ac:	4621      	mov	r1, r4
 80021ae:	4628      	mov	r0, r5
 80021b0:	f000 f80c 	bl	80021cc <__swsetup_r>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d0cb      	beq.n	8002150 <__swbuf_r+0x28>
 80021b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80021bc:	e7ea      	b.n	8002194 <__swbuf_r+0x6c>
 80021be:	bf00      	nop
 80021c0:	08002bec 	.word	0x08002bec
 80021c4:	08002c0c 	.word	0x08002c0c
 80021c8:	08002bcc 	.word	0x08002bcc

080021cc <__swsetup_r>:
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <__swsetup_r+0xcc>)
 80021ce:	b570      	push	{r4, r5, r6, lr}
 80021d0:	681d      	ldr	r5, [r3, #0]
 80021d2:	4606      	mov	r6, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	b125      	cbz	r5, 80021e2 <__swsetup_r+0x16>
 80021d8:	69ab      	ldr	r3, [r5, #24]
 80021da:	b913      	cbnz	r3, 80021e2 <__swsetup_r+0x16>
 80021dc:	4628      	mov	r0, r5
 80021de:	f000 f985 	bl	80024ec <__sinit>
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <__swsetup_r+0xd0>)
 80021e4:	429c      	cmp	r4, r3
 80021e6:	d10f      	bne.n	8002208 <__swsetup_r+0x3c>
 80021e8:	686c      	ldr	r4, [r5, #4]
 80021ea:	89a3      	ldrh	r3, [r4, #12]
 80021ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021f0:	0719      	lsls	r1, r3, #28
 80021f2:	d42c      	bmi.n	800224e <__swsetup_r+0x82>
 80021f4:	06dd      	lsls	r5, r3, #27
 80021f6:	d411      	bmi.n	800221c <__swsetup_r+0x50>
 80021f8:	2309      	movs	r3, #9
 80021fa:	6033      	str	r3, [r6, #0]
 80021fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002200:	81a3      	strh	r3, [r4, #12]
 8002202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002206:	e03e      	b.n	8002286 <__swsetup_r+0xba>
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <__swsetup_r+0xd4>)
 800220a:	429c      	cmp	r4, r3
 800220c:	d101      	bne.n	8002212 <__swsetup_r+0x46>
 800220e:	68ac      	ldr	r4, [r5, #8]
 8002210:	e7eb      	b.n	80021ea <__swsetup_r+0x1e>
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <__swsetup_r+0xd8>)
 8002214:	429c      	cmp	r4, r3
 8002216:	bf08      	it	eq
 8002218:	68ec      	ldreq	r4, [r5, #12]
 800221a:	e7e6      	b.n	80021ea <__swsetup_r+0x1e>
 800221c:	0758      	lsls	r0, r3, #29
 800221e:	d512      	bpl.n	8002246 <__swsetup_r+0x7a>
 8002220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002222:	b141      	cbz	r1, 8002236 <__swsetup_r+0x6a>
 8002224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002228:	4299      	cmp	r1, r3
 800222a:	d002      	beq.n	8002232 <__swsetup_r+0x66>
 800222c:	4630      	mov	r0, r6
 800222e:	f000 fa63 	bl	80026f8 <_free_r>
 8002232:	2300      	movs	r3, #0
 8002234:	6363      	str	r3, [r4, #52]	; 0x34
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800223c:	81a3      	strh	r3, [r4, #12]
 800223e:	2300      	movs	r3, #0
 8002240:	6063      	str	r3, [r4, #4]
 8002242:	6923      	ldr	r3, [r4, #16]
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	89a3      	ldrh	r3, [r4, #12]
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	81a3      	strh	r3, [r4, #12]
 800224e:	6923      	ldr	r3, [r4, #16]
 8002250:	b94b      	cbnz	r3, 8002266 <__swsetup_r+0x9a>
 8002252:	89a3      	ldrh	r3, [r4, #12]
 8002254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800225c:	d003      	beq.n	8002266 <__swsetup_r+0x9a>
 800225e:	4621      	mov	r1, r4
 8002260:	4630      	mov	r0, r6
 8002262:	f000 fa09 	bl	8002678 <__smakebuf_r>
 8002266:	89a0      	ldrh	r0, [r4, #12]
 8002268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800226c:	f010 0301 	ands.w	r3, r0, #1
 8002270:	d00a      	beq.n	8002288 <__swsetup_r+0xbc>
 8002272:	2300      	movs	r3, #0
 8002274:	60a3      	str	r3, [r4, #8]
 8002276:	6963      	ldr	r3, [r4, #20]
 8002278:	425b      	negs	r3, r3
 800227a:	61a3      	str	r3, [r4, #24]
 800227c:	6923      	ldr	r3, [r4, #16]
 800227e:	b943      	cbnz	r3, 8002292 <__swsetup_r+0xc6>
 8002280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002284:	d1ba      	bne.n	80021fc <__swsetup_r+0x30>
 8002286:	bd70      	pop	{r4, r5, r6, pc}
 8002288:	0781      	lsls	r1, r0, #30
 800228a:	bf58      	it	pl
 800228c:	6963      	ldrpl	r3, [r4, #20]
 800228e:	60a3      	str	r3, [r4, #8]
 8002290:	e7f4      	b.n	800227c <__swsetup_r+0xb0>
 8002292:	2000      	movs	r0, #0
 8002294:	e7f7      	b.n	8002286 <__swsetup_r+0xba>
 8002296:	bf00      	nop
 8002298:	20000018 	.word	0x20000018
 800229c:	08002bec 	.word	0x08002bec
 80022a0:	08002c0c 	.word	0x08002c0c
 80022a4:	08002bcc 	.word	0x08002bcc

080022a8 <abort>:
 80022a8:	b508      	push	{r3, lr}
 80022aa:	2006      	movs	r0, #6
 80022ac:	f000 fb3c 	bl	8002928 <raise>
 80022b0:	2001      	movs	r0, #1
 80022b2:	f7fe facb 	bl	800084c <_exit>
	...

080022b8 <__sflush_r>:
 80022b8:	898a      	ldrh	r2, [r1, #12]
 80022ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022be:	4605      	mov	r5, r0
 80022c0:	0710      	lsls	r0, r2, #28
 80022c2:	460c      	mov	r4, r1
 80022c4:	d458      	bmi.n	8002378 <__sflush_r+0xc0>
 80022c6:	684b      	ldr	r3, [r1, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	dc05      	bgt.n	80022d8 <__sflush_r+0x20>
 80022cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	dc02      	bgt.n	80022d8 <__sflush_r+0x20>
 80022d2:	2000      	movs	r0, #0
 80022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022da:	2e00      	cmp	r6, #0
 80022dc:	d0f9      	beq.n	80022d2 <__sflush_r+0x1a>
 80022de:	2300      	movs	r3, #0
 80022e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022e4:	682f      	ldr	r7, [r5, #0]
 80022e6:	602b      	str	r3, [r5, #0]
 80022e8:	d032      	beq.n	8002350 <__sflush_r+0x98>
 80022ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	075a      	lsls	r2, r3, #29
 80022f0:	d505      	bpl.n	80022fe <__sflush_r+0x46>
 80022f2:	6863      	ldr	r3, [r4, #4]
 80022f4:	1ac0      	subs	r0, r0, r3
 80022f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022f8:	b10b      	cbz	r3, 80022fe <__sflush_r+0x46>
 80022fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022fc:	1ac0      	subs	r0, r0, r3
 80022fe:	2300      	movs	r3, #0
 8002300:	4602      	mov	r2, r0
 8002302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002304:	6a21      	ldr	r1, [r4, #32]
 8002306:	4628      	mov	r0, r5
 8002308:	47b0      	blx	r6
 800230a:	1c43      	adds	r3, r0, #1
 800230c:	89a3      	ldrh	r3, [r4, #12]
 800230e:	d106      	bne.n	800231e <__sflush_r+0x66>
 8002310:	6829      	ldr	r1, [r5, #0]
 8002312:	291d      	cmp	r1, #29
 8002314:	d82c      	bhi.n	8002370 <__sflush_r+0xb8>
 8002316:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <__sflush_r+0x108>)
 8002318:	40ca      	lsrs	r2, r1
 800231a:	07d6      	lsls	r6, r2, #31
 800231c:	d528      	bpl.n	8002370 <__sflush_r+0xb8>
 800231e:	2200      	movs	r2, #0
 8002320:	6062      	str	r2, [r4, #4]
 8002322:	04d9      	lsls	r1, r3, #19
 8002324:	6922      	ldr	r2, [r4, #16]
 8002326:	6022      	str	r2, [r4, #0]
 8002328:	d504      	bpl.n	8002334 <__sflush_r+0x7c>
 800232a:	1c42      	adds	r2, r0, #1
 800232c:	d101      	bne.n	8002332 <__sflush_r+0x7a>
 800232e:	682b      	ldr	r3, [r5, #0]
 8002330:	b903      	cbnz	r3, 8002334 <__sflush_r+0x7c>
 8002332:	6560      	str	r0, [r4, #84]	; 0x54
 8002334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002336:	602f      	str	r7, [r5, #0]
 8002338:	2900      	cmp	r1, #0
 800233a:	d0ca      	beq.n	80022d2 <__sflush_r+0x1a>
 800233c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002340:	4299      	cmp	r1, r3
 8002342:	d002      	beq.n	800234a <__sflush_r+0x92>
 8002344:	4628      	mov	r0, r5
 8002346:	f000 f9d7 	bl	80026f8 <_free_r>
 800234a:	2000      	movs	r0, #0
 800234c:	6360      	str	r0, [r4, #52]	; 0x34
 800234e:	e7c1      	b.n	80022d4 <__sflush_r+0x1c>
 8002350:	6a21      	ldr	r1, [r4, #32]
 8002352:	2301      	movs	r3, #1
 8002354:	4628      	mov	r0, r5
 8002356:	47b0      	blx	r6
 8002358:	1c41      	adds	r1, r0, #1
 800235a:	d1c7      	bne.n	80022ec <__sflush_r+0x34>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0c4      	beq.n	80022ec <__sflush_r+0x34>
 8002362:	2b1d      	cmp	r3, #29
 8002364:	d001      	beq.n	800236a <__sflush_r+0xb2>
 8002366:	2b16      	cmp	r3, #22
 8002368:	d101      	bne.n	800236e <__sflush_r+0xb6>
 800236a:	602f      	str	r7, [r5, #0]
 800236c:	e7b1      	b.n	80022d2 <__sflush_r+0x1a>
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002374:	81a3      	strh	r3, [r4, #12]
 8002376:	e7ad      	b.n	80022d4 <__sflush_r+0x1c>
 8002378:	690f      	ldr	r7, [r1, #16]
 800237a:	2f00      	cmp	r7, #0
 800237c:	d0a9      	beq.n	80022d2 <__sflush_r+0x1a>
 800237e:	0793      	lsls	r3, r2, #30
 8002380:	680e      	ldr	r6, [r1, #0]
 8002382:	bf08      	it	eq
 8002384:	694b      	ldreq	r3, [r1, #20]
 8002386:	600f      	str	r7, [r1, #0]
 8002388:	bf18      	it	ne
 800238a:	2300      	movne	r3, #0
 800238c:	eba6 0807 	sub.w	r8, r6, r7
 8002390:	608b      	str	r3, [r1, #8]
 8002392:	f1b8 0f00 	cmp.w	r8, #0
 8002396:	dd9c      	ble.n	80022d2 <__sflush_r+0x1a>
 8002398:	6a21      	ldr	r1, [r4, #32]
 800239a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800239c:	4643      	mov	r3, r8
 800239e:	463a      	mov	r2, r7
 80023a0:	4628      	mov	r0, r5
 80023a2:	47b0      	blx	r6
 80023a4:	2800      	cmp	r0, #0
 80023a6:	dc06      	bgt.n	80023b6 <__sflush_r+0xfe>
 80023a8:	89a3      	ldrh	r3, [r4, #12]
 80023aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ae:	81a3      	strh	r3, [r4, #12]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b4:	e78e      	b.n	80022d4 <__sflush_r+0x1c>
 80023b6:	4407      	add	r7, r0
 80023b8:	eba8 0800 	sub.w	r8, r8, r0
 80023bc:	e7e9      	b.n	8002392 <__sflush_r+0xda>
 80023be:	bf00      	nop
 80023c0:	20400001 	.word	0x20400001

080023c4 <_fflush_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	690b      	ldr	r3, [r1, #16]
 80023c8:	4605      	mov	r5, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	b913      	cbnz	r3, 80023d4 <_fflush_r+0x10>
 80023ce:	2500      	movs	r5, #0
 80023d0:	4628      	mov	r0, r5
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	b118      	cbz	r0, 80023de <_fflush_r+0x1a>
 80023d6:	6983      	ldr	r3, [r0, #24]
 80023d8:	b90b      	cbnz	r3, 80023de <_fflush_r+0x1a>
 80023da:	f000 f887 	bl	80024ec <__sinit>
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <_fflush_r+0x6c>)
 80023e0:	429c      	cmp	r4, r3
 80023e2:	d11b      	bne.n	800241c <_fflush_r+0x58>
 80023e4:	686c      	ldr	r4, [r5, #4]
 80023e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0ef      	beq.n	80023ce <_fflush_r+0xa>
 80023ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80023f0:	07d0      	lsls	r0, r2, #31
 80023f2:	d404      	bmi.n	80023fe <_fflush_r+0x3a>
 80023f4:	0599      	lsls	r1, r3, #22
 80023f6:	d402      	bmi.n	80023fe <_fflush_r+0x3a>
 80023f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023fa:	f000 f915 	bl	8002628 <__retarget_lock_acquire_recursive>
 80023fe:	4628      	mov	r0, r5
 8002400:	4621      	mov	r1, r4
 8002402:	f7ff ff59 	bl	80022b8 <__sflush_r>
 8002406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002408:	07da      	lsls	r2, r3, #31
 800240a:	4605      	mov	r5, r0
 800240c:	d4e0      	bmi.n	80023d0 <_fflush_r+0xc>
 800240e:	89a3      	ldrh	r3, [r4, #12]
 8002410:	059b      	lsls	r3, r3, #22
 8002412:	d4dd      	bmi.n	80023d0 <_fflush_r+0xc>
 8002414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002416:	f000 f908 	bl	800262a <__retarget_lock_release_recursive>
 800241a:	e7d9      	b.n	80023d0 <_fflush_r+0xc>
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <_fflush_r+0x70>)
 800241e:	429c      	cmp	r4, r3
 8002420:	d101      	bne.n	8002426 <_fflush_r+0x62>
 8002422:	68ac      	ldr	r4, [r5, #8]
 8002424:	e7df      	b.n	80023e6 <_fflush_r+0x22>
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <_fflush_r+0x74>)
 8002428:	429c      	cmp	r4, r3
 800242a:	bf08      	it	eq
 800242c:	68ec      	ldreq	r4, [r5, #12]
 800242e:	e7da      	b.n	80023e6 <_fflush_r+0x22>
 8002430:	08002bec 	.word	0x08002bec
 8002434:	08002c0c 	.word	0x08002c0c
 8002438:	08002bcc 	.word	0x08002bcc

0800243c <std>:
 800243c:	2300      	movs	r3, #0
 800243e:	b510      	push	{r4, lr}
 8002440:	4604      	mov	r4, r0
 8002442:	e9c0 3300 	strd	r3, r3, [r0]
 8002446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800244a:	6083      	str	r3, [r0, #8]
 800244c:	8181      	strh	r1, [r0, #12]
 800244e:	6643      	str	r3, [r0, #100]	; 0x64
 8002450:	81c2      	strh	r2, [r0, #14]
 8002452:	6183      	str	r3, [r0, #24]
 8002454:	4619      	mov	r1, r3
 8002456:	2208      	movs	r2, #8
 8002458:	305c      	adds	r0, #92	; 0x5c
 800245a:	f7ff fb6f 	bl	8001b3c <memset>
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <std+0x38>)
 8002460:	6263      	str	r3, [r4, #36]	; 0x24
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <std+0x3c>)
 8002464:	62a3      	str	r3, [r4, #40]	; 0x28
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <std+0x40>)
 8002468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <std+0x44>)
 800246c:	6224      	str	r4, [r4, #32]
 800246e:	6323      	str	r3, [r4, #48]	; 0x30
 8002470:	bd10      	pop	{r4, pc}
 8002472:	bf00      	nop
 8002474:	08002961 	.word	0x08002961
 8002478:	08002983 	.word	0x08002983
 800247c:	080029bb 	.word	0x080029bb
 8002480:	080029df 	.word	0x080029df

08002484 <_cleanup_r>:
 8002484:	4901      	ldr	r1, [pc, #4]	; (800248c <_cleanup_r+0x8>)
 8002486:	f000 b8af 	b.w	80025e8 <_fwalk_reent>
 800248a:	bf00      	nop
 800248c:	080023c5 	.word	0x080023c5

08002490 <__sfmoreglue>:
 8002490:	b570      	push	{r4, r5, r6, lr}
 8002492:	2268      	movs	r2, #104	; 0x68
 8002494:	1e4d      	subs	r5, r1, #1
 8002496:	4355      	muls	r5, r2
 8002498:	460e      	mov	r6, r1
 800249a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800249e:	f000 f997 	bl	80027d0 <_malloc_r>
 80024a2:	4604      	mov	r4, r0
 80024a4:	b140      	cbz	r0, 80024b8 <__sfmoreglue+0x28>
 80024a6:	2100      	movs	r1, #0
 80024a8:	e9c0 1600 	strd	r1, r6, [r0]
 80024ac:	300c      	adds	r0, #12
 80024ae:	60a0      	str	r0, [r4, #8]
 80024b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80024b4:	f7ff fb42 	bl	8001b3c <memset>
 80024b8:	4620      	mov	r0, r4
 80024ba:	bd70      	pop	{r4, r5, r6, pc}

080024bc <__sfp_lock_acquire>:
 80024bc:	4801      	ldr	r0, [pc, #4]	; (80024c4 <__sfp_lock_acquire+0x8>)
 80024be:	f000 b8b3 	b.w	8002628 <__retarget_lock_acquire_recursive>
 80024c2:	bf00      	nop
 80024c4:	200000a5 	.word	0x200000a5

080024c8 <__sfp_lock_release>:
 80024c8:	4801      	ldr	r0, [pc, #4]	; (80024d0 <__sfp_lock_release+0x8>)
 80024ca:	f000 b8ae 	b.w	800262a <__retarget_lock_release_recursive>
 80024ce:	bf00      	nop
 80024d0:	200000a5 	.word	0x200000a5

080024d4 <__sinit_lock_acquire>:
 80024d4:	4801      	ldr	r0, [pc, #4]	; (80024dc <__sinit_lock_acquire+0x8>)
 80024d6:	f000 b8a7 	b.w	8002628 <__retarget_lock_acquire_recursive>
 80024da:	bf00      	nop
 80024dc:	200000a6 	.word	0x200000a6

080024e0 <__sinit_lock_release>:
 80024e0:	4801      	ldr	r0, [pc, #4]	; (80024e8 <__sinit_lock_release+0x8>)
 80024e2:	f000 b8a2 	b.w	800262a <__retarget_lock_release_recursive>
 80024e6:	bf00      	nop
 80024e8:	200000a6 	.word	0x200000a6

080024ec <__sinit>:
 80024ec:	b510      	push	{r4, lr}
 80024ee:	4604      	mov	r4, r0
 80024f0:	f7ff fff0 	bl	80024d4 <__sinit_lock_acquire>
 80024f4:	69a3      	ldr	r3, [r4, #24]
 80024f6:	b11b      	cbz	r3, 8002500 <__sinit+0x14>
 80024f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024fc:	f7ff bff0 	b.w	80024e0 <__sinit_lock_release>
 8002500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002504:	6523      	str	r3, [r4, #80]	; 0x50
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <__sinit+0x68>)
 8002508:	4a13      	ldr	r2, [pc, #76]	; (8002558 <__sinit+0x6c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	62a2      	str	r2, [r4, #40]	; 0x28
 800250e:	42a3      	cmp	r3, r4
 8002510:	bf04      	itt	eq
 8002512:	2301      	moveq	r3, #1
 8002514:	61a3      	streq	r3, [r4, #24]
 8002516:	4620      	mov	r0, r4
 8002518:	f000 f820 	bl	800255c <__sfp>
 800251c:	6060      	str	r0, [r4, #4]
 800251e:	4620      	mov	r0, r4
 8002520:	f000 f81c 	bl	800255c <__sfp>
 8002524:	60a0      	str	r0, [r4, #8]
 8002526:	4620      	mov	r0, r4
 8002528:	f000 f818 	bl	800255c <__sfp>
 800252c:	2200      	movs	r2, #0
 800252e:	60e0      	str	r0, [r4, #12]
 8002530:	2104      	movs	r1, #4
 8002532:	6860      	ldr	r0, [r4, #4]
 8002534:	f7ff ff82 	bl	800243c <std>
 8002538:	68a0      	ldr	r0, [r4, #8]
 800253a:	2201      	movs	r2, #1
 800253c:	2109      	movs	r1, #9
 800253e:	f7ff ff7d 	bl	800243c <std>
 8002542:	68e0      	ldr	r0, [r4, #12]
 8002544:	2202      	movs	r2, #2
 8002546:	2112      	movs	r1, #18
 8002548:	f7ff ff78 	bl	800243c <std>
 800254c:	2301      	movs	r3, #1
 800254e:	61a3      	str	r3, [r4, #24]
 8002550:	e7d2      	b.n	80024f8 <__sinit+0xc>
 8002552:	bf00      	nop
 8002554:	08002b94 	.word	0x08002b94
 8002558:	08002485 	.word	0x08002485

0800255c <__sfp>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	4607      	mov	r7, r0
 8002560:	f7ff ffac 	bl	80024bc <__sfp_lock_acquire>
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <__sfp+0x84>)
 8002566:	681e      	ldr	r6, [r3, #0]
 8002568:	69b3      	ldr	r3, [r6, #24]
 800256a:	b913      	cbnz	r3, 8002572 <__sfp+0x16>
 800256c:	4630      	mov	r0, r6
 800256e:	f7ff ffbd 	bl	80024ec <__sinit>
 8002572:	3648      	adds	r6, #72	; 0x48
 8002574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002578:	3b01      	subs	r3, #1
 800257a:	d503      	bpl.n	8002584 <__sfp+0x28>
 800257c:	6833      	ldr	r3, [r6, #0]
 800257e:	b30b      	cbz	r3, 80025c4 <__sfp+0x68>
 8002580:	6836      	ldr	r6, [r6, #0]
 8002582:	e7f7      	b.n	8002574 <__sfp+0x18>
 8002584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002588:	b9d5      	cbnz	r5, 80025c0 <__sfp+0x64>
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <__sfp+0x88>)
 800258c:	60e3      	str	r3, [r4, #12]
 800258e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002592:	6665      	str	r5, [r4, #100]	; 0x64
 8002594:	f000 f847 	bl	8002626 <__retarget_lock_init_recursive>
 8002598:	f7ff ff96 	bl	80024c8 <__sfp_lock_release>
 800259c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80025a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80025a4:	6025      	str	r5, [r4, #0]
 80025a6:	61a5      	str	r5, [r4, #24]
 80025a8:	2208      	movs	r2, #8
 80025aa:	4629      	mov	r1, r5
 80025ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80025b0:	f7ff fac4 	bl	8001b3c <memset>
 80025b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80025b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80025bc:	4620      	mov	r0, r4
 80025be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025c0:	3468      	adds	r4, #104	; 0x68
 80025c2:	e7d9      	b.n	8002578 <__sfp+0x1c>
 80025c4:	2104      	movs	r1, #4
 80025c6:	4638      	mov	r0, r7
 80025c8:	f7ff ff62 	bl	8002490 <__sfmoreglue>
 80025cc:	4604      	mov	r4, r0
 80025ce:	6030      	str	r0, [r6, #0]
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d1d5      	bne.n	8002580 <__sfp+0x24>
 80025d4:	f7ff ff78 	bl	80024c8 <__sfp_lock_release>
 80025d8:	230c      	movs	r3, #12
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	e7ee      	b.n	80025bc <__sfp+0x60>
 80025de:	bf00      	nop
 80025e0:	08002b94 	.word	0x08002b94
 80025e4:	ffff0001 	.word	0xffff0001

080025e8 <_fwalk_reent>:
 80025e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025ec:	4606      	mov	r6, r0
 80025ee:	4688      	mov	r8, r1
 80025f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80025f4:	2700      	movs	r7, #0
 80025f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80025fa:	f1b9 0901 	subs.w	r9, r9, #1
 80025fe:	d505      	bpl.n	800260c <_fwalk_reent+0x24>
 8002600:	6824      	ldr	r4, [r4, #0]
 8002602:	2c00      	cmp	r4, #0
 8002604:	d1f7      	bne.n	80025f6 <_fwalk_reent+0xe>
 8002606:	4638      	mov	r0, r7
 8002608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800260c:	89ab      	ldrh	r3, [r5, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d907      	bls.n	8002622 <_fwalk_reent+0x3a>
 8002612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002616:	3301      	adds	r3, #1
 8002618:	d003      	beq.n	8002622 <_fwalk_reent+0x3a>
 800261a:	4629      	mov	r1, r5
 800261c:	4630      	mov	r0, r6
 800261e:	47c0      	blx	r8
 8002620:	4307      	orrs	r7, r0
 8002622:	3568      	adds	r5, #104	; 0x68
 8002624:	e7e9      	b.n	80025fa <_fwalk_reent+0x12>

08002626 <__retarget_lock_init_recursive>:
 8002626:	4770      	bx	lr

08002628 <__retarget_lock_acquire_recursive>:
 8002628:	4770      	bx	lr

0800262a <__retarget_lock_release_recursive>:
 800262a:	4770      	bx	lr

0800262c <__swhatbuf_r>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	460e      	mov	r6, r1
 8002630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002634:	2900      	cmp	r1, #0
 8002636:	b096      	sub	sp, #88	; 0x58
 8002638:	4614      	mov	r4, r2
 800263a:	461d      	mov	r5, r3
 800263c:	da08      	bge.n	8002650 <__swhatbuf_r+0x24>
 800263e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	602a      	str	r2, [r5, #0]
 8002646:	061a      	lsls	r2, r3, #24
 8002648:	d410      	bmi.n	800266c <__swhatbuf_r+0x40>
 800264a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264e:	e00e      	b.n	800266e <__swhatbuf_r+0x42>
 8002650:	466a      	mov	r2, sp
 8002652:	f000 f9eb 	bl	8002a2c <_fstat_r>
 8002656:	2800      	cmp	r0, #0
 8002658:	dbf1      	blt.n	800263e <__swhatbuf_r+0x12>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002660:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002664:	425a      	negs	r2, r3
 8002666:	415a      	adcs	r2, r3
 8002668:	602a      	str	r2, [r5, #0]
 800266a:	e7ee      	b.n	800264a <__swhatbuf_r+0x1e>
 800266c:	2340      	movs	r3, #64	; 0x40
 800266e:	2000      	movs	r0, #0
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	b016      	add	sp, #88	; 0x58
 8002674:	bd70      	pop	{r4, r5, r6, pc}
	...

08002678 <__smakebuf_r>:
 8002678:	898b      	ldrh	r3, [r1, #12]
 800267a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800267c:	079d      	lsls	r5, r3, #30
 800267e:	4606      	mov	r6, r0
 8002680:	460c      	mov	r4, r1
 8002682:	d507      	bpl.n	8002694 <__smakebuf_r+0x1c>
 8002684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	6123      	str	r3, [r4, #16]
 800268c:	2301      	movs	r3, #1
 800268e:	6163      	str	r3, [r4, #20]
 8002690:	b002      	add	sp, #8
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	ab01      	add	r3, sp, #4
 8002696:	466a      	mov	r2, sp
 8002698:	f7ff ffc8 	bl	800262c <__swhatbuf_r>
 800269c:	9900      	ldr	r1, [sp, #0]
 800269e:	4605      	mov	r5, r0
 80026a0:	4630      	mov	r0, r6
 80026a2:	f000 f895 	bl	80027d0 <_malloc_r>
 80026a6:	b948      	cbnz	r0, 80026bc <__smakebuf_r+0x44>
 80026a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ac:	059a      	lsls	r2, r3, #22
 80026ae:	d4ef      	bmi.n	8002690 <__smakebuf_r+0x18>
 80026b0:	f023 0303 	bic.w	r3, r3, #3
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	81a3      	strh	r3, [r4, #12]
 80026ba:	e7e3      	b.n	8002684 <__smakebuf_r+0xc>
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <__smakebuf_r+0x7c>)
 80026be:	62b3      	str	r3, [r6, #40]	; 0x28
 80026c0:	89a3      	ldrh	r3, [r4, #12]
 80026c2:	6020      	str	r0, [r4, #0]
 80026c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	9b00      	ldr	r3, [sp, #0]
 80026cc:	6163      	str	r3, [r4, #20]
 80026ce:	9b01      	ldr	r3, [sp, #4]
 80026d0:	6120      	str	r0, [r4, #16]
 80026d2:	b15b      	cbz	r3, 80026ec <__smakebuf_r+0x74>
 80026d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026d8:	4630      	mov	r0, r6
 80026da:	f000 f9b9 	bl	8002a50 <_isatty_r>
 80026de:	b128      	cbz	r0, 80026ec <__smakebuf_r+0x74>
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	81a3      	strh	r3, [r4, #12]
 80026ec:	89a0      	ldrh	r0, [r4, #12]
 80026ee:	4305      	orrs	r5, r0
 80026f0:	81a5      	strh	r5, [r4, #12]
 80026f2:	e7cd      	b.n	8002690 <__smakebuf_r+0x18>
 80026f4:	08002485 	.word	0x08002485

080026f8 <_free_r>:
 80026f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026fa:	2900      	cmp	r1, #0
 80026fc:	d044      	beq.n	8002788 <_free_r+0x90>
 80026fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002702:	9001      	str	r0, [sp, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f1a1 0404 	sub.w	r4, r1, #4
 800270a:	bfb8      	it	lt
 800270c:	18e4      	addlt	r4, r4, r3
 800270e:	f000 f9c1 	bl	8002a94 <__malloc_lock>
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <_free_r+0x94>)
 8002714:	9801      	ldr	r0, [sp, #4]
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	b933      	cbnz	r3, 8002728 <_free_r+0x30>
 800271a:	6063      	str	r3, [r4, #4]
 800271c:	6014      	str	r4, [r2, #0]
 800271e:	b003      	add	sp, #12
 8002720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002724:	f000 b9bc 	b.w	8002aa0 <__malloc_unlock>
 8002728:	42a3      	cmp	r3, r4
 800272a:	d908      	bls.n	800273e <_free_r+0x46>
 800272c:	6825      	ldr	r5, [r4, #0]
 800272e:	1961      	adds	r1, r4, r5
 8002730:	428b      	cmp	r3, r1
 8002732:	bf01      	itttt	eq
 8002734:	6819      	ldreq	r1, [r3, #0]
 8002736:	685b      	ldreq	r3, [r3, #4]
 8002738:	1949      	addeq	r1, r1, r5
 800273a:	6021      	streq	r1, [r4, #0]
 800273c:	e7ed      	b.n	800271a <_free_r+0x22>
 800273e:	461a      	mov	r2, r3
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	b10b      	cbz	r3, 8002748 <_free_r+0x50>
 8002744:	42a3      	cmp	r3, r4
 8002746:	d9fa      	bls.n	800273e <_free_r+0x46>
 8002748:	6811      	ldr	r1, [r2, #0]
 800274a:	1855      	adds	r5, r2, r1
 800274c:	42a5      	cmp	r5, r4
 800274e:	d10b      	bne.n	8002768 <_free_r+0x70>
 8002750:	6824      	ldr	r4, [r4, #0]
 8002752:	4421      	add	r1, r4
 8002754:	1854      	adds	r4, r2, r1
 8002756:	42a3      	cmp	r3, r4
 8002758:	6011      	str	r1, [r2, #0]
 800275a:	d1e0      	bne.n	800271e <_free_r+0x26>
 800275c:	681c      	ldr	r4, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	6053      	str	r3, [r2, #4]
 8002762:	4421      	add	r1, r4
 8002764:	6011      	str	r1, [r2, #0]
 8002766:	e7da      	b.n	800271e <_free_r+0x26>
 8002768:	d902      	bls.n	8002770 <_free_r+0x78>
 800276a:	230c      	movs	r3, #12
 800276c:	6003      	str	r3, [r0, #0]
 800276e:	e7d6      	b.n	800271e <_free_r+0x26>
 8002770:	6825      	ldr	r5, [r4, #0]
 8002772:	1961      	adds	r1, r4, r5
 8002774:	428b      	cmp	r3, r1
 8002776:	bf04      	itt	eq
 8002778:	6819      	ldreq	r1, [r3, #0]
 800277a:	685b      	ldreq	r3, [r3, #4]
 800277c:	6063      	str	r3, [r4, #4]
 800277e:	bf04      	itt	eq
 8002780:	1949      	addeq	r1, r1, r5
 8002782:	6021      	streq	r1, [r4, #0]
 8002784:	6054      	str	r4, [r2, #4]
 8002786:	e7ca      	b.n	800271e <_free_r+0x26>
 8002788:	b003      	add	sp, #12
 800278a:	bd30      	pop	{r4, r5, pc}
 800278c:	200000a8 	.word	0x200000a8

08002790 <sbrk_aligned>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	4e0e      	ldr	r6, [pc, #56]	; (80027cc <sbrk_aligned+0x3c>)
 8002794:	460c      	mov	r4, r1
 8002796:	6831      	ldr	r1, [r6, #0]
 8002798:	4605      	mov	r5, r0
 800279a:	b911      	cbnz	r1, 80027a2 <sbrk_aligned+0x12>
 800279c:	f000 f88c 	bl	80028b8 <_sbrk_r>
 80027a0:	6030      	str	r0, [r6, #0]
 80027a2:	4621      	mov	r1, r4
 80027a4:	4628      	mov	r0, r5
 80027a6:	f000 f887 	bl	80028b8 <_sbrk_r>
 80027aa:	1c43      	adds	r3, r0, #1
 80027ac:	d00a      	beq.n	80027c4 <sbrk_aligned+0x34>
 80027ae:	1cc4      	adds	r4, r0, #3
 80027b0:	f024 0403 	bic.w	r4, r4, #3
 80027b4:	42a0      	cmp	r0, r4
 80027b6:	d007      	beq.n	80027c8 <sbrk_aligned+0x38>
 80027b8:	1a21      	subs	r1, r4, r0
 80027ba:	4628      	mov	r0, r5
 80027bc:	f000 f87c 	bl	80028b8 <_sbrk_r>
 80027c0:	3001      	adds	r0, #1
 80027c2:	d101      	bne.n	80027c8 <sbrk_aligned+0x38>
 80027c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80027c8:	4620      	mov	r0, r4
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	200000ac 	.word	0x200000ac

080027d0 <_malloc_r>:
 80027d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d4:	1ccd      	adds	r5, r1, #3
 80027d6:	f025 0503 	bic.w	r5, r5, #3
 80027da:	3508      	adds	r5, #8
 80027dc:	2d0c      	cmp	r5, #12
 80027de:	bf38      	it	cc
 80027e0:	250c      	movcc	r5, #12
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	4607      	mov	r7, r0
 80027e6:	db01      	blt.n	80027ec <_malloc_r+0x1c>
 80027e8:	42a9      	cmp	r1, r5
 80027ea:	d905      	bls.n	80027f8 <_malloc_r+0x28>
 80027ec:	230c      	movs	r3, #12
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	2600      	movs	r6, #0
 80027f2:	4630      	mov	r0, r6
 80027f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027f8:	4e2e      	ldr	r6, [pc, #184]	; (80028b4 <_malloc_r+0xe4>)
 80027fa:	f000 f94b 	bl	8002a94 <__malloc_lock>
 80027fe:	6833      	ldr	r3, [r6, #0]
 8002800:	461c      	mov	r4, r3
 8002802:	bb34      	cbnz	r4, 8002852 <_malloc_r+0x82>
 8002804:	4629      	mov	r1, r5
 8002806:	4638      	mov	r0, r7
 8002808:	f7ff ffc2 	bl	8002790 <sbrk_aligned>
 800280c:	1c43      	adds	r3, r0, #1
 800280e:	4604      	mov	r4, r0
 8002810:	d14d      	bne.n	80028ae <_malloc_r+0xde>
 8002812:	6834      	ldr	r4, [r6, #0]
 8002814:	4626      	mov	r6, r4
 8002816:	2e00      	cmp	r6, #0
 8002818:	d140      	bne.n	800289c <_malloc_r+0xcc>
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	4631      	mov	r1, r6
 800281e:	4638      	mov	r0, r7
 8002820:	eb04 0803 	add.w	r8, r4, r3
 8002824:	f000 f848 	bl	80028b8 <_sbrk_r>
 8002828:	4580      	cmp	r8, r0
 800282a:	d13a      	bne.n	80028a2 <_malloc_r+0xd2>
 800282c:	6821      	ldr	r1, [r4, #0]
 800282e:	3503      	adds	r5, #3
 8002830:	1a6d      	subs	r5, r5, r1
 8002832:	f025 0503 	bic.w	r5, r5, #3
 8002836:	3508      	adds	r5, #8
 8002838:	2d0c      	cmp	r5, #12
 800283a:	bf38      	it	cc
 800283c:	250c      	movcc	r5, #12
 800283e:	4629      	mov	r1, r5
 8002840:	4638      	mov	r0, r7
 8002842:	f7ff ffa5 	bl	8002790 <sbrk_aligned>
 8002846:	3001      	adds	r0, #1
 8002848:	d02b      	beq.n	80028a2 <_malloc_r+0xd2>
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	442b      	add	r3, r5
 800284e:	6023      	str	r3, [r4, #0]
 8002850:	e00e      	b.n	8002870 <_malloc_r+0xa0>
 8002852:	6822      	ldr	r2, [r4, #0]
 8002854:	1b52      	subs	r2, r2, r5
 8002856:	d41e      	bmi.n	8002896 <_malloc_r+0xc6>
 8002858:	2a0b      	cmp	r2, #11
 800285a:	d916      	bls.n	800288a <_malloc_r+0xba>
 800285c:	1961      	adds	r1, r4, r5
 800285e:	42a3      	cmp	r3, r4
 8002860:	6025      	str	r5, [r4, #0]
 8002862:	bf18      	it	ne
 8002864:	6059      	strne	r1, [r3, #4]
 8002866:	6863      	ldr	r3, [r4, #4]
 8002868:	bf08      	it	eq
 800286a:	6031      	streq	r1, [r6, #0]
 800286c:	5162      	str	r2, [r4, r5]
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	4638      	mov	r0, r7
 8002872:	f104 060b 	add.w	r6, r4, #11
 8002876:	f000 f913 	bl	8002aa0 <__malloc_unlock>
 800287a:	f026 0607 	bic.w	r6, r6, #7
 800287e:	1d23      	adds	r3, r4, #4
 8002880:	1af2      	subs	r2, r6, r3
 8002882:	d0b6      	beq.n	80027f2 <_malloc_r+0x22>
 8002884:	1b9b      	subs	r3, r3, r6
 8002886:	50a3      	str	r3, [r4, r2]
 8002888:	e7b3      	b.n	80027f2 <_malloc_r+0x22>
 800288a:	6862      	ldr	r2, [r4, #4]
 800288c:	42a3      	cmp	r3, r4
 800288e:	bf0c      	ite	eq
 8002890:	6032      	streq	r2, [r6, #0]
 8002892:	605a      	strne	r2, [r3, #4]
 8002894:	e7ec      	b.n	8002870 <_malloc_r+0xa0>
 8002896:	4623      	mov	r3, r4
 8002898:	6864      	ldr	r4, [r4, #4]
 800289a:	e7b2      	b.n	8002802 <_malloc_r+0x32>
 800289c:	4634      	mov	r4, r6
 800289e:	6876      	ldr	r6, [r6, #4]
 80028a0:	e7b9      	b.n	8002816 <_malloc_r+0x46>
 80028a2:	230c      	movs	r3, #12
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4638      	mov	r0, r7
 80028a8:	f000 f8fa 	bl	8002aa0 <__malloc_unlock>
 80028ac:	e7a1      	b.n	80027f2 <_malloc_r+0x22>
 80028ae:	6025      	str	r5, [r4, #0]
 80028b0:	e7de      	b.n	8002870 <_malloc_r+0xa0>
 80028b2:	bf00      	nop
 80028b4:	200000a8 	.word	0x200000a8

080028b8 <_sbrk_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	4d06      	ldr	r5, [pc, #24]	; (80028d4 <_sbrk_r+0x1c>)
 80028bc:	2300      	movs	r3, #0
 80028be:	4604      	mov	r4, r0
 80028c0:	4608      	mov	r0, r1
 80028c2:	602b      	str	r3, [r5, #0]
 80028c4:	f7fe f83a 	bl	800093c <_sbrk>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d102      	bne.n	80028d2 <_sbrk_r+0x1a>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	b103      	cbz	r3, 80028d2 <_sbrk_r+0x1a>
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	200000b0 	.word	0x200000b0

080028d8 <_raise_r>:
 80028d8:	291f      	cmp	r1, #31
 80028da:	b538      	push	{r3, r4, r5, lr}
 80028dc:	4604      	mov	r4, r0
 80028de:	460d      	mov	r5, r1
 80028e0:	d904      	bls.n	80028ec <_raise_r+0x14>
 80028e2:	2316      	movs	r3, #22
 80028e4:	6003      	str	r3, [r0, #0]
 80028e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ea:	bd38      	pop	{r3, r4, r5, pc}
 80028ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80028ee:	b112      	cbz	r2, 80028f6 <_raise_r+0x1e>
 80028f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80028f4:	b94b      	cbnz	r3, 800290a <_raise_r+0x32>
 80028f6:	4620      	mov	r0, r4
 80028f8:	f000 f830 	bl	800295c <_getpid_r>
 80028fc:	462a      	mov	r2, r5
 80028fe:	4601      	mov	r1, r0
 8002900:	4620      	mov	r0, r4
 8002902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002906:	f000 b817 	b.w	8002938 <_kill_r>
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00a      	beq.n	8002924 <_raise_r+0x4c>
 800290e:	1c59      	adds	r1, r3, #1
 8002910:	d103      	bne.n	800291a <_raise_r+0x42>
 8002912:	2316      	movs	r3, #22
 8002914:	6003      	str	r3, [r0, #0]
 8002916:	2001      	movs	r0, #1
 8002918:	e7e7      	b.n	80028ea <_raise_r+0x12>
 800291a:	2400      	movs	r4, #0
 800291c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002920:	4628      	mov	r0, r5
 8002922:	4798      	blx	r3
 8002924:	2000      	movs	r0, #0
 8002926:	e7e0      	b.n	80028ea <_raise_r+0x12>

08002928 <raise>:
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <raise+0xc>)
 800292a:	4601      	mov	r1, r0
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	f7ff bfd3 	b.w	80028d8 <_raise_r>
 8002932:	bf00      	nop
 8002934:	20000018 	.word	0x20000018

08002938 <_kill_r>:
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	4d07      	ldr	r5, [pc, #28]	; (8002958 <_kill_r+0x20>)
 800293c:	2300      	movs	r3, #0
 800293e:	4604      	mov	r4, r0
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	602b      	str	r3, [r5, #0]
 8002946:	f7fd ff71 	bl	800082c <_kill>
 800294a:	1c43      	adds	r3, r0, #1
 800294c:	d102      	bne.n	8002954 <_kill_r+0x1c>
 800294e:	682b      	ldr	r3, [r5, #0]
 8002950:	b103      	cbz	r3, 8002954 <_kill_r+0x1c>
 8002952:	6023      	str	r3, [r4, #0]
 8002954:	bd38      	pop	{r3, r4, r5, pc}
 8002956:	bf00      	nop
 8002958:	200000b0 	.word	0x200000b0

0800295c <_getpid_r>:
 800295c:	f7fd bf5e 	b.w	800081c <_getpid>

08002960 <__sread>:
 8002960:	b510      	push	{r4, lr}
 8002962:	460c      	mov	r4, r1
 8002964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002968:	f000 f8a0 	bl	8002aac <_read_r>
 800296c:	2800      	cmp	r0, #0
 800296e:	bfab      	itete	ge
 8002970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002972:	89a3      	ldrhlt	r3, [r4, #12]
 8002974:	181b      	addge	r3, r3, r0
 8002976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800297a:	bfac      	ite	ge
 800297c:	6563      	strge	r3, [r4, #84]	; 0x54
 800297e:	81a3      	strhlt	r3, [r4, #12]
 8002980:	bd10      	pop	{r4, pc}

08002982 <__swrite>:
 8002982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002986:	461f      	mov	r7, r3
 8002988:	898b      	ldrh	r3, [r1, #12]
 800298a:	05db      	lsls	r3, r3, #23
 800298c:	4605      	mov	r5, r0
 800298e:	460c      	mov	r4, r1
 8002990:	4616      	mov	r6, r2
 8002992:	d505      	bpl.n	80029a0 <__swrite+0x1e>
 8002994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002998:	2302      	movs	r3, #2
 800299a:	2200      	movs	r2, #0
 800299c:	f000 f868 	bl	8002a70 <_lseek_r>
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029aa:	81a3      	strh	r3, [r4, #12]
 80029ac:	4632      	mov	r2, r6
 80029ae:	463b      	mov	r3, r7
 80029b0:	4628      	mov	r0, r5
 80029b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029b6:	f000 b817 	b.w	80029e8 <_write_r>

080029ba <__sseek>:
 80029ba:	b510      	push	{r4, lr}
 80029bc:	460c      	mov	r4, r1
 80029be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c2:	f000 f855 	bl	8002a70 <_lseek_r>
 80029c6:	1c43      	adds	r3, r0, #1
 80029c8:	89a3      	ldrh	r3, [r4, #12]
 80029ca:	bf15      	itete	ne
 80029cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80029ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029d6:	81a3      	strheq	r3, [r4, #12]
 80029d8:	bf18      	it	ne
 80029da:	81a3      	strhne	r3, [r4, #12]
 80029dc:	bd10      	pop	{r4, pc}

080029de <__sclose>:
 80029de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029e2:	f000 b813 	b.w	8002a0c <_close_r>
	...

080029e8 <_write_r>:
 80029e8:	b538      	push	{r3, r4, r5, lr}
 80029ea:	4d07      	ldr	r5, [pc, #28]	; (8002a08 <_write_r+0x20>)
 80029ec:	4604      	mov	r4, r0
 80029ee:	4608      	mov	r0, r1
 80029f0:	4611      	mov	r1, r2
 80029f2:	2200      	movs	r2, #0
 80029f4:	602a      	str	r2, [r5, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f7fd ff4f 	bl	800089a <_write>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d102      	bne.n	8002a06 <_write_r+0x1e>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	b103      	cbz	r3, 8002a06 <_write_r+0x1e>
 8002a04:	6023      	str	r3, [r4, #0]
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
 8002a08:	200000b0 	.word	0x200000b0

08002a0c <_close_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4d06      	ldr	r5, [pc, #24]	; (8002a28 <_close_r+0x1c>)
 8002a10:	2300      	movs	r3, #0
 8002a12:	4604      	mov	r4, r0
 8002a14:	4608      	mov	r0, r1
 8002a16:	602b      	str	r3, [r5, #0]
 8002a18:	f7fd ff5b 	bl	80008d2 <_close>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d102      	bne.n	8002a26 <_close_r+0x1a>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	b103      	cbz	r3, 8002a26 <_close_r+0x1a>
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
 8002a28:	200000b0 	.word	0x200000b0

08002a2c <_fstat_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4d07      	ldr	r5, [pc, #28]	; (8002a4c <_fstat_r+0x20>)
 8002a30:	2300      	movs	r3, #0
 8002a32:	4604      	mov	r4, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	4611      	mov	r1, r2
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	f7fd ff56 	bl	80008ea <_fstat>
 8002a3e:	1c43      	adds	r3, r0, #1
 8002a40:	d102      	bne.n	8002a48 <_fstat_r+0x1c>
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	b103      	cbz	r3, 8002a48 <_fstat_r+0x1c>
 8002a46:	6023      	str	r3, [r4, #0]
 8002a48:	bd38      	pop	{r3, r4, r5, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200000b0 	.word	0x200000b0

08002a50 <_isatty_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4d06      	ldr	r5, [pc, #24]	; (8002a6c <_isatty_r+0x1c>)
 8002a54:	2300      	movs	r3, #0
 8002a56:	4604      	mov	r4, r0
 8002a58:	4608      	mov	r0, r1
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	f7fd ff55 	bl	800090a <_isatty>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d102      	bne.n	8002a6a <_isatty_r+0x1a>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	b103      	cbz	r3, 8002a6a <_isatty_r+0x1a>
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	bd38      	pop	{r3, r4, r5, pc}
 8002a6c:	200000b0 	.word	0x200000b0

08002a70 <_lseek_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	4d07      	ldr	r5, [pc, #28]	; (8002a90 <_lseek_r+0x20>)
 8002a74:	4604      	mov	r4, r0
 8002a76:	4608      	mov	r0, r1
 8002a78:	4611      	mov	r1, r2
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	602a      	str	r2, [r5, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f7fd ff4e 	bl	8000920 <_lseek>
 8002a84:	1c43      	adds	r3, r0, #1
 8002a86:	d102      	bne.n	8002a8e <_lseek_r+0x1e>
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	b103      	cbz	r3, 8002a8e <_lseek_r+0x1e>
 8002a8c:	6023      	str	r3, [r4, #0]
 8002a8e:	bd38      	pop	{r3, r4, r5, pc}
 8002a90:	200000b0 	.word	0x200000b0

08002a94 <__malloc_lock>:
 8002a94:	4801      	ldr	r0, [pc, #4]	; (8002a9c <__malloc_lock+0x8>)
 8002a96:	f7ff bdc7 	b.w	8002628 <__retarget_lock_acquire_recursive>
 8002a9a:	bf00      	nop
 8002a9c:	200000a4 	.word	0x200000a4

08002aa0 <__malloc_unlock>:
 8002aa0:	4801      	ldr	r0, [pc, #4]	; (8002aa8 <__malloc_unlock+0x8>)
 8002aa2:	f7ff bdc2 	b.w	800262a <__retarget_lock_release_recursive>
 8002aa6:	bf00      	nop
 8002aa8:	200000a4 	.word	0x200000a4

08002aac <_read_r>:
 8002aac:	b538      	push	{r3, r4, r5, lr}
 8002aae:	4d07      	ldr	r5, [pc, #28]	; (8002acc <_read_r+0x20>)
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	4608      	mov	r0, r1
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	602a      	str	r2, [r5, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f7fd fed0 	bl	8000860 <_read>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d102      	bne.n	8002aca <_read_r+0x1e>
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	b103      	cbz	r3, 8002aca <_read_r+0x1e>
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
 8002acc:	200000b0 	.word	0x200000b0

08002ad0 <_init>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr

08002adc <_fini>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	bf00      	nop
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr
