
Practica04_p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e3c  08002e3c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e44  08002e44  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e44  08002e44  00012e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000038  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000052fb  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014fd  00000000  00000000  000253ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b0  00000000  00000000  000268a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004e8  00000000  00000000  00026e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a71  00000000  00000000  00027340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000811e  00000000  00000000  0004cdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e25ac  00000000  00000000  00054ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013747b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dc4  00000000  00000000  001374cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002ce0 	.word	0x08002ce0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002ce0 	.word	0x08002ce0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <delayInit>:
/* delayInit debe cargar el valor de duración del retardo en la estructura, en el campo
correspondiente. No debe iniciar el conteo del retardo. Debe inicializar el flag running
en `false´. */

void delayInit( delay_t * delay, tick_t duration )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d105      	bne.n	80005b0 <delayInit+0x1c>
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <delayInit+0x30>)
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <delayInit+0x34>)
 80005a8:	2113      	movs	r1, #19
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <delayInit+0x38>)
 80005ac:	f001 fb74 	bl	8001c98 <__assert_func>
	assert(delay->duration >=0);
	delay->duration = duration;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	721a      	strb	r2, [r3, #8]
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	08002cf8 	.word	0x08002cf8
 80005c8:	08002d38 	.word	0x08002d38
 80005cc:	08002d08 	.word	0x08002d08

080005d0 <delayRead>:
○ true, hacer la cuenta para saber si el tiempo del retardo se cumplió o no:
‘marca de tiempo actual - marca de tiempo inicial es mayor o igual a duración
del retardo’ y devolver un valor booleano que indique si el tiempo se cumplió o no.
○ Cuando el tiempo se cumple se debe cambiar el flag running a false.*/

bool_t delayRead( delay_t * delay ){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

	static bool_t retValue; // variable estatica interna
	retValue = false;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <delayRead+0x6c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	assert(delay !=NULL);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d105      	bne.n	80005f0 <delayRead+0x20>
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <delayRead+0x70>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <delayRead+0x74>)
 80005e8:	2124      	movs	r1, #36	; 0x24
 80005ea:	4817      	ldr	r0, [pc, #92]	; (8000648 <delayRead+0x78>)
 80005ec:	f001 fb54 	bl	8001c98 <__assert_func>
	assert(delay->duration >= 0);

	if (delay->running == false){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7a1b      	ldrb	r3, [r3, #8]
 80005f4:	f083 0301 	eor.w	r3, r3, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <delayRead+0x40>
		delay->startTime = HAL_GetTick();
 80005fe:	f000 fa83 	bl	8000b08 <HAL_GetTick>
 8000602:	4602      	mov	r2, r0
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	721a      	strb	r2, [r3, #8]
 800060e:	e00f      	b.n	8000630 <delayRead+0x60>
	}
	else{
		 if((HAL_GetTick()-delay->startTime) >= delay->duration){
 8000610:	f000 fa7a 	bl	8000b08 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1ad2      	subs	r2, r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	d305      	bcc.n	8000630 <delayRead+0x60>
			 delay->running = false;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	721a      	strb	r2, [r3, #8]
			 retValue = true;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <delayRead+0x6c>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
		 }
	}
	return retValue;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <delayRead+0x6c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000009c 	.word	0x2000009c
 8000640:	08002d28 	.word	0x08002d28
 8000644:	08002d44 	.word	0x08002d44
 8000648:	08002d08 	.word	0x08002d08

0800064c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10e      	bne.n	800067a <BSP_LED_Init+0x2e>
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <BSP_LED_Init+0x94>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <BSP_LED_Init+0x94>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <BSP_LED_Init+0x94>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	e00d      	b.n	8000696 <BSP_LED_Init+0x4a>
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <BSP_LED_Init+0x94>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <BSP_LED_Init+0x94>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <BSP_LED_Init+0x94>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <BSP_LED_Init+0x98>)
 800069a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <BSP_LED_Init+0x9c>)
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	f107 0214 	add.w	r2, r7, #20
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fb12 	bl	8000ce4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <BSP_LED_Init+0x9c>)
 80006c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <BSP_LED_Init+0x98>)
 80006cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f000 fcca 	bl	800106c <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	08002d50 	.word	0x08002d50
 80006e8:	20000000 	.word	0x20000000

080006ec <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <BSP_LED_On+0x2c>)
 80006fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <BSP_LED_On+0x30>)
 8000702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	f000 fcaf 	bl	800106c <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000000 	.word	0x20000000
 800071c:	08002d50 	.word	0x08002d50

08000720 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <BSP_LED_Toggle+0x2c>)
 800072e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4906      	ldr	r1, [pc, #24]	; (8000750 <BSP_LED_Toggle+0x30>)
 8000736:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800073a:	4619      	mov	r1, r3
 800073c:	4610      	mov	r0, r2
 800073e:	f000 fcae 	bl	800109e <HAL_GPIO_TogglePin>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000
 8000750:	08002d50 	.word	0x08002d50

08000754 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <BSP_PB_Init+0xa4>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <BSP_PB_Init+0xa4>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <BSP_PB_Init+0xa4>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d112      	bne.n	80007ac <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000790:	2302      	movs	r3, #2
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <BSP_PB_Init+0xa8>)
 800079c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a0:	f107 020c 	add.w	r2, r7, #12
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fa9c 	bl	8000ce4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d11d      	bne.n	80007ee <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80007bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <BSP_PB_Init+0xa8>)
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	f107 020c 	add.w	r2, r7, #12
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fa87 	bl	8000ce4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80007d6:	2328      	movs	r3, #40	; 0x28
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	210f      	movs	r1, #15
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fa4a 	bl	8000c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80007e4:	2328      	movs	r3, #40	; 0x28
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fa61 	bl	8000cb0 <HAL_NVIC_EnableIRQ>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	2000000c 	.word	0x2000000c

08000800 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <BSP_PB_GetState+0x28>)
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fc0f 	bl	800103c <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000000c 	.word	0x2000000c

0800082c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <SystemInit+0x60>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <SystemInit+0x60>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <SystemInit+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <SystemInit+0x64>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <SystemInit+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <SystemInit+0x64>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <SystemInit+0x64>)
 8000858:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800085c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000860:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <SystemInit+0x64>)
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <SystemInit+0x68>)
 8000866:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <SystemInit+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <SystemInit+0x64>)
 800086e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000872:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <SystemInit+0x60>)
 800087c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000880:	609a      	str	r2, [r3, #8]
#endif
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	40023800 	.word	0x40023800
 8000894:	24003010 	.word	0x24003010

08000898 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80008ec:	f000 f8f8 	bl	8000ae0 <HAL_IncTick>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	return 1;
 80008f8:	2301      	movs	r3, #1
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_kill>:

int _kill(int pid, int sig)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800090e:	f001 f9e1 	bl	8001cd4 <__errno>
 8000912:	4603      	mov	r3, r0
 8000914:	2216      	movs	r2, #22
 8000916:	601a      	str	r2, [r3, #0]
	return -1;
 8000918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <_exit>:

void _exit (int status)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800092c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ffe7 	bl	8000904 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000936:	e7fe      	b.n	8000936 <_exit+0x12>

08000938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e00a      	b.n	8000960 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800094a:	f3af 8000 	nop.w
 800094e:	4601      	mov	r1, r0
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	b2ca      	uxtb	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf0      	blt.n	800094a <_read+0x12>
	}

return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e009      	b.n	8000998 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf1      	blt.n	8000984 <_write+0x12>
	}
	return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_close>:

int _close(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d2:	605a      	str	r2, [r3, #4]
	return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_isatty>:

int _isatty(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	return 1;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f001 f946 	bl	8001cd4 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20030000 	.word	0x20030000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	200000a0 	.word	0x200000a0
 8000a7c:	200000b8 	.word	0x200000b8

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f914 	bl	8000ccc <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	f000 f8dc 	bl	8000c78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000010 	.word	0x20000010
 8000ad8:	20000018 	.word	0x20000018
 8000adc:	20000014 	.word	0x20000014

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000018 	.word	0x20000018
 8000b04:	200000a4 	.word	0x200000a4

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200000a4 	.word	0x200000a4

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8a:	f7ff ff49 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	6978      	ldr	r0, [r7, #20]
 8000c96:	f7ff ff99 	bl	8000bcc <NVIC_EncodePriority>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff68 	bl	8000b78 <__NVIC_SetPriority>
}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff3c 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffad 	bl	8000c34 <SysTick_Config>
 8000cda:	4603      	mov	r3, r0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	e177      	b.n	8000ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d00:	2201      	movs	r2, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	f040 8166 	bne.w	8000fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d005      	beq.n	8000d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d130      	bne.n	8000d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	091b      	lsrs	r3, r3, #4
 8000d82:	f003 0201 	and.w	r2, r3, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d017      	beq.n	8000dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d123      	bne.n	8000e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	220f      	movs	r2, #15
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	08da      	lsrs	r2, r3, #3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	69b9      	ldr	r1, [r7, #24]
 8000e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0203 	and.w	r2, r3, #3
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80c0 	beq.w	8000fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b66      	ldr	r3, [pc, #408]	; (8001008 <HAL_GPIO_Init+0x324>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a65      	ldr	r2, [pc, #404]	; (8001008 <HAL_GPIO_Init+0x324>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b63      	ldr	r3, [pc, #396]	; (8001008 <HAL_GPIO_Init+0x324>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e86:	4a61      	ldr	r2, [pc, #388]	; (800100c <HAL_GPIO_Init+0x328>)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a58      	ldr	r2, [pc, #352]	; (8001010 <HAL_GPIO_Init+0x32c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d037      	beq.n	8000f22 <HAL_GPIO_Init+0x23e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a57      	ldr	r2, [pc, #348]	; (8001014 <HAL_GPIO_Init+0x330>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d031      	beq.n	8000f1e <HAL_GPIO_Init+0x23a>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a56      	ldr	r2, [pc, #344]	; (8001018 <HAL_GPIO_Init+0x334>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d02b      	beq.n	8000f1a <HAL_GPIO_Init+0x236>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a55      	ldr	r2, [pc, #340]	; (800101c <HAL_GPIO_Init+0x338>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d025      	beq.n	8000f16 <HAL_GPIO_Init+0x232>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a54      	ldr	r2, [pc, #336]	; (8001020 <HAL_GPIO_Init+0x33c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01f      	beq.n	8000f12 <HAL_GPIO_Init+0x22e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a53      	ldr	r2, [pc, #332]	; (8001024 <HAL_GPIO_Init+0x340>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x22a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a52      	ldr	r2, [pc, #328]	; (8001028 <HAL_GPIO_Init+0x344>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x226>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a51      	ldr	r2, [pc, #324]	; (800102c <HAL_GPIO_Init+0x348>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x222>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a50      	ldr	r2, [pc, #320]	; (8001030 <HAL_GPIO_Init+0x34c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x21e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4f      	ldr	r2, [pc, #316]	; (8001034 <HAL_GPIO_Init+0x350>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x21a>
 8000efa:	2309      	movs	r3, #9
 8000efc:	e012      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000efe:	230a      	movs	r3, #10
 8000f00:	e010      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f02:	2308      	movs	r3, #8
 8000f04:	e00e      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f06:	2307      	movs	r3, #7
 8000f08:	e00c      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	e00a      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f0e:	2305      	movs	r3, #5
 8000f10:	e008      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e004      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e002      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x240>
 8000f22:	2300      	movs	r3, #0
 8000f24:	69fa      	ldr	r2, [r7, #28]
 8000f26:	f002 0203 	and.w	r2, r2, #3
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4093      	lsls	r3, r2
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f34:	4935      	ldr	r1, [pc, #212]	; (800100c <HAL_GPIO_Init+0x328>)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <HAL_GPIO_Init+0x354>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f66:	4a34      	ldr	r2, [pc, #208]	; (8001038 <HAL_GPIO_Init+0x354>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HAL_GPIO_Init+0x354>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f90:	4a29      	ldr	r2, [pc, #164]	; (8001038 <HAL_GPIO_Init+0x354>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <HAL_GPIO_Init+0x354>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fba:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_GPIO_Init+0x354>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_GPIO_Init+0x354>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_GPIO_Init+0x354>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3301      	adds	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	f67f ae84 	bls.w	8000d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40013800 	.word	0x40013800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40021000 	.word	0x40021000
 8001024:	40021400 	.word	0x40021400
 8001028:	40021800 	.word	0x40021800
 800102c:	40021c00 	.word	0x40021c00
 8001030:	40022000 	.word	0x40022000
 8001034:	40022400 	.word	0x40022400
 8001038:	40013c00 	.word	0x40013c00

0800103c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e001      	b.n	800105e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001088:	e003      	b.n	8001092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b0:	887a      	ldrh	r2, [r7, #2]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4013      	ands	r3, r2
 80010b6:	041a      	lsls	r2, r3, #16
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	400b      	ands	r3, r1
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_PWREx_EnableOverDrive+0x90>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_PWREx_EnableOverDrive+0x90>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_PWREx_EnableOverDrive+0x94>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001100:	f7ff fd02 	bl	8000b08 <HAL_GetTick>
 8001104:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001106:	e009      	b.n	800111c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001108:	f7ff fcfe 	bl	8000b08 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001116:	d901      	bls.n	800111c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e01f      	b.n	800115c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_PWREx_EnableOverDrive+0x98>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d1ee      	bne.n	8001108 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_PWREx_EnableOverDrive+0x9c>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001130:	f7ff fcea 	bl	8000b08 <HAL_GetTick>
 8001134:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001136:	e009      	b.n	800114c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001138:	f7ff fce6 	bl	8000b08 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001146:	d901      	bls.n	800114c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e007      	b.n	800115c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_PWREx_EnableOverDrive+0x98>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001158:	d1ee      	bne.n	8001138 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	420e0040 	.word	0x420e0040
 800116c:	40007000 	.word	0x40007000
 8001170:	420e0044 	.word	0x420e0044

08001174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e267      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d075      	beq.n	800127e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001192:	4b88      	ldr	r3, [pc, #544]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b04      	cmp	r3, #4
 800119c:	d00c      	beq.n	80011b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119e:	4b85      	ldr	r3, [pc, #532]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d112      	bne.n	80011d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011aa:	4b82      	ldr	r3, [pc, #520]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b6:	d10b      	bne.n	80011d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	4b7e      	ldr	r3, [pc, #504]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d05b      	beq.n	800127c <HAL_RCC_OscConfig+0x108>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d157      	bne.n	800127c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e242      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d106      	bne.n	80011e8 <HAL_RCC_OscConfig+0x74>
 80011da:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a75      	ldr	r2, [pc, #468]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e01d      	b.n	8001224 <HAL_RCC_OscConfig+0xb0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b70      	ldr	r3, [pc, #448]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6f      	ldr	r2, [pc, #444]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6c      	ldr	r2, [pc, #432]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e00b      	b.n	8001224 <HAL_RCC_OscConfig+0xb0>
 800120c:	4b69      	ldr	r3, [pc, #420]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a68      	ldr	r2, [pc, #416]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b66      	ldr	r3, [pc, #408]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a65      	ldr	r2, [pc, #404]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fc6c 	bl	8000b08 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fc68 	bl	8000b08 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e207      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0xc0>
 8001252:	e014      	b.n	800127e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fc58 	bl	8000b08 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fc54 	bl	8000b08 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1f3      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0xe8>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d063      	beq.n	8001352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d11c      	bne.n	80012dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d116      	bne.n	80012dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_OscConfig+0x152>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e1c7      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4937      	ldr	r1, [pc, #220]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	e03a      	b.n	8001352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e4:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <HAL_RCC_OscConfig+0x244>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fc0d 	bl	8000b08 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fc09 	bl	8000b08 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e1a8      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4925      	ldr	r1, [pc, #148]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
 8001324:	e015      	b.n	8001352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_OscConfig+0x244>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fbec 	bl	8000b08 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fbe8 	bl	8000b08 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e187      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d036      	beq.n	80013cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d016      	beq.n	8001394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_RCC_OscConfig+0x248>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136c:	f7ff fbcc 	bl	8000b08 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fbc8 	bl	8000b08 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e167      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x200>
 8001392:	e01b      	b.n	80013cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_OscConfig+0x248>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fbb5 	bl	8000b08 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	e00e      	b.n	80013c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff fbb1 	bl	8000b08 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d907      	bls.n	80013c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e150      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
 80013b4:	40023800 	.word	0x40023800
 80013b8:	42470000 	.word	0x42470000
 80013bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1ea      	bne.n	80013a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8097 	beq.w	8001508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a7c      	ldr	r2, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b7a      	ldr	r3, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b77      	ldr	r3, [pc, #476]	; (80015e8 <HAL_RCC_OscConfig+0x474>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001416:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <HAL_RCC_OscConfig+0x474>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a73      	ldr	r2, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x474>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fb71 	bl	8000b08 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff fb6d 	bl	8000b08 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e10c      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_OscConfig+0x474>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x2ea>
 8001450:	4b64      	ldr	r3, [pc, #400]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a63      	ldr	r2, [pc, #396]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x324>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b05      	cmp	r3, #5
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x30c>
 8001466:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a5e      	ldr	r2, [pc, #376]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
 8001472:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a5b      	ldr	r2, [pc, #364]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0x324>
 8001480:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001484:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	6713      	str	r3, [r2, #112]	; 0x70
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 0304 	bic.w	r3, r3, #4
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fb32 	bl	8000b08 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fb2e 	bl	8000b08 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0cb      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0ee      	beq.n	80014a8 <HAL_RCC_OscConfig+0x334>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fb1c 	bl	8000b08 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb18 	bl	8000b08 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e0b5      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ee      	bne.n	80014d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a1 	beq.w	8001654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d05c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d141      	bne.n	80015aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_RCC_OscConfig+0x478>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff faec 	bl	8000b08 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fae8 	bl	8000b08 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e087      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	019b      	lsls	r3, r3, #6
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	3b01      	subs	r3, #1
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	491b      	ldr	r1, [pc, #108]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_RCC_OscConfig+0x478>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fac1 	bl	8000b08 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fabd 	bl	8000b08 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e05c      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x416>
 80015a8:	e054      	b.n	8001654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_RCC_OscConfig+0x478>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff faaa 	bl	8000b08 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff faa6 	bl	8000b08 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e045      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x444>
 80015d6:	e03d      	b.n	8001654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e038      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40007000 	.word	0x40007000
 80015ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x4ec>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d028      	beq.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d121      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d11a      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001620:	4013      	ands	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001628:	4293      	cmp	r3, r2
 800162a:	d111      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	3b01      	subs	r3, #1
 800163a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0cc      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b68      	ldr	r3, [pc, #416]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d90c      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0b8      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a58      	ldr	r2, [pc, #352]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016dc:	4b50      	ldr	r3, [pc, #320]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	494d      	ldr	r1, [pc, #308]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d044      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d119      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e07f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d003      	beq.n	8001722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171e:	2b03      	cmp	r3, #3
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e06f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e067      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4934      	ldr	r1, [pc, #208]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff f9d8 	bl	8000b08 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f9d4 	bl	8000b08 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e04f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d20c      	bcs.n	80017ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e032      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4916      	ldr	r1, [pc, #88]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ea:	f000 f821 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	490a      	ldr	r1, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	5ccb      	ldrb	r3, [r1, r3]
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f938 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00
 8001820:	40023800 	.word	0x40023800
 8001824:	08002d58 	.word	0x08002d58
 8001828:	20000010 	.word	0x20000010
 800182c:	20000014 	.word	0x20000014

08001830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001834:	b094      	sub	sp, #80	; 0x50
 8001836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
 800183c:	2300      	movs	r3, #0
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001840:	2300      	movs	r3, #0
 8001842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001848:	4b79      	ldr	r3, [pc, #484]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d00d      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x40>
 8001854:	2b08      	cmp	r3, #8
 8001856:	f200 80e1 	bhi.w	8001a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x34>
 800185e:	2b04      	cmp	r3, #4
 8001860:	d003      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x3a>
 8001862:	e0db      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001866:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001868:	e0db      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800186c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800186e:	e0d8      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001870:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001878:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187a:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d063      	beq.n	800194e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	2200      	movs	r2, #0
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
 800189a:	2300      	movs	r3, #0
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
 800189e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018a2:	4622      	mov	r2, r4
 80018a4:	462b      	mov	r3, r5
 80018a6:	f04f 0000 	mov.w	r0, #0
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	0159      	lsls	r1, r3, #5
 80018b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b4:	0150      	lsls	r0, r2, #5
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4621      	mov	r1, r4
 80018bc:	1a51      	subs	r1, r2, r1
 80018be:	6139      	str	r1, [r7, #16]
 80018c0:	4629      	mov	r1, r5
 80018c2:	eb63 0301 	sbc.w	r3, r3, r1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018d4:	4659      	mov	r1, fp
 80018d6:	018b      	lsls	r3, r1, #6
 80018d8:	4651      	mov	r1, sl
 80018da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018de:	4651      	mov	r1, sl
 80018e0:	018a      	lsls	r2, r1, #6
 80018e2:	4651      	mov	r1, sl
 80018e4:	ebb2 0801 	subs.w	r8, r2, r1
 80018e8:	4659      	mov	r1, fp
 80018ea:	eb63 0901 	sbc.w	r9, r3, r1
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001902:	4690      	mov	r8, r2
 8001904:	4699      	mov	r9, r3
 8001906:	4623      	mov	r3, r4
 8001908:	eb18 0303 	adds.w	r3, r8, r3
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	462b      	mov	r3, r5
 8001910:	eb49 0303 	adc.w	r3, r9, r3
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001922:	4629      	mov	r1, r5
 8001924:	024b      	lsls	r3, r1, #9
 8001926:	4621      	mov	r1, r4
 8001928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800192c:	4621      	mov	r1, r4
 800192e:	024a      	lsls	r2, r1, #9
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001936:	2200      	movs	r2, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
 800193a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800193c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001940:	f7fe fca6 	bl	8000290 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800194c:	e058      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	2200      	movs	r2, #0
 8001956:	4618      	mov	r0, r3
 8001958:	4611      	mov	r1, r2
 800195a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800195e:	623b      	str	r3, [r7, #32]
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
 8001964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001968:	4642      	mov	r2, r8
 800196a:	464b      	mov	r3, r9
 800196c:	f04f 0000 	mov.w	r0, #0
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	0159      	lsls	r1, r3, #5
 8001976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197a:	0150      	lsls	r0, r2, #5
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4641      	mov	r1, r8
 8001982:	ebb2 0a01 	subs.w	sl, r2, r1
 8001986:	4649      	mov	r1, r9
 8001988:	eb63 0b01 	sbc.w	fp, r3, r1
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800199c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019a0:	ebb2 040a 	subs.w	r4, r2, sl
 80019a4:	eb63 050b 	sbc.w	r5, r3, fp
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	00eb      	lsls	r3, r5, #3
 80019b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b6:	00e2      	lsls	r2, r4, #3
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
 80019bc:	4643      	mov	r3, r8
 80019be:	18e3      	adds	r3, r4, r3
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	464b      	mov	r3, r9
 80019c4:	eb45 0303 	adc.w	r3, r5, r3
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d6:	4629      	mov	r1, r5
 80019d8:	028b      	lsls	r3, r1, #10
 80019da:	4621      	mov	r1, r4
 80019dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e0:	4621      	mov	r1, r4
 80019e2:	028a      	lsls	r2, r1, #10
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ea:	2200      	movs	r2, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	61fa      	str	r2, [r7, #28]
 80019f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f4:	f7fe fc4c 	bl	8000290 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3750      	adds	r7, #80	; 0x50
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	007a1200 	.word	0x007a1200

08001a3c <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
	/* STM32F4xx HAL library initialization */
	SystemClock_Config();
 8001a42:	f000 f897 	bl	8001b74 <SystemClock_Config>

	/*Inicialisamos variables */

	/* Initialize LED and BSP PB for
	 * BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001a46:	2100      	movs	r1, #0
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7fe fe83 	bl	8000754 <BSP_PB_Init>
	BSP_LED_Init(LED1);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7fe fdfc 	bl	800064c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8001a54:	2002      	movs	r0, #2
 8001a56:	f7fe fdf9 	bl	800064c <BSP_LED_Init>

    /* definimos la variable que contendra el estado del modelo*/
	debounceState_t Estado;

	/* definimos el estado inicial de modelo como BUTTON_UP*/
	debounceFSM_init(&Estado, BUTTON_UP);
 8001a5a:	1cfb      	adds	r3, r7, #3
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f80c 	bl	8001a7c <debounceFSM_init>

   /* Inicializa el retardo en 40 ms */
	delayInit(&Delay1, TIME1);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2128      	movs	r1, #40	; 0x28
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd93 	bl	8000594 <delayInit>

	/* Infinite loop */
    while (1) {
    	/* llamamos a la función que evaluara el estado de
    	 * nuestro modelo MEF*/
    	debounceFSM_update(&Estado,&Delay1);
 8001a6e:	1d3a      	adds	r2, r7, #4
 8001a70:	1cfb      	adds	r3, r7, #3
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f811 	bl	8001a9c <debounceFSM_update>
 8001a7a:	e7f8      	b.n	8001a6e <main+0x32>

08001a7c <debounceFSM_init>:
 *
 * Función Inicializar MEF con el valor definido
 * en el inicio del modelo
 * */

void debounceFSM_init(debounceState_t * EstadoActual, debounceState_t Valor){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
	/* Initialize Estado */
	*EstadoActual=Valor;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	701a      	strb	r2, [r3, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <debounceFSM_update>:
 *
 * @param   currentState: pointer to the current state of the FSM
 * @param   delay: pointer to the delay instance
 * @retval  None
 */
void debounceFSM_update(debounceState_t * currentState, delay_t* delay){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	switch (*currentState){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d84a      	bhi.n	8001b44 <debounceFSM_update+0xa8>
 8001aae:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <debounceFSM_update+0x18>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001ac5 	.word	0x08001ac5
 8001ab8:	08001ad9 	.word	0x08001ad9
 8001abc:	08001b05 	.word	0x08001b05
 8001ac0:	08001b19 	.word	0x08001b19
	 * In the BUTTON_UP state, it checks whether the button remains unpressed.
	 * Otherwise, that is, if the button is pressed, the state changes to BUTTON_FALLING.
	 */
	case BUTTON_UP:
		// Checks if the button has been pressed and, if so, transitions to the BUTTON_FALLING state
		if (BSP_PB_GetState(BUTTON_USER)){
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7fe fe9b 	bl	8000800 <BSP_PB_GetState>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03c      	beq.n	8001b4a <debounceFSM_update+0xae>
	    	*currentState=BUTTON_FALLING;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001ad6:	e038      	b.n	8001b4a <debounceFSM_update+0xae>
		 * If it remains pressed (condition 'yes'), the state changes to BUTTON_DOWN and the
		 * state of LED1 is toggled. If the button does not remain pressed (condition 'no'),
		 * the state changes back to BUTTON_UP, interpreting this event as a bounce.
		 */
	case BUTTON_FALLING:
		if (BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7fe fe91 	bl	8000800 <BSP_PB_GetState>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00b      	beq.n	8001afc <debounceFSM_update+0x60>
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f7fe fd73 	bl	80005d0 <delayRead>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <debounceFSM_update+0x60>
	    	*currentState=BUTTON_DOWN;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	701a      	strb	r2, [r3, #0]
	    	buttonPressed();
 8001af6:	f000 f82f 	bl	8001b58 <buttonPressed>
		}
		else {
			*currentState=BUTTON_UP;
		}
		break;
 8001afa:	e029      	b.n	8001b50 <debounceFSM_update+0xb4>
			*currentState=BUTTON_UP;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
		break;
 8001b02:	e025      	b.n	8001b50 <debounceFSM_update+0xb4>
	/*
	 * In the BUTTON_DOWN state, if the button is released, the state changes to BUTTON_RAISING.
	 */
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)){
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7fe fe7b 	bl	8000800 <BSP_PB_GetState>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11e      	bne.n	8001b4e <debounceFSM_update+0xb2>
	    	*currentState=BUTTON_RAISING;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2203      	movs	r2, #3
 8001b14:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b16:	e01a      	b.n	8001b4e <debounceFSM_update+0xb2>
	 * If it remains unpressed (condition 'yes'), the state changes back to BUTTON_UP and
	 * the buttonReleased function is called. If the button is pressed again (condition 'no'),
	 * the state changes back to BUTTON_DOWN.
	 */
	case BUTTON_RAISING:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7fe fe71 	bl	8000800 <BSP_PB_GetState>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10b      	bne.n	8001b3c <debounceFSM_update+0xa0>
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	f7fe fd53 	bl	80005d0 <delayRead>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <debounceFSM_update+0xa0>
	    	*currentState=BUTTON_UP;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
	    	buttonReleased();
 8001b36:	f000 f816 	bl	8001b66 <buttonReleased>
		}
		else {
			*currentState=BUTTON_DOWN;
		}
		break;
 8001b3a:	e009      	b.n	8001b50 <debounceFSM_update+0xb4>
			*currentState=BUTTON_DOWN;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	701a      	strb	r2, [r3, #0]
		break;
 8001b42:	e005      	b.n	8001b50 <debounceFSM_update+0xb4>
	default:
			/* Handle unexpected state */
		Error_Handler();
 8001b44:	f000 f878 	bl	8001c38 <Error_Handler>
	}
	return;
 8001b48:	e002      	b.n	8001b50 <debounceFSM_update+0xb4>
		break;
 8001b4a:	bf00      	nop
 8001b4c:	e000      	b.n	8001b50 <debounceFSM_update+0xb4>
		break;
 8001b4e:	bf00      	nop
	return;
 8001b50:	bf00      	nop
}
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <buttonPressed>:
 *          When this function is called, it switches the state of LED1 from ON to OFF or vice versa.
 *
 * @param   None
 * @retval  None
 */
void buttonPressed(){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED1);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7fe fddf 	bl	8000720 <BSP_LED_Toggle>
	return;
 8001b62:	bf00      	nop
}
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <buttonReleased>:
 *
 * @param   None
 * @retval  None
 */
void buttonReleased()
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED3);
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f7fe fdd8 	bl	8000720 <BSP_LED_Toggle>
	return;
 8001b70:	bf00      	nop
}
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <SystemClock_Config>:

/* FIN FUNCIONES PROPIAS */

static void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b094      	sub	sp, #80	; 0x50
 8001b78:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <SystemClock_Config+0xbc>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a2b      	ldr	r2, [pc, #172]	; (8001c30 <SystemClock_Config+0xbc>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <SystemClock_Config+0xbc>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <SystemClock_Config+0xc0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <SystemClock_Config+0xc0>)
 8001ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <SystemClock_Config+0xc0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bb6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bba:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8001bca:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fac9 	bl	8001174 <HAL_RCC_OscConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8001be8:	f000 f826 	bl	8001c38 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bec:	f7ff fa72 	bl	80010d4 <HAL_PWREx_EnableOverDrive>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8001bf6:	f000 f81f 	bl	8001c38 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c16:	2105      	movs	r1, #5
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd23 	bl	8001664 <HAL_RCC_ClockConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8001c24:	f000 f808 	bl	8001c38 <Error_Handler>
	}
}
 8001c28:	bf00      	nop
 8001c2a:	3750      	adds	r7, #80	; 0x50
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000

08001c38 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f7fe fd55 	bl	80006ec <BSP_LED_On>
	while (1)
 8001c42:	e7fe      	b.n	8001c42 <Error_Handler+0xa>

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c7c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c4a:	e003      	b.n	8001c54 <LoopCopyDataInit>

08001c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c52:	3104      	adds	r1, #4

08001c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c5c:	d3f6      	bcc.n	8001c4c <CopyDataInit>
  ldr  r2, =_sbss
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c60:	e002      	b.n	8001c68 <LoopFillZerobss>

08001c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c64:	f842 3b04 	str.w	r3, [r2], #4

08001c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c6c:	d3f9      	bcc.n	8001c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c6e:	f7fe fddd 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c72:	f000 f847 	bl	8001d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7ff fee1 	bl	8001a3c <main>
  bx  lr    
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c7c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c80:	08002e4c 	.word	0x08002e4c
  ldr  r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c88:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001c8c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001c90:	200000b8 	.word	0x200000b8

08001c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>
	...

08001c98 <__assert_func>:
 8001c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <__assert_func+0x2c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	68d8      	ldr	r0, [r3, #12]
 8001ca6:	b14c      	cbz	r4, 8001cbc <__assert_func+0x24>
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <__assert_func+0x30>)
 8001caa:	9100      	str	r1, [sp, #0]
 8001cac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001cb0:	4906      	ldr	r1, [pc, #24]	; (8001ccc <__assert_func+0x34>)
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	f000 f814 	bl	8001ce0 <fiprintf>
 8001cb8:	f000 fbfe 	bl	80024b8 <abort>
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__assert_func+0x38>)
 8001cbe:	461c      	mov	r4, r3
 8001cc0:	e7f3      	b.n	8001caa <__assert_func+0x12>
 8001cc2:	bf00      	nop
 8001cc4:	2000001c 	.word	0x2000001c
 8001cc8:	08002d68 	.word	0x08002d68
 8001ccc:	08002d75 	.word	0x08002d75
 8001cd0:	08002da3 	.word	0x08002da3

08001cd4 <__errno>:
 8001cd4:	4b01      	ldr	r3, [pc, #4]	; (8001cdc <__errno+0x8>)
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	2000001c 	.word	0x2000001c

08001ce0 <fiprintf>:
 8001ce0:	b40e      	push	{r1, r2, r3}
 8001ce2:	b503      	push	{r0, r1, lr}
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	ab03      	add	r3, sp, #12
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <fiprintf+0x20>)
 8001cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8001cee:	6800      	ldr	r0, [r0, #0]
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	f000 f85d 	bl	8001db0 <_vfiprintf_r>
 8001cf6:	b002      	add	sp, #8
 8001cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cfc:	b003      	add	sp, #12
 8001cfe:	4770      	bx	lr
 8001d00:	2000001c 	.word	0x2000001c

08001d04 <__libc_init_array>:
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	4d0d      	ldr	r5, [pc, #52]	; (8001d3c <__libc_init_array+0x38>)
 8001d08:	4c0d      	ldr	r4, [pc, #52]	; (8001d40 <__libc_init_array+0x3c>)
 8001d0a:	1b64      	subs	r4, r4, r5
 8001d0c:	10a4      	asrs	r4, r4, #2
 8001d0e:	2600      	movs	r6, #0
 8001d10:	42a6      	cmp	r6, r4
 8001d12:	d109      	bne.n	8001d28 <__libc_init_array+0x24>
 8001d14:	4d0b      	ldr	r5, [pc, #44]	; (8001d44 <__libc_init_array+0x40>)
 8001d16:	4c0c      	ldr	r4, [pc, #48]	; (8001d48 <__libc_init_array+0x44>)
 8001d18:	f000 ffe2 	bl	8002ce0 <_init>
 8001d1c:	1b64      	subs	r4, r4, r5
 8001d1e:	10a4      	asrs	r4, r4, #2
 8001d20:	2600      	movs	r6, #0
 8001d22:	42a6      	cmp	r6, r4
 8001d24:	d105      	bne.n	8001d32 <__libc_init_array+0x2e>
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
 8001d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d2c:	4798      	blx	r3
 8001d2e:	3601      	adds	r6, #1
 8001d30:	e7ee      	b.n	8001d10 <__libc_init_array+0xc>
 8001d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d36:	4798      	blx	r3
 8001d38:	3601      	adds	r6, #1
 8001d3a:	e7f2      	b.n	8001d22 <__libc_init_array+0x1e>
 8001d3c:	08002e44 	.word	0x08002e44
 8001d40:	08002e44 	.word	0x08002e44
 8001d44:	08002e44 	.word	0x08002e44
 8001d48:	08002e48 	.word	0x08002e48

08001d4c <memset>:
 8001d4c:	4402      	add	r2, r0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d100      	bne.n	8001d56 <memset+0xa>
 8001d54:	4770      	bx	lr
 8001d56:	f803 1b01 	strb.w	r1, [r3], #1
 8001d5a:	e7f9      	b.n	8001d50 <memset+0x4>

08001d5c <__sfputc_r>:
 8001d5c:	6893      	ldr	r3, [r2, #8]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	b410      	push	{r4}
 8001d64:	6093      	str	r3, [r2, #8]
 8001d66:	da08      	bge.n	8001d7a <__sfputc_r+0x1e>
 8001d68:	6994      	ldr	r4, [r2, #24]
 8001d6a:	42a3      	cmp	r3, r4
 8001d6c:	db01      	blt.n	8001d72 <__sfputc_r+0x16>
 8001d6e:	290a      	cmp	r1, #10
 8001d70:	d103      	bne.n	8001d7a <__sfputc_r+0x1e>
 8001d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d76:	f000 badf 	b.w	8002338 <__swbuf_r>
 8001d7a:	6813      	ldr	r3, [r2, #0]
 8001d7c:	1c58      	adds	r0, r3, #1
 8001d7e:	6010      	str	r0, [r2, #0]
 8001d80:	7019      	strb	r1, [r3, #0]
 8001d82:	4608      	mov	r0, r1
 8001d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <__sfputs_r>:
 8001d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8c:	4606      	mov	r6, r0
 8001d8e:	460f      	mov	r7, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	18d5      	adds	r5, r2, r3
 8001d94:	42ac      	cmp	r4, r5
 8001d96:	d101      	bne.n	8001d9c <__sfputs_r+0x12>
 8001d98:	2000      	movs	r0, #0
 8001d9a:	e007      	b.n	8001dac <__sfputs_r+0x22>
 8001d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001da0:	463a      	mov	r2, r7
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff ffda 	bl	8001d5c <__sfputc_r>
 8001da8:	1c43      	adds	r3, r0, #1
 8001daa:	d1f3      	bne.n	8001d94 <__sfputs_r+0xa>
 8001dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001db0 <_vfiprintf_r>:
 8001db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db4:	460d      	mov	r5, r1
 8001db6:	b09d      	sub	sp, #116	; 0x74
 8001db8:	4614      	mov	r4, r2
 8001dba:	4698      	mov	r8, r3
 8001dbc:	4606      	mov	r6, r0
 8001dbe:	b118      	cbz	r0, 8001dc8 <_vfiprintf_r+0x18>
 8001dc0:	6983      	ldr	r3, [r0, #24]
 8001dc2:	b90b      	cbnz	r3, 8001dc8 <_vfiprintf_r+0x18>
 8001dc4:	f000 fc9a 	bl	80026fc <__sinit>
 8001dc8:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <_vfiprintf_r+0x240>)
 8001dca:	429d      	cmp	r5, r3
 8001dcc:	d11b      	bne.n	8001e06 <_vfiprintf_r+0x56>
 8001dce:	6875      	ldr	r5, [r6, #4]
 8001dd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dd2:	07d9      	lsls	r1, r3, #31
 8001dd4:	d405      	bmi.n	8001de2 <_vfiprintf_r+0x32>
 8001dd6:	89ab      	ldrh	r3, [r5, #12]
 8001dd8:	059a      	lsls	r2, r3, #22
 8001dda:	d402      	bmi.n	8001de2 <_vfiprintf_r+0x32>
 8001ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001dde:	f000 fd2b 	bl	8002838 <__retarget_lock_acquire_recursive>
 8001de2:	89ab      	ldrh	r3, [r5, #12]
 8001de4:	071b      	lsls	r3, r3, #28
 8001de6:	d501      	bpl.n	8001dec <_vfiprintf_r+0x3c>
 8001de8:	692b      	ldr	r3, [r5, #16]
 8001dea:	b9eb      	cbnz	r3, 8001e28 <_vfiprintf_r+0x78>
 8001dec:	4629      	mov	r1, r5
 8001dee:	4630      	mov	r0, r6
 8001df0:	f000 faf4 	bl	80023dc <__swsetup_r>
 8001df4:	b1c0      	cbz	r0, 8001e28 <_vfiprintf_r+0x78>
 8001df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001df8:	07dc      	lsls	r4, r3, #31
 8001dfa:	d50e      	bpl.n	8001e1a <_vfiprintf_r+0x6a>
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e00:	b01d      	add	sp, #116	; 0x74
 8001e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e06:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <_vfiprintf_r+0x244>)
 8001e08:	429d      	cmp	r5, r3
 8001e0a:	d101      	bne.n	8001e10 <_vfiprintf_r+0x60>
 8001e0c:	68b5      	ldr	r5, [r6, #8]
 8001e0e:	e7df      	b.n	8001dd0 <_vfiprintf_r+0x20>
 8001e10:	4b79      	ldr	r3, [pc, #484]	; (8001ff8 <_vfiprintf_r+0x248>)
 8001e12:	429d      	cmp	r5, r3
 8001e14:	bf08      	it	eq
 8001e16:	68f5      	ldreq	r5, [r6, #12]
 8001e18:	e7da      	b.n	8001dd0 <_vfiprintf_r+0x20>
 8001e1a:	89ab      	ldrh	r3, [r5, #12]
 8001e1c:	0598      	lsls	r0, r3, #22
 8001e1e:	d4ed      	bmi.n	8001dfc <_vfiprintf_r+0x4c>
 8001e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e22:	f000 fd0a 	bl	800283a <__retarget_lock_release_recursive>
 8001e26:	e7e9      	b.n	8001dfc <_vfiprintf_r+0x4c>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e36:	2330      	movs	r3, #48	; 0x30
 8001e38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001ffc <_vfiprintf_r+0x24c>
 8001e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e40:	f04f 0901 	mov.w	r9, #1
 8001e44:	4623      	mov	r3, r4
 8001e46:	469a      	mov	sl, r3
 8001e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e4c:	b10a      	cbz	r2, 8001e52 <_vfiprintf_r+0xa2>
 8001e4e:	2a25      	cmp	r2, #37	; 0x25
 8001e50:	d1f9      	bne.n	8001e46 <_vfiprintf_r+0x96>
 8001e52:	ebba 0b04 	subs.w	fp, sl, r4
 8001e56:	d00b      	beq.n	8001e70 <_vfiprintf_r+0xc0>
 8001e58:	465b      	mov	r3, fp
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f7ff ff93 	bl	8001d8a <__sfputs_r>
 8001e64:	3001      	adds	r0, #1
 8001e66:	f000 80aa 	beq.w	8001fbe <_vfiprintf_r+0x20e>
 8001e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e6c:	445a      	add	r2, fp
 8001e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8001e70:	f89a 3000 	ldrb.w	r3, [sl]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a2 	beq.w	8001fbe <_vfiprintf_r+0x20e>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e84:	f10a 0a01 	add.w	sl, sl, #1
 8001e88:	9304      	str	r3, [sp, #16]
 8001e8a:	9307      	str	r3, [sp, #28]
 8001e8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e90:	931a      	str	r3, [sp, #104]	; 0x68
 8001e92:	4654      	mov	r4, sl
 8001e94:	2205      	movs	r2, #5
 8001e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e9a:	4858      	ldr	r0, [pc, #352]	; (8001ffc <_vfiprintf_r+0x24c>)
 8001e9c:	f7fe f9a8 	bl	80001f0 <memchr>
 8001ea0:	9a04      	ldr	r2, [sp, #16]
 8001ea2:	b9d8      	cbnz	r0, 8001edc <_vfiprintf_r+0x12c>
 8001ea4:	06d1      	lsls	r1, r2, #27
 8001ea6:	bf44      	itt	mi
 8001ea8:	2320      	movmi	r3, #32
 8001eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001eae:	0713      	lsls	r3, r2, #28
 8001eb0:	bf44      	itt	mi
 8001eb2:	232b      	movmi	r3, #43	; 0x2b
 8001eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8001ebe:	d015      	beq.n	8001eec <_vfiprintf_r+0x13c>
 8001ec0:	9a07      	ldr	r2, [sp, #28]
 8001ec2:	4654      	mov	r4, sl
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f04f 0c0a 	mov.w	ip, #10
 8001eca:	4621      	mov	r1, r4
 8001ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ed0:	3b30      	subs	r3, #48	; 0x30
 8001ed2:	2b09      	cmp	r3, #9
 8001ed4:	d94e      	bls.n	8001f74 <_vfiprintf_r+0x1c4>
 8001ed6:	b1b0      	cbz	r0, 8001f06 <_vfiprintf_r+0x156>
 8001ed8:	9207      	str	r2, [sp, #28]
 8001eda:	e014      	b.n	8001f06 <_vfiprintf_r+0x156>
 8001edc:	eba0 0308 	sub.w	r3, r0, r8
 8001ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	9304      	str	r3, [sp, #16]
 8001ee8:	46a2      	mov	sl, r4
 8001eea:	e7d2      	b.n	8001e92 <_vfiprintf_r+0xe2>
 8001eec:	9b03      	ldr	r3, [sp, #12]
 8001eee:	1d19      	adds	r1, r3, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	9103      	str	r1, [sp, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bfbb      	ittet	lt
 8001ef8:	425b      	neglt	r3, r3
 8001efa:	f042 0202 	orrlt.w	r2, r2, #2
 8001efe:	9307      	strge	r3, [sp, #28]
 8001f00:	9307      	strlt	r3, [sp, #28]
 8001f02:	bfb8      	it	lt
 8001f04:	9204      	strlt	r2, [sp, #16]
 8001f06:	7823      	ldrb	r3, [r4, #0]
 8001f08:	2b2e      	cmp	r3, #46	; 0x2e
 8001f0a:	d10c      	bne.n	8001f26 <_vfiprintf_r+0x176>
 8001f0c:	7863      	ldrb	r3, [r4, #1]
 8001f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f10:	d135      	bne.n	8001f7e <_vfiprintf_r+0x1ce>
 8001f12:	9b03      	ldr	r3, [sp, #12]
 8001f14:	1d1a      	adds	r2, r3, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	9203      	str	r2, [sp, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bfb8      	it	lt
 8001f1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001f22:	3402      	adds	r4, #2
 8001f24:	9305      	str	r3, [sp, #20]
 8001f26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800200c <_vfiprintf_r+0x25c>
 8001f2a:	7821      	ldrb	r1, [r4, #0]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	4650      	mov	r0, sl
 8001f30:	f7fe f95e 	bl	80001f0 <memchr>
 8001f34:	b140      	cbz	r0, 8001f48 <_vfiprintf_r+0x198>
 8001f36:	2340      	movs	r3, #64	; 0x40
 8001f38:	eba0 000a 	sub.w	r0, r0, sl
 8001f3c:	fa03 f000 	lsl.w	r0, r3, r0
 8001f40:	9b04      	ldr	r3, [sp, #16]
 8001f42:	4303      	orrs	r3, r0
 8001f44:	3401      	adds	r4, #1
 8001f46:	9304      	str	r3, [sp, #16]
 8001f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f4c:	482c      	ldr	r0, [pc, #176]	; (8002000 <_vfiprintf_r+0x250>)
 8001f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f52:	2206      	movs	r2, #6
 8001f54:	f7fe f94c 	bl	80001f0 <memchr>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	d03f      	beq.n	8001fdc <_vfiprintf_r+0x22c>
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <_vfiprintf_r+0x254>)
 8001f5e:	bb1b      	cbnz	r3, 8001fa8 <_vfiprintf_r+0x1f8>
 8001f60:	9b03      	ldr	r3, [sp, #12]
 8001f62:	3307      	adds	r3, #7
 8001f64:	f023 0307 	bic.w	r3, r3, #7
 8001f68:	3308      	adds	r3, #8
 8001f6a:	9303      	str	r3, [sp, #12]
 8001f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f6e:	443b      	add	r3, r7
 8001f70:	9309      	str	r3, [sp, #36]	; 0x24
 8001f72:	e767      	b.n	8001e44 <_vfiprintf_r+0x94>
 8001f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f78:	460c      	mov	r4, r1
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	e7a5      	b.n	8001eca <_vfiprintf_r+0x11a>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	3401      	adds	r4, #1
 8001f82:	9305      	str	r3, [sp, #20]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 0c0a 	mov.w	ip, #10
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f90:	3a30      	subs	r2, #48	; 0x30
 8001f92:	2a09      	cmp	r2, #9
 8001f94:	d903      	bls.n	8001f9e <_vfiprintf_r+0x1ee>
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0c5      	beq.n	8001f26 <_vfiprintf_r+0x176>
 8001f9a:	9105      	str	r1, [sp, #20]
 8001f9c:	e7c3      	b.n	8001f26 <_vfiprintf_r+0x176>
 8001f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e7f0      	b.n	8001f8a <_vfiprintf_r+0x1da>
 8001fa8:	ab03      	add	r3, sp, #12
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	462a      	mov	r2, r5
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <_vfiprintf_r+0x258>)
 8001fb0:	a904      	add	r1, sp, #16
 8001fb2:	4630      	mov	r0, r6
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	4607      	mov	r7, r0
 8001fba:	1c78      	adds	r0, r7, #1
 8001fbc:	d1d6      	bne.n	8001f6c <_vfiprintf_r+0x1bc>
 8001fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fc0:	07d9      	lsls	r1, r3, #31
 8001fc2:	d405      	bmi.n	8001fd0 <_vfiprintf_r+0x220>
 8001fc4:	89ab      	ldrh	r3, [r5, #12]
 8001fc6:	059a      	lsls	r2, r3, #22
 8001fc8:	d402      	bmi.n	8001fd0 <_vfiprintf_r+0x220>
 8001fca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fcc:	f000 fc35 	bl	800283a <__retarget_lock_release_recursive>
 8001fd0:	89ab      	ldrh	r3, [r5, #12]
 8001fd2:	065b      	lsls	r3, r3, #25
 8001fd4:	f53f af12 	bmi.w	8001dfc <_vfiprintf_r+0x4c>
 8001fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fda:	e711      	b.n	8001e00 <_vfiprintf_r+0x50>
 8001fdc:	ab03      	add	r3, sp, #12
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	462a      	mov	r2, r5
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <_vfiprintf_r+0x258>)
 8001fe4:	a904      	add	r1, sp, #16
 8001fe6:	4630      	mov	r0, r6
 8001fe8:	f000 f880 	bl	80020ec <_printf_i>
 8001fec:	e7e4      	b.n	8001fb8 <_vfiprintf_r+0x208>
 8001fee:	bf00      	nop
 8001ff0:	08002dfc 	.word	0x08002dfc
 8001ff4:	08002e1c 	.word	0x08002e1c
 8001ff8:	08002ddc 	.word	0x08002ddc
 8001ffc:	08002da8 	.word	0x08002da8
 8002000:	08002db2 	.word	0x08002db2
 8002004:	00000000 	.word	0x00000000
 8002008:	08001d8b 	.word	0x08001d8b
 800200c:	08002dae 	.word	0x08002dae

08002010 <_printf_common>:
 8002010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002014:	4616      	mov	r6, r2
 8002016:	4699      	mov	r9, r3
 8002018:	688a      	ldr	r2, [r1, #8]
 800201a:	690b      	ldr	r3, [r1, #16]
 800201c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002020:	4293      	cmp	r3, r2
 8002022:	bfb8      	it	lt
 8002024:	4613      	movlt	r3, r2
 8002026:	6033      	str	r3, [r6, #0]
 8002028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800202c:	4607      	mov	r7, r0
 800202e:	460c      	mov	r4, r1
 8002030:	b10a      	cbz	r2, 8002036 <_printf_common+0x26>
 8002032:	3301      	adds	r3, #1
 8002034:	6033      	str	r3, [r6, #0]
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	0699      	lsls	r1, r3, #26
 800203a:	bf42      	ittt	mi
 800203c:	6833      	ldrmi	r3, [r6, #0]
 800203e:	3302      	addmi	r3, #2
 8002040:	6033      	strmi	r3, [r6, #0]
 8002042:	6825      	ldr	r5, [r4, #0]
 8002044:	f015 0506 	ands.w	r5, r5, #6
 8002048:	d106      	bne.n	8002058 <_printf_common+0x48>
 800204a:	f104 0a19 	add.w	sl, r4, #25
 800204e:	68e3      	ldr	r3, [r4, #12]
 8002050:	6832      	ldr	r2, [r6, #0]
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	42ab      	cmp	r3, r5
 8002056:	dc26      	bgt.n	80020a6 <_printf_common+0x96>
 8002058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800205c:	1e13      	subs	r3, r2, #0
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	bf18      	it	ne
 8002062:	2301      	movne	r3, #1
 8002064:	0692      	lsls	r2, r2, #26
 8002066:	d42b      	bmi.n	80020c0 <_printf_common+0xb0>
 8002068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800206c:	4649      	mov	r1, r9
 800206e:	4638      	mov	r0, r7
 8002070:	47c0      	blx	r8
 8002072:	3001      	adds	r0, #1
 8002074:	d01e      	beq.n	80020b4 <_printf_common+0xa4>
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	68e5      	ldr	r5, [r4, #12]
 800207a:	6832      	ldr	r2, [r6, #0]
 800207c:	f003 0306 	and.w	r3, r3, #6
 8002080:	2b04      	cmp	r3, #4
 8002082:	bf08      	it	eq
 8002084:	1aad      	subeq	r5, r5, r2
 8002086:	68a3      	ldr	r3, [r4, #8]
 8002088:	6922      	ldr	r2, [r4, #16]
 800208a:	bf0c      	ite	eq
 800208c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002090:	2500      	movne	r5, #0
 8002092:	4293      	cmp	r3, r2
 8002094:	bfc4      	itt	gt
 8002096:	1a9b      	subgt	r3, r3, r2
 8002098:	18ed      	addgt	r5, r5, r3
 800209a:	2600      	movs	r6, #0
 800209c:	341a      	adds	r4, #26
 800209e:	42b5      	cmp	r5, r6
 80020a0:	d11a      	bne.n	80020d8 <_printf_common+0xc8>
 80020a2:	2000      	movs	r0, #0
 80020a4:	e008      	b.n	80020b8 <_printf_common+0xa8>
 80020a6:	2301      	movs	r3, #1
 80020a8:	4652      	mov	r2, sl
 80020aa:	4649      	mov	r1, r9
 80020ac:	4638      	mov	r0, r7
 80020ae:	47c0      	blx	r8
 80020b0:	3001      	adds	r0, #1
 80020b2:	d103      	bne.n	80020bc <_printf_common+0xac>
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020bc:	3501      	adds	r5, #1
 80020be:	e7c6      	b.n	800204e <_printf_common+0x3e>
 80020c0:	18e1      	adds	r1, r4, r3
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	2030      	movs	r0, #48	; 0x30
 80020c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020ca:	4422      	add	r2, r4
 80020cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020d4:	3302      	adds	r3, #2
 80020d6:	e7c7      	b.n	8002068 <_printf_common+0x58>
 80020d8:	2301      	movs	r3, #1
 80020da:	4622      	mov	r2, r4
 80020dc:	4649      	mov	r1, r9
 80020de:	4638      	mov	r0, r7
 80020e0:	47c0      	blx	r8
 80020e2:	3001      	adds	r0, #1
 80020e4:	d0e6      	beq.n	80020b4 <_printf_common+0xa4>
 80020e6:	3601      	adds	r6, #1
 80020e8:	e7d9      	b.n	800209e <_printf_common+0x8e>
	...

080020ec <_printf_i>:
 80020ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020f0:	7e0f      	ldrb	r7, [r1, #24]
 80020f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80020f4:	2f78      	cmp	r7, #120	; 0x78
 80020f6:	4691      	mov	r9, r2
 80020f8:	4680      	mov	r8, r0
 80020fa:	460c      	mov	r4, r1
 80020fc:	469a      	mov	sl, r3
 80020fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002102:	d807      	bhi.n	8002114 <_printf_i+0x28>
 8002104:	2f62      	cmp	r7, #98	; 0x62
 8002106:	d80a      	bhi.n	800211e <_printf_i+0x32>
 8002108:	2f00      	cmp	r7, #0
 800210a:	f000 80d8 	beq.w	80022be <_printf_i+0x1d2>
 800210e:	2f58      	cmp	r7, #88	; 0x58
 8002110:	f000 80a3 	beq.w	800225a <_printf_i+0x16e>
 8002114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800211c:	e03a      	b.n	8002194 <_printf_i+0xa8>
 800211e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002122:	2b15      	cmp	r3, #21
 8002124:	d8f6      	bhi.n	8002114 <_printf_i+0x28>
 8002126:	a101      	add	r1, pc, #4	; (adr r1, 800212c <_printf_i+0x40>)
 8002128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800212c:	08002185 	.word	0x08002185
 8002130:	08002199 	.word	0x08002199
 8002134:	08002115 	.word	0x08002115
 8002138:	08002115 	.word	0x08002115
 800213c:	08002115 	.word	0x08002115
 8002140:	08002115 	.word	0x08002115
 8002144:	08002199 	.word	0x08002199
 8002148:	08002115 	.word	0x08002115
 800214c:	08002115 	.word	0x08002115
 8002150:	08002115 	.word	0x08002115
 8002154:	08002115 	.word	0x08002115
 8002158:	080022a5 	.word	0x080022a5
 800215c:	080021c9 	.word	0x080021c9
 8002160:	08002287 	.word	0x08002287
 8002164:	08002115 	.word	0x08002115
 8002168:	08002115 	.word	0x08002115
 800216c:	080022c7 	.word	0x080022c7
 8002170:	08002115 	.word	0x08002115
 8002174:	080021c9 	.word	0x080021c9
 8002178:	08002115 	.word	0x08002115
 800217c:	08002115 	.word	0x08002115
 8002180:	0800228f 	.word	0x0800228f
 8002184:	682b      	ldr	r3, [r5, #0]
 8002186:	1d1a      	adds	r2, r3, #4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	602a      	str	r2, [r5, #0]
 800218c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002194:	2301      	movs	r3, #1
 8002196:	e0a3      	b.n	80022e0 <_printf_i+0x1f4>
 8002198:	6820      	ldr	r0, [r4, #0]
 800219a:	6829      	ldr	r1, [r5, #0]
 800219c:	0606      	lsls	r6, r0, #24
 800219e:	f101 0304 	add.w	r3, r1, #4
 80021a2:	d50a      	bpl.n	80021ba <_printf_i+0xce>
 80021a4:	680e      	ldr	r6, [r1, #0]
 80021a6:	602b      	str	r3, [r5, #0]
 80021a8:	2e00      	cmp	r6, #0
 80021aa:	da03      	bge.n	80021b4 <_printf_i+0xc8>
 80021ac:	232d      	movs	r3, #45	; 0x2d
 80021ae:	4276      	negs	r6, r6
 80021b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021b4:	485e      	ldr	r0, [pc, #376]	; (8002330 <_printf_i+0x244>)
 80021b6:	230a      	movs	r3, #10
 80021b8:	e019      	b.n	80021ee <_printf_i+0x102>
 80021ba:	680e      	ldr	r6, [r1, #0]
 80021bc:	602b      	str	r3, [r5, #0]
 80021be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021c2:	bf18      	it	ne
 80021c4:	b236      	sxthne	r6, r6
 80021c6:	e7ef      	b.n	80021a8 <_printf_i+0xbc>
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	6820      	ldr	r0, [r4, #0]
 80021cc:	1d19      	adds	r1, r3, #4
 80021ce:	6029      	str	r1, [r5, #0]
 80021d0:	0601      	lsls	r1, r0, #24
 80021d2:	d501      	bpl.n	80021d8 <_printf_i+0xec>
 80021d4:	681e      	ldr	r6, [r3, #0]
 80021d6:	e002      	b.n	80021de <_printf_i+0xf2>
 80021d8:	0646      	lsls	r6, r0, #25
 80021da:	d5fb      	bpl.n	80021d4 <_printf_i+0xe8>
 80021dc:	881e      	ldrh	r6, [r3, #0]
 80021de:	4854      	ldr	r0, [pc, #336]	; (8002330 <_printf_i+0x244>)
 80021e0:	2f6f      	cmp	r7, #111	; 0x6f
 80021e2:	bf0c      	ite	eq
 80021e4:	2308      	moveq	r3, #8
 80021e6:	230a      	movne	r3, #10
 80021e8:	2100      	movs	r1, #0
 80021ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021ee:	6865      	ldr	r5, [r4, #4]
 80021f0:	60a5      	str	r5, [r4, #8]
 80021f2:	2d00      	cmp	r5, #0
 80021f4:	bfa2      	ittt	ge
 80021f6:	6821      	ldrge	r1, [r4, #0]
 80021f8:	f021 0104 	bicge.w	r1, r1, #4
 80021fc:	6021      	strge	r1, [r4, #0]
 80021fe:	b90e      	cbnz	r6, 8002204 <_printf_i+0x118>
 8002200:	2d00      	cmp	r5, #0
 8002202:	d04d      	beq.n	80022a0 <_printf_i+0x1b4>
 8002204:	4615      	mov	r5, r2
 8002206:	fbb6 f1f3 	udiv	r1, r6, r3
 800220a:	fb03 6711 	mls	r7, r3, r1, r6
 800220e:	5dc7      	ldrb	r7, [r0, r7]
 8002210:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002214:	4637      	mov	r7, r6
 8002216:	42bb      	cmp	r3, r7
 8002218:	460e      	mov	r6, r1
 800221a:	d9f4      	bls.n	8002206 <_printf_i+0x11a>
 800221c:	2b08      	cmp	r3, #8
 800221e:	d10b      	bne.n	8002238 <_printf_i+0x14c>
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	07de      	lsls	r6, r3, #31
 8002224:	d508      	bpl.n	8002238 <_printf_i+0x14c>
 8002226:	6923      	ldr	r3, [r4, #16]
 8002228:	6861      	ldr	r1, [r4, #4]
 800222a:	4299      	cmp	r1, r3
 800222c:	bfde      	ittt	le
 800222e:	2330      	movle	r3, #48	; 0x30
 8002230:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002234:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002238:	1b52      	subs	r2, r2, r5
 800223a:	6122      	str	r2, [r4, #16]
 800223c:	f8cd a000 	str.w	sl, [sp]
 8002240:	464b      	mov	r3, r9
 8002242:	aa03      	add	r2, sp, #12
 8002244:	4621      	mov	r1, r4
 8002246:	4640      	mov	r0, r8
 8002248:	f7ff fee2 	bl	8002010 <_printf_common>
 800224c:	3001      	adds	r0, #1
 800224e:	d14c      	bne.n	80022ea <_printf_i+0x1fe>
 8002250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002254:	b004      	add	sp, #16
 8002256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800225a:	4835      	ldr	r0, [pc, #212]	; (8002330 <_printf_i+0x244>)
 800225c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002260:	6829      	ldr	r1, [r5, #0]
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f851 6b04 	ldr.w	r6, [r1], #4
 8002268:	6029      	str	r1, [r5, #0]
 800226a:	061d      	lsls	r5, r3, #24
 800226c:	d514      	bpl.n	8002298 <_printf_i+0x1ac>
 800226e:	07df      	lsls	r7, r3, #31
 8002270:	bf44      	itt	mi
 8002272:	f043 0320 	orrmi.w	r3, r3, #32
 8002276:	6023      	strmi	r3, [r4, #0]
 8002278:	b91e      	cbnz	r6, 8002282 <_printf_i+0x196>
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	f023 0320 	bic.w	r3, r3, #32
 8002280:	6023      	str	r3, [r4, #0]
 8002282:	2310      	movs	r3, #16
 8002284:	e7b0      	b.n	80021e8 <_printf_i+0xfc>
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	2378      	movs	r3, #120	; 0x78
 8002290:	4828      	ldr	r0, [pc, #160]	; (8002334 <_printf_i+0x248>)
 8002292:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002296:	e7e3      	b.n	8002260 <_printf_i+0x174>
 8002298:	0659      	lsls	r1, r3, #25
 800229a:	bf48      	it	mi
 800229c:	b2b6      	uxthmi	r6, r6
 800229e:	e7e6      	b.n	800226e <_printf_i+0x182>
 80022a0:	4615      	mov	r5, r2
 80022a2:	e7bb      	b.n	800221c <_printf_i+0x130>
 80022a4:	682b      	ldr	r3, [r5, #0]
 80022a6:	6826      	ldr	r6, [r4, #0]
 80022a8:	6961      	ldr	r1, [r4, #20]
 80022aa:	1d18      	adds	r0, r3, #4
 80022ac:	6028      	str	r0, [r5, #0]
 80022ae:	0635      	lsls	r5, r6, #24
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	d501      	bpl.n	80022b8 <_printf_i+0x1cc>
 80022b4:	6019      	str	r1, [r3, #0]
 80022b6:	e002      	b.n	80022be <_printf_i+0x1d2>
 80022b8:	0670      	lsls	r0, r6, #25
 80022ba:	d5fb      	bpl.n	80022b4 <_printf_i+0x1c8>
 80022bc:	8019      	strh	r1, [r3, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	6123      	str	r3, [r4, #16]
 80022c2:	4615      	mov	r5, r2
 80022c4:	e7ba      	b.n	800223c <_printf_i+0x150>
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	1d1a      	adds	r2, r3, #4
 80022ca:	602a      	str	r2, [r5, #0]
 80022cc:	681d      	ldr	r5, [r3, #0]
 80022ce:	6862      	ldr	r2, [r4, #4]
 80022d0:	2100      	movs	r1, #0
 80022d2:	4628      	mov	r0, r5
 80022d4:	f7fd ff8c 	bl	80001f0 <memchr>
 80022d8:	b108      	cbz	r0, 80022de <_printf_i+0x1f2>
 80022da:	1b40      	subs	r0, r0, r5
 80022dc:	6060      	str	r0, [r4, #4]
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	6123      	str	r3, [r4, #16]
 80022e2:	2300      	movs	r3, #0
 80022e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022e8:	e7a8      	b.n	800223c <_printf_i+0x150>
 80022ea:	6923      	ldr	r3, [r4, #16]
 80022ec:	462a      	mov	r2, r5
 80022ee:	4649      	mov	r1, r9
 80022f0:	4640      	mov	r0, r8
 80022f2:	47d0      	blx	sl
 80022f4:	3001      	adds	r0, #1
 80022f6:	d0ab      	beq.n	8002250 <_printf_i+0x164>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	079b      	lsls	r3, r3, #30
 80022fc:	d413      	bmi.n	8002326 <_printf_i+0x23a>
 80022fe:	68e0      	ldr	r0, [r4, #12]
 8002300:	9b03      	ldr	r3, [sp, #12]
 8002302:	4298      	cmp	r0, r3
 8002304:	bfb8      	it	lt
 8002306:	4618      	movlt	r0, r3
 8002308:	e7a4      	b.n	8002254 <_printf_i+0x168>
 800230a:	2301      	movs	r3, #1
 800230c:	4632      	mov	r2, r6
 800230e:	4649      	mov	r1, r9
 8002310:	4640      	mov	r0, r8
 8002312:	47d0      	blx	sl
 8002314:	3001      	adds	r0, #1
 8002316:	d09b      	beq.n	8002250 <_printf_i+0x164>
 8002318:	3501      	adds	r5, #1
 800231a:	68e3      	ldr	r3, [r4, #12]
 800231c:	9903      	ldr	r1, [sp, #12]
 800231e:	1a5b      	subs	r3, r3, r1
 8002320:	42ab      	cmp	r3, r5
 8002322:	dcf2      	bgt.n	800230a <_printf_i+0x21e>
 8002324:	e7eb      	b.n	80022fe <_printf_i+0x212>
 8002326:	2500      	movs	r5, #0
 8002328:	f104 0619 	add.w	r6, r4, #25
 800232c:	e7f5      	b.n	800231a <_printf_i+0x22e>
 800232e:	bf00      	nop
 8002330:	08002db9 	.word	0x08002db9
 8002334:	08002dca 	.word	0x08002dca

08002338 <__swbuf_r>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	460e      	mov	r6, r1
 800233c:	4614      	mov	r4, r2
 800233e:	4605      	mov	r5, r0
 8002340:	b118      	cbz	r0, 800234a <__swbuf_r+0x12>
 8002342:	6983      	ldr	r3, [r0, #24]
 8002344:	b90b      	cbnz	r3, 800234a <__swbuf_r+0x12>
 8002346:	f000 f9d9 	bl	80026fc <__sinit>
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <__swbuf_r+0x98>)
 800234c:	429c      	cmp	r4, r3
 800234e:	d12b      	bne.n	80023a8 <__swbuf_r+0x70>
 8002350:	686c      	ldr	r4, [r5, #4]
 8002352:	69a3      	ldr	r3, [r4, #24]
 8002354:	60a3      	str	r3, [r4, #8]
 8002356:	89a3      	ldrh	r3, [r4, #12]
 8002358:	071a      	lsls	r2, r3, #28
 800235a:	d52f      	bpl.n	80023bc <__swbuf_r+0x84>
 800235c:	6923      	ldr	r3, [r4, #16]
 800235e:	b36b      	cbz	r3, 80023bc <__swbuf_r+0x84>
 8002360:	6923      	ldr	r3, [r4, #16]
 8002362:	6820      	ldr	r0, [r4, #0]
 8002364:	1ac0      	subs	r0, r0, r3
 8002366:	6963      	ldr	r3, [r4, #20]
 8002368:	b2f6      	uxtb	r6, r6
 800236a:	4283      	cmp	r3, r0
 800236c:	4637      	mov	r7, r6
 800236e:	dc04      	bgt.n	800237a <__swbuf_r+0x42>
 8002370:	4621      	mov	r1, r4
 8002372:	4628      	mov	r0, r5
 8002374:	f000 f92e 	bl	80025d4 <_fflush_r>
 8002378:	bb30      	cbnz	r0, 80023c8 <__swbuf_r+0x90>
 800237a:	68a3      	ldr	r3, [r4, #8]
 800237c:	3b01      	subs	r3, #1
 800237e:	60a3      	str	r3, [r4, #8]
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	6022      	str	r2, [r4, #0]
 8002386:	701e      	strb	r6, [r3, #0]
 8002388:	6963      	ldr	r3, [r4, #20]
 800238a:	3001      	adds	r0, #1
 800238c:	4283      	cmp	r3, r0
 800238e:	d004      	beq.n	800239a <__swbuf_r+0x62>
 8002390:	89a3      	ldrh	r3, [r4, #12]
 8002392:	07db      	lsls	r3, r3, #31
 8002394:	d506      	bpl.n	80023a4 <__swbuf_r+0x6c>
 8002396:	2e0a      	cmp	r6, #10
 8002398:	d104      	bne.n	80023a4 <__swbuf_r+0x6c>
 800239a:	4621      	mov	r1, r4
 800239c:	4628      	mov	r0, r5
 800239e:	f000 f919 	bl	80025d4 <_fflush_r>
 80023a2:	b988      	cbnz	r0, 80023c8 <__swbuf_r+0x90>
 80023a4:	4638      	mov	r0, r7
 80023a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <__swbuf_r+0x9c>)
 80023aa:	429c      	cmp	r4, r3
 80023ac:	d101      	bne.n	80023b2 <__swbuf_r+0x7a>
 80023ae:	68ac      	ldr	r4, [r5, #8]
 80023b0:	e7cf      	b.n	8002352 <__swbuf_r+0x1a>
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <__swbuf_r+0xa0>)
 80023b4:	429c      	cmp	r4, r3
 80023b6:	bf08      	it	eq
 80023b8:	68ec      	ldreq	r4, [r5, #12]
 80023ba:	e7ca      	b.n	8002352 <__swbuf_r+0x1a>
 80023bc:	4621      	mov	r1, r4
 80023be:	4628      	mov	r0, r5
 80023c0:	f000 f80c 	bl	80023dc <__swsetup_r>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d0cb      	beq.n	8002360 <__swbuf_r+0x28>
 80023c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80023cc:	e7ea      	b.n	80023a4 <__swbuf_r+0x6c>
 80023ce:	bf00      	nop
 80023d0:	08002dfc 	.word	0x08002dfc
 80023d4:	08002e1c 	.word	0x08002e1c
 80023d8:	08002ddc 	.word	0x08002ddc

080023dc <__swsetup_r>:
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <__swsetup_r+0xcc>)
 80023de:	b570      	push	{r4, r5, r6, lr}
 80023e0:	681d      	ldr	r5, [r3, #0]
 80023e2:	4606      	mov	r6, r0
 80023e4:	460c      	mov	r4, r1
 80023e6:	b125      	cbz	r5, 80023f2 <__swsetup_r+0x16>
 80023e8:	69ab      	ldr	r3, [r5, #24]
 80023ea:	b913      	cbnz	r3, 80023f2 <__swsetup_r+0x16>
 80023ec:	4628      	mov	r0, r5
 80023ee:	f000 f985 	bl	80026fc <__sinit>
 80023f2:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <__swsetup_r+0xd0>)
 80023f4:	429c      	cmp	r4, r3
 80023f6:	d10f      	bne.n	8002418 <__swsetup_r+0x3c>
 80023f8:	686c      	ldr	r4, [r5, #4]
 80023fa:	89a3      	ldrh	r3, [r4, #12]
 80023fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002400:	0719      	lsls	r1, r3, #28
 8002402:	d42c      	bmi.n	800245e <__swsetup_r+0x82>
 8002404:	06dd      	lsls	r5, r3, #27
 8002406:	d411      	bmi.n	800242c <__swsetup_r+0x50>
 8002408:	2309      	movs	r3, #9
 800240a:	6033      	str	r3, [r6, #0]
 800240c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002410:	81a3      	strh	r3, [r4, #12]
 8002412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002416:	e03e      	b.n	8002496 <__swsetup_r+0xba>
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <__swsetup_r+0xd4>)
 800241a:	429c      	cmp	r4, r3
 800241c:	d101      	bne.n	8002422 <__swsetup_r+0x46>
 800241e:	68ac      	ldr	r4, [r5, #8]
 8002420:	e7eb      	b.n	80023fa <__swsetup_r+0x1e>
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <__swsetup_r+0xd8>)
 8002424:	429c      	cmp	r4, r3
 8002426:	bf08      	it	eq
 8002428:	68ec      	ldreq	r4, [r5, #12]
 800242a:	e7e6      	b.n	80023fa <__swsetup_r+0x1e>
 800242c:	0758      	lsls	r0, r3, #29
 800242e:	d512      	bpl.n	8002456 <__swsetup_r+0x7a>
 8002430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002432:	b141      	cbz	r1, 8002446 <__swsetup_r+0x6a>
 8002434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002438:	4299      	cmp	r1, r3
 800243a:	d002      	beq.n	8002442 <__swsetup_r+0x66>
 800243c:	4630      	mov	r0, r6
 800243e:	f000 fa63 	bl	8002908 <_free_r>
 8002442:	2300      	movs	r3, #0
 8002444:	6363      	str	r3, [r4, #52]	; 0x34
 8002446:	89a3      	ldrh	r3, [r4, #12]
 8002448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800244c:	81a3      	strh	r3, [r4, #12]
 800244e:	2300      	movs	r3, #0
 8002450:	6063      	str	r3, [r4, #4]
 8002452:	6923      	ldr	r3, [r4, #16]
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	89a3      	ldrh	r3, [r4, #12]
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	81a3      	strh	r3, [r4, #12]
 800245e:	6923      	ldr	r3, [r4, #16]
 8002460:	b94b      	cbnz	r3, 8002476 <__swsetup_r+0x9a>
 8002462:	89a3      	ldrh	r3, [r4, #12]
 8002464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246c:	d003      	beq.n	8002476 <__swsetup_r+0x9a>
 800246e:	4621      	mov	r1, r4
 8002470:	4630      	mov	r0, r6
 8002472:	f000 fa09 	bl	8002888 <__smakebuf_r>
 8002476:	89a0      	ldrh	r0, [r4, #12]
 8002478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800247c:	f010 0301 	ands.w	r3, r0, #1
 8002480:	d00a      	beq.n	8002498 <__swsetup_r+0xbc>
 8002482:	2300      	movs	r3, #0
 8002484:	60a3      	str	r3, [r4, #8]
 8002486:	6963      	ldr	r3, [r4, #20]
 8002488:	425b      	negs	r3, r3
 800248a:	61a3      	str	r3, [r4, #24]
 800248c:	6923      	ldr	r3, [r4, #16]
 800248e:	b943      	cbnz	r3, 80024a2 <__swsetup_r+0xc6>
 8002490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002494:	d1ba      	bne.n	800240c <__swsetup_r+0x30>
 8002496:	bd70      	pop	{r4, r5, r6, pc}
 8002498:	0781      	lsls	r1, r0, #30
 800249a:	bf58      	it	pl
 800249c:	6963      	ldrpl	r3, [r4, #20]
 800249e:	60a3      	str	r3, [r4, #8]
 80024a0:	e7f4      	b.n	800248c <__swsetup_r+0xb0>
 80024a2:	2000      	movs	r0, #0
 80024a4:	e7f7      	b.n	8002496 <__swsetup_r+0xba>
 80024a6:	bf00      	nop
 80024a8:	2000001c 	.word	0x2000001c
 80024ac:	08002dfc 	.word	0x08002dfc
 80024b0:	08002e1c 	.word	0x08002e1c
 80024b4:	08002ddc 	.word	0x08002ddc

080024b8 <abort>:
 80024b8:	b508      	push	{r3, lr}
 80024ba:	2006      	movs	r0, #6
 80024bc:	f000 fb3c 	bl	8002b38 <raise>
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7fe fa2f 	bl	8000924 <_exit>
	...

080024c8 <__sflush_r>:
 80024c8:	898a      	ldrh	r2, [r1, #12]
 80024ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ce:	4605      	mov	r5, r0
 80024d0:	0710      	lsls	r0, r2, #28
 80024d2:	460c      	mov	r4, r1
 80024d4:	d458      	bmi.n	8002588 <__sflush_r+0xc0>
 80024d6:	684b      	ldr	r3, [r1, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	dc05      	bgt.n	80024e8 <__sflush_r+0x20>
 80024dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	dc02      	bgt.n	80024e8 <__sflush_r+0x20>
 80024e2:	2000      	movs	r0, #0
 80024e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024ea:	2e00      	cmp	r6, #0
 80024ec:	d0f9      	beq.n	80024e2 <__sflush_r+0x1a>
 80024ee:	2300      	movs	r3, #0
 80024f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80024f4:	682f      	ldr	r7, [r5, #0]
 80024f6:	602b      	str	r3, [r5, #0]
 80024f8:	d032      	beq.n	8002560 <__sflush_r+0x98>
 80024fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024fc:	89a3      	ldrh	r3, [r4, #12]
 80024fe:	075a      	lsls	r2, r3, #29
 8002500:	d505      	bpl.n	800250e <__sflush_r+0x46>
 8002502:	6863      	ldr	r3, [r4, #4]
 8002504:	1ac0      	subs	r0, r0, r3
 8002506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002508:	b10b      	cbz	r3, 800250e <__sflush_r+0x46>
 800250a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800250c:	1ac0      	subs	r0, r0, r3
 800250e:	2300      	movs	r3, #0
 8002510:	4602      	mov	r2, r0
 8002512:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002514:	6a21      	ldr	r1, [r4, #32]
 8002516:	4628      	mov	r0, r5
 8002518:	47b0      	blx	r6
 800251a:	1c43      	adds	r3, r0, #1
 800251c:	89a3      	ldrh	r3, [r4, #12]
 800251e:	d106      	bne.n	800252e <__sflush_r+0x66>
 8002520:	6829      	ldr	r1, [r5, #0]
 8002522:	291d      	cmp	r1, #29
 8002524:	d82c      	bhi.n	8002580 <__sflush_r+0xb8>
 8002526:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <__sflush_r+0x108>)
 8002528:	40ca      	lsrs	r2, r1
 800252a:	07d6      	lsls	r6, r2, #31
 800252c:	d528      	bpl.n	8002580 <__sflush_r+0xb8>
 800252e:	2200      	movs	r2, #0
 8002530:	6062      	str	r2, [r4, #4]
 8002532:	04d9      	lsls	r1, r3, #19
 8002534:	6922      	ldr	r2, [r4, #16]
 8002536:	6022      	str	r2, [r4, #0]
 8002538:	d504      	bpl.n	8002544 <__sflush_r+0x7c>
 800253a:	1c42      	adds	r2, r0, #1
 800253c:	d101      	bne.n	8002542 <__sflush_r+0x7a>
 800253e:	682b      	ldr	r3, [r5, #0]
 8002540:	b903      	cbnz	r3, 8002544 <__sflush_r+0x7c>
 8002542:	6560      	str	r0, [r4, #84]	; 0x54
 8002544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002546:	602f      	str	r7, [r5, #0]
 8002548:	2900      	cmp	r1, #0
 800254a:	d0ca      	beq.n	80024e2 <__sflush_r+0x1a>
 800254c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002550:	4299      	cmp	r1, r3
 8002552:	d002      	beq.n	800255a <__sflush_r+0x92>
 8002554:	4628      	mov	r0, r5
 8002556:	f000 f9d7 	bl	8002908 <_free_r>
 800255a:	2000      	movs	r0, #0
 800255c:	6360      	str	r0, [r4, #52]	; 0x34
 800255e:	e7c1      	b.n	80024e4 <__sflush_r+0x1c>
 8002560:	6a21      	ldr	r1, [r4, #32]
 8002562:	2301      	movs	r3, #1
 8002564:	4628      	mov	r0, r5
 8002566:	47b0      	blx	r6
 8002568:	1c41      	adds	r1, r0, #1
 800256a:	d1c7      	bne.n	80024fc <__sflush_r+0x34>
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0c4      	beq.n	80024fc <__sflush_r+0x34>
 8002572:	2b1d      	cmp	r3, #29
 8002574:	d001      	beq.n	800257a <__sflush_r+0xb2>
 8002576:	2b16      	cmp	r3, #22
 8002578:	d101      	bne.n	800257e <__sflush_r+0xb6>
 800257a:	602f      	str	r7, [r5, #0]
 800257c:	e7b1      	b.n	80024e2 <__sflush_r+0x1a>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002584:	81a3      	strh	r3, [r4, #12]
 8002586:	e7ad      	b.n	80024e4 <__sflush_r+0x1c>
 8002588:	690f      	ldr	r7, [r1, #16]
 800258a:	2f00      	cmp	r7, #0
 800258c:	d0a9      	beq.n	80024e2 <__sflush_r+0x1a>
 800258e:	0793      	lsls	r3, r2, #30
 8002590:	680e      	ldr	r6, [r1, #0]
 8002592:	bf08      	it	eq
 8002594:	694b      	ldreq	r3, [r1, #20]
 8002596:	600f      	str	r7, [r1, #0]
 8002598:	bf18      	it	ne
 800259a:	2300      	movne	r3, #0
 800259c:	eba6 0807 	sub.w	r8, r6, r7
 80025a0:	608b      	str	r3, [r1, #8]
 80025a2:	f1b8 0f00 	cmp.w	r8, #0
 80025a6:	dd9c      	ble.n	80024e2 <__sflush_r+0x1a>
 80025a8:	6a21      	ldr	r1, [r4, #32]
 80025aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025ac:	4643      	mov	r3, r8
 80025ae:	463a      	mov	r2, r7
 80025b0:	4628      	mov	r0, r5
 80025b2:	47b0      	blx	r6
 80025b4:	2800      	cmp	r0, #0
 80025b6:	dc06      	bgt.n	80025c6 <__sflush_r+0xfe>
 80025b8:	89a3      	ldrh	r3, [r4, #12]
 80025ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025be:	81a3      	strh	r3, [r4, #12]
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c4:	e78e      	b.n	80024e4 <__sflush_r+0x1c>
 80025c6:	4407      	add	r7, r0
 80025c8:	eba8 0800 	sub.w	r8, r8, r0
 80025cc:	e7e9      	b.n	80025a2 <__sflush_r+0xda>
 80025ce:	bf00      	nop
 80025d0:	20400001 	.word	0x20400001

080025d4 <_fflush_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	690b      	ldr	r3, [r1, #16]
 80025d8:	4605      	mov	r5, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	b913      	cbnz	r3, 80025e4 <_fflush_r+0x10>
 80025de:	2500      	movs	r5, #0
 80025e0:	4628      	mov	r0, r5
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
 80025e4:	b118      	cbz	r0, 80025ee <_fflush_r+0x1a>
 80025e6:	6983      	ldr	r3, [r0, #24]
 80025e8:	b90b      	cbnz	r3, 80025ee <_fflush_r+0x1a>
 80025ea:	f000 f887 	bl	80026fc <__sinit>
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <_fflush_r+0x6c>)
 80025f0:	429c      	cmp	r4, r3
 80025f2:	d11b      	bne.n	800262c <_fflush_r+0x58>
 80025f4:	686c      	ldr	r4, [r5, #4]
 80025f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ef      	beq.n	80025de <_fflush_r+0xa>
 80025fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002600:	07d0      	lsls	r0, r2, #31
 8002602:	d404      	bmi.n	800260e <_fflush_r+0x3a>
 8002604:	0599      	lsls	r1, r3, #22
 8002606:	d402      	bmi.n	800260e <_fflush_r+0x3a>
 8002608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800260a:	f000 f915 	bl	8002838 <__retarget_lock_acquire_recursive>
 800260e:	4628      	mov	r0, r5
 8002610:	4621      	mov	r1, r4
 8002612:	f7ff ff59 	bl	80024c8 <__sflush_r>
 8002616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002618:	07da      	lsls	r2, r3, #31
 800261a:	4605      	mov	r5, r0
 800261c:	d4e0      	bmi.n	80025e0 <_fflush_r+0xc>
 800261e:	89a3      	ldrh	r3, [r4, #12]
 8002620:	059b      	lsls	r3, r3, #22
 8002622:	d4dd      	bmi.n	80025e0 <_fflush_r+0xc>
 8002624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002626:	f000 f908 	bl	800283a <__retarget_lock_release_recursive>
 800262a:	e7d9      	b.n	80025e0 <_fflush_r+0xc>
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <_fflush_r+0x70>)
 800262e:	429c      	cmp	r4, r3
 8002630:	d101      	bne.n	8002636 <_fflush_r+0x62>
 8002632:	68ac      	ldr	r4, [r5, #8]
 8002634:	e7df      	b.n	80025f6 <_fflush_r+0x22>
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <_fflush_r+0x74>)
 8002638:	429c      	cmp	r4, r3
 800263a:	bf08      	it	eq
 800263c:	68ec      	ldreq	r4, [r5, #12]
 800263e:	e7da      	b.n	80025f6 <_fflush_r+0x22>
 8002640:	08002dfc 	.word	0x08002dfc
 8002644:	08002e1c 	.word	0x08002e1c
 8002648:	08002ddc 	.word	0x08002ddc

0800264c <std>:
 800264c:	2300      	movs	r3, #0
 800264e:	b510      	push	{r4, lr}
 8002650:	4604      	mov	r4, r0
 8002652:	e9c0 3300 	strd	r3, r3, [r0]
 8002656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800265a:	6083      	str	r3, [r0, #8]
 800265c:	8181      	strh	r1, [r0, #12]
 800265e:	6643      	str	r3, [r0, #100]	; 0x64
 8002660:	81c2      	strh	r2, [r0, #14]
 8002662:	6183      	str	r3, [r0, #24]
 8002664:	4619      	mov	r1, r3
 8002666:	2208      	movs	r2, #8
 8002668:	305c      	adds	r0, #92	; 0x5c
 800266a:	f7ff fb6f 	bl	8001d4c <memset>
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <std+0x38>)
 8002670:	6263      	str	r3, [r4, #36]	; 0x24
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <std+0x3c>)
 8002674:	62a3      	str	r3, [r4, #40]	; 0x28
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <std+0x40>)
 8002678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <std+0x44>)
 800267c:	6224      	str	r4, [r4, #32]
 800267e:	6323      	str	r3, [r4, #48]	; 0x30
 8002680:	bd10      	pop	{r4, pc}
 8002682:	bf00      	nop
 8002684:	08002b71 	.word	0x08002b71
 8002688:	08002b93 	.word	0x08002b93
 800268c:	08002bcb 	.word	0x08002bcb
 8002690:	08002bef 	.word	0x08002bef

08002694 <_cleanup_r>:
 8002694:	4901      	ldr	r1, [pc, #4]	; (800269c <_cleanup_r+0x8>)
 8002696:	f000 b8af 	b.w	80027f8 <_fwalk_reent>
 800269a:	bf00      	nop
 800269c:	080025d5 	.word	0x080025d5

080026a0 <__sfmoreglue>:
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	2268      	movs	r2, #104	; 0x68
 80026a4:	1e4d      	subs	r5, r1, #1
 80026a6:	4355      	muls	r5, r2
 80026a8:	460e      	mov	r6, r1
 80026aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026ae:	f000 f997 	bl	80029e0 <_malloc_r>
 80026b2:	4604      	mov	r4, r0
 80026b4:	b140      	cbz	r0, 80026c8 <__sfmoreglue+0x28>
 80026b6:	2100      	movs	r1, #0
 80026b8:	e9c0 1600 	strd	r1, r6, [r0]
 80026bc:	300c      	adds	r0, #12
 80026be:	60a0      	str	r0, [r4, #8]
 80026c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026c4:	f7ff fb42 	bl	8001d4c <memset>
 80026c8:	4620      	mov	r0, r4
 80026ca:	bd70      	pop	{r4, r5, r6, pc}

080026cc <__sfp_lock_acquire>:
 80026cc:	4801      	ldr	r0, [pc, #4]	; (80026d4 <__sfp_lock_acquire+0x8>)
 80026ce:	f000 b8b3 	b.w	8002838 <__retarget_lock_acquire_recursive>
 80026d2:	bf00      	nop
 80026d4:	200000a9 	.word	0x200000a9

080026d8 <__sfp_lock_release>:
 80026d8:	4801      	ldr	r0, [pc, #4]	; (80026e0 <__sfp_lock_release+0x8>)
 80026da:	f000 b8ae 	b.w	800283a <__retarget_lock_release_recursive>
 80026de:	bf00      	nop
 80026e0:	200000a9 	.word	0x200000a9

080026e4 <__sinit_lock_acquire>:
 80026e4:	4801      	ldr	r0, [pc, #4]	; (80026ec <__sinit_lock_acquire+0x8>)
 80026e6:	f000 b8a7 	b.w	8002838 <__retarget_lock_acquire_recursive>
 80026ea:	bf00      	nop
 80026ec:	200000aa 	.word	0x200000aa

080026f0 <__sinit_lock_release>:
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <__sinit_lock_release+0x8>)
 80026f2:	f000 b8a2 	b.w	800283a <__retarget_lock_release_recursive>
 80026f6:	bf00      	nop
 80026f8:	200000aa 	.word	0x200000aa

080026fc <__sinit>:
 80026fc:	b510      	push	{r4, lr}
 80026fe:	4604      	mov	r4, r0
 8002700:	f7ff fff0 	bl	80026e4 <__sinit_lock_acquire>
 8002704:	69a3      	ldr	r3, [r4, #24]
 8002706:	b11b      	cbz	r3, 8002710 <__sinit+0x14>
 8002708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800270c:	f7ff bff0 	b.w	80026f0 <__sinit_lock_release>
 8002710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002714:	6523      	str	r3, [r4, #80]	; 0x50
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <__sinit+0x68>)
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <__sinit+0x6c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	62a2      	str	r2, [r4, #40]	; 0x28
 800271e:	42a3      	cmp	r3, r4
 8002720:	bf04      	itt	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	61a3      	streq	r3, [r4, #24]
 8002726:	4620      	mov	r0, r4
 8002728:	f000 f820 	bl	800276c <__sfp>
 800272c:	6060      	str	r0, [r4, #4]
 800272e:	4620      	mov	r0, r4
 8002730:	f000 f81c 	bl	800276c <__sfp>
 8002734:	60a0      	str	r0, [r4, #8]
 8002736:	4620      	mov	r0, r4
 8002738:	f000 f818 	bl	800276c <__sfp>
 800273c:	2200      	movs	r2, #0
 800273e:	60e0      	str	r0, [r4, #12]
 8002740:	2104      	movs	r1, #4
 8002742:	6860      	ldr	r0, [r4, #4]
 8002744:	f7ff ff82 	bl	800264c <std>
 8002748:	68a0      	ldr	r0, [r4, #8]
 800274a:	2201      	movs	r2, #1
 800274c:	2109      	movs	r1, #9
 800274e:	f7ff ff7d 	bl	800264c <std>
 8002752:	68e0      	ldr	r0, [r4, #12]
 8002754:	2202      	movs	r2, #2
 8002756:	2112      	movs	r1, #18
 8002758:	f7ff ff78 	bl	800264c <std>
 800275c:	2301      	movs	r3, #1
 800275e:	61a3      	str	r3, [r4, #24]
 8002760:	e7d2      	b.n	8002708 <__sinit+0xc>
 8002762:	bf00      	nop
 8002764:	08002da4 	.word	0x08002da4
 8002768:	08002695 	.word	0x08002695

0800276c <__sfp>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	4607      	mov	r7, r0
 8002770:	f7ff ffac 	bl	80026cc <__sfp_lock_acquire>
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <__sfp+0x84>)
 8002776:	681e      	ldr	r6, [r3, #0]
 8002778:	69b3      	ldr	r3, [r6, #24]
 800277a:	b913      	cbnz	r3, 8002782 <__sfp+0x16>
 800277c:	4630      	mov	r0, r6
 800277e:	f7ff ffbd 	bl	80026fc <__sinit>
 8002782:	3648      	adds	r6, #72	; 0x48
 8002784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002788:	3b01      	subs	r3, #1
 800278a:	d503      	bpl.n	8002794 <__sfp+0x28>
 800278c:	6833      	ldr	r3, [r6, #0]
 800278e:	b30b      	cbz	r3, 80027d4 <__sfp+0x68>
 8002790:	6836      	ldr	r6, [r6, #0]
 8002792:	e7f7      	b.n	8002784 <__sfp+0x18>
 8002794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002798:	b9d5      	cbnz	r5, 80027d0 <__sfp+0x64>
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <__sfp+0x88>)
 800279c:	60e3      	str	r3, [r4, #12]
 800279e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027a2:	6665      	str	r5, [r4, #100]	; 0x64
 80027a4:	f000 f847 	bl	8002836 <__retarget_lock_init_recursive>
 80027a8:	f7ff ff96 	bl	80026d8 <__sfp_lock_release>
 80027ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027b4:	6025      	str	r5, [r4, #0]
 80027b6:	61a5      	str	r5, [r4, #24]
 80027b8:	2208      	movs	r2, #8
 80027ba:	4629      	mov	r1, r5
 80027bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027c0:	f7ff fac4 	bl	8001d4c <memset>
 80027c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027cc:	4620      	mov	r0, r4
 80027ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d0:	3468      	adds	r4, #104	; 0x68
 80027d2:	e7d9      	b.n	8002788 <__sfp+0x1c>
 80027d4:	2104      	movs	r1, #4
 80027d6:	4638      	mov	r0, r7
 80027d8:	f7ff ff62 	bl	80026a0 <__sfmoreglue>
 80027dc:	4604      	mov	r4, r0
 80027de:	6030      	str	r0, [r6, #0]
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d1d5      	bne.n	8002790 <__sfp+0x24>
 80027e4:	f7ff ff78 	bl	80026d8 <__sfp_lock_release>
 80027e8:	230c      	movs	r3, #12
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	e7ee      	b.n	80027cc <__sfp+0x60>
 80027ee:	bf00      	nop
 80027f0:	08002da4 	.word	0x08002da4
 80027f4:	ffff0001 	.word	0xffff0001

080027f8 <_fwalk_reent>:
 80027f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027fc:	4606      	mov	r6, r0
 80027fe:	4688      	mov	r8, r1
 8002800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002804:	2700      	movs	r7, #0
 8002806:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800280a:	f1b9 0901 	subs.w	r9, r9, #1
 800280e:	d505      	bpl.n	800281c <_fwalk_reent+0x24>
 8002810:	6824      	ldr	r4, [r4, #0]
 8002812:	2c00      	cmp	r4, #0
 8002814:	d1f7      	bne.n	8002806 <_fwalk_reent+0xe>
 8002816:	4638      	mov	r0, r7
 8002818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800281c:	89ab      	ldrh	r3, [r5, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d907      	bls.n	8002832 <_fwalk_reent+0x3a>
 8002822:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002826:	3301      	adds	r3, #1
 8002828:	d003      	beq.n	8002832 <_fwalk_reent+0x3a>
 800282a:	4629      	mov	r1, r5
 800282c:	4630      	mov	r0, r6
 800282e:	47c0      	blx	r8
 8002830:	4307      	orrs	r7, r0
 8002832:	3568      	adds	r5, #104	; 0x68
 8002834:	e7e9      	b.n	800280a <_fwalk_reent+0x12>

08002836 <__retarget_lock_init_recursive>:
 8002836:	4770      	bx	lr

08002838 <__retarget_lock_acquire_recursive>:
 8002838:	4770      	bx	lr

0800283a <__retarget_lock_release_recursive>:
 800283a:	4770      	bx	lr

0800283c <__swhatbuf_r>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	460e      	mov	r6, r1
 8002840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002844:	2900      	cmp	r1, #0
 8002846:	b096      	sub	sp, #88	; 0x58
 8002848:	4614      	mov	r4, r2
 800284a:	461d      	mov	r5, r3
 800284c:	da08      	bge.n	8002860 <__swhatbuf_r+0x24>
 800284e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	602a      	str	r2, [r5, #0]
 8002856:	061a      	lsls	r2, r3, #24
 8002858:	d410      	bmi.n	800287c <__swhatbuf_r+0x40>
 800285a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285e:	e00e      	b.n	800287e <__swhatbuf_r+0x42>
 8002860:	466a      	mov	r2, sp
 8002862:	f000 f9eb 	bl	8002c3c <_fstat_r>
 8002866:	2800      	cmp	r0, #0
 8002868:	dbf1      	blt.n	800284e <__swhatbuf_r+0x12>
 800286a:	9a01      	ldr	r2, [sp, #4]
 800286c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002870:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002874:	425a      	negs	r2, r3
 8002876:	415a      	adcs	r2, r3
 8002878:	602a      	str	r2, [r5, #0]
 800287a:	e7ee      	b.n	800285a <__swhatbuf_r+0x1e>
 800287c:	2340      	movs	r3, #64	; 0x40
 800287e:	2000      	movs	r0, #0
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	b016      	add	sp, #88	; 0x58
 8002884:	bd70      	pop	{r4, r5, r6, pc}
	...

08002888 <__smakebuf_r>:
 8002888:	898b      	ldrh	r3, [r1, #12]
 800288a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800288c:	079d      	lsls	r5, r3, #30
 800288e:	4606      	mov	r6, r0
 8002890:	460c      	mov	r4, r1
 8002892:	d507      	bpl.n	80028a4 <__smakebuf_r+0x1c>
 8002894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002898:	6023      	str	r3, [r4, #0]
 800289a:	6123      	str	r3, [r4, #16]
 800289c:	2301      	movs	r3, #1
 800289e:	6163      	str	r3, [r4, #20]
 80028a0:	b002      	add	sp, #8
 80028a2:	bd70      	pop	{r4, r5, r6, pc}
 80028a4:	ab01      	add	r3, sp, #4
 80028a6:	466a      	mov	r2, sp
 80028a8:	f7ff ffc8 	bl	800283c <__swhatbuf_r>
 80028ac:	9900      	ldr	r1, [sp, #0]
 80028ae:	4605      	mov	r5, r0
 80028b0:	4630      	mov	r0, r6
 80028b2:	f000 f895 	bl	80029e0 <_malloc_r>
 80028b6:	b948      	cbnz	r0, 80028cc <__smakebuf_r+0x44>
 80028b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028bc:	059a      	lsls	r2, r3, #22
 80028be:	d4ef      	bmi.n	80028a0 <__smakebuf_r+0x18>
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	81a3      	strh	r3, [r4, #12]
 80028ca:	e7e3      	b.n	8002894 <__smakebuf_r+0xc>
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <__smakebuf_r+0x7c>)
 80028ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80028d0:	89a3      	ldrh	r3, [r4, #12]
 80028d2:	6020      	str	r0, [r4, #0]
 80028d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d8:	81a3      	strh	r3, [r4, #12]
 80028da:	9b00      	ldr	r3, [sp, #0]
 80028dc:	6163      	str	r3, [r4, #20]
 80028de:	9b01      	ldr	r3, [sp, #4]
 80028e0:	6120      	str	r0, [r4, #16]
 80028e2:	b15b      	cbz	r3, 80028fc <__smakebuf_r+0x74>
 80028e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028e8:	4630      	mov	r0, r6
 80028ea:	f000 f9b9 	bl	8002c60 <_isatty_r>
 80028ee:	b128      	cbz	r0, 80028fc <__smakebuf_r+0x74>
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	81a3      	strh	r3, [r4, #12]
 80028fc:	89a0      	ldrh	r0, [r4, #12]
 80028fe:	4305      	orrs	r5, r0
 8002900:	81a5      	strh	r5, [r4, #12]
 8002902:	e7cd      	b.n	80028a0 <__smakebuf_r+0x18>
 8002904:	08002695 	.word	0x08002695

08002908 <_free_r>:
 8002908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800290a:	2900      	cmp	r1, #0
 800290c:	d044      	beq.n	8002998 <_free_r+0x90>
 800290e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002912:	9001      	str	r0, [sp, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f1a1 0404 	sub.w	r4, r1, #4
 800291a:	bfb8      	it	lt
 800291c:	18e4      	addlt	r4, r4, r3
 800291e:	f000 f9c1 	bl	8002ca4 <__malloc_lock>
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <_free_r+0x94>)
 8002924:	9801      	ldr	r0, [sp, #4]
 8002926:	6813      	ldr	r3, [r2, #0]
 8002928:	b933      	cbnz	r3, 8002938 <_free_r+0x30>
 800292a:	6063      	str	r3, [r4, #4]
 800292c:	6014      	str	r4, [r2, #0]
 800292e:	b003      	add	sp, #12
 8002930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002934:	f000 b9bc 	b.w	8002cb0 <__malloc_unlock>
 8002938:	42a3      	cmp	r3, r4
 800293a:	d908      	bls.n	800294e <_free_r+0x46>
 800293c:	6825      	ldr	r5, [r4, #0]
 800293e:	1961      	adds	r1, r4, r5
 8002940:	428b      	cmp	r3, r1
 8002942:	bf01      	itttt	eq
 8002944:	6819      	ldreq	r1, [r3, #0]
 8002946:	685b      	ldreq	r3, [r3, #4]
 8002948:	1949      	addeq	r1, r1, r5
 800294a:	6021      	streq	r1, [r4, #0]
 800294c:	e7ed      	b.n	800292a <_free_r+0x22>
 800294e:	461a      	mov	r2, r3
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	b10b      	cbz	r3, 8002958 <_free_r+0x50>
 8002954:	42a3      	cmp	r3, r4
 8002956:	d9fa      	bls.n	800294e <_free_r+0x46>
 8002958:	6811      	ldr	r1, [r2, #0]
 800295a:	1855      	adds	r5, r2, r1
 800295c:	42a5      	cmp	r5, r4
 800295e:	d10b      	bne.n	8002978 <_free_r+0x70>
 8002960:	6824      	ldr	r4, [r4, #0]
 8002962:	4421      	add	r1, r4
 8002964:	1854      	adds	r4, r2, r1
 8002966:	42a3      	cmp	r3, r4
 8002968:	6011      	str	r1, [r2, #0]
 800296a:	d1e0      	bne.n	800292e <_free_r+0x26>
 800296c:	681c      	ldr	r4, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	6053      	str	r3, [r2, #4]
 8002972:	4421      	add	r1, r4
 8002974:	6011      	str	r1, [r2, #0]
 8002976:	e7da      	b.n	800292e <_free_r+0x26>
 8002978:	d902      	bls.n	8002980 <_free_r+0x78>
 800297a:	230c      	movs	r3, #12
 800297c:	6003      	str	r3, [r0, #0]
 800297e:	e7d6      	b.n	800292e <_free_r+0x26>
 8002980:	6825      	ldr	r5, [r4, #0]
 8002982:	1961      	adds	r1, r4, r5
 8002984:	428b      	cmp	r3, r1
 8002986:	bf04      	itt	eq
 8002988:	6819      	ldreq	r1, [r3, #0]
 800298a:	685b      	ldreq	r3, [r3, #4]
 800298c:	6063      	str	r3, [r4, #4]
 800298e:	bf04      	itt	eq
 8002990:	1949      	addeq	r1, r1, r5
 8002992:	6021      	streq	r1, [r4, #0]
 8002994:	6054      	str	r4, [r2, #4]
 8002996:	e7ca      	b.n	800292e <_free_r+0x26>
 8002998:	b003      	add	sp, #12
 800299a:	bd30      	pop	{r4, r5, pc}
 800299c:	200000ac 	.word	0x200000ac

080029a0 <sbrk_aligned>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4e0e      	ldr	r6, [pc, #56]	; (80029dc <sbrk_aligned+0x3c>)
 80029a4:	460c      	mov	r4, r1
 80029a6:	6831      	ldr	r1, [r6, #0]
 80029a8:	4605      	mov	r5, r0
 80029aa:	b911      	cbnz	r1, 80029b2 <sbrk_aligned+0x12>
 80029ac:	f000 f88c 	bl	8002ac8 <_sbrk_r>
 80029b0:	6030      	str	r0, [r6, #0]
 80029b2:	4621      	mov	r1, r4
 80029b4:	4628      	mov	r0, r5
 80029b6:	f000 f887 	bl	8002ac8 <_sbrk_r>
 80029ba:	1c43      	adds	r3, r0, #1
 80029bc:	d00a      	beq.n	80029d4 <sbrk_aligned+0x34>
 80029be:	1cc4      	adds	r4, r0, #3
 80029c0:	f024 0403 	bic.w	r4, r4, #3
 80029c4:	42a0      	cmp	r0, r4
 80029c6:	d007      	beq.n	80029d8 <sbrk_aligned+0x38>
 80029c8:	1a21      	subs	r1, r4, r0
 80029ca:	4628      	mov	r0, r5
 80029cc:	f000 f87c 	bl	8002ac8 <_sbrk_r>
 80029d0:	3001      	adds	r0, #1
 80029d2:	d101      	bne.n	80029d8 <sbrk_aligned+0x38>
 80029d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80029d8:	4620      	mov	r0, r4
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	200000b0 	.word	0x200000b0

080029e0 <_malloc_r>:
 80029e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e4:	1ccd      	adds	r5, r1, #3
 80029e6:	f025 0503 	bic.w	r5, r5, #3
 80029ea:	3508      	adds	r5, #8
 80029ec:	2d0c      	cmp	r5, #12
 80029ee:	bf38      	it	cc
 80029f0:	250c      	movcc	r5, #12
 80029f2:	2d00      	cmp	r5, #0
 80029f4:	4607      	mov	r7, r0
 80029f6:	db01      	blt.n	80029fc <_malloc_r+0x1c>
 80029f8:	42a9      	cmp	r1, r5
 80029fa:	d905      	bls.n	8002a08 <_malloc_r+0x28>
 80029fc:	230c      	movs	r3, #12
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	2600      	movs	r6, #0
 8002a02:	4630      	mov	r0, r6
 8002a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a08:	4e2e      	ldr	r6, [pc, #184]	; (8002ac4 <_malloc_r+0xe4>)
 8002a0a:	f000 f94b 	bl	8002ca4 <__malloc_lock>
 8002a0e:	6833      	ldr	r3, [r6, #0]
 8002a10:	461c      	mov	r4, r3
 8002a12:	bb34      	cbnz	r4, 8002a62 <_malloc_r+0x82>
 8002a14:	4629      	mov	r1, r5
 8002a16:	4638      	mov	r0, r7
 8002a18:	f7ff ffc2 	bl	80029a0 <sbrk_aligned>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	4604      	mov	r4, r0
 8002a20:	d14d      	bne.n	8002abe <_malloc_r+0xde>
 8002a22:	6834      	ldr	r4, [r6, #0]
 8002a24:	4626      	mov	r6, r4
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	d140      	bne.n	8002aac <_malloc_r+0xcc>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	4631      	mov	r1, r6
 8002a2e:	4638      	mov	r0, r7
 8002a30:	eb04 0803 	add.w	r8, r4, r3
 8002a34:	f000 f848 	bl	8002ac8 <_sbrk_r>
 8002a38:	4580      	cmp	r8, r0
 8002a3a:	d13a      	bne.n	8002ab2 <_malloc_r+0xd2>
 8002a3c:	6821      	ldr	r1, [r4, #0]
 8002a3e:	3503      	adds	r5, #3
 8002a40:	1a6d      	subs	r5, r5, r1
 8002a42:	f025 0503 	bic.w	r5, r5, #3
 8002a46:	3508      	adds	r5, #8
 8002a48:	2d0c      	cmp	r5, #12
 8002a4a:	bf38      	it	cc
 8002a4c:	250c      	movcc	r5, #12
 8002a4e:	4629      	mov	r1, r5
 8002a50:	4638      	mov	r0, r7
 8002a52:	f7ff ffa5 	bl	80029a0 <sbrk_aligned>
 8002a56:	3001      	adds	r0, #1
 8002a58:	d02b      	beq.n	8002ab2 <_malloc_r+0xd2>
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	442b      	add	r3, r5
 8002a5e:	6023      	str	r3, [r4, #0]
 8002a60:	e00e      	b.n	8002a80 <_malloc_r+0xa0>
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	1b52      	subs	r2, r2, r5
 8002a66:	d41e      	bmi.n	8002aa6 <_malloc_r+0xc6>
 8002a68:	2a0b      	cmp	r2, #11
 8002a6a:	d916      	bls.n	8002a9a <_malloc_r+0xba>
 8002a6c:	1961      	adds	r1, r4, r5
 8002a6e:	42a3      	cmp	r3, r4
 8002a70:	6025      	str	r5, [r4, #0]
 8002a72:	bf18      	it	ne
 8002a74:	6059      	strne	r1, [r3, #4]
 8002a76:	6863      	ldr	r3, [r4, #4]
 8002a78:	bf08      	it	eq
 8002a7a:	6031      	streq	r1, [r6, #0]
 8002a7c:	5162      	str	r2, [r4, r5]
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	4638      	mov	r0, r7
 8002a82:	f104 060b 	add.w	r6, r4, #11
 8002a86:	f000 f913 	bl	8002cb0 <__malloc_unlock>
 8002a8a:	f026 0607 	bic.w	r6, r6, #7
 8002a8e:	1d23      	adds	r3, r4, #4
 8002a90:	1af2      	subs	r2, r6, r3
 8002a92:	d0b6      	beq.n	8002a02 <_malloc_r+0x22>
 8002a94:	1b9b      	subs	r3, r3, r6
 8002a96:	50a3      	str	r3, [r4, r2]
 8002a98:	e7b3      	b.n	8002a02 <_malloc_r+0x22>
 8002a9a:	6862      	ldr	r2, [r4, #4]
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	bf0c      	ite	eq
 8002aa0:	6032      	streq	r2, [r6, #0]
 8002aa2:	605a      	strne	r2, [r3, #4]
 8002aa4:	e7ec      	b.n	8002a80 <_malloc_r+0xa0>
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	6864      	ldr	r4, [r4, #4]
 8002aaa:	e7b2      	b.n	8002a12 <_malloc_r+0x32>
 8002aac:	4634      	mov	r4, r6
 8002aae:	6876      	ldr	r6, [r6, #4]
 8002ab0:	e7b9      	b.n	8002a26 <_malloc_r+0x46>
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	f000 f8fa 	bl	8002cb0 <__malloc_unlock>
 8002abc:	e7a1      	b.n	8002a02 <_malloc_r+0x22>
 8002abe:	6025      	str	r5, [r4, #0]
 8002ac0:	e7de      	b.n	8002a80 <_malloc_r+0xa0>
 8002ac2:	bf00      	nop
 8002ac4:	200000ac 	.word	0x200000ac

08002ac8 <_sbrk_r>:
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4d06      	ldr	r5, [pc, #24]	; (8002ae4 <_sbrk_r+0x1c>)
 8002acc:	2300      	movs	r3, #0
 8002ace:	4604      	mov	r4, r0
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	602b      	str	r3, [r5, #0]
 8002ad4:	f7fd ff9e 	bl	8000a14 <_sbrk>
 8002ad8:	1c43      	adds	r3, r0, #1
 8002ada:	d102      	bne.n	8002ae2 <_sbrk_r+0x1a>
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	b103      	cbz	r3, 8002ae2 <_sbrk_r+0x1a>
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
 8002ae4:	200000b4 	.word	0x200000b4

08002ae8 <_raise_r>:
 8002ae8:	291f      	cmp	r1, #31
 8002aea:	b538      	push	{r3, r4, r5, lr}
 8002aec:	4604      	mov	r4, r0
 8002aee:	460d      	mov	r5, r1
 8002af0:	d904      	bls.n	8002afc <_raise_r+0x14>
 8002af2:	2316      	movs	r3, #22
 8002af4:	6003      	str	r3, [r0, #0]
 8002af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002afa:	bd38      	pop	{r3, r4, r5, pc}
 8002afc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002afe:	b112      	cbz	r2, 8002b06 <_raise_r+0x1e>
 8002b00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b04:	b94b      	cbnz	r3, 8002b1a <_raise_r+0x32>
 8002b06:	4620      	mov	r0, r4
 8002b08:	f000 f830 	bl	8002b6c <_getpid_r>
 8002b0c:	462a      	mov	r2, r5
 8002b0e:	4601      	mov	r1, r0
 8002b10:	4620      	mov	r0, r4
 8002b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b16:	f000 b817 	b.w	8002b48 <_kill_r>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d00a      	beq.n	8002b34 <_raise_r+0x4c>
 8002b1e:	1c59      	adds	r1, r3, #1
 8002b20:	d103      	bne.n	8002b2a <_raise_r+0x42>
 8002b22:	2316      	movs	r3, #22
 8002b24:	6003      	str	r3, [r0, #0]
 8002b26:	2001      	movs	r0, #1
 8002b28:	e7e7      	b.n	8002afa <_raise_r+0x12>
 8002b2a:	2400      	movs	r4, #0
 8002b2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002b30:	4628      	mov	r0, r5
 8002b32:	4798      	blx	r3
 8002b34:	2000      	movs	r0, #0
 8002b36:	e7e0      	b.n	8002afa <_raise_r+0x12>

08002b38 <raise>:
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <raise+0xc>)
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	f7ff bfd3 	b.w	8002ae8 <_raise_r>
 8002b42:	bf00      	nop
 8002b44:	2000001c 	.word	0x2000001c

08002b48 <_kill_r>:
 8002b48:	b538      	push	{r3, r4, r5, lr}
 8002b4a:	4d07      	ldr	r5, [pc, #28]	; (8002b68 <_kill_r+0x20>)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	f7fd fed5 	bl	8000904 <_kill>
 8002b5a:	1c43      	adds	r3, r0, #1
 8002b5c:	d102      	bne.n	8002b64 <_kill_r+0x1c>
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	b103      	cbz	r3, 8002b64 <_kill_r+0x1c>
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	bd38      	pop	{r3, r4, r5, pc}
 8002b66:	bf00      	nop
 8002b68:	200000b4 	.word	0x200000b4

08002b6c <_getpid_r>:
 8002b6c:	f7fd bec2 	b.w	80008f4 <_getpid>

08002b70 <__sread>:
 8002b70:	b510      	push	{r4, lr}
 8002b72:	460c      	mov	r4, r1
 8002b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b78:	f000 f8a0 	bl	8002cbc <_read_r>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	bfab      	itete	ge
 8002b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b82:	89a3      	ldrhlt	r3, [r4, #12]
 8002b84:	181b      	addge	r3, r3, r0
 8002b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b8a:	bfac      	ite	ge
 8002b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b8e:	81a3      	strhlt	r3, [r4, #12]
 8002b90:	bd10      	pop	{r4, pc}

08002b92 <__swrite>:
 8002b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b96:	461f      	mov	r7, r3
 8002b98:	898b      	ldrh	r3, [r1, #12]
 8002b9a:	05db      	lsls	r3, r3, #23
 8002b9c:	4605      	mov	r5, r0
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	4616      	mov	r6, r2
 8002ba2:	d505      	bpl.n	8002bb0 <__swrite+0x1e>
 8002ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba8:	2302      	movs	r3, #2
 8002baa:	2200      	movs	r2, #0
 8002bac:	f000 f868 	bl	8002c80 <_lseek_r>
 8002bb0:	89a3      	ldrh	r3, [r4, #12]
 8002bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bba:	81a3      	strh	r3, [r4, #12]
 8002bbc:	4632      	mov	r2, r6
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc6:	f000 b817 	b.w	8002bf8 <_write_r>

08002bca <__sseek>:
 8002bca:	b510      	push	{r4, lr}
 8002bcc:	460c      	mov	r4, r1
 8002bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd2:	f000 f855 	bl	8002c80 <_lseek_r>
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	bf15      	itete	ne
 8002bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002be6:	81a3      	strheq	r3, [r4, #12]
 8002be8:	bf18      	it	ne
 8002bea:	81a3      	strhne	r3, [r4, #12]
 8002bec:	bd10      	pop	{r4, pc}

08002bee <__sclose>:
 8002bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bf2:	f000 b813 	b.w	8002c1c <_close_r>
	...

08002bf8 <_write_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4d07      	ldr	r5, [pc, #28]	; (8002c18 <_write_r+0x20>)
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	4608      	mov	r0, r1
 8002c00:	4611      	mov	r1, r2
 8002c02:	2200      	movs	r2, #0
 8002c04:	602a      	str	r2, [r5, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f7fd feb3 	bl	8000972 <_write>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d102      	bne.n	8002c16 <_write_r+0x1e>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	b103      	cbz	r3, 8002c16 <_write_r+0x1e>
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	200000b4 	.word	0x200000b4

08002c1c <_close_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4d06      	ldr	r5, [pc, #24]	; (8002c38 <_close_r+0x1c>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	f7fd febf 	bl	80009aa <_close>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_close_r+0x1a>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_close_r+0x1a>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	200000b4 	.word	0x200000b4

08002c3c <_fstat_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4d07      	ldr	r5, [pc, #28]	; (8002c5c <_fstat_r+0x20>)
 8002c40:	2300      	movs	r3, #0
 8002c42:	4604      	mov	r4, r0
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	602b      	str	r3, [r5, #0]
 8002c4a:	f7fd feba 	bl	80009c2 <_fstat>
 8002c4e:	1c43      	adds	r3, r0, #1
 8002c50:	d102      	bne.n	8002c58 <_fstat_r+0x1c>
 8002c52:	682b      	ldr	r3, [r5, #0]
 8002c54:	b103      	cbz	r3, 8002c58 <_fstat_r+0x1c>
 8002c56:	6023      	str	r3, [r4, #0]
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200000b4 	.word	0x200000b4

08002c60 <_isatty_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4d06      	ldr	r5, [pc, #24]	; (8002c7c <_isatty_r+0x1c>)
 8002c64:	2300      	movs	r3, #0
 8002c66:	4604      	mov	r4, r0
 8002c68:	4608      	mov	r0, r1
 8002c6a:	602b      	str	r3, [r5, #0]
 8002c6c:	f7fd feb9 	bl	80009e2 <_isatty>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d102      	bne.n	8002c7a <_isatty_r+0x1a>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	b103      	cbz	r3, 8002c7a <_isatty_r+0x1a>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	200000b4 	.word	0x200000b4

08002c80 <_lseek_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d07      	ldr	r5, [pc, #28]	; (8002ca0 <_lseek_r+0x20>)
 8002c84:	4604      	mov	r4, r0
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	602a      	str	r2, [r5, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7fd feb2 	bl	80009f8 <_lseek>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_lseek_r+0x1e>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_lseek_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	200000b4 	.word	0x200000b4

08002ca4 <__malloc_lock>:
 8002ca4:	4801      	ldr	r0, [pc, #4]	; (8002cac <__malloc_lock+0x8>)
 8002ca6:	f7ff bdc7 	b.w	8002838 <__retarget_lock_acquire_recursive>
 8002caa:	bf00      	nop
 8002cac:	200000a8 	.word	0x200000a8

08002cb0 <__malloc_unlock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <__malloc_unlock+0x8>)
 8002cb2:	f7ff bdc2 	b.w	800283a <__retarget_lock_release_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	200000a8 	.word	0x200000a8

08002cbc <_read_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4d07      	ldr	r5, [pc, #28]	; (8002cdc <_read_r+0x20>)
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	4608      	mov	r0, r1
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	602a      	str	r2, [r5, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f7fd fe34 	bl	8000938 <_read>
 8002cd0:	1c43      	adds	r3, r0, #1
 8002cd2:	d102      	bne.n	8002cda <_read_r+0x1e>
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	b103      	cbz	r3, 8002cda <_read_r+0x1e>
 8002cd8:	6023      	str	r3, [r4, #0]
 8002cda:	bd38      	pop	{r3, r4, r5, pc}
 8002cdc:	200000b4 	.word	0x200000b4

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
