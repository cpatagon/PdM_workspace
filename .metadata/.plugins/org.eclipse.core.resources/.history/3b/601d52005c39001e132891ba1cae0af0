/*
 * API_delay.c
 *
 *  Created on: 06-07-2023
 *      Author: lgomez
 */
#include "stm32f4xx_hal.h"  		// HAL (Hardware Abstraction Layer) para STM32F4.
#include "stm32f4xx_nucleo_144.h" 	// BSP (Board Support Package) para Nucleo-144.

#include <assert.h>
#include "API_delay.h"

/**
 * @brief Inicializa el objeto de retardo con la duración especificada.
 *
 * Esta función inicializa un objeto de retardo, estableciendo su duración y 
 * marcando el flag `running` como false. No inicia el conteo del retardo.
 *
 * @param delay Puntero al objeto de retardo.
 * @param duration Duración del retardo en ticks.
 */
void delayInit(delay_t *delay, tick_t duration) {
	assert(delay != NULL);
	assert(duration >= 0);
	delay->duration = duration;
	delay->running = false;
}

/**
 * @brief Lee y actualiza el estado del objeto de retardo.
 *
 * Si el retardo no está corriendo, toma una marca de tiempo y lo inicia. 
 * Si está corriendo, verifica si ha alcanzado su duración y, de ser así, 
 * reinicia el objeto y devuelve true.
 *
 * @param delay Puntero al objeto de retardo.
 * @return true si el retardo ha alcanzado su duración, false en caso contrario.
 */
bool_t delayRead(delay_t *delay) {
	static bool_t retValue; // Variable estática interna para retener el valor de retorno.
	retValue = false;
	assert(delay != NULL);
	assert(delay->duration >= 0);

	if (!delay->running) {
		delay->startTime = HAL_GetTick();
		delay->running = true;
	} else {
		if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
			delay->running = false;
			retValue = true;
		}
	}
	return retValue;
}

/**
 * @brief Establece una nueva duración para el objeto de retardo.
 *
 * @param delay Puntero al objeto de retardo.
 * @param duration Nueva duración en ticks.
 */
void delayWrite(delay_t *delay, tick_t duration) {
	assert(delay != NULL);
	assert(duration >= 0);
	delay->duration = duration;
}

