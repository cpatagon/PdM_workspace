/**
 * @file API_led.c
 * @brief Implementación de funciones para el manejo de LEDs usando SPI.
 * @date Aug 6, 2023
 * @author lgomez
 */

#include <stdint.h>
#include "API_spi.h"
#include "API_delay.h"

uint8_t led_address[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
uint8_t clear[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t matrizEncendida[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static uint8_t ghost2[] = { 0x18, 0x7e, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xa5 };
static uint8_t ghost3[] = { 0x18, 0x7e, 0xdb, 0xff, 0xff, 0xff, 0xff, 0xa5 };
static uint8_t ghost4[] = { 0x18, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xff, 0xa5 };
static uint8_t ghost5[] = { 0x18, 0x7e, 0x99, 0x99, 0xff, 0xff, 0xff, 0xa5 };
static uint8_t ghost6[] = { 0x3c, 0x7e, 0xd7, 0xff, 0xc3, 0xff, 0xff, 0xdb };

/**
 * @brief Enumeración para definir estados o modos de operación de los LEDs.
 */
typedef enum {
	SET_ini, A, B, C, GOOD, BAD,
} def_Led_t;

typedef enum {
	GHOST1, GHOST2, GHOST3, GHOST4, GHOST5, GHOST6
} State_GHOT_t;

State_GHOT_t tipo_fantasma = GHOST1;

/**
 * @brief Limpia o apaga todos los LEDs.
 *
 * Esta función recorre todas las direcciones de LEDs y les asigna el valor de apagado.
 */
void clear_led(void) {
	for (int j = 0; j < 8; j++) {
		spi_write(led_address[j], clear[j]);
	}
}

/**
 * @brief Inicializa los LEDs.
 *
 * Esta función configura los LEDs y establece sus valores iniciales.
 */
void init_led(void) {
	spi_write(0x09, 0x00);       // No decoding.
	spi_write(0x0b, 0x07);       // Scan limit = 8 LEDs.
	spi_write(0x0c, 0x01);       // Power down = 0, normal mode = 1.
	spi_write(0x0f, 0x00);       // No test display.
	clear_led();
	spi_write(0x0a, 0x05);       // Brightness intensity.
}

/**
 * @brief Enciende todos los LEDs.
 *
 * Esta función recorre todas las direcciones de LEDs y les asigna el valor de encendido.
 */
void lit_led(void) {
	for (int j = 0; j < 8; j++) {
		spi_write(led_address[j], matrizEncendida[j]);
	}
}

/**
 * @brief Actualiza el estado de los LEDs basándose en una lista.
 *
 * Esta función toma una lista de valores y actualiza el estado de cada LED según
 * la lista proporcionada.
 *
 * @param paint_list Lista con los valores de los LEDs.
 */
void update_led(uint8_t paint_list[]) {
	for (int j = 0; j < 8; j++) {
		spi_write(led_address[j], paint_list[j]);
	}
}

/**
 * @brief generra una animacion de fantasma.
 *
 * Esta función genera una función de fantasma en la patalla led
 *
 *
 * @param vacio
 */
void fantasma_led(delay_t *delayGhost) {

	switch (tipo_fantasma) {
	case (GHOST1):
		update_led(ghost2);
		if (delayRead(&delayGhost)) {
			tipo_fantasma = GHOST2;
		}
		break;
	case (GHOST2):
		update_led(ghost2);
		if (delayRead(&delayGhost)) {
			tipo_fantasma = GHOST3;
		}
		break;
	case (GHOST3):
		update_led(ghost3);
		if (delayRead(&delayGhost)) {
			tipo_fantasma = GHOST4;
		}
		break;
	case (GHOST4):
		update_led(ghost4);
		if (delayRead(&delayGhost)) {
			tipo_fantasma = GHOST5;
		}
		break;
	case (GHOST5):
		update_led(ghost5);
		if (delayRead(&delayGhost)) {
			tipo_fantasma = GHOST6;
		}
		break;
	case (GHOST6):
		update_led(ghost6);
		if (delayRead(&delayGhost)) {
			tipo_fantasma = GHOST1;
		}
		break;
	}
}
