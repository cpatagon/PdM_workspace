/**
 * @file API_led.c
 * @brief Implementación de funciones para el manejo de LEDs usando SPI.
 * @date Aug 6, 2023
 * @author lgomez
 */

#include <stdint.h>
#include "API_spi.h"

uint8_t led_address[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
uint8_t clear[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t matrizEncendida[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

/**
 * @brief Enumeración para definir estados o modos de operación de los LEDs.
 */
typedef enum {
	SET_ini, A, B, C, GOOD, BAD,
} def_Led_t;

/**
 * @brief Limpia o apaga todos los LEDs.
 *
 * Esta función recorre todas las direcciones de LEDs y les asigna el valor de apagado.
 */
void clear_led(void) {
	for (int j = 0; j < 8; j++) {
		spi_write(led_address[j], clear[j]);
	}
}

/**
 * @brief Inicializa los LEDs.
 *
 * Esta función configura los LEDs y establece sus valores iniciales.
 */
void init_led(void) {
	spi_write(0x09, 0x00);       // No decoding.
	spi_write(0x0b, 0x07);       // Scan limit = 8 LEDs.
	spi_write(0x0c, 0x01);       // Power down = 0, normal mode = 1.
	spi_write(0x0f, 0x00);       // No test display.
	clear_led();
	spi_write(0x0a, 0x05);       // Brightness intensity.
}

/**
 * @brief Enciende todos los LEDs.
 *
 * Esta función recorre todas las direcciones de LEDs y les asigna el valor de encendido.
 */
void lit_led(void) {
	for (int j = 0; j < 8; j++) {
		spi_write(led_address[j], matrizEncendida[j]);
	}
}

/**
 * @brief Actualiza el estado de los LEDs basándose en una lista.
 *
 * Esta función toma una lista de valores y actualiza el estado de cada LED según
 * la lista proporcionada.
 *
 * @param paint_list Lista con los valores de los LEDs.
 */
void update_led(uint8_t paint_list[]) {
	for (int j = 0; j < 8; j++) {
		spi_write(led_address[j], paint_list[j]);
	}
}
