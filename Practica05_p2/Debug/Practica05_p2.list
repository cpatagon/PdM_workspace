
Practica05_p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cac  08003cac  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb4  08003cb4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000080  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009af2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2c  00000000  00000000  00029baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007d0  00000000  00000000  0002c270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b8c  00000000  00000000  0002ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e117  00000000  00000000  000535cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e31e0  00000000  00000000  000616e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001448c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002924  00000000  00000000  00144914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003868 	.word	0x08003868

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08003868 	.word	0x08003868

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <readKey>:

/*
 * Function that changes from true to false or from false to true
 * if the button is pressed without bouncing.
 */
bool_t readKey(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
    return PressButton;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <readKey+0x14>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000

080005bc <readStatus>:

char *readStatus(){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
	char * state_name;
	switch (currentState){
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <readStatus+0x4c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d816      	bhi.n	80005f8 <readStatus+0x3c>
 80005ca:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <readStatus+0x14>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	080005e1 	.word	0x080005e1
 80005d4:	080005e7 	.word	0x080005e7
 80005d8:	080005ed 	.word	0x080005ed
 80005dc:	080005f3 	.word	0x080005f3
	case BUTTON_UP:
		state_name="BUTTON_UP ";
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <readStatus+0x50>)
 80005e2:	607b      	str	r3, [r7, #4]
		break;
 80005e4:	e008      	b.n	80005f8 <readStatus+0x3c>
	case BUTTON_FALLING:
		state_name="BUTTON_FALLING ";
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <readStatus+0x54>)
 80005e8:	607b      	str	r3, [r7, #4]
		break;
 80005ea:	e005      	b.n	80005f8 <readStatus+0x3c>
	case BUTTON_DOWN:
		state_name="BUTTON_DOWN ";
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <readStatus+0x58>)
 80005ee:	607b      	str	r3, [r7, #4]
		break;
 80005f0:	e002      	b.n	80005f8 <readStatus+0x3c>
	case BUTTON_RAISING:
		state_name="BUTTON_RAISING ";
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <readStatus+0x5c>)
 80005f4:	607b      	str	r3, [r7, #4]
		break;
 80005f6:	bf00      	nop
	}
    return state_name;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000a8 	.word	0x200000a8
 800060c:	08003880 	.word	0x08003880
 8000610:	0800388c 	.word	0x0800388c
 8000614:	0800389c 	.word	0x0800389c
 8000618:	080038ac 	.word	0x080038ac

0800061c <debounceFSM_init>:
 *          at the start of the model.
 *
 * @param   None
 * @retval  None
 */
void debounceFSM_init(){
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	/* Initialize Estado */
	assert(&PressButton!=NULL);
	currentState=BUTTON_UP;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <debounceFSM_init+0x14>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	return;
 8000626:	bf00      	nop
}
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	200000a8 	.word	0x200000a8

08000634 <debounceFSM_update>:
 *          and updates the current state and outputs accordingly.
 *
 * @param   delay: pointer to the delay instance
 * @retval  None
 */
void debounceFSM_update(delaydebounce_t * delay){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	assert(delay!=NULL);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d105      	bne.n	800064e <debounceFSM_update+0x1a>
 8000642:	4b39      	ldr	r3, [pc, #228]	; (8000728 <debounceFSM_update+0xf4>)
 8000644:	4a39      	ldr	r2, [pc, #228]	; (800072c <debounceFSM_update+0xf8>)
 8000646:	215d      	movs	r1, #93	; 0x5d
 8000648:	4839      	ldr	r0, [pc, #228]	; (8000730 <debounceFSM_update+0xfc>)
 800064a:	f002 f8e9 	bl	8002820 <__assert_func>
	assert(&currentState!=NULL);

	switch (currentState){
 800064e:	4b39      	ldr	r3, [pc, #228]	; (8000734 <debounceFSM_update+0x100>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b03      	cmp	r3, #3
 8000654:	d85a      	bhi.n	800070c <debounceFSM_update+0xd8>
 8000656:	a201      	add	r2, pc, #4	; (adr r2, 800065c <debounceFSM_update+0x28>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	0800066d 	.word	0x0800066d
 8000660:	08000687 	.word	0x08000687
 8000664:	080006bf 	.word	0x080006bf
 8000668:	080006d9 	.word	0x080006d9
	/*
	 * In the BUTTON_UP state, it checks whether the button remains unpressed.
	 * Otherwise, that is, if the button is pressed, the state changes to BUTTON_FALLING.
	 */
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)){
 800066c:	2000      	movs	r0, #0
 800066e:	f000 fa23 	bl	8000ab8 <BSP_PB_GetState>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d04f      	beq.n	8000718 <debounceFSM_update+0xe4>
	    	currentState=BUTTON_FALLING;
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <debounceFSM_update+0x100>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
	    	state_name2="BUTTON_FALLING ";
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <debounceFSM_update+0x104>)
 8000680:	4a2e      	ldr	r2, [pc, #184]	; (800073c <debounceFSM_update+0x108>)
 8000682:	601a      	str	r2, [r3, #0]
		}
		break;
 8000684:	e048      	b.n	8000718 <debounceFSM_update+0xe4>
		 * If it remains pressed (condition 'yes'), the state changes to BUTTON_DOWN and the
		 * state of LED1 is toggled. If the button does not remain pressed (condition 'no'),
		 * the state changes back to BUTTON_UP, interpreting this event as a bounce.
		 */
	case BUTTON_FALLING:
		if (BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fa16 	bl	8000ab8 <BSP_PB_GetState>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00e      	beq.n	80006b0 <debounceFSM_update+0x7c>
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f892 	bl	80007bc <delayRead>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d008      	beq.n	80006b0 <debounceFSM_update+0x7c>
	    	currentState=BUTTON_DOWN;
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <debounceFSM_update+0x100>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	701a      	strb	r2, [r3, #0]
	    	state_name2="BUTTON_DOWN ";
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <debounceFSM_update+0x104>)
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <debounceFSM_update+0x10c>)
 80006a8:	601a      	str	r2, [r3, #0]
	    	buttonPressed();
 80006aa:	f000 f851 	bl	8000750 <buttonPressed>
		}
		else {
			currentState=BUTTON_UP;
			state_name2="";
		}
		break;
 80006ae:	e036      	b.n	800071e <debounceFSM_update+0xea>
			currentState=BUTTON_UP;
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <debounceFSM_update+0x100>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
			state_name2="";
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <debounceFSM_update+0x104>)
 80006b8:	4a22      	ldr	r2, [pc, #136]	; (8000744 <debounceFSM_update+0x110>)
 80006ba:	601a      	str	r2, [r3, #0]
		break;
 80006bc:	e02f      	b.n	800071e <debounceFSM_update+0xea>
	/*
	 * In the BUTTON_DOWN state, if the button is released, the state changes to BUTTON_RAISING.
	 */
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)){
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 f9fa 	bl	8000ab8 <BSP_PB_GetState>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d128      	bne.n	800071c <debounceFSM_update+0xe8>
	    	currentState=BUTTON_RAISING;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <debounceFSM_update+0x100>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	701a      	strb	r2, [r3, #0]
	    	state_name2="BUTTON_RAISING ";
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <debounceFSM_update+0x104>)
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <debounceFSM_update+0x114>)
 80006d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80006d6:	e021      	b.n	800071c <debounceFSM_update+0xe8>
	 * If it remains unpressed (condition 'yes'), the state changes back to BUTTON_UP and
	 * the buttonReleased function is called. If the button is pressed again (condition 'no'),
	 * the state changes back to BUTTON_DOWN.
	 */
	case BUTTON_RAISING:
		if (!BSP_PB_GetState(BUTTON_USER) && delayRead(delay)){
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f9ed 	bl	8000ab8 <BSP_PB_GetState>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10c      	bne.n	80006fe <debounceFSM_update+0xca>
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f869 	bl	80007bc <delayRead>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d006      	beq.n	80006fe <debounceFSM_update+0xca>
	    	currentState=BUTTON_UP;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <debounceFSM_update+0x100>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	    	state_name2="BUTTON_RAISING ";
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <debounceFSM_update+0x104>)
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <debounceFSM_update+0x114>)
 80006fa:	601a      	str	r2, [r3, #0]
		}
		else {
			currentState=BUTTON_DOWN;
			state_name2="";
		}
		break;
 80006fc:	e00f      	b.n	800071e <debounceFSM_update+0xea>
			currentState=BUTTON_DOWN;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <debounceFSM_update+0x100>)
 8000700:	2202      	movs	r2, #2
 8000702:	701a      	strb	r2, [r3, #0]
			state_name2="";
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <debounceFSM_update+0x104>)
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <debounceFSM_update+0x110>)
 8000708:	601a      	str	r2, [r3, #0]
		break;
 800070a:	e008      	b.n	800071e <debounceFSM_update+0xea>
	default:
			/* Handle unexpected state */
		assert(0);
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <debounceFSM_update+0x118>)
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <debounceFSM_update+0xf8>)
 8000710:	2199      	movs	r1, #153	; 0x99
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <debounceFSM_update+0xfc>)
 8000714:	f002 f884 	bl	8002820 <__assert_func>
		break;
 8000718:	bf00      	nop
 800071a:	e000      	b.n	800071e <debounceFSM_update+0xea>
		break;
 800071c:	bf00      	nop
	}
	return;
 800071e:	bf00      	nop
}
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	080038bc 	.word	0x080038bc
 800072c:	08003b80 	.word	0x08003b80
 8000730:	080038c8 	.word	0x080038c8
 8000734:	200000a8 	.word	0x200000a8
 8000738:	200000a4 	.word	0x200000a4
 800073c:	0800388c 	.word	0x0800388c
 8000740:	0800389c 	.word	0x0800389c
 8000744:	080038ec 	.word	0x080038ec
 8000748:	080038ac 	.word	0x080038ac
 800074c:	080038f0 	.word	0x080038f0

08000750 <buttonPressed>:
 * @brief   Toggles the state of LED2.
 *
 * @param   None
 * @retval  None
 */
static void buttonPressed(){
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	PressButton = !(PressButton);
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <buttonPressed+0x2c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	f083 0301 	eor.w	r3, r3, #1
 8000766:	b2db      	uxtb	r3, r3
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b03      	ldr	r3, [pc, #12]	; (800077c <buttonPressed+0x2c>)
 8000770:	701a      	strb	r2, [r3, #0]
	return;
 8000772:	bf00      	nop
}
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	20000000 	.word	0x20000000

08000780 <delayInit>:
/* delayInit debe cargar el valor de duración del retardo en la estructura, en el campo
correspondiente. No debe iniciar el conteo del retardo. Debe inicializar el flag running
en `false´. */

void delayInit( delay_t * delay, tick_t duration )
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d105      	bne.n	800079c <delayInit+0x1c>
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <delayInit+0x30>)
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <delayInit+0x34>)
 8000794:	2113      	movs	r1, #19
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <delayInit+0x38>)
 8000798:	f002 f842 	bl	8002820 <__assert_func>
	assert(delay->duration >=0);
	delay->duration = duration;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	721a      	strb	r2, [r3, #8]
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	080038f4 	.word	0x080038f4
 80007b4:	08003b94 	.word	0x08003b94
 80007b8:	08003904 	.word	0x08003904

080007bc <delayRead>:
○ true, hacer la cuenta para saber si el tiempo del retardo se cumplió o no:
‘marca de tiempo actual - marca de tiempo inicial es mayor o igual a duración
del retardo’ y devolver un valor booleano que indique si el tiempo se cumplió o no.
○ Cuando el tiempo se cumple se debe cambiar el flag running a false.*/

bool_t delayRead( delay_t * delay ){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

	static bool_t retValue; // variable estatica interna
	retValue = false;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <delayRead+0x6c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
	assert(delay !=NULL);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d105      	bne.n	80007dc <delayRead+0x20>
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <delayRead+0x70>)
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <delayRead+0x74>)
 80007d4:	2124      	movs	r1, #36	; 0x24
 80007d6:	4817      	ldr	r0, [pc, #92]	; (8000834 <delayRead+0x78>)
 80007d8:	f002 f822 	bl	8002820 <__assert_func>
	assert(delay->duration >= 0);

	if (delay->running == false){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a1b      	ldrb	r3, [r3, #8]
 80007e0:	f083 0301 	eor.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <delayRead+0x40>
		delay->startTime = HAL_GetTick();
 80007ea:	f000 fb05 	bl	8000df8 <HAL_GetTick>
 80007ee:	4602      	mov	r2, r0
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	721a      	strb	r2, [r3, #8]
 80007fa:	e00f      	b.n	800081c <delayRead+0x60>
	}
	else{
		 if((HAL_GetTick()-delay->startTime) >= delay->duration){
 80007fc:	f000 fafc 	bl	8000df8 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	d305      	bcc.n	800081c <delayRead+0x60>
			 delay->running = false;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	721a      	strb	r2, [r3, #8]
			 retValue = true;
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <delayRead+0x6c>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
		 }
	}
	return retValue;
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <delayRead+0x6c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000a9 	.word	0x200000a9
 800082c:	08003924 	.word	0x08003924
 8000830:	08003ba0 	.word	0x08003ba0
 8000834:	08003904 	.word	0x08003904

08000838 <delayInitD>:
/* delayInit debe cargar el valor de duración del retardo en la estructura, en el campo
correspondiente. No debe iniciar el conteo del retardo. Debe inicializar el flag running
en `false´. */

void delayInitD(delaydebounce_t * delay, tick_t duration )
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d105      	bne.n	8000854 <delayInitD+0x1c>
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <delayInitD+0x30>)
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <delayInitD+0x34>)
 800084c:	2113      	movs	r1, #19
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <delayInitD+0x38>)
 8000850:	f001 ffe6 	bl	8002820 <__assert_func>
	assert(delay->duration >=0);
	delay->duration = duration;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	721a      	strb	r2, [r3, #8]
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08003934 	.word	0x08003934
 800086c:	08003bac 	.word	0x08003bac
 8000870:	08003944 	.word	0x08003944

08000874 <uartInit>:

/* funcion de inicialización de la UART. Adicionalmente, debe imprimime
 * por la terminal serie un mensaje con los parámetros de
 * configuración*/

bool_t uartInit(){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <uartInit+0x58>)
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <uartInit+0x5c>)
 800087c:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = RATE;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <uartInit+0x58>)
 8000880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000884:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <uartInit+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <uartInit+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <uartInit+0x58>)
 8000894:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000898:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <uartInit+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <uartInit+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <uartInit+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]

	  	if (HAL_UART_Init(&UartHandle) == HAL_OK) {
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <uartInit+0x58>)
 80008ae:	f001 fafb 	bl	8001ea8 <HAL_UART_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d106      	bne.n	80008c6 <uartInit+0x52>
	  		uartSendString(message); // envia mensaje con los parametros de configuración UART
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <uartInit+0x60>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f80b 	bl	80008d8 <uartSendString>
	  		return true;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e000      	b.n	80008c8 <uartInit+0x54>
	  	} else {
	  		return false;
 80008c6:	2300      	movs	r3, #0
	  	}
	  }
 80008c8:	4618      	mov	r0, r3
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000ac 	.word	0x200000ac
 80008d0:	40004800 	.word	0x40004800
 80008d4:	20000004 	.word	0x20000004

080008d8 <uartSendString>:
/* uartSendString(uint8_t *pstring) recibe un puntero a un
 * string que se desea enviar por la UART completo (hasta
 * el caracter ‘\0’) y debe utilizar la función de la
 * HAL HAL_UART_Transmit(...) para transmitir el string.*/

void uartSendString(uint8_t * pstring){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&UartHandle, pstring, strlen((char *)pstring), HAL_MAX_DELAY);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fc85 	bl	80001f0 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <uartSendString+0x28>)
 80008f2:	f001 fb26 	bl	8001f42 <HAL_UART_Transmit>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000ac 	.word	0x200000ac

08000904 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10e      	bne.n	8000932 <BSP_LED_Init+0x2e>
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <BSP_LED_Init+0x94>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a1e      	ldr	r2, [pc, #120]	; (8000998 <BSP_LED_Init+0x94>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <BSP_LED_Init+0x94>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	e00d      	b.n	800094e <BSP_LED_Init+0x4a>
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <BSP_LED_Init+0x94>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <BSP_LED_Init+0x94>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <BSP_LED_Init+0x94>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4a12      	ldr	r2, [pc, #72]	; (800099c <BSP_LED_Init+0x98>)
 8000952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <BSP_LED_Init+0x9c>)
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	f107 0214 	add.w	r2, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fb5e 	bl	8001034 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <BSP_LED_Init+0x9c>)
 800097c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <BSP_LED_Init+0x98>)
 8000984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000988:	2200      	movs	r2, #0
 800098a:	4619      	mov	r1, r3
 800098c:	f000 fd16 	bl	80013bc <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	08003bb8 	.word	0x08003bb8
 80009a0:	20000008 	.word	0x20000008

080009a4 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <BSP_LED_On+0x2c>)
 80009b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <BSP_LED_On+0x30>)
 80009ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f000 fcfb 	bl	80013bc <HAL_GPIO_WritePin>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	08003bb8 	.word	0x08003bb8

080009d8 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <BSP_LED_Toggle+0x2c>)
 80009e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4906      	ldr	r1, [pc, #24]	; (8000a08 <BSP_LED_Toggle+0x30>)
 80009ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4610      	mov	r0, r2
 80009f6:	f000 fcfa 	bl	80013ee <HAL_GPIO_TogglePin>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	08003bb8 	.word	0x08003bb8

08000a0c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <BSP_PB_Init+0xa4>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <BSP_PB_Init+0xa4>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <BSP_PB_Init+0xa4>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d112      	bne.n	8000a64 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <BSP_PB_Init+0xa8>)
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	f107 020c 	add.w	r2, r7, #12
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fae8 	bl	8001034 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d11d      	bne.n	8000aa6 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000a74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a78:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <BSP_PB_Init+0xa8>)
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	f107 020c 	add.w	r2, r7, #12
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fad3 	bl	8001034 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000a8e:	2328      	movs	r3, #40	; 0x28
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fa95 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000a9c:	2328      	movs	r3, #40	; 0x28
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 faac 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	20000014 	.word	0x20000014

08000ab8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <BSP_PB_GetState+0x28>)
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fc5b 	bl	800138c <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000014 	.word	0x20000014

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <SystemInit+0x60>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <SystemInit+0x60>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <SystemInit+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <SystemInit+0x64>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <SystemInit+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <SystemInit+0x64>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <SystemInit+0x64>)
 8000b10:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <SystemInit+0x64>)
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <SystemInit+0x68>)
 8000b1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <SystemInit+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <SystemInit+0x64>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SystemInit+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SystemInit+0x60>)
 8000b34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b38:	609a      	str	r2, [r3, #8]
#endif
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	24003010 	.word	0x24003010

08000b50 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000ba4:	f000 f914 	bl	8000dd0 <HAL_IncTick>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	return 1;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_kill>:

int _kill(int pid, int sig)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bc6:	f001 fe49 	bl	800285c <__errno>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2216      	movs	r2, #22
 8000bce:	601a      	str	r2, [r3, #0]
	return -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_exit>:

void _exit (int status)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ffe7 	bl	8000bbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bee:	e7fe      	b.n	8000bee <_exit+0x12>

08000bf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e00a      	b.n	8000c18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c02:	f3af 8000 	nop.w
 8000c06:	4601      	mov	r1, r0
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	b2ca      	uxtb	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbf0      	blt.n	8000c02 <_read+0x12>
	}

return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e009      	b.n	8000c50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	60ba      	str	r2, [r7, #8]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf1      	blt.n	8000c3c <_write+0x12>
	}
	return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_close>:

int _close(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_isatty>:

int _isatty(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f001 fdae 	bl	800285c <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20030000 	.word	0x20030000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200000f0 	.word	0x200000f0
 8000d34:	20000108 	.word	0x20000108

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x34>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x34>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x34>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x34>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f92b 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f000 fbb2 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f943 	bl	800101a <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f000 f90b 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000018 	.word	0x20000018
 8000dc8:	20000020 	.word	0x20000020
 8000dcc:	2000001c 	.word	0x2000001c

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000020 	.word	0x20000020
 8000df4:	200000f4 	.word	0x200000f4

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200000f4 	.word	0x200000f4

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff29 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff3e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff31 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa2 	bl	8000f6c <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e177      	b.n	8001340 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	429a      	cmp	r2, r3
 800106a:	f040 8166 	bne.w	800133a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d005      	beq.n	8001086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	2b02      	cmp	r3, #2
 8001084:	d130      	bne.n	80010e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 0201 	and.w	r2, r3, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d017      	beq.n	8001124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d123      	bne.n	8001178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	69b9      	ldr	r1, [r7, #24]
 8001174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0203 	and.w	r2, r3, #3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80c0 	beq.w	800133a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b66      	ldr	r3, [pc, #408]	; (8001358 <HAL_GPIO_Init+0x324>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a65      	ldr	r2, [pc, #404]	; (8001358 <HAL_GPIO_Init+0x324>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b63      	ldr	r3, [pc, #396]	; (8001358 <HAL_GPIO_Init+0x324>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d6:	4a61      	ldr	r2, [pc, #388]	; (800135c <HAL_GPIO_Init+0x328>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a58      	ldr	r2, [pc, #352]	; (8001360 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d037      	beq.n	8001272 <HAL_GPIO_Init+0x23e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a57      	ldr	r2, [pc, #348]	; (8001364 <HAL_GPIO_Init+0x330>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d031      	beq.n	800126e <HAL_GPIO_Init+0x23a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a56      	ldr	r2, [pc, #344]	; (8001368 <HAL_GPIO_Init+0x334>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x236>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a55      	ldr	r2, [pc, #340]	; (800136c <HAL_GPIO_Init+0x338>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x232>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a54      	ldr	r2, [pc, #336]	; (8001370 <HAL_GPIO_Init+0x33c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x22e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a53      	ldr	r2, [pc, #332]	; (8001374 <HAL_GPIO_Init+0x340>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x22a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_GPIO_Init+0x344>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x226>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a51      	ldr	r2, [pc, #324]	; (800137c <HAL_GPIO_Init+0x348>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x222>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a50      	ldr	r2, [pc, #320]	; (8001380 <HAL_GPIO_Init+0x34c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x21e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x350>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x21a>
 800124a:	2309      	movs	r3, #9
 800124c:	e012      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800124e:	230a      	movs	r3, #10
 8001250:	e010      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001252:	2308      	movs	r3, #8
 8001254:	e00e      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001256:	2307      	movs	r3, #7
 8001258:	e00c      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800125a:	2306      	movs	r3, #6
 800125c:	e00a      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800125e:	2305      	movs	r3, #5
 8001260:	e008      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001262:	2304      	movs	r3, #4
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001266:	2303      	movs	r3, #3
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x240>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x240>
 8001272:	2300      	movs	r3, #0
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f002 0203 	and.w	r2, r2, #3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001284:	4935      	ldr	r1, [pc, #212]	; (800135c <HAL_GPIO_Init+0x328>)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_GPIO_Init+0x354>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b6:	4a34      	ldr	r2, [pc, #208]	; (8001388 <HAL_GPIO_Init+0x354>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_GPIO_Init+0x354>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e0:	4a29      	ldr	r2, [pc, #164]	; (8001388 <HAL_GPIO_Init+0x354>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <HAL_GPIO_Init+0x354>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <HAL_GPIO_Init+0x354>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_GPIO_Init+0x354>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_GPIO_Init+0x354>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	f67f ae84 	bls.w	8001050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40013800 	.word	0x40013800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400
 8001368:	40020800 	.word	0x40020800
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40021400 	.word	0x40021400
 8001378:	40021800 	.word	0x40021800
 800137c:	40021c00 	.word	0x40021c00
 8001380:	40022000 	.word	0x40022000
 8001384:	40022400 	.word	0x40022400
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001400:	887a      	ldrh	r2, [r7, #2]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43d9      	mvns	r1, r3
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	400b      	ands	r3, r1
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 800146e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_UART_MspInit+0x9c>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800148a:	2301      	movs	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001492:	2307      	movs	r3, #7
 8001494:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <HAL_UART_MspInit+0xa0>)
 800149e:	f7ff fdc9 	bl	8001034 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80014a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80014a8:	2307      	movs	r3, #7
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <HAL_UART_MspInit+0xa0>)
 80014b4:	f7ff fdbe 	bl	8001034 <HAL_GPIO_Init>
}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020c00 	.word	0x40020c00

080014c8 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_PWREx_EnableOverDrive+0x90>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <HAL_PWREx_EnableOverDrive+0x90>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_PWREx_EnableOverDrive+0x90>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_PWREx_EnableOverDrive+0x94>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001504:	f7ff fc78 	bl	8000df8 <HAL_GetTick>
 8001508:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800150a:	e009      	b.n	8001520 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800150c:	f7ff fc74 	bl	8000df8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151a:	d901      	bls.n	8001520 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e01f      	b.n	8001560 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_PWREx_EnableOverDrive+0x98>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d1ee      	bne.n	800150c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001534:	f7ff fc60 	bl	8000df8 <HAL_GetTick>
 8001538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800153a:	e009      	b.n	8001550 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800153c:	f7ff fc5c 	bl	8000df8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154a:	d901      	bls.n	8001550 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e007      	b.n	8001560 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_PWREx_EnableOverDrive+0x98>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800155c:	d1ee      	bne.n	800153c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	420e0040 	.word	0x420e0040
 8001570:	40007000 	.word	0x40007000
 8001574:	420e0044 	.word	0x420e0044

08001578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e267      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d075      	beq.n	8001682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001596:	4b88      	ldr	r3, [pc, #544]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d00c      	beq.n	80015bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a2:	4b85      	ldr	r3, [pc, #532]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d112      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4b82      	ldr	r3, [pc, #520]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ba:	d10b      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	4b7e      	ldr	r3, [pc, #504]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d05b      	beq.n	8001680 <HAL_RCC_OscConfig+0x108>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d157      	bne.n	8001680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e242      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_OscConfig+0x74>
 80015de:	4b76      	ldr	r3, [pc, #472]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a75      	ldr	r2, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xb0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x98>
 80015f6:	4b70      	ldr	r3, [pc, #448]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a6f      	ldr	r2, [pc, #444]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b6d      	ldr	r3, [pc, #436]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6c      	ldr	r2, [pc, #432]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xb0>
 8001610:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a68      	ldr	r2, [pc, #416]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a65      	ldr	r2, [pc, #404]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fbe2 	bl	8000df8 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fbde 	bl	8000df8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e207      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xc0>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fbce 	bl	8000df8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fbca 	bl	8000df8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1f3      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0xe8>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d063      	beq.n	8001756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x152>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1c7      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4937      	ldr	r1, [pc, #220]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e03a      	b.n	8001756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_OscConfig+0x244>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb83 	bl	8000df8 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fb7f 	bl	8000df8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1a8      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4925      	ldr	r1, [pc, #148]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCC_OscConfig+0x244>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fb62 	bl	8000df8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff fb5e 	bl	8000df8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e187      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d036      	beq.n	80017d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d016      	beq.n	8001798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_RCC_OscConfig+0x248>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff fb42 	bl	8000df8 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fb3e 	bl	8000df8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e167      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_OscConfig+0x240>)
 800178c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x200>
 8001796:	e01b      	b.n	80017d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_RCC_OscConfig+0x248>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fb2b 	bl	8000df8 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	e00e      	b.n	80017c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb27 	bl	8000df8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d907      	bls.n	80017c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e150      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
 80017b8:	40023800 	.word	0x40023800
 80017bc:	42470000 	.word	0x42470000
 80017c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1ea      	bne.n	80017a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8097 	beq.w	800190c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b7d      	ldr	r3, [pc, #500]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a7c      	ldr	r2, [pc, #496]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b77      	ldr	r3, [pc, #476]	; (80019ec <HAL_RCC_OscConfig+0x474>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b74      	ldr	r3, [pc, #464]	; (80019ec <HAL_RCC_OscConfig+0x474>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a73      	ldr	r2, [pc, #460]	; (80019ec <HAL_RCC_OscConfig+0x474>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff fae7 	bl	8000df8 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7ff fae3 	bl	8000df8 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e10c      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x474>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x2ea>
 8001854:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a63      	ldr	r2, [pc, #396]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
 8001860:	e01c      	b.n	800189c <HAL_RCC_OscConfig+0x324>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b05      	cmp	r3, #5
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x30c>
 800186a:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6713      	str	r3, [r2, #112]	; 0x70
 8001876:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a5b      	ldr	r2, [pc, #364]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0x324>
 8001884:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a57      	ldr	r2, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a54      	ldr	r2, [pc, #336]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001896:	f023 0304 	bic.w	r3, r3, #4
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d015      	beq.n	80018d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff faa8 	bl	8000df8 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff faa4 	bl	8000df8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0cb      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ee      	beq.n	80018ac <HAL_RCC_OscConfig+0x334>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fa92 	bl	8000df8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff fa8e 	bl	8000df8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0b5      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ee      	bne.n	80018d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001900:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a38      	ldr	r2, [pc, #224]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a1 	beq.w	8001a58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b08      	cmp	r3, #8
 8001920:	d05c      	beq.n	80019dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d141      	bne.n	80019ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_RCC_OscConfig+0x478>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fa62 	bl	8000df8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff fa5e 	bl	8000df8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e087      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	3b01      	subs	r3, #1
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	491b      	ldr	r1, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x478>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fa37 	bl	8000df8 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fa33 	bl	8000df8 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e05c      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x416>
 80019ac:	e054      	b.n	8001a58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_RCC_OscConfig+0x478>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fa20 	bl	8000df8 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff fa1c 	bl	8000df8 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e045      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_OscConfig+0x470>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x444>
 80019da:	e03d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e038      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000
 80019f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x4ec>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d028      	beq.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d121      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d11a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d111      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0cc      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d90c      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0b8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	494d      	ldr	r1, [pc, #308]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d044      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d119      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e067      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4934      	ldr	r1, [pc, #208]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7ff f94e 	bl	8000df8 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f94a 	bl	8000df8 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d20c      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e032      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4916      	ldr	r1, [pc, #88]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bee:	f000 f821 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	490a      	ldr	r1, [pc, #40]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	fa22 f303 	lsr.w	r3, r2, r3
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f8ae 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08003bc0 	.word	0x08003bc0
 8001c2c:	20000018 	.word	0x20000018
 8001c30:	2000001c 	.word	0x2000001c

08001c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c38:	b094      	sub	sp, #80	; 0x50
 8001c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c40:	2300      	movs	r3, #0
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c44:	2300      	movs	r3, #0
 8001c46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c4c:	4b79      	ldr	r3, [pc, #484]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d00d      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x40>
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	f200 80e1 	bhi.w	8001e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x34>
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c66:	e0db      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c6c:	e0db      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c6e:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8001c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c72:	e0d8      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c74:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c7e:	4b6d      	ldr	r3, [pc, #436]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d063      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	2200      	movs	r2, #0
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	462b      	mov	r3, r5
 8001caa:	f04f 0000 	mov.w	r0, #0
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	0159      	lsls	r1, r3, #5
 8001cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb8:	0150      	lsls	r0, r2, #5
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	1a51      	subs	r1, r2, r1
 8001cc2:	6139      	str	r1, [r7, #16]
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cd8:	4659      	mov	r1, fp
 8001cda:	018b      	lsls	r3, r1, #6
 8001cdc:	4651      	mov	r1, sl
 8001cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ce2:	4651      	mov	r1, sl
 8001ce4:	018a      	lsls	r2, r1, #6
 8001ce6:	4651      	mov	r1, sl
 8001ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8001cec:	4659      	mov	r1, fp
 8001cee:	eb63 0901 	sbc.w	r9, r3, r1
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d06:	4690      	mov	r8, r2
 8001d08:	4699      	mov	r9, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	eb18 0303 	adds.w	r3, r8, r3
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	462b      	mov	r3, r5
 8001d14:	eb49 0303 	adc.w	r3, r9, r3
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d26:	4629      	mov	r1, r5
 8001d28:	024b      	lsls	r3, r1, #9
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d30:	4621      	mov	r1, r4
 8001d32:	024a      	lsls	r2, r1, #9
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d44:	f7fe faac 	bl	80002a0 <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d50:	e058      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d6c:	4642      	mov	r2, r8
 8001d6e:	464b      	mov	r3, r9
 8001d70:	f04f 0000 	mov.w	r0, #0
 8001d74:	f04f 0100 	mov.w	r1, #0
 8001d78:	0159      	lsls	r1, r3, #5
 8001d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d7e:	0150      	lsls	r0, r2, #5
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4641      	mov	r1, r8
 8001d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d8a:	4649      	mov	r1, r9
 8001d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001da4:	ebb2 040a 	subs.w	r4, r2, sl
 8001da8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	00eb      	lsls	r3, r5, #3
 8001db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dba:	00e2      	lsls	r2, r4, #3
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	18e3      	adds	r3, r4, r3
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	eb45 0303 	adc.w	r3, r5, r3
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dda:	4629      	mov	r1, r5
 8001ddc:	028b      	lsls	r3, r1, #10
 8001dde:	4621      	mov	r1, r4
 8001de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001de4:	4621      	mov	r1, r4
 8001de6:	028a      	lsls	r2, r1, #10
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dee:	2200      	movs	r2, #0
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	61fa      	str	r2, [r7, #28]
 8001df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df8:	f7fe fa52 	bl	80002a0 <__aeabi_uldivmod>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4613      	mov	r3, r2
 8001e02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e1e:	e002      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3750      	adds	r7, #80	; 0x50
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	00f42400 	.word	0x00f42400
 8001e3c:	007a1200 	.word	0x007a1200

08001e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000018 	.word	0x20000018

08001e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e5c:	f7ff fff0 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	0a9b      	lsrs	r3, r3, #10
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	4903      	ldr	r1, [pc, #12]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e6e:	5ccb      	ldrb	r3, [r1, r3]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	08003bd0 	.word	0x08003bd0

08001e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e84:	f7ff ffdc 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0b5b      	lsrs	r3, r3, #13
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4903      	ldr	r1, [pc, #12]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	08003bd0 	.word	0x08003bd0

08001ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e03f      	b.n	8001f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff faa8 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f929 	bl	8002144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b08a      	sub	sp, #40	; 0x28
 8001f46:	af02      	add	r7, sp, #8
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d17c      	bne.n	800205c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_UART_Transmit+0x2c>
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e075      	b.n	800205e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_UART_Transmit+0x3e>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e06e      	b.n	800205e <HAL_UART_Transmit+0x11c>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2221      	movs	r2, #33	; 0x21
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f96:	f7fe ff2f 	bl	8000df8 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	88fa      	ldrh	r2, [r7, #6]
 8001fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb0:	d108      	bne.n	8001fc4 <HAL_UART_Transmit+0x82>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d104      	bne.n	8001fc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e003      	b.n	8001fcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fd4:	e02a      	b.n	800202c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f840 	bl	8002066 <UART_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e036      	b.n	800205e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3302      	adds	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e007      	b.n	800201e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1cf      	bne.n	8001fd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f810 	bl	8002066 <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e006      	b.n	800205e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b090      	sub	sp, #64	; 0x40
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002076:	e050      	b.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207e:	d04c      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x30>
 8002086:	f7fe feb7 	bl	8000df8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002092:	429a      	cmp	r2, r3
 8002094:	d241      	bcs.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	e853 3f00 	ldrex	r3, [r3]
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b6:	637a      	str	r2, [r7, #52]	; 0x34
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020be:	e841 2300 	strex	r3, r2, [r1]
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e5      	bne.n	8002096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3314      	adds	r3, #20
 80020d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	e853 3f00 	ldrex	r3, [r3]
 80020d8:	613b      	str	r3, [r7, #16]
   return(result);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3314      	adds	r3, #20
 80020e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ea:	623a      	str	r2, [r7, #32]
 80020ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ee:	69f9      	ldr	r1, [r7, #28]
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	e841 2300 	strex	r3, r2, [r1]
 80020f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e5      	bne.n	80020ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e00f      	b.n	800213a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4013      	ands	r3, r2
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	429a      	cmp	r2, r3
 8002136:	d09f      	beq.n	8002078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3740      	adds	r7, #64	; 0x40
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002148:	b0c0      	sub	sp, #256	; 0x100
 800214a:	af00      	add	r7, sp, #0
 800214c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002160:	68d9      	ldr	r1, [r3, #12]
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	ea40 0301 	orr.w	r3, r0, r1
 800216c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	431a      	orrs	r2, r3
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	431a      	orrs	r2, r3
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800219c:	f021 010c 	bic.w	r1, r1, #12
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021aa:	430b      	orrs	r3, r1
 80021ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021be:	6999      	ldr	r1, [r3, #24]
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	ea40 0301 	orr.w	r3, r0, r1
 80021ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b8f      	ldr	r3, [pc, #572]	; (8002410 <UART_SetConfig+0x2cc>)
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d005      	beq.n	80021e4 <UART_SetConfig+0xa0>
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <UART_SetConfig+0x2d0>)
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d104      	bne.n	80021ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021e4:	f7ff fe4c 	bl	8001e80 <HAL_RCC_GetPCLK2Freq>
 80021e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021ec:	e003      	b.n	80021f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ee:	f7ff fe33 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 80021f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002200:	f040 810c 	bne.w	800241c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800220e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002216:	4622      	mov	r2, r4
 8002218:	462b      	mov	r3, r5
 800221a:	1891      	adds	r1, r2, r2
 800221c:	65b9      	str	r1, [r7, #88]	; 0x58
 800221e:	415b      	adcs	r3, r3
 8002220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002226:	4621      	mov	r1, r4
 8002228:	eb12 0801 	adds.w	r8, r2, r1
 800222c:	4629      	mov	r1, r5
 800222e:	eb43 0901 	adc.w	r9, r3, r1
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800223e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002246:	4690      	mov	r8, r2
 8002248:	4699      	mov	r9, r3
 800224a:	4623      	mov	r3, r4
 800224c:	eb18 0303 	adds.w	r3, r8, r3
 8002250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002254:	462b      	mov	r3, r5
 8002256:	eb49 0303 	adc.w	r3, r9, r3
 800225a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800226a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800226e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002272:	460b      	mov	r3, r1
 8002274:	18db      	adds	r3, r3, r3
 8002276:	653b      	str	r3, [r7, #80]	; 0x50
 8002278:	4613      	mov	r3, r2
 800227a:	eb42 0303 	adc.w	r3, r2, r3
 800227e:	657b      	str	r3, [r7, #84]	; 0x54
 8002280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002288:	f7fe f80a 	bl	80002a0 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4b61      	ldr	r3, [pc, #388]	; (8002418 <UART_SetConfig+0x2d4>)
 8002292:	fba3 2302 	umull	r2, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	011c      	lsls	r4, r3, #4
 800229a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022ac:	4642      	mov	r2, r8
 80022ae:	464b      	mov	r3, r9
 80022b0:	1891      	adds	r1, r2, r2
 80022b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80022b4:	415b      	adcs	r3, r3
 80022b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022bc:	4641      	mov	r1, r8
 80022be:	eb12 0a01 	adds.w	sl, r2, r1
 80022c2:	4649      	mov	r1, r9
 80022c4:	eb43 0b01 	adc.w	fp, r3, r1
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022dc:	4692      	mov	sl, r2
 80022de:	469b      	mov	fp, r3
 80022e0:	4643      	mov	r3, r8
 80022e2:	eb1a 0303 	adds.w	r3, sl, r3
 80022e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022ea:	464b      	mov	r3, r9
 80022ec:	eb4b 0303 	adc.w	r3, fp, r3
 80022f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002300:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002308:	460b      	mov	r3, r1
 800230a:	18db      	adds	r3, r3, r3
 800230c:	643b      	str	r3, [r7, #64]	; 0x40
 800230e:	4613      	mov	r3, r2
 8002310:	eb42 0303 	adc.w	r3, r2, r3
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
 8002316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800231a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800231e:	f7fd ffbf 	bl	80002a0 <__aeabi_uldivmod>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4611      	mov	r1, r2
 8002328:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <UART_SetConfig+0x2d4>)
 800232a:	fba3 2301 	umull	r2, r3, r3, r1
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2264      	movs	r2, #100	; 0x64
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	1acb      	subs	r3, r1, r3
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <UART_SetConfig+0x2d4>)
 8002340:	fba3 2302 	umull	r2, r3, r3, r2
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800234c:	441c      	add	r4, r3
 800234e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002352:	2200      	movs	r2, #0
 8002354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002358:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800235c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002360:	4642      	mov	r2, r8
 8002362:	464b      	mov	r3, r9
 8002364:	1891      	adds	r1, r2, r2
 8002366:	63b9      	str	r1, [r7, #56]	; 0x38
 8002368:	415b      	adcs	r3, r3
 800236a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002370:	4641      	mov	r1, r8
 8002372:	1851      	adds	r1, r2, r1
 8002374:	6339      	str	r1, [r7, #48]	; 0x30
 8002376:	4649      	mov	r1, r9
 8002378:	414b      	adcs	r3, r1
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002388:	4659      	mov	r1, fp
 800238a:	00cb      	lsls	r3, r1, #3
 800238c:	4651      	mov	r1, sl
 800238e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002392:	4651      	mov	r1, sl
 8002394:	00ca      	lsls	r2, r1, #3
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	4603      	mov	r3, r0
 800239c:	4642      	mov	r2, r8
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023a4:	464b      	mov	r3, r9
 80023a6:	460a      	mov	r2, r1
 80023a8:	eb42 0303 	adc.w	r3, r2, r3
 80023ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023c4:	460b      	mov	r3, r1
 80023c6:	18db      	adds	r3, r3, r3
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ca:	4613      	mov	r3, r2
 80023cc:	eb42 0303 	adc.w	r3, r2, r3
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023da:	f7fd ff61 	bl	80002a0 <__aeabi_uldivmod>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <UART_SetConfig+0x2d4>)
 80023e4:	fba3 1302 	umull	r1, r3, r3, r2
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	2164      	movs	r1, #100	; 0x64
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	3332      	adds	r3, #50	; 0x32
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <UART_SetConfig+0x2d4>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	f003 0207 	and.w	r2, r3, #7
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4422      	add	r2, r4
 800240a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800240c:	e105      	b.n	800261a <UART_SetConfig+0x4d6>
 800240e:	bf00      	nop
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800241c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002420:	2200      	movs	r2, #0
 8002422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002426:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800242a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800242e:	4642      	mov	r2, r8
 8002430:	464b      	mov	r3, r9
 8002432:	1891      	adds	r1, r2, r2
 8002434:	6239      	str	r1, [r7, #32]
 8002436:	415b      	adcs	r3, r3
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800243e:	4641      	mov	r1, r8
 8002440:	1854      	adds	r4, r2, r1
 8002442:	4649      	mov	r1, r9
 8002444:	eb43 0501 	adc.w	r5, r3, r1
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	00eb      	lsls	r3, r5, #3
 8002452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002456:	00e2      	lsls	r2, r4, #3
 8002458:	4614      	mov	r4, r2
 800245a:	461d      	mov	r5, r3
 800245c:	4643      	mov	r3, r8
 800245e:	18e3      	adds	r3, r4, r3
 8002460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002464:	464b      	mov	r3, r9
 8002466:	eb45 0303 	adc.w	r3, r5, r3
 800246a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800247a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800248a:	4629      	mov	r1, r5
 800248c:	008b      	lsls	r3, r1, #2
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002494:	4621      	mov	r1, r4
 8002496:	008a      	lsls	r2, r1, #2
 8002498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800249c:	f7fd ff00 	bl	80002a0 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4b60      	ldr	r3, [pc, #384]	; (8002628 <UART_SetConfig+0x4e4>)
 80024a6:	fba3 2302 	umull	r2, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	011c      	lsls	r4, r3, #4
 80024ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024c0:	4642      	mov	r2, r8
 80024c2:	464b      	mov	r3, r9
 80024c4:	1891      	adds	r1, r2, r2
 80024c6:	61b9      	str	r1, [r7, #24]
 80024c8:	415b      	adcs	r3, r3
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d0:	4641      	mov	r1, r8
 80024d2:	1851      	adds	r1, r2, r1
 80024d4:	6139      	str	r1, [r7, #16]
 80024d6:	4649      	mov	r1, r9
 80024d8:	414b      	adcs	r3, r1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024e8:	4659      	mov	r1, fp
 80024ea:	00cb      	lsls	r3, r1, #3
 80024ec:	4651      	mov	r1, sl
 80024ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f2:	4651      	mov	r1, sl
 80024f4:	00ca      	lsls	r2, r1, #3
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	4642      	mov	r2, r8
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002504:	464b      	mov	r3, r9
 8002506:	460a      	mov	r2, r1
 8002508:	eb42 0303 	adc.w	r3, r2, r3
 800250c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	67bb      	str	r3, [r7, #120]	; 0x78
 800251a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002528:	4649      	mov	r1, r9
 800252a:	008b      	lsls	r3, r1, #2
 800252c:	4641      	mov	r1, r8
 800252e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002532:	4641      	mov	r1, r8
 8002534:	008a      	lsls	r2, r1, #2
 8002536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800253a:	f7fd feb1 	bl	80002a0 <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <UART_SetConfig+0x4e4>)
 8002544:	fba3 1302 	umull	r1, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	2164      	movs	r1, #100	; 0x64
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	3332      	adds	r3, #50	; 0x32
 8002556:	4a34      	ldr	r2, [pc, #208]	; (8002628 <UART_SetConfig+0x4e4>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002562:	441c      	add	r4, r3
 8002564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002568:	2200      	movs	r2, #0
 800256a:	673b      	str	r3, [r7, #112]	; 0x70
 800256c:	677a      	str	r2, [r7, #116]	; 0x74
 800256e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002572:	4642      	mov	r2, r8
 8002574:	464b      	mov	r3, r9
 8002576:	1891      	adds	r1, r2, r2
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	415b      	adcs	r3, r3
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002582:	4641      	mov	r1, r8
 8002584:	1851      	adds	r1, r2, r1
 8002586:	6039      	str	r1, [r7, #0]
 8002588:	4649      	mov	r1, r9
 800258a:	414b      	adcs	r3, r1
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800259a:	4659      	mov	r1, fp
 800259c:	00cb      	lsls	r3, r1, #3
 800259e:	4651      	mov	r1, sl
 80025a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025a4:	4651      	mov	r1, sl
 80025a6:	00ca      	lsls	r2, r1, #3
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	4603      	mov	r3, r0
 80025ae:	4642      	mov	r2, r8
 80025b0:	189b      	adds	r3, r3, r2
 80025b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80025b4:	464b      	mov	r3, r9
 80025b6:	460a      	mov	r2, r1
 80025b8:	eb42 0303 	adc.w	r3, r2, r3
 80025bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
 80025c8:	667a      	str	r2, [r7, #100]	; 0x64
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025d6:	4649      	mov	r1, r9
 80025d8:	008b      	lsls	r3, r1, #2
 80025da:	4641      	mov	r1, r8
 80025dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025e0:	4641      	mov	r1, r8
 80025e2:	008a      	lsls	r2, r1, #2
 80025e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025e8:	f7fd fe5a 	bl	80002a0 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <UART_SetConfig+0x4e4>)
 80025f2:	fba3 1302 	umull	r1, r3, r3, r2
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2164      	movs	r1, #100	; 0x64
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	3332      	adds	r3, #50	; 0x32
 8002604:	4a08      	ldr	r2, [pc, #32]	; (8002628 <UART_SetConfig+0x4e4>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	f003 020f 	and.w	r2, r3, #15
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4422      	add	r2, r4
 8002618:	609a      	str	r2, [r3, #8]
}
 800261a:	bf00      	nop
 800261c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002620:	46bd      	mov	sp, r7
 8002622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002626:	bf00      	nop
 8002628:	51eb851f 	.word	0x51eb851f

0800262c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002632:	f7fe fb81 	bl	8000d38 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002636:	f000 f861 	bl	80026fc <SystemClock_Config>

  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800263a:	2100      	movs	r1, #0
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe f9e5 	bl	8000a0c <BSP_PB_Init>
  /* Initialize BSP Led for LED2 and LED3*/
  BSP_LED_Init(LED1); // Initializes UART
 8002642:	2000      	movs	r0, #0
 8002644:	f7fe f95e 	bl	8000904 <BSP_LED_Init>
  BSP_LED_Init(LED2); // Function program
 8002648:	2001      	movs	r0, #1
 800264a:	f7fe f95b 	bl	8000904 <BSP_LED_Init>
  BSP_LED_Init(LED3); // Error not Initializes UART F
 800264e:	2002      	movs	r0, #2
 8002650:	f7fe f958 	bl	8000904 <BSP_LED_Init>


  /* Initializes debounce finite state machine (FSM) */
  debounceFSM_init();
 8002654:	f7fd ffe2 	bl	800061c <debounceFSM_init>
    delaydebounce_t Delay1;
	delay_t Delay2;
	delay_t Delay3;

  /* Initializes the delay to 40 ms, 100 ms, and 500 ms respectively */
  delayInitD(&Delay1, TIME1);
 8002658:	f107 0318 	add.w	r3, r7, #24
 800265c:	2128      	movs	r1, #40	; 0x28
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe f8ea 	bl	8000838 <delayInitD>
  delayInit(&Delay2, TIME2);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	2164      	movs	r1, #100	; 0x64
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe f888 	bl	8000780 <delayInit>
  delayInit(&Delay3, TIME3);
 8002670:	463b      	mov	r3, r7
 8002672:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe f882 	bl	8000780 <delayInit>


   // Inicialización de la UART utilizando la biblioteca creada
   if (uartInit() != true) {
 800267c:	f7fe f8fa 	bl	8000874 <uartInit>
 8002680:	4603      	mov	r3, r0
 8002682:	f083 0301 	eor.w	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <main+0x66>
       // Manejo de error si la inicialización no fue exitosa
       Error_Handler();
 800268c:	f000 f898 	bl	80027c0 <Error_Handler>
 8002690:	e002      	b.n	8002698 <main+0x6c>
   }
   else{
	   BSP_LED_Toggle(LED1); // LED 2 que me indica que se inicialiso las trasnmición UART
 8002692:	2000      	movs	r0, #0
 8002694:	f7fe f9a0 	bl	80009d8 <BSP_LED_Toggle>
	      	 * This also results in a change in the return of the readKey() function from
	      	 * true -> false or from false to true each time a valid BUTTON_FALLING is detected.
	      	 * */
	      	//;

	        debounceFSM_update(&Delay1);
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ffc9 	bl	8000634 <debounceFSM_update>
	      	if (status != readStatus()){
 80026a2:	f7fd ff8b 	bl	80005bc <readStatus>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d008      	beq.n	80026c0 <main+0x94>
      			status=readStatus();
 80026ae:	f7fd ff85 	bl	80005bc <readStatus>
 80026b2:	6278      	str	r0, [r7, #36]	; 0x24
      			uartSendString(status);
 80026b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b6:	f7fe f90f 	bl	80008d8 <uartSendString>
      			uartSendString("\n");
 80026ba:	480f      	ldr	r0, [pc, #60]	; (80026f8 <main+0xcc>)
 80026bc:	f7fe f90c 	bl	80008d8 <uartSendString>
	      	}
	          /* If the state of readKey() changes to false or true as a result of pressing
	           * a button validly according to the debounce rules, it will trigger a change
	           * in the blink frequency of LED2.
	           * */
	      	if (readKey()){
 80026c0:	f7fd ff70 	bl	80005a4 <readKey>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <main+0xb6>
	      		if (delayRead(&Delay2)){
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe f874 	bl	80007bc <delayRead>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0de      	beq.n	8002698 <main+0x6c>
	      			BSP_LED_Toggle(LED2); // Toggles LED2 with a blink frequency determined by Delay2
 80026da:	2001      	movs	r0, #1
 80026dc:	f7fe f97c 	bl	80009d8 <BSP_LED_Toggle>
 80026e0:	e7da      	b.n	8002698 <main+0x6c>

	      		}
	      	}
	      	else{
	      		if (delayRead(&Delay3)){
 80026e2:	463b      	mov	r3, r7
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe f869 	bl	80007bc <delayRead>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0d3      	beq.n	8002698 <main+0x6c>

	      			BSP_LED_Toggle(LED2); // Toggles LED2 with a blink frequency determined by Delay3
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7fe f971 	bl	80009d8 <BSP_LED_Toggle>
	        debounceFSM_update(&Delay1);
 80026f6:	e7cf      	b.n	8002698 <main+0x6c>
 80026f8:	08003b7c 	.word	0x08003b7c

080026fc <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b094      	sub	sp, #80	; 0x50
 8002700:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <SystemClock_Config+0xbc>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <SystemClock_Config+0xbc>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <SystemClock_Config+0xbc>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <SystemClock_Config+0xc0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <SystemClock_Config+0xc0>)
 8002728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <SystemClock_Config+0xc0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800273a:	2301      	movs	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800273e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002742:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002744:	2302      	movs	r3, #2
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002748:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800274e:	2308      	movs	r3, #8
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002752:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002758:	2302      	movs	r3, #2
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800275c:	2307      	movs	r3, #7
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe ff07 	bl	8001578 <HAL_RCC_OscConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002770:	f000 f826 	bl	80027c0 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002774:	f7fe feb0 	bl	80014d8 <HAL_PWREx_EnableOverDrive>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800277e:	f000 f81f 	bl	80027c0 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002782:	230f      	movs	r3, #15
 8002784:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002786:	2302      	movs	r3, #2
 8002788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278a:	2300      	movs	r3, #0
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800278e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002798:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800279a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800279e:	2105      	movs	r1, #5
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff f961 	bl	8001a68 <HAL_RCC_ClockConfig>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80027ac:	f000 f808 	bl	80027c0 <Error_Handler>
  }
}
 80027b0:	bf00      	nop
 80027b2:	3750      	adds	r7, #80	; 0x50
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000

080027c0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED3);
 80027c4:	2002      	movs	r0, #2
 80027c6:	f7fe f8ed 	bl	80009a4 <BSP_LED_On>
  while (1)
 80027ca:	e7fe      	b.n	80027ca <Error_Handler+0xa>

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002804 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027d2:	e003      	b.n	80027dc <LoopCopyDataInit>

080027d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027da:	3104      	adds	r1, #4

080027dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027dc:	480b      	ldr	r0, [pc, #44]	; (800280c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027e4:	d3f6      	bcc.n	80027d4 <CopyDataInit>
  ldr  r2, =_sbss
 80027e6:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027e8:	e002      	b.n	80027f0 <LoopFillZerobss>

080027ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027ec:	f842 3b04 	str.w	r3, [r2], #4

080027f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027f4:	d3f9      	bcc.n	80027ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027f6:	f7fe f975 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fa:	f000 f847 	bl	800288c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7ff ff15 	bl	800262c <main>
  bx  lr    
 8002802:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002804:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002808:	08003cbc 	.word	0x08003cbc
  ldr  r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002810:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002814:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002818:	20000108 	.word	0x20000108

0800281c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC_IRQHandler>
	...

08002820 <__assert_func>:
 8002820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002822:	4614      	mov	r4, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <__assert_func+0x2c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4605      	mov	r5, r0
 800282c:	68d8      	ldr	r0, [r3, #12]
 800282e:	b14c      	cbz	r4, 8002844 <__assert_func+0x24>
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <__assert_func+0x30>)
 8002832:	9100      	str	r1, [sp, #0]
 8002834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002838:	4906      	ldr	r1, [pc, #24]	; (8002854 <__assert_func+0x34>)
 800283a:	462b      	mov	r3, r5
 800283c:	f000 f814 	bl	8002868 <fiprintf>
 8002840:	f000 fbfe 	bl	8003040 <abort>
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__assert_func+0x38>)
 8002846:	461c      	mov	r4, r3
 8002848:	e7f3      	b.n	8002832 <__assert_func+0x12>
 800284a:	bf00      	nop
 800284c:	20000024 	.word	0x20000024
 8002850:	08003bd8 	.word	0x08003bd8
 8002854:	08003be5 	.word	0x08003be5
 8002858:	08003c13 	.word	0x08003c13

0800285c <__errno>:
 800285c:	4b01      	ldr	r3, [pc, #4]	; (8002864 <__errno+0x8>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000024 	.word	0x20000024

08002868 <fiprintf>:
 8002868:	b40e      	push	{r1, r2, r3}
 800286a:	b503      	push	{r0, r1, lr}
 800286c:	4601      	mov	r1, r0
 800286e:	ab03      	add	r3, sp, #12
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <fiprintf+0x20>)
 8002872:	f853 2b04 	ldr.w	r2, [r3], #4
 8002876:	6800      	ldr	r0, [r0, #0]
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	f000 f85d 	bl	8002938 <_vfiprintf_r>
 800287e:	b002      	add	sp, #8
 8002880:	f85d eb04 	ldr.w	lr, [sp], #4
 8002884:	b003      	add	sp, #12
 8002886:	4770      	bx	lr
 8002888:	20000024 	.word	0x20000024

0800288c <__libc_init_array>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	4d0d      	ldr	r5, [pc, #52]	; (80028c4 <__libc_init_array+0x38>)
 8002890:	4c0d      	ldr	r4, [pc, #52]	; (80028c8 <__libc_init_array+0x3c>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	2600      	movs	r6, #0
 8002898:	42a6      	cmp	r6, r4
 800289a:	d109      	bne.n	80028b0 <__libc_init_array+0x24>
 800289c:	4d0b      	ldr	r5, [pc, #44]	; (80028cc <__libc_init_array+0x40>)
 800289e:	4c0c      	ldr	r4, [pc, #48]	; (80028d0 <__libc_init_array+0x44>)
 80028a0:	f000 ffe2 	bl	8003868 <_init>
 80028a4:	1b64      	subs	r4, r4, r5
 80028a6:	10a4      	asrs	r4, r4, #2
 80028a8:	2600      	movs	r6, #0
 80028aa:	42a6      	cmp	r6, r4
 80028ac:	d105      	bne.n	80028ba <__libc_init_array+0x2e>
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
 80028b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b4:	4798      	blx	r3
 80028b6:	3601      	adds	r6, #1
 80028b8:	e7ee      	b.n	8002898 <__libc_init_array+0xc>
 80028ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80028be:	4798      	blx	r3
 80028c0:	3601      	adds	r6, #1
 80028c2:	e7f2      	b.n	80028aa <__libc_init_array+0x1e>
 80028c4:	08003cb4 	.word	0x08003cb4
 80028c8:	08003cb4 	.word	0x08003cb4
 80028cc:	08003cb4 	.word	0x08003cb4
 80028d0:	08003cb8 	.word	0x08003cb8

080028d4 <memset>:
 80028d4:	4402      	add	r2, r0
 80028d6:	4603      	mov	r3, r0
 80028d8:	4293      	cmp	r3, r2
 80028da:	d100      	bne.n	80028de <memset+0xa>
 80028dc:	4770      	bx	lr
 80028de:	f803 1b01 	strb.w	r1, [r3], #1
 80028e2:	e7f9      	b.n	80028d8 <memset+0x4>

080028e4 <__sfputc_r>:
 80028e4:	6893      	ldr	r3, [r2, #8]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	b410      	push	{r4}
 80028ec:	6093      	str	r3, [r2, #8]
 80028ee:	da08      	bge.n	8002902 <__sfputc_r+0x1e>
 80028f0:	6994      	ldr	r4, [r2, #24]
 80028f2:	42a3      	cmp	r3, r4
 80028f4:	db01      	blt.n	80028fa <__sfputc_r+0x16>
 80028f6:	290a      	cmp	r1, #10
 80028f8:	d103      	bne.n	8002902 <__sfputc_r+0x1e>
 80028fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028fe:	f000 badf 	b.w	8002ec0 <__swbuf_r>
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	1c58      	adds	r0, r3, #1
 8002906:	6010      	str	r0, [r2, #0]
 8002908:	7019      	strb	r1, [r3, #0]
 800290a:	4608      	mov	r0, r1
 800290c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002910:	4770      	bx	lr

08002912 <__sfputs_r>:
 8002912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002914:	4606      	mov	r6, r0
 8002916:	460f      	mov	r7, r1
 8002918:	4614      	mov	r4, r2
 800291a:	18d5      	adds	r5, r2, r3
 800291c:	42ac      	cmp	r4, r5
 800291e:	d101      	bne.n	8002924 <__sfputs_r+0x12>
 8002920:	2000      	movs	r0, #0
 8002922:	e007      	b.n	8002934 <__sfputs_r+0x22>
 8002924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002928:	463a      	mov	r2, r7
 800292a:	4630      	mov	r0, r6
 800292c:	f7ff ffda 	bl	80028e4 <__sfputc_r>
 8002930:	1c43      	adds	r3, r0, #1
 8002932:	d1f3      	bne.n	800291c <__sfputs_r+0xa>
 8002934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002938 <_vfiprintf_r>:
 8002938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800293c:	460d      	mov	r5, r1
 800293e:	b09d      	sub	sp, #116	; 0x74
 8002940:	4614      	mov	r4, r2
 8002942:	4698      	mov	r8, r3
 8002944:	4606      	mov	r6, r0
 8002946:	b118      	cbz	r0, 8002950 <_vfiprintf_r+0x18>
 8002948:	6983      	ldr	r3, [r0, #24]
 800294a:	b90b      	cbnz	r3, 8002950 <_vfiprintf_r+0x18>
 800294c:	f000 fc9a 	bl	8003284 <__sinit>
 8002950:	4b89      	ldr	r3, [pc, #548]	; (8002b78 <_vfiprintf_r+0x240>)
 8002952:	429d      	cmp	r5, r3
 8002954:	d11b      	bne.n	800298e <_vfiprintf_r+0x56>
 8002956:	6875      	ldr	r5, [r6, #4]
 8002958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800295a:	07d9      	lsls	r1, r3, #31
 800295c:	d405      	bmi.n	800296a <_vfiprintf_r+0x32>
 800295e:	89ab      	ldrh	r3, [r5, #12]
 8002960:	059a      	lsls	r2, r3, #22
 8002962:	d402      	bmi.n	800296a <_vfiprintf_r+0x32>
 8002964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002966:	f000 fd2b 	bl	80033c0 <__retarget_lock_acquire_recursive>
 800296a:	89ab      	ldrh	r3, [r5, #12]
 800296c:	071b      	lsls	r3, r3, #28
 800296e:	d501      	bpl.n	8002974 <_vfiprintf_r+0x3c>
 8002970:	692b      	ldr	r3, [r5, #16]
 8002972:	b9eb      	cbnz	r3, 80029b0 <_vfiprintf_r+0x78>
 8002974:	4629      	mov	r1, r5
 8002976:	4630      	mov	r0, r6
 8002978:	f000 faf4 	bl	8002f64 <__swsetup_r>
 800297c:	b1c0      	cbz	r0, 80029b0 <_vfiprintf_r+0x78>
 800297e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002980:	07dc      	lsls	r4, r3, #31
 8002982:	d50e      	bpl.n	80029a2 <_vfiprintf_r+0x6a>
 8002984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002988:	b01d      	add	sp, #116	; 0x74
 800298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298e:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <_vfiprintf_r+0x244>)
 8002990:	429d      	cmp	r5, r3
 8002992:	d101      	bne.n	8002998 <_vfiprintf_r+0x60>
 8002994:	68b5      	ldr	r5, [r6, #8]
 8002996:	e7df      	b.n	8002958 <_vfiprintf_r+0x20>
 8002998:	4b79      	ldr	r3, [pc, #484]	; (8002b80 <_vfiprintf_r+0x248>)
 800299a:	429d      	cmp	r5, r3
 800299c:	bf08      	it	eq
 800299e:	68f5      	ldreq	r5, [r6, #12]
 80029a0:	e7da      	b.n	8002958 <_vfiprintf_r+0x20>
 80029a2:	89ab      	ldrh	r3, [r5, #12]
 80029a4:	0598      	lsls	r0, r3, #22
 80029a6:	d4ed      	bmi.n	8002984 <_vfiprintf_r+0x4c>
 80029a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029aa:	f000 fd0a 	bl	80033c2 <__retarget_lock_release_recursive>
 80029ae:	e7e9      	b.n	8002984 <_vfiprintf_r+0x4c>
 80029b0:	2300      	movs	r3, #0
 80029b2:	9309      	str	r3, [sp, #36]	; 0x24
 80029b4:	2320      	movs	r3, #32
 80029b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80029be:	2330      	movs	r3, #48	; 0x30
 80029c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002b84 <_vfiprintf_r+0x24c>
 80029c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029c8:	f04f 0901 	mov.w	r9, #1
 80029cc:	4623      	mov	r3, r4
 80029ce:	469a      	mov	sl, r3
 80029d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029d4:	b10a      	cbz	r2, 80029da <_vfiprintf_r+0xa2>
 80029d6:	2a25      	cmp	r2, #37	; 0x25
 80029d8:	d1f9      	bne.n	80029ce <_vfiprintf_r+0x96>
 80029da:	ebba 0b04 	subs.w	fp, sl, r4
 80029de:	d00b      	beq.n	80029f8 <_vfiprintf_r+0xc0>
 80029e0:	465b      	mov	r3, fp
 80029e2:	4622      	mov	r2, r4
 80029e4:	4629      	mov	r1, r5
 80029e6:	4630      	mov	r0, r6
 80029e8:	f7ff ff93 	bl	8002912 <__sfputs_r>
 80029ec:	3001      	adds	r0, #1
 80029ee:	f000 80aa 	beq.w	8002b46 <_vfiprintf_r+0x20e>
 80029f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029f4:	445a      	add	r2, fp
 80029f6:	9209      	str	r2, [sp, #36]	; 0x24
 80029f8:	f89a 3000 	ldrb.w	r3, [sl]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a2 	beq.w	8002b46 <_vfiprintf_r+0x20e>
 8002a02:	2300      	movs	r3, #0
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a0c:	f10a 0a01 	add.w	sl, sl, #1
 8002a10:	9304      	str	r3, [sp, #16]
 8002a12:	9307      	str	r3, [sp, #28]
 8002a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a18:	931a      	str	r3, [sp, #104]	; 0x68
 8002a1a:	4654      	mov	r4, sl
 8002a1c:	2205      	movs	r2, #5
 8002a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a22:	4858      	ldr	r0, [pc, #352]	; (8002b84 <_vfiprintf_r+0x24c>)
 8002a24:	f7fd fbec 	bl	8000200 <memchr>
 8002a28:	9a04      	ldr	r2, [sp, #16]
 8002a2a:	b9d8      	cbnz	r0, 8002a64 <_vfiprintf_r+0x12c>
 8002a2c:	06d1      	lsls	r1, r2, #27
 8002a2e:	bf44      	itt	mi
 8002a30:	2320      	movmi	r3, #32
 8002a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a36:	0713      	lsls	r3, r2, #28
 8002a38:	bf44      	itt	mi
 8002a3a:	232b      	movmi	r3, #43	; 0x2b
 8002a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a40:	f89a 3000 	ldrb.w	r3, [sl]
 8002a44:	2b2a      	cmp	r3, #42	; 0x2a
 8002a46:	d015      	beq.n	8002a74 <_vfiprintf_r+0x13c>
 8002a48:	9a07      	ldr	r2, [sp, #28]
 8002a4a:	4654      	mov	r4, sl
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f04f 0c0a 	mov.w	ip, #10
 8002a52:	4621      	mov	r1, r4
 8002a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a58:	3b30      	subs	r3, #48	; 0x30
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	d94e      	bls.n	8002afc <_vfiprintf_r+0x1c4>
 8002a5e:	b1b0      	cbz	r0, 8002a8e <_vfiprintf_r+0x156>
 8002a60:	9207      	str	r2, [sp, #28]
 8002a62:	e014      	b.n	8002a8e <_vfiprintf_r+0x156>
 8002a64:	eba0 0308 	sub.w	r3, r0, r8
 8002a68:	fa09 f303 	lsl.w	r3, r9, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	9304      	str	r3, [sp, #16]
 8002a70:	46a2      	mov	sl, r4
 8002a72:	e7d2      	b.n	8002a1a <_vfiprintf_r+0xe2>
 8002a74:	9b03      	ldr	r3, [sp, #12]
 8002a76:	1d19      	adds	r1, r3, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	9103      	str	r1, [sp, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bfbb      	ittet	lt
 8002a80:	425b      	neglt	r3, r3
 8002a82:	f042 0202 	orrlt.w	r2, r2, #2
 8002a86:	9307      	strge	r3, [sp, #28]
 8002a88:	9307      	strlt	r3, [sp, #28]
 8002a8a:	bfb8      	it	lt
 8002a8c:	9204      	strlt	r2, [sp, #16]
 8002a8e:	7823      	ldrb	r3, [r4, #0]
 8002a90:	2b2e      	cmp	r3, #46	; 0x2e
 8002a92:	d10c      	bne.n	8002aae <_vfiprintf_r+0x176>
 8002a94:	7863      	ldrb	r3, [r4, #1]
 8002a96:	2b2a      	cmp	r3, #42	; 0x2a
 8002a98:	d135      	bne.n	8002b06 <_vfiprintf_r+0x1ce>
 8002a9a:	9b03      	ldr	r3, [sp, #12]
 8002a9c:	1d1a      	adds	r2, r3, #4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	9203      	str	r2, [sp, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bfb8      	it	lt
 8002aa6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002aaa:	3402      	adds	r4, #2
 8002aac:	9305      	str	r3, [sp, #20]
 8002aae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b94 <_vfiprintf_r+0x25c>
 8002ab2:	7821      	ldrb	r1, [r4, #0]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	4650      	mov	r0, sl
 8002ab8:	f7fd fba2 	bl	8000200 <memchr>
 8002abc:	b140      	cbz	r0, 8002ad0 <_vfiprintf_r+0x198>
 8002abe:	2340      	movs	r3, #64	; 0x40
 8002ac0:	eba0 000a 	sub.w	r0, r0, sl
 8002ac4:	fa03 f000 	lsl.w	r0, r3, r0
 8002ac8:	9b04      	ldr	r3, [sp, #16]
 8002aca:	4303      	orrs	r3, r0
 8002acc:	3401      	adds	r4, #1
 8002ace:	9304      	str	r3, [sp, #16]
 8002ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ad4:	482c      	ldr	r0, [pc, #176]	; (8002b88 <_vfiprintf_r+0x250>)
 8002ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ada:	2206      	movs	r2, #6
 8002adc:	f7fd fb90 	bl	8000200 <memchr>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d03f      	beq.n	8002b64 <_vfiprintf_r+0x22c>
 8002ae4:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <_vfiprintf_r+0x254>)
 8002ae6:	bb1b      	cbnz	r3, 8002b30 <_vfiprintf_r+0x1f8>
 8002ae8:	9b03      	ldr	r3, [sp, #12]
 8002aea:	3307      	adds	r3, #7
 8002aec:	f023 0307 	bic.w	r3, r3, #7
 8002af0:	3308      	adds	r3, #8
 8002af2:	9303      	str	r3, [sp, #12]
 8002af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002af6:	443b      	add	r3, r7
 8002af8:	9309      	str	r3, [sp, #36]	; 0x24
 8002afa:	e767      	b.n	80029cc <_vfiprintf_r+0x94>
 8002afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b00:	460c      	mov	r4, r1
 8002b02:	2001      	movs	r0, #1
 8002b04:	e7a5      	b.n	8002a52 <_vfiprintf_r+0x11a>
 8002b06:	2300      	movs	r3, #0
 8002b08:	3401      	adds	r4, #1
 8002b0a:	9305      	str	r3, [sp, #20]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f04f 0c0a 	mov.w	ip, #10
 8002b12:	4620      	mov	r0, r4
 8002b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b18:	3a30      	subs	r2, #48	; 0x30
 8002b1a:	2a09      	cmp	r2, #9
 8002b1c:	d903      	bls.n	8002b26 <_vfiprintf_r+0x1ee>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0c5      	beq.n	8002aae <_vfiprintf_r+0x176>
 8002b22:	9105      	str	r1, [sp, #20]
 8002b24:	e7c3      	b.n	8002aae <_vfiprintf_r+0x176>
 8002b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e7f0      	b.n	8002b12 <_vfiprintf_r+0x1da>
 8002b30:	ab03      	add	r3, sp, #12
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	462a      	mov	r2, r5
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <_vfiprintf_r+0x258>)
 8002b38:	a904      	add	r1, sp, #16
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	f3af 8000 	nop.w
 8002b40:	4607      	mov	r7, r0
 8002b42:	1c78      	adds	r0, r7, #1
 8002b44:	d1d6      	bne.n	8002af4 <_vfiprintf_r+0x1bc>
 8002b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b48:	07d9      	lsls	r1, r3, #31
 8002b4a:	d405      	bmi.n	8002b58 <_vfiprintf_r+0x220>
 8002b4c:	89ab      	ldrh	r3, [r5, #12]
 8002b4e:	059a      	lsls	r2, r3, #22
 8002b50:	d402      	bmi.n	8002b58 <_vfiprintf_r+0x220>
 8002b52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b54:	f000 fc35 	bl	80033c2 <__retarget_lock_release_recursive>
 8002b58:	89ab      	ldrh	r3, [r5, #12]
 8002b5a:	065b      	lsls	r3, r3, #25
 8002b5c:	f53f af12 	bmi.w	8002984 <_vfiprintf_r+0x4c>
 8002b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b62:	e711      	b.n	8002988 <_vfiprintf_r+0x50>
 8002b64:	ab03      	add	r3, sp, #12
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	462a      	mov	r2, r5
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <_vfiprintf_r+0x258>)
 8002b6c:	a904      	add	r1, sp, #16
 8002b6e:	4630      	mov	r0, r6
 8002b70:	f000 f880 	bl	8002c74 <_printf_i>
 8002b74:	e7e4      	b.n	8002b40 <_vfiprintf_r+0x208>
 8002b76:	bf00      	nop
 8002b78:	08003c6c 	.word	0x08003c6c
 8002b7c:	08003c8c 	.word	0x08003c8c
 8002b80:	08003c4c 	.word	0x08003c4c
 8002b84:	08003c18 	.word	0x08003c18
 8002b88:	08003c22 	.word	0x08003c22
 8002b8c:	00000000 	.word	0x00000000
 8002b90:	08002913 	.word	0x08002913
 8002b94:	08003c1e 	.word	0x08003c1e

08002b98 <_printf_common>:
 8002b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b9c:	4616      	mov	r6, r2
 8002b9e:	4699      	mov	r9, r3
 8002ba0:	688a      	ldr	r2, [r1, #8]
 8002ba2:	690b      	ldr	r3, [r1, #16]
 8002ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	bfb8      	it	lt
 8002bac:	4613      	movlt	r3, r2
 8002bae:	6033      	str	r3, [r6, #0]
 8002bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bb4:	4607      	mov	r7, r0
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	b10a      	cbz	r2, 8002bbe <_printf_common+0x26>
 8002bba:	3301      	adds	r3, #1
 8002bbc:	6033      	str	r3, [r6, #0]
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	0699      	lsls	r1, r3, #26
 8002bc2:	bf42      	ittt	mi
 8002bc4:	6833      	ldrmi	r3, [r6, #0]
 8002bc6:	3302      	addmi	r3, #2
 8002bc8:	6033      	strmi	r3, [r6, #0]
 8002bca:	6825      	ldr	r5, [r4, #0]
 8002bcc:	f015 0506 	ands.w	r5, r5, #6
 8002bd0:	d106      	bne.n	8002be0 <_printf_common+0x48>
 8002bd2:	f104 0a19 	add.w	sl, r4, #25
 8002bd6:	68e3      	ldr	r3, [r4, #12]
 8002bd8:	6832      	ldr	r2, [r6, #0]
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	42ab      	cmp	r3, r5
 8002bde:	dc26      	bgt.n	8002c2e <_printf_common+0x96>
 8002be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002be4:	1e13      	subs	r3, r2, #0
 8002be6:	6822      	ldr	r2, [r4, #0]
 8002be8:	bf18      	it	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	0692      	lsls	r2, r2, #26
 8002bee:	d42b      	bmi.n	8002c48 <_printf_common+0xb0>
 8002bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	47c0      	blx	r8
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	d01e      	beq.n	8002c3c <_printf_common+0xa4>
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	68e5      	ldr	r5, [r4, #12]
 8002c02:	6832      	ldr	r2, [r6, #0]
 8002c04:	f003 0306 	and.w	r3, r3, #6
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	bf08      	it	eq
 8002c0c:	1aad      	subeq	r5, r5, r2
 8002c0e:	68a3      	ldr	r3, [r4, #8]
 8002c10:	6922      	ldr	r2, [r4, #16]
 8002c12:	bf0c      	ite	eq
 8002c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c18:	2500      	movne	r5, #0
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	bfc4      	itt	gt
 8002c1e:	1a9b      	subgt	r3, r3, r2
 8002c20:	18ed      	addgt	r5, r5, r3
 8002c22:	2600      	movs	r6, #0
 8002c24:	341a      	adds	r4, #26
 8002c26:	42b5      	cmp	r5, r6
 8002c28:	d11a      	bne.n	8002c60 <_printf_common+0xc8>
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	e008      	b.n	8002c40 <_printf_common+0xa8>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4652      	mov	r2, sl
 8002c32:	4649      	mov	r1, r9
 8002c34:	4638      	mov	r0, r7
 8002c36:	47c0      	blx	r8
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d103      	bne.n	8002c44 <_printf_common+0xac>
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c44:	3501      	adds	r5, #1
 8002c46:	e7c6      	b.n	8002bd6 <_printf_common+0x3e>
 8002c48:	18e1      	adds	r1, r4, r3
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	2030      	movs	r0, #48	; 0x30
 8002c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c52:	4422      	add	r2, r4
 8002c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	e7c7      	b.n	8002bf0 <_printf_common+0x58>
 8002c60:	2301      	movs	r3, #1
 8002c62:	4622      	mov	r2, r4
 8002c64:	4649      	mov	r1, r9
 8002c66:	4638      	mov	r0, r7
 8002c68:	47c0      	blx	r8
 8002c6a:	3001      	adds	r0, #1
 8002c6c:	d0e6      	beq.n	8002c3c <_printf_common+0xa4>
 8002c6e:	3601      	adds	r6, #1
 8002c70:	e7d9      	b.n	8002c26 <_printf_common+0x8e>
	...

08002c74 <_printf_i>:
 8002c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c78:	7e0f      	ldrb	r7, [r1, #24]
 8002c7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c7c:	2f78      	cmp	r7, #120	; 0x78
 8002c7e:	4691      	mov	r9, r2
 8002c80:	4680      	mov	r8, r0
 8002c82:	460c      	mov	r4, r1
 8002c84:	469a      	mov	sl, r3
 8002c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c8a:	d807      	bhi.n	8002c9c <_printf_i+0x28>
 8002c8c:	2f62      	cmp	r7, #98	; 0x62
 8002c8e:	d80a      	bhi.n	8002ca6 <_printf_i+0x32>
 8002c90:	2f00      	cmp	r7, #0
 8002c92:	f000 80d8 	beq.w	8002e46 <_printf_i+0x1d2>
 8002c96:	2f58      	cmp	r7, #88	; 0x58
 8002c98:	f000 80a3 	beq.w	8002de2 <_printf_i+0x16e>
 8002c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ca4:	e03a      	b.n	8002d1c <_printf_i+0xa8>
 8002ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002caa:	2b15      	cmp	r3, #21
 8002cac:	d8f6      	bhi.n	8002c9c <_printf_i+0x28>
 8002cae:	a101      	add	r1, pc, #4	; (adr r1, 8002cb4 <_printf_i+0x40>)
 8002cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cb4:	08002d0d 	.word	0x08002d0d
 8002cb8:	08002d21 	.word	0x08002d21
 8002cbc:	08002c9d 	.word	0x08002c9d
 8002cc0:	08002c9d 	.word	0x08002c9d
 8002cc4:	08002c9d 	.word	0x08002c9d
 8002cc8:	08002c9d 	.word	0x08002c9d
 8002ccc:	08002d21 	.word	0x08002d21
 8002cd0:	08002c9d 	.word	0x08002c9d
 8002cd4:	08002c9d 	.word	0x08002c9d
 8002cd8:	08002c9d 	.word	0x08002c9d
 8002cdc:	08002c9d 	.word	0x08002c9d
 8002ce0:	08002e2d 	.word	0x08002e2d
 8002ce4:	08002d51 	.word	0x08002d51
 8002ce8:	08002e0f 	.word	0x08002e0f
 8002cec:	08002c9d 	.word	0x08002c9d
 8002cf0:	08002c9d 	.word	0x08002c9d
 8002cf4:	08002e4f 	.word	0x08002e4f
 8002cf8:	08002c9d 	.word	0x08002c9d
 8002cfc:	08002d51 	.word	0x08002d51
 8002d00:	08002c9d 	.word	0x08002c9d
 8002d04:	08002c9d 	.word	0x08002c9d
 8002d08:	08002e17 	.word	0x08002e17
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	1d1a      	adds	r2, r3, #4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	602a      	str	r2, [r5, #0]
 8002d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0a3      	b.n	8002e68 <_printf_i+0x1f4>
 8002d20:	6820      	ldr	r0, [r4, #0]
 8002d22:	6829      	ldr	r1, [r5, #0]
 8002d24:	0606      	lsls	r6, r0, #24
 8002d26:	f101 0304 	add.w	r3, r1, #4
 8002d2a:	d50a      	bpl.n	8002d42 <_printf_i+0xce>
 8002d2c:	680e      	ldr	r6, [r1, #0]
 8002d2e:	602b      	str	r3, [r5, #0]
 8002d30:	2e00      	cmp	r6, #0
 8002d32:	da03      	bge.n	8002d3c <_printf_i+0xc8>
 8002d34:	232d      	movs	r3, #45	; 0x2d
 8002d36:	4276      	negs	r6, r6
 8002d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d3c:	485e      	ldr	r0, [pc, #376]	; (8002eb8 <_printf_i+0x244>)
 8002d3e:	230a      	movs	r3, #10
 8002d40:	e019      	b.n	8002d76 <_printf_i+0x102>
 8002d42:	680e      	ldr	r6, [r1, #0]
 8002d44:	602b      	str	r3, [r5, #0]
 8002d46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d4a:	bf18      	it	ne
 8002d4c:	b236      	sxthne	r6, r6
 8002d4e:	e7ef      	b.n	8002d30 <_printf_i+0xbc>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	1d19      	adds	r1, r3, #4
 8002d56:	6029      	str	r1, [r5, #0]
 8002d58:	0601      	lsls	r1, r0, #24
 8002d5a:	d501      	bpl.n	8002d60 <_printf_i+0xec>
 8002d5c:	681e      	ldr	r6, [r3, #0]
 8002d5e:	e002      	b.n	8002d66 <_printf_i+0xf2>
 8002d60:	0646      	lsls	r6, r0, #25
 8002d62:	d5fb      	bpl.n	8002d5c <_printf_i+0xe8>
 8002d64:	881e      	ldrh	r6, [r3, #0]
 8002d66:	4854      	ldr	r0, [pc, #336]	; (8002eb8 <_printf_i+0x244>)
 8002d68:	2f6f      	cmp	r7, #111	; 0x6f
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2308      	moveq	r3, #8
 8002d6e:	230a      	movne	r3, #10
 8002d70:	2100      	movs	r1, #0
 8002d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d76:	6865      	ldr	r5, [r4, #4]
 8002d78:	60a5      	str	r5, [r4, #8]
 8002d7a:	2d00      	cmp	r5, #0
 8002d7c:	bfa2      	ittt	ge
 8002d7e:	6821      	ldrge	r1, [r4, #0]
 8002d80:	f021 0104 	bicge.w	r1, r1, #4
 8002d84:	6021      	strge	r1, [r4, #0]
 8002d86:	b90e      	cbnz	r6, 8002d8c <_printf_i+0x118>
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	d04d      	beq.n	8002e28 <_printf_i+0x1b4>
 8002d8c:	4615      	mov	r5, r2
 8002d8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d92:	fb03 6711 	mls	r7, r3, r1, r6
 8002d96:	5dc7      	ldrb	r7, [r0, r7]
 8002d98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d9c:	4637      	mov	r7, r6
 8002d9e:	42bb      	cmp	r3, r7
 8002da0:	460e      	mov	r6, r1
 8002da2:	d9f4      	bls.n	8002d8e <_printf_i+0x11a>
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d10b      	bne.n	8002dc0 <_printf_i+0x14c>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	07de      	lsls	r6, r3, #31
 8002dac:	d508      	bpl.n	8002dc0 <_printf_i+0x14c>
 8002dae:	6923      	ldr	r3, [r4, #16]
 8002db0:	6861      	ldr	r1, [r4, #4]
 8002db2:	4299      	cmp	r1, r3
 8002db4:	bfde      	ittt	le
 8002db6:	2330      	movle	r3, #48	; 0x30
 8002db8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002dc0:	1b52      	subs	r2, r2, r5
 8002dc2:	6122      	str	r2, [r4, #16]
 8002dc4:	f8cd a000 	str.w	sl, [sp]
 8002dc8:	464b      	mov	r3, r9
 8002dca:	aa03      	add	r2, sp, #12
 8002dcc:	4621      	mov	r1, r4
 8002dce:	4640      	mov	r0, r8
 8002dd0:	f7ff fee2 	bl	8002b98 <_printf_common>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d14c      	bne.n	8002e72 <_printf_i+0x1fe>
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ddc:	b004      	add	sp, #16
 8002dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de2:	4835      	ldr	r0, [pc, #212]	; (8002eb8 <_printf_i+0x244>)
 8002de4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002de8:	6829      	ldr	r1, [r5, #0]
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	f851 6b04 	ldr.w	r6, [r1], #4
 8002df0:	6029      	str	r1, [r5, #0]
 8002df2:	061d      	lsls	r5, r3, #24
 8002df4:	d514      	bpl.n	8002e20 <_printf_i+0x1ac>
 8002df6:	07df      	lsls	r7, r3, #31
 8002df8:	bf44      	itt	mi
 8002dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8002dfe:	6023      	strmi	r3, [r4, #0]
 8002e00:	b91e      	cbnz	r6, 8002e0a <_printf_i+0x196>
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	f023 0320 	bic.w	r3, r3, #32
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	2310      	movs	r3, #16
 8002e0c:	e7b0      	b.n	8002d70 <_printf_i+0xfc>
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	f043 0320 	orr.w	r3, r3, #32
 8002e14:	6023      	str	r3, [r4, #0]
 8002e16:	2378      	movs	r3, #120	; 0x78
 8002e18:	4828      	ldr	r0, [pc, #160]	; (8002ebc <_printf_i+0x248>)
 8002e1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e1e:	e7e3      	b.n	8002de8 <_printf_i+0x174>
 8002e20:	0659      	lsls	r1, r3, #25
 8002e22:	bf48      	it	mi
 8002e24:	b2b6      	uxthmi	r6, r6
 8002e26:	e7e6      	b.n	8002df6 <_printf_i+0x182>
 8002e28:	4615      	mov	r5, r2
 8002e2a:	e7bb      	b.n	8002da4 <_printf_i+0x130>
 8002e2c:	682b      	ldr	r3, [r5, #0]
 8002e2e:	6826      	ldr	r6, [r4, #0]
 8002e30:	6961      	ldr	r1, [r4, #20]
 8002e32:	1d18      	adds	r0, r3, #4
 8002e34:	6028      	str	r0, [r5, #0]
 8002e36:	0635      	lsls	r5, r6, #24
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	d501      	bpl.n	8002e40 <_printf_i+0x1cc>
 8002e3c:	6019      	str	r1, [r3, #0]
 8002e3e:	e002      	b.n	8002e46 <_printf_i+0x1d2>
 8002e40:	0670      	lsls	r0, r6, #25
 8002e42:	d5fb      	bpl.n	8002e3c <_printf_i+0x1c8>
 8002e44:	8019      	strh	r1, [r3, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	6123      	str	r3, [r4, #16]
 8002e4a:	4615      	mov	r5, r2
 8002e4c:	e7ba      	b.n	8002dc4 <_printf_i+0x150>
 8002e4e:	682b      	ldr	r3, [r5, #0]
 8002e50:	1d1a      	adds	r2, r3, #4
 8002e52:	602a      	str	r2, [r5, #0]
 8002e54:	681d      	ldr	r5, [r3, #0]
 8002e56:	6862      	ldr	r2, [r4, #4]
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f7fd f9d0 	bl	8000200 <memchr>
 8002e60:	b108      	cbz	r0, 8002e66 <_printf_i+0x1f2>
 8002e62:	1b40      	subs	r0, r0, r5
 8002e64:	6060      	str	r0, [r4, #4]
 8002e66:	6863      	ldr	r3, [r4, #4]
 8002e68:	6123      	str	r3, [r4, #16]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e70:	e7a8      	b.n	8002dc4 <_printf_i+0x150>
 8002e72:	6923      	ldr	r3, [r4, #16]
 8002e74:	462a      	mov	r2, r5
 8002e76:	4649      	mov	r1, r9
 8002e78:	4640      	mov	r0, r8
 8002e7a:	47d0      	blx	sl
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d0ab      	beq.n	8002dd8 <_printf_i+0x164>
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	079b      	lsls	r3, r3, #30
 8002e84:	d413      	bmi.n	8002eae <_printf_i+0x23a>
 8002e86:	68e0      	ldr	r0, [r4, #12]
 8002e88:	9b03      	ldr	r3, [sp, #12]
 8002e8a:	4298      	cmp	r0, r3
 8002e8c:	bfb8      	it	lt
 8002e8e:	4618      	movlt	r0, r3
 8002e90:	e7a4      	b.n	8002ddc <_printf_i+0x168>
 8002e92:	2301      	movs	r3, #1
 8002e94:	4632      	mov	r2, r6
 8002e96:	4649      	mov	r1, r9
 8002e98:	4640      	mov	r0, r8
 8002e9a:	47d0      	blx	sl
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d09b      	beq.n	8002dd8 <_printf_i+0x164>
 8002ea0:	3501      	adds	r5, #1
 8002ea2:	68e3      	ldr	r3, [r4, #12]
 8002ea4:	9903      	ldr	r1, [sp, #12]
 8002ea6:	1a5b      	subs	r3, r3, r1
 8002ea8:	42ab      	cmp	r3, r5
 8002eaa:	dcf2      	bgt.n	8002e92 <_printf_i+0x21e>
 8002eac:	e7eb      	b.n	8002e86 <_printf_i+0x212>
 8002eae:	2500      	movs	r5, #0
 8002eb0:	f104 0619 	add.w	r6, r4, #25
 8002eb4:	e7f5      	b.n	8002ea2 <_printf_i+0x22e>
 8002eb6:	bf00      	nop
 8002eb8:	08003c29 	.word	0x08003c29
 8002ebc:	08003c3a 	.word	0x08003c3a

08002ec0 <__swbuf_r>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	460e      	mov	r6, r1
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	b118      	cbz	r0, 8002ed2 <__swbuf_r+0x12>
 8002eca:	6983      	ldr	r3, [r0, #24]
 8002ecc:	b90b      	cbnz	r3, 8002ed2 <__swbuf_r+0x12>
 8002ece:	f000 f9d9 	bl	8003284 <__sinit>
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <__swbuf_r+0x98>)
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	d12b      	bne.n	8002f30 <__swbuf_r+0x70>
 8002ed8:	686c      	ldr	r4, [r5, #4]
 8002eda:	69a3      	ldr	r3, [r4, #24]
 8002edc:	60a3      	str	r3, [r4, #8]
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	071a      	lsls	r2, r3, #28
 8002ee2:	d52f      	bpl.n	8002f44 <__swbuf_r+0x84>
 8002ee4:	6923      	ldr	r3, [r4, #16]
 8002ee6:	b36b      	cbz	r3, 8002f44 <__swbuf_r+0x84>
 8002ee8:	6923      	ldr	r3, [r4, #16]
 8002eea:	6820      	ldr	r0, [r4, #0]
 8002eec:	1ac0      	subs	r0, r0, r3
 8002eee:	6963      	ldr	r3, [r4, #20]
 8002ef0:	b2f6      	uxtb	r6, r6
 8002ef2:	4283      	cmp	r3, r0
 8002ef4:	4637      	mov	r7, r6
 8002ef6:	dc04      	bgt.n	8002f02 <__swbuf_r+0x42>
 8002ef8:	4621      	mov	r1, r4
 8002efa:	4628      	mov	r0, r5
 8002efc:	f000 f92e 	bl	800315c <_fflush_r>
 8002f00:	bb30      	cbnz	r0, 8002f50 <__swbuf_r+0x90>
 8002f02:	68a3      	ldr	r3, [r4, #8]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60a3      	str	r3, [r4, #8]
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	6022      	str	r2, [r4, #0]
 8002f0e:	701e      	strb	r6, [r3, #0]
 8002f10:	6963      	ldr	r3, [r4, #20]
 8002f12:	3001      	adds	r0, #1
 8002f14:	4283      	cmp	r3, r0
 8002f16:	d004      	beq.n	8002f22 <__swbuf_r+0x62>
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	07db      	lsls	r3, r3, #31
 8002f1c:	d506      	bpl.n	8002f2c <__swbuf_r+0x6c>
 8002f1e:	2e0a      	cmp	r6, #10
 8002f20:	d104      	bne.n	8002f2c <__swbuf_r+0x6c>
 8002f22:	4621      	mov	r1, r4
 8002f24:	4628      	mov	r0, r5
 8002f26:	f000 f919 	bl	800315c <_fflush_r>
 8002f2a:	b988      	cbnz	r0, 8002f50 <__swbuf_r+0x90>
 8002f2c:	4638      	mov	r0, r7
 8002f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <__swbuf_r+0x9c>)
 8002f32:	429c      	cmp	r4, r3
 8002f34:	d101      	bne.n	8002f3a <__swbuf_r+0x7a>
 8002f36:	68ac      	ldr	r4, [r5, #8]
 8002f38:	e7cf      	b.n	8002eda <__swbuf_r+0x1a>
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <__swbuf_r+0xa0>)
 8002f3c:	429c      	cmp	r4, r3
 8002f3e:	bf08      	it	eq
 8002f40:	68ec      	ldreq	r4, [r5, #12]
 8002f42:	e7ca      	b.n	8002eda <__swbuf_r+0x1a>
 8002f44:	4621      	mov	r1, r4
 8002f46:	4628      	mov	r0, r5
 8002f48:	f000 f80c 	bl	8002f64 <__swsetup_r>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d0cb      	beq.n	8002ee8 <__swbuf_r+0x28>
 8002f50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f54:	e7ea      	b.n	8002f2c <__swbuf_r+0x6c>
 8002f56:	bf00      	nop
 8002f58:	08003c6c 	.word	0x08003c6c
 8002f5c:	08003c8c 	.word	0x08003c8c
 8002f60:	08003c4c 	.word	0x08003c4c

08002f64 <__swsetup_r>:
 8002f64:	4b32      	ldr	r3, [pc, #200]	; (8003030 <__swsetup_r+0xcc>)
 8002f66:	b570      	push	{r4, r5, r6, lr}
 8002f68:	681d      	ldr	r5, [r3, #0]
 8002f6a:	4606      	mov	r6, r0
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	b125      	cbz	r5, 8002f7a <__swsetup_r+0x16>
 8002f70:	69ab      	ldr	r3, [r5, #24]
 8002f72:	b913      	cbnz	r3, 8002f7a <__swsetup_r+0x16>
 8002f74:	4628      	mov	r0, r5
 8002f76:	f000 f985 	bl	8003284 <__sinit>
 8002f7a:	4b2e      	ldr	r3, [pc, #184]	; (8003034 <__swsetup_r+0xd0>)
 8002f7c:	429c      	cmp	r4, r3
 8002f7e:	d10f      	bne.n	8002fa0 <__swsetup_r+0x3c>
 8002f80:	686c      	ldr	r4, [r5, #4]
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f88:	0719      	lsls	r1, r3, #28
 8002f8a:	d42c      	bmi.n	8002fe6 <__swsetup_r+0x82>
 8002f8c:	06dd      	lsls	r5, r3, #27
 8002f8e:	d411      	bmi.n	8002fb4 <__swsetup_r+0x50>
 8002f90:	2309      	movs	r3, #9
 8002f92:	6033      	str	r3, [r6, #0]
 8002f94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f98:	81a3      	strh	r3, [r4, #12]
 8002f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9e:	e03e      	b.n	800301e <__swsetup_r+0xba>
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <__swsetup_r+0xd4>)
 8002fa2:	429c      	cmp	r4, r3
 8002fa4:	d101      	bne.n	8002faa <__swsetup_r+0x46>
 8002fa6:	68ac      	ldr	r4, [r5, #8]
 8002fa8:	e7eb      	b.n	8002f82 <__swsetup_r+0x1e>
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <__swsetup_r+0xd8>)
 8002fac:	429c      	cmp	r4, r3
 8002fae:	bf08      	it	eq
 8002fb0:	68ec      	ldreq	r4, [r5, #12]
 8002fb2:	e7e6      	b.n	8002f82 <__swsetup_r+0x1e>
 8002fb4:	0758      	lsls	r0, r3, #29
 8002fb6:	d512      	bpl.n	8002fde <__swsetup_r+0x7a>
 8002fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fba:	b141      	cbz	r1, 8002fce <__swsetup_r+0x6a>
 8002fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fc0:	4299      	cmp	r1, r3
 8002fc2:	d002      	beq.n	8002fca <__swsetup_r+0x66>
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f000 fa63 	bl	8003490 <_free_r>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6363      	str	r3, [r4, #52]	; 0x34
 8002fce:	89a3      	ldrh	r3, [r4, #12]
 8002fd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fd4:	81a3      	strh	r3, [r4, #12]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	6063      	str	r3, [r4, #4]
 8002fda:	6923      	ldr	r3, [r4, #16]
 8002fdc:	6023      	str	r3, [r4, #0]
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	f043 0308 	orr.w	r3, r3, #8
 8002fe4:	81a3      	strh	r3, [r4, #12]
 8002fe6:	6923      	ldr	r3, [r4, #16]
 8002fe8:	b94b      	cbnz	r3, 8002ffe <__swsetup_r+0x9a>
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff4:	d003      	beq.n	8002ffe <__swsetup_r+0x9a>
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f000 fa09 	bl	8003410 <__smakebuf_r>
 8002ffe:	89a0      	ldrh	r0, [r4, #12]
 8003000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003004:	f010 0301 	ands.w	r3, r0, #1
 8003008:	d00a      	beq.n	8003020 <__swsetup_r+0xbc>
 800300a:	2300      	movs	r3, #0
 800300c:	60a3      	str	r3, [r4, #8]
 800300e:	6963      	ldr	r3, [r4, #20]
 8003010:	425b      	negs	r3, r3
 8003012:	61a3      	str	r3, [r4, #24]
 8003014:	6923      	ldr	r3, [r4, #16]
 8003016:	b943      	cbnz	r3, 800302a <__swsetup_r+0xc6>
 8003018:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800301c:	d1ba      	bne.n	8002f94 <__swsetup_r+0x30>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	0781      	lsls	r1, r0, #30
 8003022:	bf58      	it	pl
 8003024:	6963      	ldrpl	r3, [r4, #20]
 8003026:	60a3      	str	r3, [r4, #8]
 8003028:	e7f4      	b.n	8003014 <__swsetup_r+0xb0>
 800302a:	2000      	movs	r0, #0
 800302c:	e7f7      	b.n	800301e <__swsetup_r+0xba>
 800302e:	bf00      	nop
 8003030:	20000024 	.word	0x20000024
 8003034:	08003c6c 	.word	0x08003c6c
 8003038:	08003c8c 	.word	0x08003c8c
 800303c:	08003c4c 	.word	0x08003c4c

08003040 <abort>:
 8003040:	b508      	push	{r3, lr}
 8003042:	2006      	movs	r0, #6
 8003044:	f000 fb3c 	bl	80036c0 <raise>
 8003048:	2001      	movs	r0, #1
 800304a:	f7fd fdc7 	bl	8000bdc <_exit>
	...

08003050 <__sflush_r>:
 8003050:	898a      	ldrh	r2, [r1, #12]
 8003052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003056:	4605      	mov	r5, r0
 8003058:	0710      	lsls	r0, r2, #28
 800305a:	460c      	mov	r4, r1
 800305c:	d458      	bmi.n	8003110 <__sflush_r+0xc0>
 800305e:	684b      	ldr	r3, [r1, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	dc05      	bgt.n	8003070 <__sflush_r+0x20>
 8003064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	dc02      	bgt.n	8003070 <__sflush_r+0x20>
 800306a:	2000      	movs	r0, #0
 800306c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003072:	2e00      	cmp	r6, #0
 8003074:	d0f9      	beq.n	800306a <__sflush_r+0x1a>
 8003076:	2300      	movs	r3, #0
 8003078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800307c:	682f      	ldr	r7, [r5, #0]
 800307e:	602b      	str	r3, [r5, #0]
 8003080:	d032      	beq.n	80030e8 <__sflush_r+0x98>
 8003082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	075a      	lsls	r2, r3, #29
 8003088:	d505      	bpl.n	8003096 <__sflush_r+0x46>
 800308a:	6863      	ldr	r3, [r4, #4]
 800308c:	1ac0      	subs	r0, r0, r3
 800308e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003090:	b10b      	cbz	r3, 8003096 <__sflush_r+0x46>
 8003092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003094:	1ac0      	subs	r0, r0, r3
 8003096:	2300      	movs	r3, #0
 8003098:	4602      	mov	r2, r0
 800309a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800309c:	6a21      	ldr	r1, [r4, #32]
 800309e:	4628      	mov	r0, r5
 80030a0:	47b0      	blx	r6
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	89a3      	ldrh	r3, [r4, #12]
 80030a6:	d106      	bne.n	80030b6 <__sflush_r+0x66>
 80030a8:	6829      	ldr	r1, [r5, #0]
 80030aa:	291d      	cmp	r1, #29
 80030ac:	d82c      	bhi.n	8003108 <__sflush_r+0xb8>
 80030ae:	4a2a      	ldr	r2, [pc, #168]	; (8003158 <__sflush_r+0x108>)
 80030b0:	40ca      	lsrs	r2, r1
 80030b2:	07d6      	lsls	r6, r2, #31
 80030b4:	d528      	bpl.n	8003108 <__sflush_r+0xb8>
 80030b6:	2200      	movs	r2, #0
 80030b8:	6062      	str	r2, [r4, #4]
 80030ba:	04d9      	lsls	r1, r3, #19
 80030bc:	6922      	ldr	r2, [r4, #16]
 80030be:	6022      	str	r2, [r4, #0]
 80030c0:	d504      	bpl.n	80030cc <__sflush_r+0x7c>
 80030c2:	1c42      	adds	r2, r0, #1
 80030c4:	d101      	bne.n	80030ca <__sflush_r+0x7a>
 80030c6:	682b      	ldr	r3, [r5, #0]
 80030c8:	b903      	cbnz	r3, 80030cc <__sflush_r+0x7c>
 80030ca:	6560      	str	r0, [r4, #84]	; 0x54
 80030cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ce:	602f      	str	r7, [r5, #0]
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d0ca      	beq.n	800306a <__sflush_r+0x1a>
 80030d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030d8:	4299      	cmp	r1, r3
 80030da:	d002      	beq.n	80030e2 <__sflush_r+0x92>
 80030dc:	4628      	mov	r0, r5
 80030de:	f000 f9d7 	bl	8003490 <_free_r>
 80030e2:	2000      	movs	r0, #0
 80030e4:	6360      	str	r0, [r4, #52]	; 0x34
 80030e6:	e7c1      	b.n	800306c <__sflush_r+0x1c>
 80030e8:	6a21      	ldr	r1, [r4, #32]
 80030ea:	2301      	movs	r3, #1
 80030ec:	4628      	mov	r0, r5
 80030ee:	47b0      	blx	r6
 80030f0:	1c41      	adds	r1, r0, #1
 80030f2:	d1c7      	bne.n	8003084 <__sflush_r+0x34>
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0c4      	beq.n	8003084 <__sflush_r+0x34>
 80030fa:	2b1d      	cmp	r3, #29
 80030fc:	d001      	beq.n	8003102 <__sflush_r+0xb2>
 80030fe:	2b16      	cmp	r3, #22
 8003100:	d101      	bne.n	8003106 <__sflush_r+0xb6>
 8003102:	602f      	str	r7, [r5, #0]
 8003104:	e7b1      	b.n	800306a <__sflush_r+0x1a>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310c:	81a3      	strh	r3, [r4, #12]
 800310e:	e7ad      	b.n	800306c <__sflush_r+0x1c>
 8003110:	690f      	ldr	r7, [r1, #16]
 8003112:	2f00      	cmp	r7, #0
 8003114:	d0a9      	beq.n	800306a <__sflush_r+0x1a>
 8003116:	0793      	lsls	r3, r2, #30
 8003118:	680e      	ldr	r6, [r1, #0]
 800311a:	bf08      	it	eq
 800311c:	694b      	ldreq	r3, [r1, #20]
 800311e:	600f      	str	r7, [r1, #0]
 8003120:	bf18      	it	ne
 8003122:	2300      	movne	r3, #0
 8003124:	eba6 0807 	sub.w	r8, r6, r7
 8003128:	608b      	str	r3, [r1, #8]
 800312a:	f1b8 0f00 	cmp.w	r8, #0
 800312e:	dd9c      	ble.n	800306a <__sflush_r+0x1a>
 8003130:	6a21      	ldr	r1, [r4, #32]
 8003132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003134:	4643      	mov	r3, r8
 8003136:	463a      	mov	r2, r7
 8003138:	4628      	mov	r0, r5
 800313a:	47b0      	blx	r6
 800313c:	2800      	cmp	r0, #0
 800313e:	dc06      	bgt.n	800314e <__sflush_r+0xfe>
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800314c:	e78e      	b.n	800306c <__sflush_r+0x1c>
 800314e:	4407      	add	r7, r0
 8003150:	eba8 0800 	sub.w	r8, r8, r0
 8003154:	e7e9      	b.n	800312a <__sflush_r+0xda>
 8003156:	bf00      	nop
 8003158:	20400001 	.word	0x20400001

0800315c <_fflush_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	690b      	ldr	r3, [r1, #16]
 8003160:	4605      	mov	r5, r0
 8003162:	460c      	mov	r4, r1
 8003164:	b913      	cbnz	r3, 800316c <_fflush_r+0x10>
 8003166:	2500      	movs	r5, #0
 8003168:	4628      	mov	r0, r5
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	b118      	cbz	r0, 8003176 <_fflush_r+0x1a>
 800316e:	6983      	ldr	r3, [r0, #24]
 8003170:	b90b      	cbnz	r3, 8003176 <_fflush_r+0x1a>
 8003172:	f000 f887 	bl	8003284 <__sinit>
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <_fflush_r+0x6c>)
 8003178:	429c      	cmp	r4, r3
 800317a:	d11b      	bne.n	80031b4 <_fflush_r+0x58>
 800317c:	686c      	ldr	r4, [r5, #4]
 800317e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ef      	beq.n	8003166 <_fflush_r+0xa>
 8003186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003188:	07d0      	lsls	r0, r2, #31
 800318a:	d404      	bmi.n	8003196 <_fflush_r+0x3a>
 800318c:	0599      	lsls	r1, r3, #22
 800318e:	d402      	bmi.n	8003196 <_fflush_r+0x3a>
 8003190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003192:	f000 f915 	bl	80033c0 <__retarget_lock_acquire_recursive>
 8003196:	4628      	mov	r0, r5
 8003198:	4621      	mov	r1, r4
 800319a:	f7ff ff59 	bl	8003050 <__sflush_r>
 800319e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031a0:	07da      	lsls	r2, r3, #31
 80031a2:	4605      	mov	r5, r0
 80031a4:	d4e0      	bmi.n	8003168 <_fflush_r+0xc>
 80031a6:	89a3      	ldrh	r3, [r4, #12]
 80031a8:	059b      	lsls	r3, r3, #22
 80031aa:	d4dd      	bmi.n	8003168 <_fflush_r+0xc>
 80031ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ae:	f000 f908 	bl	80033c2 <__retarget_lock_release_recursive>
 80031b2:	e7d9      	b.n	8003168 <_fflush_r+0xc>
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <_fflush_r+0x70>)
 80031b6:	429c      	cmp	r4, r3
 80031b8:	d101      	bne.n	80031be <_fflush_r+0x62>
 80031ba:	68ac      	ldr	r4, [r5, #8]
 80031bc:	e7df      	b.n	800317e <_fflush_r+0x22>
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <_fflush_r+0x74>)
 80031c0:	429c      	cmp	r4, r3
 80031c2:	bf08      	it	eq
 80031c4:	68ec      	ldreq	r4, [r5, #12]
 80031c6:	e7da      	b.n	800317e <_fflush_r+0x22>
 80031c8:	08003c6c 	.word	0x08003c6c
 80031cc:	08003c8c 	.word	0x08003c8c
 80031d0:	08003c4c 	.word	0x08003c4c

080031d4 <std>:
 80031d4:	2300      	movs	r3, #0
 80031d6:	b510      	push	{r4, lr}
 80031d8:	4604      	mov	r4, r0
 80031da:	e9c0 3300 	strd	r3, r3, [r0]
 80031de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031e2:	6083      	str	r3, [r0, #8]
 80031e4:	8181      	strh	r1, [r0, #12]
 80031e6:	6643      	str	r3, [r0, #100]	; 0x64
 80031e8:	81c2      	strh	r2, [r0, #14]
 80031ea:	6183      	str	r3, [r0, #24]
 80031ec:	4619      	mov	r1, r3
 80031ee:	2208      	movs	r2, #8
 80031f0:	305c      	adds	r0, #92	; 0x5c
 80031f2:	f7ff fb6f 	bl	80028d4 <memset>
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <std+0x38>)
 80031f8:	6263      	str	r3, [r4, #36]	; 0x24
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <std+0x3c>)
 80031fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <std+0x40>)
 8003200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <std+0x44>)
 8003204:	6224      	str	r4, [r4, #32]
 8003206:	6323      	str	r3, [r4, #48]	; 0x30
 8003208:	bd10      	pop	{r4, pc}
 800320a:	bf00      	nop
 800320c:	080036f9 	.word	0x080036f9
 8003210:	0800371b 	.word	0x0800371b
 8003214:	08003753 	.word	0x08003753
 8003218:	08003777 	.word	0x08003777

0800321c <_cleanup_r>:
 800321c:	4901      	ldr	r1, [pc, #4]	; (8003224 <_cleanup_r+0x8>)
 800321e:	f000 b8af 	b.w	8003380 <_fwalk_reent>
 8003222:	bf00      	nop
 8003224:	0800315d 	.word	0x0800315d

08003228 <__sfmoreglue>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	2268      	movs	r2, #104	; 0x68
 800322c:	1e4d      	subs	r5, r1, #1
 800322e:	4355      	muls	r5, r2
 8003230:	460e      	mov	r6, r1
 8003232:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003236:	f000 f997 	bl	8003568 <_malloc_r>
 800323a:	4604      	mov	r4, r0
 800323c:	b140      	cbz	r0, 8003250 <__sfmoreglue+0x28>
 800323e:	2100      	movs	r1, #0
 8003240:	e9c0 1600 	strd	r1, r6, [r0]
 8003244:	300c      	adds	r0, #12
 8003246:	60a0      	str	r0, [r4, #8]
 8003248:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800324c:	f7ff fb42 	bl	80028d4 <memset>
 8003250:	4620      	mov	r0, r4
 8003252:	bd70      	pop	{r4, r5, r6, pc}

08003254 <__sfp_lock_acquire>:
 8003254:	4801      	ldr	r0, [pc, #4]	; (800325c <__sfp_lock_acquire+0x8>)
 8003256:	f000 b8b3 	b.w	80033c0 <__retarget_lock_acquire_recursive>
 800325a:	bf00      	nop
 800325c:	200000f9 	.word	0x200000f9

08003260 <__sfp_lock_release>:
 8003260:	4801      	ldr	r0, [pc, #4]	; (8003268 <__sfp_lock_release+0x8>)
 8003262:	f000 b8ae 	b.w	80033c2 <__retarget_lock_release_recursive>
 8003266:	bf00      	nop
 8003268:	200000f9 	.word	0x200000f9

0800326c <__sinit_lock_acquire>:
 800326c:	4801      	ldr	r0, [pc, #4]	; (8003274 <__sinit_lock_acquire+0x8>)
 800326e:	f000 b8a7 	b.w	80033c0 <__retarget_lock_acquire_recursive>
 8003272:	bf00      	nop
 8003274:	200000fa 	.word	0x200000fa

08003278 <__sinit_lock_release>:
 8003278:	4801      	ldr	r0, [pc, #4]	; (8003280 <__sinit_lock_release+0x8>)
 800327a:	f000 b8a2 	b.w	80033c2 <__retarget_lock_release_recursive>
 800327e:	bf00      	nop
 8003280:	200000fa 	.word	0x200000fa

08003284 <__sinit>:
 8003284:	b510      	push	{r4, lr}
 8003286:	4604      	mov	r4, r0
 8003288:	f7ff fff0 	bl	800326c <__sinit_lock_acquire>
 800328c:	69a3      	ldr	r3, [r4, #24]
 800328e:	b11b      	cbz	r3, 8003298 <__sinit+0x14>
 8003290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003294:	f7ff bff0 	b.w	8003278 <__sinit_lock_release>
 8003298:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800329c:	6523      	str	r3, [r4, #80]	; 0x50
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <__sinit+0x68>)
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <__sinit+0x6c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80032a6:	42a3      	cmp	r3, r4
 80032a8:	bf04      	itt	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	61a3      	streq	r3, [r4, #24]
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f820 	bl	80032f4 <__sfp>
 80032b4:	6060      	str	r0, [r4, #4]
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 f81c 	bl	80032f4 <__sfp>
 80032bc:	60a0      	str	r0, [r4, #8]
 80032be:	4620      	mov	r0, r4
 80032c0:	f000 f818 	bl	80032f4 <__sfp>
 80032c4:	2200      	movs	r2, #0
 80032c6:	60e0      	str	r0, [r4, #12]
 80032c8:	2104      	movs	r1, #4
 80032ca:	6860      	ldr	r0, [r4, #4]
 80032cc:	f7ff ff82 	bl	80031d4 <std>
 80032d0:	68a0      	ldr	r0, [r4, #8]
 80032d2:	2201      	movs	r2, #1
 80032d4:	2109      	movs	r1, #9
 80032d6:	f7ff ff7d 	bl	80031d4 <std>
 80032da:	68e0      	ldr	r0, [r4, #12]
 80032dc:	2202      	movs	r2, #2
 80032de:	2112      	movs	r1, #18
 80032e0:	f7ff ff78 	bl	80031d4 <std>
 80032e4:	2301      	movs	r3, #1
 80032e6:	61a3      	str	r3, [r4, #24]
 80032e8:	e7d2      	b.n	8003290 <__sinit+0xc>
 80032ea:	bf00      	nop
 80032ec:	08003c14 	.word	0x08003c14
 80032f0:	0800321d 	.word	0x0800321d

080032f4 <__sfp>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	4607      	mov	r7, r0
 80032f8:	f7ff ffac 	bl	8003254 <__sfp_lock_acquire>
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <__sfp+0x84>)
 80032fe:	681e      	ldr	r6, [r3, #0]
 8003300:	69b3      	ldr	r3, [r6, #24]
 8003302:	b913      	cbnz	r3, 800330a <__sfp+0x16>
 8003304:	4630      	mov	r0, r6
 8003306:	f7ff ffbd 	bl	8003284 <__sinit>
 800330a:	3648      	adds	r6, #72	; 0x48
 800330c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003310:	3b01      	subs	r3, #1
 8003312:	d503      	bpl.n	800331c <__sfp+0x28>
 8003314:	6833      	ldr	r3, [r6, #0]
 8003316:	b30b      	cbz	r3, 800335c <__sfp+0x68>
 8003318:	6836      	ldr	r6, [r6, #0]
 800331a:	e7f7      	b.n	800330c <__sfp+0x18>
 800331c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003320:	b9d5      	cbnz	r5, 8003358 <__sfp+0x64>
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <__sfp+0x88>)
 8003324:	60e3      	str	r3, [r4, #12]
 8003326:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800332a:	6665      	str	r5, [r4, #100]	; 0x64
 800332c:	f000 f847 	bl	80033be <__retarget_lock_init_recursive>
 8003330:	f7ff ff96 	bl	8003260 <__sfp_lock_release>
 8003334:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003338:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800333c:	6025      	str	r5, [r4, #0]
 800333e:	61a5      	str	r5, [r4, #24]
 8003340:	2208      	movs	r2, #8
 8003342:	4629      	mov	r1, r5
 8003344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003348:	f7ff fac4 	bl	80028d4 <memset>
 800334c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003354:	4620      	mov	r0, r4
 8003356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003358:	3468      	adds	r4, #104	; 0x68
 800335a:	e7d9      	b.n	8003310 <__sfp+0x1c>
 800335c:	2104      	movs	r1, #4
 800335e:	4638      	mov	r0, r7
 8003360:	f7ff ff62 	bl	8003228 <__sfmoreglue>
 8003364:	4604      	mov	r4, r0
 8003366:	6030      	str	r0, [r6, #0]
 8003368:	2800      	cmp	r0, #0
 800336a:	d1d5      	bne.n	8003318 <__sfp+0x24>
 800336c:	f7ff ff78 	bl	8003260 <__sfp_lock_release>
 8003370:	230c      	movs	r3, #12
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	e7ee      	b.n	8003354 <__sfp+0x60>
 8003376:	bf00      	nop
 8003378:	08003c14 	.word	0x08003c14
 800337c:	ffff0001 	.word	0xffff0001

08003380 <_fwalk_reent>:
 8003380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003384:	4606      	mov	r6, r0
 8003386:	4688      	mov	r8, r1
 8003388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800338c:	2700      	movs	r7, #0
 800338e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003392:	f1b9 0901 	subs.w	r9, r9, #1
 8003396:	d505      	bpl.n	80033a4 <_fwalk_reent+0x24>
 8003398:	6824      	ldr	r4, [r4, #0]
 800339a:	2c00      	cmp	r4, #0
 800339c:	d1f7      	bne.n	800338e <_fwalk_reent+0xe>
 800339e:	4638      	mov	r0, r7
 80033a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033a4:	89ab      	ldrh	r3, [r5, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d907      	bls.n	80033ba <_fwalk_reent+0x3a>
 80033aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033ae:	3301      	adds	r3, #1
 80033b0:	d003      	beq.n	80033ba <_fwalk_reent+0x3a>
 80033b2:	4629      	mov	r1, r5
 80033b4:	4630      	mov	r0, r6
 80033b6:	47c0      	blx	r8
 80033b8:	4307      	orrs	r7, r0
 80033ba:	3568      	adds	r5, #104	; 0x68
 80033bc:	e7e9      	b.n	8003392 <_fwalk_reent+0x12>

080033be <__retarget_lock_init_recursive>:
 80033be:	4770      	bx	lr

080033c0 <__retarget_lock_acquire_recursive>:
 80033c0:	4770      	bx	lr

080033c2 <__retarget_lock_release_recursive>:
 80033c2:	4770      	bx	lr

080033c4 <__swhatbuf_r>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	460e      	mov	r6, r1
 80033c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033cc:	2900      	cmp	r1, #0
 80033ce:	b096      	sub	sp, #88	; 0x58
 80033d0:	4614      	mov	r4, r2
 80033d2:	461d      	mov	r5, r3
 80033d4:	da08      	bge.n	80033e8 <__swhatbuf_r+0x24>
 80033d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	602a      	str	r2, [r5, #0]
 80033de:	061a      	lsls	r2, r3, #24
 80033e0:	d410      	bmi.n	8003404 <__swhatbuf_r+0x40>
 80033e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e6:	e00e      	b.n	8003406 <__swhatbuf_r+0x42>
 80033e8:	466a      	mov	r2, sp
 80033ea:	f000 f9eb 	bl	80037c4 <_fstat_r>
 80033ee:	2800      	cmp	r0, #0
 80033f0:	dbf1      	blt.n	80033d6 <__swhatbuf_r+0x12>
 80033f2:	9a01      	ldr	r2, [sp, #4]
 80033f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033fc:	425a      	negs	r2, r3
 80033fe:	415a      	adcs	r2, r3
 8003400:	602a      	str	r2, [r5, #0]
 8003402:	e7ee      	b.n	80033e2 <__swhatbuf_r+0x1e>
 8003404:	2340      	movs	r3, #64	; 0x40
 8003406:	2000      	movs	r0, #0
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	b016      	add	sp, #88	; 0x58
 800340c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003410 <__smakebuf_r>:
 8003410:	898b      	ldrh	r3, [r1, #12]
 8003412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003414:	079d      	lsls	r5, r3, #30
 8003416:	4606      	mov	r6, r0
 8003418:	460c      	mov	r4, r1
 800341a:	d507      	bpl.n	800342c <__smakebuf_r+0x1c>
 800341c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	6123      	str	r3, [r4, #16]
 8003424:	2301      	movs	r3, #1
 8003426:	6163      	str	r3, [r4, #20]
 8003428:	b002      	add	sp, #8
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	ab01      	add	r3, sp, #4
 800342e:	466a      	mov	r2, sp
 8003430:	f7ff ffc8 	bl	80033c4 <__swhatbuf_r>
 8003434:	9900      	ldr	r1, [sp, #0]
 8003436:	4605      	mov	r5, r0
 8003438:	4630      	mov	r0, r6
 800343a:	f000 f895 	bl	8003568 <_malloc_r>
 800343e:	b948      	cbnz	r0, 8003454 <__smakebuf_r+0x44>
 8003440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003444:	059a      	lsls	r2, r3, #22
 8003446:	d4ef      	bmi.n	8003428 <__smakebuf_r+0x18>
 8003448:	f023 0303 	bic.w	r3, r3, #3
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	81a3      	strh	r3, [r4, #12]
 8003452:	e7e3      	b.n	800341c <__smakebuf_r+0xc>
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <__smakebuf_r+0x7c>)
 8003456:	62b3      	str	r3, [r6, #40]	; 0x28
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	6020      	str	r0, [r4, #0]
 800345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003460:	81a3      	strh	r3, [r4, #12]
 8003462:	9b00      	ldr	r3, [sp, #0]
 8003464:	6163      	str	r3, [r4, #20]
 8003466:	9b01      	ldr	r3, [sp, #4]
 8003468:	6120      	str	r0, [r4, #16]
 800346a:	b15b      	cbz	r3, 8003484 <__smakebuf_r+0x74>
 800346c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003470:	4630      	mov	r0, r6
 8003472:	f000 f9b9 	bl	80037e8 <_isatty_r>
 8003476:	b128      	cbz	r0, 8003484 <__smakebuf_r+0x74>
 8003478:	89a3      	ldrh	r3, [r4, #12]
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	81a3      	strh	r3, [r4, #12]
 8003484:	89a0      	ldrh	r0, [r4, #12]
 8003486:	4305      	orrs	r5, r0
 8003488:	81a5      	strh	r5, [r4, #12]
 800348a:	e7cd      	b.n	8003428 <__smakebuf_r+0x18>
 800348c:	0800321d 	.word	0x0800321d

08003490 <_free_r>:
 8003490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003492:	2900      	cmp	r1, #0
 8003494:	d044      	beq.n	8003520 <_free_r+0x90>
 8003496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800349a:	9001      	str	r0, [sp, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f1a1 0404 	sub.w	r4, r1, #4
 80034a2:	bfb8      	it	lt
 80034a4:	18e4      	addlt	r4, r4, r3
 80034a6:	f000 f9c1 	bl	800382c <__malloc_lock>
 80034aa:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <_free_r+0x94>)
 80034ac:	9801      	ldr	r0, [sp, #4]
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	b933      	cbnz	r3, 80034c0 <_free_r+0x30>
 80034b2:	6063      	str	r3, [r4, #4]
 80034b4:	6014      	str	r4, [r2, #0]
 80034b6:	b003      	add	sp, #12
 80034b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034bc:	f000 b9bc 	b.w	8003838 <__malloc_unlock>
 80034c0:	42a3      	cmp	r3, r4
 80034c2:	d908      	bls.n	80034d6 <_free_r+0x46>
 80034c4:	6825      	ldr	r5, [r4, #0]
 80034c6:	1961      	adds	r1, r4, r5
 80034c8:	428b      	cmp	r3, r1
 80034ca:	bf01      	itttt	eq
 80034cc:	6819      	ldreq	r1, [r3, #0]
 80034ce:	685b      	ldreq	r3, [r3, #4]
 80034d0:	1949      	addeq	r1, r1, r5
 80034d2:	6021      	streq	r1, [r4, #0]
 80034d4:	e7ed      	b.n	80034b2 <_free_r+0x22>
 80034d6:	461a      	mov	r2, r3
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	b10b      	cbz	r3, 80034e0 <_free_r+0x50>
 80034dc:	42a3      	cmp	r3, r4
 80034de:	d9fa      	bls.n	80034d6 <_free_r+0x46>
 80034e0:	6811      	ldr	r1, [r2, #0]
 80034e2:	1855      	adds	r5, r2, r1
 80034e4:	42a5      	cmp	r5, r4
 80034e6:	d10b      	bne.n	8003500 <_free_r+0x70>
 80034e8:	6824      	ldr	r4, [r4, #0]
 80034ea:	4421      	add	r1, r4
 80034ec:	1854      	adds	r4, r2, r1
 80034ee:	42a3      	cmp	r3, r4
 80034f0:	6011      	str	r1, [r2, #0]
 80034f2:	d1e0      	bne.n	80034b6 <_free_r+0x26>
 80034f4:	681c      	ldr	r4, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	6053      	str	r3, [r2, #4]
 80034fa:	4421      	add	r1, r4
 80034fc:	6011      	str	r1, [r2, #0]
 80034fe:	e7da      	b.n	80034b6 <_free_r+0x26>
 8003500:	d902      	bls.n	8003508 <_free_r+0x78>
 8003502:	230c      	movs	r3, #12
 8003504:	6003      	str	r3, [r0, #0]
 8003506:	e7d6      	b.n	80034b6 <_free_r+0x26>
 8003508:	6825      	ldr	r5, [r4, #0]
 800350a:	1961      	adds	r1, r4, r5
 800350c:	428b      	cmp	r3, r1
 800350e:	bf04      	itt	eq
 8003510:	6819      	ldreq	r1, [r3, #0]
 8003512:	685b      	ldreq	r3, [r3, #4]
 8003514:	6063      	str	r3, [r4, #4]
 8003516:	bf04      	itt	eq
 8003518:	1949      	addeq	r1, r1, r5
 800351a:	6021      	streq	r1, [r4, #0]
 800351c:	6054      	str	r4, [r2, #4]
 800351e:	e7ca      	b.n	80034b6 <_free_r+0x26>
 8003520:	b003      	add	sp, #12
 8003522:	bd30      	pop	{r4, r5, pc}
 8003524:	200000fc 	.word	0x200000fc

08003528 <sbrk_aligned>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4e0e      	ldr	r6, [pc, #56]	; (8003564 <sbrk_aligned+0x3c>)
 800352c:	460c      	mov	r4, r1
 800352e:	6831      	ldr	r1, [r6, #0]
 8003530:	4605      	mov	r5, r0
 8003532:	b911      	cbnz	r1, 800353a <sbrk_aligned+0x12>
 8003534:	f000 f88c 	bl	8003650 <_sbrk_r>
 8003538:	6030      	str	r0, [r6, #0]
 800353a:	4621      	mov	r1, r4
 800353c:	4628      	mov	r0, r5
 800353e:	f000 f887 	bl	8003650 <_sbrk_r>
 8003542:	1c43      	adds	r3, r0, #1
 8003544:	d00a      	beq.n	800355c <sbrk_aligned+0x34>
 8003546:	1cc4      	adds	r4, r0, #3
 8003548:	f024 0403 	bic.w	r4, r4, #3
 800354c:	42a0      	cmp	r0, r4
 800354e:	d007      	beq.n	8003560 <sbrk_aligned+0x38>
 8003550:	1a21      	subs	r1, r4, r0
 8003552:	4628      	mov	r0, r5
 8003554:	f000 f87c 	bl	8003650 <_sbrk_r>
 8003558:	3001      	adds	r0, #1
 800355a:	d101      	bne.n	8003560 <sbrk_aligned+0x38>
 800355c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003560:	4620      	mov	r0, r4
 8003562:	bd70      	pop	{r4, r5, r6, pc}
 8003564:	20000100 	.word	0x20000100

08003568 <_malloc_r>:
 8003568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800356c:	1ccd      	adds	r5, r1, #3
 800356e:	f025 0503 	bic.w	r5, r5, #3
 8003572:	3508      	adds	r5, #8
 8003574:	2d0c      	cmp	r5, #12
 8003576:	bf38      	it	cc
 8003578:	250c      	movcc	r5, #12
 800357a:	2d00      	cmp	r5, #0
 800357c:	4607      	mov	r7, r0
 800357e:	db01      	blt.n	8003584 <_malloc_r+0x1c>
 8003580:	42a9      	cmp	r1, r5
 8003582:	d905      	bls.n	8003590 <_malloc_r+0x28>
 8003584:	230c      	movs	r3, #12
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	2600      	movs	r6, #0
 800358a:	4630      	mov	r0, r6
 800358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003590:	4e2e      	ldr	r6, [pc, #184]	; (800364c <_malloc_r+0xe4>)
 8003592:	f000 f94b 	bl	800382c <__malloc_lock>
 8003596:	6833      	ldr	r3, [r6, #0]
 8003598:	461c      	mov	r4, r3
 800359a:	bb34      	cbnz	r4, 80035ea <_malloc_r+0x82>
 800359c:	4629      	mov	r1, r5
 800359e:	4638      	mov	r0, r7
 80035a0:	f7ff ffc2 	bl	8003528 <sbrk_aligned>
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	4604      	mov	r4, r0
 80035a8:	d14d      	bne.n	8003646 <_malloc_r+0xde>
 80035aa:	6834      	ldr	r4, [r6, #0]
 80035ac:	4626      	mov	r6, r4
 80035ae:	2e00      	cmp	r6, #0
 80035b0:	d140      	bne.n	8003634 <_malloc_r+0xcc>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	4631      	mov	r1, r6
 80035b6:	4638      	mov	r0, r7
 80035b8:	eb04 0803 	add.w	r8, r4, r3
 80035bc:	f000 f848 	bl	8003650 <_sbrk_r>
 80035c0:	4580      	cmp	r8, r0
 80035c2:	d13a      	bne.n	800363a <_malloc_r+0xd2>
 80035c4:	6821      	ldr	r1, [r4, #0]
 80035c6:	3503      	adds	r5, #3
 80035c8:	1a6d      	subs	r5, r5, r1
 80035ca:	f025 0503 	bic.w	r5, r5, #3
 80035ce:	3508      	adds	r5, #8
 80035d0:	2d0c      	cmp	r5, #12
 80035d2:	bf38      	it	cc
 80035d4:	250c      	movcc	r5, #12
 80035d6:	4629      	mov	r1, r5
 80035d8:	4638      	mov	r0, r7
 80035da:	f7ff ffa5 	bl	8003528 <sbrk_aligned>
 80035de:	3001      	adds	r0, #1
 80035e0:	d02b      	beq.n	800363a <_malloc_r+0xd2>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	442b      	add	r3, r5
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	e00e      	b.n	8003608 <_malloc_r+0xa0>
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	1b52      	subs	r2, r2, r5
 80035ee:	d41e      	bmi.n	800362e <_malloc_r+0xc6>
 80035f0:	2a0b      	cmp	r2, #11
 80035f2:	d916      	bls.n	8003622 <_malloc_r+0xba>
 80035f4:	1961      	adds	r1, r4, r5
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	6025      	str	r5, [r4, #0]
 80035fa:	bf18      	it	ne
 80035fc:	6059      	strne	r1, [r3, #4]
 80035fe:	6863      	ldr	r3, [r4, #4]
 8003600:	bf08      	it	eq
 8003602:	6031      	streq	r1, [r6, #0]
 8003604:	5162      	str	r2, [r4, r5]
 8003606:	604b      	str	r3, [r1, #4]
 8003608:	4638      	mov	r0, r7
 800360a:	f104 060b 	add.w	r6, r4, #11
 800360e:	f000 f913 	bl	8003838 <__malloc_unlock>
 8003612:	f026 0607 	bic.w	r6, r6, #7
 8003616:	1d23      	adds	r3, r4, #4
 8003618:	1af2      	subs	r2, r6, r3
 800361a:	d0b6      	beq.n	800358a <_malloc_r+0x22>
 800361c:	1b9b      	subs	r3, r3, r6
 800361e:	50a3      	str	r3, [r4, r2]
 8003620:	e7b3      	b.n	800358a <_malloc_r+0x22>
 8003622:	6862      	ldr	r2, [r4, #4]
 8003624:	42a3      	cmp	r3, r4
 8003626:	bf0c      	ite	eq
 8003628:	6032      	streq	r2, [r6, #0]
 800362a:	605a      	strne	r2, [r3, #4]
 800362c:	e7ec      	b.n	8003608 <_malloc_r+0xa0>
 800362e:	4623      	mov	r3, r4
 8003630:	6864      	ldr	r4, [r4, #4]
 8003632:	e7b2      	b.n	800359a <_malloc_r+0x32>
 8003634:	4634      	mov	r4, r6
 8003636:	6876      	ldr	r6, [r6, #4]
 8003638:	e7b9      	b.n	80035ae <_malloc_r+0x46>
 800363a:	230c      	movs	r3, #12
 800363c:	603b      	str	r3, [r7, #0]
 800363e:	4638      	mov	r0, r7
 8003640:	f000 f8fa 	bl	8003838 <__malloc_unlock>
 8003644:	e7a1      	b.n	800358a <_malloc_r+0x22>
 8003646:	6025      	str	r5, [r4, #0]
 8003648:	e7de      	b.n	8003608 <_malloc_r+0xa0>
 800364a:	bf00      	nop
 800364c:	200000fc 	.word	0x200000fc

08003650 <_sbrk_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4d06      	ldr	r5, [pc, #24]	; (800366c <_sbrk_r+0x1c>)
 8003654:	2300      	movs	r3, #0
 8003656:	4604      	mov	r4, r0
 8003658:	4608      	mov	r0, r1
 800365a:	602b      	str	r3, [r5, #0]
 800365c:	f7fd fb36 	bl	8000ccc <_sbrk>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d102      	bne.n	800366a <_sbrk_r+0x1a>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	b103      	cbz	r3, 800366a <_sbrk_r+0x1a>
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	bd38      	pop	{r3, r4, r5, pc}
 800366c:	20000104 	.word	0x20000104

08003670 <_raise_r>:
 8003670:	291f      	cmp	r1, #31
 8003672:	b538      	push	{r3, r4, r5, lr}
 8003674:	4604      	mov	r4, r0
 8003676:	460d      	mov	r5, r1
 8003678:	d904      	bls.n	8003684 <_raise_r+0x14>
 800367a:	2316      	movs	r3, #22
 800367c:	6003      	str	r3, [r0, #0]
 800367e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003686:	b112      	cbz	r2, 800368e <_raise_r+0x1e>
 8003688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800368c:	b94b      	cbnz	r3, 80036a2 <_raise_r+0x32>
 800368e:	4620      	mov	r0, r4
 8003690:	f000 f830 	bl	80036f4 <_getpid_r>
 8003694:	462a      	mov	r2, r5
 8003696:	4601      	mov	r1, r0
 8003698:	4620      	mov	r0, r4
 800369a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369e:	f000 b817 	b.w	80036d0 <_kill_r>
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d00a      	beq.n	80036bc <_raise_r+0x4c>
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	d103      	bne.n	80036b2 <_raise_r+0x42>
 80036aa:	2316      	movs	r3, #22
 80036ac:	6003      	str	r3, [r0, #0]
 80036ae:	2001      	movs	r0, #1
 80036b0:	e7e7      	b.n	8003682 <_raise_r+0x12>
 80036b2:	2400      	movs	r4, #0
 80036b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80036b8:	4628      	mov	r0, r5
 80036ba:	4798      	blx	r3
 80036bc:	2000      	movs	r0, #0
 80036be:	e7e0      	b.n	8003682 <_raise_r+0x12>

080036c0 <raise>:
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <raise+0xc>)
 80036c2:	4601      	mov	r1, r0
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	f7ff bfd3 	b.w	8003670 <_raise_r>
 80036ca:	bf00      	nop
 80036cc:	20000024 	.word	0x20000024

080036d0 <_kill_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4d07      	ldr	r5, [pc, #28]	; (80036f0 <_kill_r+0x20>)
 80036d4:	2300      	movs	r3, #0
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	602b      	str	r3, [r5, #0]
 80036de:	f7fd fa6d 	bl	8000bbc <_kill>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	d102      	bne.n	80036ec <_kill_r+0x1c>
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	b103      	cbz	r3, 80036ec <_kill_r+0x1c>
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	bd38      	pop	{r3, r4, r5, pc}
 80036ee:	bf00      	nop
 80036f0:	20000104 	.word	0x20000104

080036f4 <_getpid_r>:
 80036f4:	f7fd ba5a 	b.w	8000bac <_getpid>

080036f8 <__sread>:
 80036f8:	b510      	push	{r4, lr}
 80036fa:	460c      	mov	r4, r1
 80036fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003700:	f000 f8a0 	bl	8003844 <_read_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	bfab      	itete	ge
 8003708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800370a:	89a3      	ldrhlt	r3, [r4, #12]
 800370c:	181b      	addge	r3, r3, r0
 800370e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003712:	bfac      	ite	ge
 8003714:	6563      	strge	r3, [r4, #84]	; 0x54
 8003716:	81a3      	strhlt	r3, [r4, #12]
 8003718:	bd10      	pop	{r4, pc}

0800371a <__swrite>:
 800371a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800371e:	461f      	mov	r7, r3
 8003720:	898b      	ldrh	r3, [r1, #12]
 8003722:	05db      	lsls	r3, r3, #23
 8003724:	4605      	mov	r5, r0
 8003726:	460c      	mov	r4, r1
 8003728:	4616      	mov	r6, r2
 800372a:	d505      	bpl.n	8003738 <__swrite+0x1e>
 800372c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003730:	2302      	movs	r3, #2
 8003732:	2200      	movs	r2, #0
 8003734:	f000 f868 	bl	8003808 <_lseek_r>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800373e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	4632      	mov	r2, r6
 8003746:	463b      	mov	r3, r7
 8003748:	4628      	mov	r0, r5
 800374a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800374e:	f000 b817 	b.w	8003780 <_write_r>

08003752 <__sseek>:
 8003752:	b510      	push	{r4, lr}
 8003754:	460c      	mov	r4, r1
 8003756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375a:	f000 f855 	bl	8003808 <_lseek_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	bf15      	itete	ne
 8003764:	6560      	strne	r0, [r4, #84]	; 0x54
 8003766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800376a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800376e:	81a3      	strheq	r3, [r4, #12]
 8003770:	bf18      	it	ne
 8003772:	81a3      	strhne	r3, [r4, #12]
 8003774:	bd10      	pop	{r4, pc}

08003776 <__sclose>:
 8003776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377a:	f000 b813 	b.w	80037a4 <_close_r>
	...

08003780 <_write_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d07      	ldr	r5, [pc, #28]	; (80037a0 <_write_r+0x20>)
 8003784:	4604      	mov	r4, r0
 8003786:	4608      	mov	r0, r1
 8003788:	4611      	mov	r1, r2
 800378a:	2200      	movs	r2, #0
 800378c:	602a      	str	r2, [r5, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7fd fa4b 	bl	8000c2a <_write>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_write_r+0x1e>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_write_r+0x1e>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	20000104 	.word	0x20000104

080037a4 <_close_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4d06      	ldr	r5, [pc, #24]	; (80037c0 <_close_r+0x1c>)
 80037a8:	2300      	movs	r3, #0
 80037aa:	4604      	mov	r4, r0
 80037ac:	4608      	mov	r0, r1
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	f7fd fa57 	bl	8000c62 <_close>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d102      	bne.n	80037be <_close_r+0x1a>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	b103      	cbz	r3, 80037be <_close_r+0x1a>
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	bd38      	pop	{r3, r4, r5, pc}
 80037c0:	20000104 	.word	0x20000104

080037c4 <_fstat_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4d07      	ldr	r5, [pc, #28]	; (80037e4 <_fstat_r+0x20>)
 80037c8:	2300      	movs	r3, #0
 80037ca:	4604      	mov	r4, r0
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	f7fd fa52 	bl	8000c7a <_fstat>
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	d102      	bne.n	80037e0 <_fstat_r+0x1c>
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	b103      	cbz	r3, 80037e0 <_fstat_r+0x1c>
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	20000104 	.word	0x20000104

080037e8 <_isatty_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4d06      	ldr	r5, [pc, #24]	; (8003804 <_isatty_r+0x1c>)
 80037ec:	2300      	movs	r3, #0
 80037ee:	4604      	mov	r4, r0
 80037f0:	4608      	mov	r0, r1
 80037f2:	602b      	str	r3, [r5, #0]
 80037f4:	f7fd fa51 	bl	8000c9a <_isatty>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_isatty_r+0x1a>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_isatty_r+0x1a>
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	20000104 	.word	0x20000104

08003808 <_lseek_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4d07      	ldr	r5, [pc, #28]	; (8003828 <_lseek_r+0x20>)
 800380c:	4604      	mov	r4, r0
 800380e:	4608      	mov	r0, r1
 8003810:	4611      	mov	r1, r2
 8003812:	2200      	movs	r2, #0
 8003814:	602a      	str	r2, [r5, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	f7fd fa4a 	bl	8000cb0 <_lseek>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d102      	bne.n	8003826 <_lseek_r+0x1e>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	b103      	cbz	r3, 8003826 <_lseek_r+0x1e>
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	20000104 	.word	0x20000104

0800382c <__malloc_lock>:
 800382c:	4801      	ldr	r0, [pc, #4]	; (8003834 <__malloc_lock+0x8>)
 800382e:	f7ff bdc7 	b.w	80033c0 <__retarget_lock_acquire_recursive>
 8003832:	bf00      	nop
 8003834:	200000f8 	.word	0x200000f8

08003838 <__malloc_unlock>:
 8003838:	4801      	ldr	r0, [pc, #4]	; (8003840 <__malloc_unlock+0x8>)
 800383a:	f7ff bdc2 	b.w	80033c2 <__retarget_lock_release_recursive>
 800383e:	bf00      	nop
 8003840:	200000f8 	.word	0x200000f8

08003844 <_read_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d07      	ldr	r5, [pc, #28]	; (8003864 <_read_r+0x20>)
 8003848:	4604      	mov	r4, r0
 800384a:	4608      	mov	r0, r1
 800384c:	4611      	mov	r1, r2
 800384e:	2200      	movs	r2, #0
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	f7fd f9cc 	bl	8000bf0 <_read>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_read_r+0x1e>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_read_r+0x1e>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	20000104 	.word	0x20000104

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
